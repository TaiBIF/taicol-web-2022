/*! For license information please see statistics.bundle.js.LICENSE.txt */
(()=>{var e,t,n={9759:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>Ko,getTooltipUtilityClass:()=>Io,tooltipClasses:()=>jo});var r=n(8587);function i(){return i=Object.assign?Object.assign.bind():function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)({}).hasOwnProperty.call(n,r)&&(e[r]=n[r])}return e},i.apply(null,arguments)}var o=n(6540),a=n.t(o,2);function s(e){var t,n,r="";if("string"==typeof e||"number"==typeof e)r+=e;else if("object"==typeof e)if(Array.isArray(e))for(t=0;t<e.length;t++)e[t]&&(n=s(e[t]))&&(r&&(r+=" "),r+=n);else for(t in e)e[t]&&(r&&(r+=" "),r+=t);return r}const l=function(){for(var e,t,n=0,r="";n<arguments.length;)(e=arguments[n++])&&(t=s(e))&&(r&&(r+=" "),r+=t);return r};function c(e,t,n){const r={};return Object.keys(e).forEach((i=>{r[i]=e[i].reduce(((e,r)=>(r&&(e.push(t(r)),n&&n[r]&&e.push(n[r])),e)),[]).join(" ")})),r}function u(e,t,n){return"string"==typeof e?t:i({},t,{ownerState:i({},t.ownerState,n)})}function d(e){let t="https://mui.com/production-error/?code="+e;for(let e=1;e<arguments.length;e+=1)t+="&args[]="+encodeURIComponent(arguments[e]);return"Minified MUI error #"+e+"; visit "+t+" for the full message."}function f(e,t=0,n=1){return Math.min(Math.max(t,e),n)}function h(e){if(e.type)return e;if("#"===e.charAt(0))return h(function(e){e=e.slice(1);const t=new RegExp(`.{1,${e.length>=6?2:1}}`,"g");let n=e.match(t);return n&&1===n[0].length&&(n=n.map((e=>e+e))),n?`rgb${4===n.length?"a":""}(${n.map(((e,t)=>t<3?parseInt(e,16):Math.round(parseInt(e,16)/255*1e3)/1e3)).join(", ")})`:""}(e));const t=e.indexOf("("),n=e.substring(0,t);if(-1===["rgb","rgba","hsl","hsla","color"].indexOf(n))throw new Error(d(9,e));let r,i=e.substring(t+1,e.length-1);if("color"===n){if(i=i.split(" "),r=i.shift(),4===i.length&&"/"===i[3].charAt(0)&&(i[3]=i[3].slice(1)),-1===["srgb","display-p3","a98-rgb","prophoto-rgb","rec-2020"].indexOf(r))throw new Error(d(10,r))}else i=i.split(",");return i=i.map((e=>parseFloat(e))),{type:n,values:i,colorSpace:r}}function p(e){const{type:t,colorSpace:n}=e;let{values:r}=e;return-1!==t.indexOf("rgb")?r=r.map(((e,t)=>t<3?parseInt(e,10):e)):-1!==t.indexOf("hsl")&&(r[1]=`${r[1]}%`,r[2]=`${r[2]}%`),r=-1!==t.indexOf("color")?`${n} ${r.join(" ")}`:`${r.join(", ")}`,`${t}(${r})`}function g(e){let t="hsl"===(e=h(e)).type||"hsla"===e.type?h(function(e){e=h(e);const{values:t}=e,n=t[0],r=t[1]/100,i=t[2]/100,o=r*Math.min(i,1-i),a=(e,t=(e+n/30)%12)=>i-o*Math.max(Math.min(t-3,9-t,1),-1);let s="rgb";const l=[Math.round(255*a(0)),Math.round(255*a(8)),Math.round(255*a(4))];return"hsla"===e.type&&(s+="a",l.push(t[3])),p({type:s,values:l})}(e)).values:e.values;return t=t.map((t=>("color"!==e.type&&(t/=255),t<=.03928?t/12.92:((t+.055)/1.055)**2.4))),Number((.2126*t[0]+.7152*t[1]+.0722*t[2]).toFixed(3))}function m(e,t){return e=h(e),t=f(t),"rgb"!==e.type&&"hsl"!==e.type||(e.type+="a"),"color"===e.type?e.values[3]=`/${t}`:e.values[3]=t,p(e)}const v=function(e){var t=Object.create(null);return function(n){return void 0===t[n]&&(t[n]=e(n)),t[n]}};var b=/^((children|dangerouslySetInnerHTML|key|ref|autoFocus|defaultValue|defaultChecked|innerHTML|suppressContentEditableWarning|suppressHydrationWarning|valueLink|abbr|accept|acceptCharset|accessKey|action|allow|allowUserMedia|allowPaymentRequest|allowFullScreen|allowTransparency|alt|async|autoComplete|autoPlay|capture|cellPadding|cellSpacing|challenge|charSet|checked|cite|classID|className|cols|colSpan|content|contentEditable|contextMenu|controls|controlsList|coords|crossOrigin|data|dateTime|decoding|default|defer|dir|disabled|disablePictureInPicture|download|draggable|encType|enterKeyHint|form|formAction|formEncType|formMethod|formNoValidate|formTarget|frameBorder|headers|height|hidden|high|href|hrefLang|htmlFor|httpEquiv|id|inputMode|integrity|is|keyParams|keyType|kind|label|lang|list|loading|loop|low|marginHeight|marginWidth|max|maxLength|media|mediaGroup|method|min|minLength|multiple|muted|name|nonce|noValidate|open|optimum|pattern|placeholder|playsInline|poster|preload|profile|radioGroup|readOnly|referrerPolicy|rel|required|reversed|role|rows|rowSpan|sandbox|scope|scoped|scrolling|seamless|selected|shape|size|sizes|slot|span|spellCheck|src|srcDoc|srcLang|srcSet|start|step|style|summary|tabIndex|target|title|translate|type|useMap|value|width|wmode|wrap|about|datatype|inlist|prefix|property|resource|typeof|vocab|autoCapitalize|autoCorrect|autoSave|color|incremental|fallback|inert|itemProp|itemScope|itemType|itemID|itemRef|on|option|results|security|unselectable|accentHeight|accumulate|additive|alignmentBaseline|allowReorder|alphabetic|amplitude|arabicForm|ascent|attributeName|attributeType|autoReverse|azimuth|baseFrequency|baselineShift|baseProfile|bbox|begin|bias|by|calcMode|capHeight|clip|clipPathUnits|clipPath|clipRule|colorInterpolation|colorInterpolationFilters|colorProfile|colorRendering|contentScriptType|contentStyleType|cursor|cx|cy|d|decelerate|descent|diffuseConstant|direction|display|divisor|dominantBaseline|dur|dx|dy|edgeMode|elevation|enableBackground|end|exponent|externalResourcesRequired|fill|fillOpacity|fillRule|filter|filterRes|filterUnits|floodColor|floodOpacity|focusable|fontFamily|fontSize|fontSizeAdjust|fontStretch|fontStyle|fontVariant|fontWeight|format|from|fr|fx|fy|g1|g2|glyphName|glyphOrientationHorizontal|glyphOrientationVertical|glyphRef|gradientTransform|gradientUnits|hanging|horizAdvX|horizOriginX|ideographic|imageRendering|in|in2|intercept|k|k1|k2|k3|k4|kernelMatrix|kernelUnitLength|kerning|keyPoints|keySplines|keyTimes|lengthAdjust|letterSpacing|lightingColor|limitingConeAngle|local|markerEnd|markerMid|markerStart|markerHeight|markerUnits|markerWidth|mask|maskContentUnits|maskUnits|mathematical|mode|numOctaves|offset|opacity|operator|order|orient|orientation|origin|overflow|overlinePosition|overlineThickness|panose1|paintOrder|pathLength|patternContentUnits|patternTransform|patternUnits|pointerEvents|points|pointsAtX|pointsAtY|pointsAtZ|preserveAlpha|preserveAspectRatio|primitiveUnits|r|radius|refX|refY|renderingIntent|repeatCount|repeatDur|requiredExtensions|requiredFeatures|restart|result|rotate|rx|ry|scale|seed|shapeRendering|slope|spacing|specularConstant|specularExponent|speed|spreadMethod|startOffset|stdDeviation|stemh|stemv|stitchTiles|stopColor|stopOpacity|strikethroughPosition|strikethroughThickness|string|stroke|strokeDasharray|strokeDashoffset|strokeLinecap|strokeLinejoin|strokeMiterlimit|strokeOpacity|strokeWidth|surfaceScale|systemLanguage|tableValues|targetX|targetY|textAnchor|textDecoration|textRendering|textLength|to|transform|u1|u2|underlinePosition|underlineThickness|unicode|unicodeBidi|unicodeRange|unitsPerEm|vAlphabetic|vHanging|vIdeographic|vMathematical|values|vectorEffect|version|vertAdvY|vertOriginX|vertOriginY|viewBox|viewTarget|visibility|widths|wordSpacing|writingMode|x|xHeight|x1|x2|xChannelSelector|xlinkActuate|xlinkArcrole|xlinkHref|xlinkRole|xlinkShow|xlinkTitle|xlinkType|xmlBase|xmlns|xmlnsXlink|xmlLang|xmlSpace|y|y1|y2|yChannelSelector|z|zoomAndPan|for|class|autofocus)|(([Dd][Aa][Tt][Aa]|[Aa][Rr][Ii][Aa]|x)-.*))$/;const y=v((function(e){return b.test(e)||111===e.charCodeAt(0)&&110===e.charCodeAt(1)&&e.charCodeAt(2)<91}));var x=function(){function e(e){var t=this;this._insertTag=function(e){var n;n=0===t.tags.length?t.insertionPoint?t.insertionPoint.nextSibling:t.prepend?t.container.firstChild:t.before:t.tags[t.tags.length-1].nextSibling,t.container.insertBefore(e,n),t.tags.push(e)},this.isSpeedy=void 0===e.speedy||e.speedy,this.tags=[],this.ctr=0,this.nonce=e.nonce,this.key=e.key,this.container=e.container,this.prepend=e.prepend,this.insertionPoint=e.insertionPoint,this.before=null}var t=e.prototype;return t.hydrate=function(e){e.forEach(this._insertTag)},t.insert=function(e){this.ctr%(this.isSpeedy?65e3:1)==0&&this._insertTag(function(e){var t=document.createElement("style");return t.setAttribute("data-emotion",e.key),void 0!==e.nonce&&t.setAttribute("nonce",e.nonce),t.appendChild(document.createTextNode("")),t.setAttribute("data-s",""),t}(this));var t=this.tags[this.tags.length-1];if(this.isSpeedy){var n=function(e){if(e.sheet)return e.sheet;for(var t=0;t<document.styleSheets.length;t++)if(document.styleSheets[t].ownerNode===e)return document.styleSheets[t]}(t);try{n.insertRule(e,n.cssRules.length)}catch(e){}}else t.appendChild(document.createTextNode(e));this.ctr++},t.flush=function(){this.tags.forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),this.tags=[],this.ctr=0},e}(),w=Math.abs,k=String.fromCharCode,_=Object.assign;function E(e){return e.trim()}function S(e,t,n){return e.replace(t,n)}function O(e,t){return e.indexOf(t)}function P(e,t){return 0|e.charCodeAt(t)}function C(e,t,n){return e.slice(t,n)}function M(e){return e.length}function T(e){return e.length}function N(e,t){return t.push(e),e}var A=1,R=1,L=0,D=0,I=0,j="";function z(e,t,n,r,i,o,a){return{value:e,root:t,parent:n,type:r,props:i,children:o,line:A,column:R,length:a,return:""}}function F(e,t){return _(z("",null,null,"",null,null,0),e,{length:-e.length},t)}function B(){return I=D>0?P(j,--D):0,R--,10===I&&(R=1,A--),I}function V(){return I=D<L?P(j,D++):0,R++,10===I&&(R=1,A++),I}function W(){return P(j,D)}function H(){return D}function $(e,t){return C(j,e,t)}function U(e){switch(e){case 0:case 9:case 10:case 13:case 32:return 5;case 33:case 43:case 44:case 47:case 62:case 64:case 126:case 59:case 123:case 125:return 4;case 58:return 3;case 34:case 39:case 40:case 91:return 2;case 41:case 93:return 1}return 0}function K(e){return A=R=1,L=M(j=e),D=0,[]}function Y(e){return j="",e}function q(e){return E($(D-1,G(91===e?e+2:40===e?e+1:e)))}function Q(e){for(;(I=W())&&I<33;)V();return U(e)>2||U(I)>3?"":" "}function X(e,t){for(;--t&&V()&&!(I<48||I>102||I>57&&I<65||I>70&&I<97););return $(e,H()+(t<6&&32==W()&&32==V()))}function G(e){for(;V();)switch(I){case e:return D;case 34:case 39:34!==e&&39!==e&&G(I);break;case 40:41===e&&G(e);break;case 92:V()}return D}function J(e,t){for(;V()&&e+I!==57&&(e+I!==84||47!==W()););return"/*"+$(t,D-1)+"*"+k(47===e?e:V())}function Z(e){for(;!U(W());)V();return $(e,D)}var ee="-ms-",te="-moz-",ne="-webkit-",re="comm",ie="rule",oe="decl",ae="@keyframes";function se(e,t){for(var n="",r=T(e),i=0;i<r;i++)n+=t(e[i],i,e,t)||"";return n}function le(e,t,n,r){switch(e.type){case"@import":case oe:return e.return=e.return||e.value;case re:return"";case ae:return e.return=e.value+"{"+se(e.children,r)+"}";case ie:e.value=e.props.join(",")}return M(n=se(e.children,r))?e.return=e.value+"{"+n+"}":""}function ce(e){return Y(ue("",null,null,null,[""],e=K(e),0,[0],e))}function ue(e,t,n,r,i,o,a,s,l){for(var c=0,u=0,d=a,f=0,h=0,p=0,g=1,m=1,v=1,b=0,y="",x=i,w=o,_=r,E=y;m;)switch(p=b,b=V()){case 40:if(108!=p&&58==P(E,d-1)){-1!=O(E+=S(q(b),"&","&\f"),"&\f")&&(v=-1);break}case 34:case 39:case 91:E+=q(b);break;case 9:case 10:case 13:case 32:E+=Q(p);break;case 92:E+=X(H()-1,7);continue;case 47:switch(W()){case 42:case 47:N(fe(J(V(),H()),t,n),l);break;default:E+="/"}break;case 123*g:s[c++]=M(E)*v;case 125*g:case 59:case 0:switch(b){case 0:case 125:m=0;case 59+u:h>0&&M(E)-d&&N(h>32?he(E+";",r,n,d-1):he(S(E," ","")+";",r,n,d-2),l);break;case 59:E+=";";default:if(N(_=de(E,t,n,c,u,i,s,y,x=[],w=[],d),o),123===b)if(0===u)ue(E,t,_,_,x,o,d,s,w);else switch(99===f&&110===P(E,3)?100:f){case 100:case 109:case 115:ue(e,_,_,r&&N(de(e,_,_,0,0,i,s,y,i,x=[],d),w),i,w,d,s,r?x:w);break;default:ue(E,_,_,_,[""],w,0,s,w)}}c=u=h=0,g=v=1,y=E="",d=a;break;case 58:d=1+M(E),h=p;default:if(g<1)if(123==b)--g;else if(125==b&&0==g++&&125==B())continue;switch(E+=k(b),b*g){case 38:v=u>0?1:(E+="\f",-1);break;case 44:s[c++]=(M(E)-1)*v,v=1;break;case 64:45===W()&&(E+=q(V())),f=W(),u=d=M(y=E+=Z(H())),b++;break;case 45:45===p&&2==M(E)&&(g=0)}}return o}function de(e,t,n,r,i,o,a,s,l,c,u){for(var d=i-1,f=0===i?o:[""],h=T(f),p=0,g=0,m=0;p<r;++p)for(var v=0,b=C(e,d+1,d=w(g=a[p])),y=e;v<h;++v)(y=E(g>0?f[v]+" "+b:S(b,/&\f/g,f[v])))&&(l[m++]=y);return z(e,t,n,0===i?ie:s,l,c,u)}function fe(e,t,n){return z(e,t,n,re,k(I),C(e,2,-2),0)}function he(e,t,n,r){return z(e,t,n,oe,C(e,0,r),C(e,r+1,-1),r)}var pe=function(e,t,n){for(var r=0,i=0;r=i,i=W(),38===r&&12===i&&(t[n]=1),!U(i);)V();return $(e,D)},ge=new WeakMap,me=function(e){if("rule"===e.type&&e.parent&&!(e.length<1)){for(var t=e.value,n=e.parent,r=e.column===n.column&&e.line===n.line;"rule"!==n.type;)if(!(n=n.parent))return;if((1!==e.props.length||58===t.charCodeAt(0)||ge.get(n))&&!r){ge.set(e,!0);for(var i=[],o=function(e,t){return Y(function(e,t){var n=-1,r=44;do{switch(U(r)){case 0:38===r&&12===W()&&(t[n]=1),e[n]+=pe(D-1,t,n);break;case 2:e[n]+=q(r);break;case 4:if(44===r){e[++n]=58===W()?"&\f":"",t[n]=e[n].length;break}default:e[n]+=k(r)}}while(r=V());return e}(K(e),t))}(t,i),a=n.props,s=0,l=0;s<o.length;s++)for(var c=0;c<a.length;c++,l++)e.props[l]=i[s]?o[s].replace(/&\f/g,a[c]):a[c]+" "+o[s]}}},ve=function(e){if("decl"===e.type){var t=e.value;108===t.charCodeAt(0)&&98===t.charCodeAt(2)&&(e.return="",e.value="")}};function be(e,t){switch(function(e,t){return 45^P(e,0)?(((t<<2^P(e,0))<<2^P(e,1))<<2^P(e,2))<<2^P(e,3):0}(e,t)){case 5103:return ne+"print-"+e+e;case 5737:case 4201:case 3177:case 3433:case 1641:case 4457:case 2921:case 5572:case 6356:case 5844:case 3191:case 6645:case 3005:case 6391:case 5879:case 5623:case 6135:case 4599:case 4855:case 4215:case 6389:case 5109:case 5365:case 5621:case 3829:return ne+e+e;case 5349:case 4246:case 4810:case 6968:case 2756:return ne+e+te+e+ee+e+e;case 6828:case 4268:return ne+e+ee+e+e;case 6165:return ne+e+ee+"flex-"+e+e;case 5187:return ne+e+S(e,/(\w+).+(:[^]+)/,ne+"box-$1$2"+ee+"flex-$1$2")+e;case 5443:return ne+e+ee+"flex-item-"+S(e,/flex-|-self/,"")+e;case 4675:return ne+e+ee+"flex-line-pack"+S(e,/align-content|flex-|-self/,"")+e;case 5548:return ne+e+ee+S(e,"shrink","negative")+e;case 5292:return ne+e+ee+S(e,"basis","preferred-size")+e;case 6060:return ne+"box-"+S(e,"-grow","")+ne+e+ee+S(e,"grow","positive")+e;case 4554:return ne+S(e,/([^-])(transform)/g,"$1"+ne+"$2")+e;case 6187:return S(S(S(e,/(zoom-|grab)/,ne+"$1"),/(image-set)/,ne+"$1"),e,"")+e;case 5495:case 3959:return S(e,/(image-set\([^]*)/,ne+"$1$`$1");case 4968:return S(S(e,/(.+:)(flex-)?(.*)/,ne+"box-pack:$3"+ee+"flex-pack:$3"),/s.+-b[^;]+/,"justify")+ne+e+e;case 4095:case 3583:case 4068:case 2532:return S(e,/(.+)-inline(.+)/,ne+"$1$2")+e;case 8116:case 7059:case 5753:case 5535:case 5445:case 5701:case 4933:case 4677:case 5533:case 5789:case 5021:case 4765:if(M(e)-1-t>6)switch(P(e,t+1)){case 109:if(45!==P(e,t+4))break;case 102:return S(e,/(.+:)(.+)-([^]+)/,"$1"+ne+"$2-$3$1"+te+(108==P(e,t+3)?"$3":"$2-$3"))+e;case 115:return~O(e,"stretch")?be(S(e,"stretch","fill-available"),t)+e:e}break;case 4949:if(115!==P(e,t+1))break;case 6444:switch(P(e,M(e)-3-(~O(e,"!important")&&10))){case 107:return S(e,":",":"+ne)+e;case 101:return S(e,/(.+:)([^;!]+)(;|!.+)?/,"$1"+ne+(45===P(e,14)?"inline-":"")+"box$3$1"+ne+"$2$3$1"+ee+"$2box$3")+e}break;case 5936:switch(P(e,t+11)){case 114:return ne+e+ee+S(e,/[svh]\w+-[tblr]{2}/,"tb")+e;case 108:return ne+e+ee+S(e,/[svh]\w+-[tblr]{2}/,"tb-rl")+e;case 45:return ne+e+ee+S(e,/[svh]\w+-[tblr]{2}/,"lr")+e}return ne+e+ee+e+e}return e}var ye=[function(e,t,n,r){if(e.length>-1&&!e.return)switch(e.type){case oe:e.return=be(e.value,e.length);break;case ae:return se([F(e,{value:S(e.value,"@","@"+ne)})],r);case ie:if(e.length)return function(e,t){return e.map(t).join("")}(e.props,(function(t){switch(function(e){return(e=/(::plac\w+|:read-\w+)/.exec(e))?e[0]:e}(t)){case":read-only":case":read-write":return se([F(e,{props:[S(t,/:(read-\w+)/,":-moz-$1")]})],r);case"::placeholder":return se([F(e,{props:[S(t,/:(plac\w+)/,":"+ne+"input-$1")]}),F(e,{props:[S(t,/:(plac\w+)/,":-moz-$1")]}),F(e,{props:[S(t,/:(plac\w+)/,ee+"input-$1")]})],r)}return""}))}}];const xe=function(e){var t=e.key;if("css"===t){var n=document.querySelectorAll("style[data-emotion]:not([data-s])");Array.prototype.forEach.call(n,(function(e){-1!==e.getAttribute("data-emotion").indexOf(" ")&&(document.head.appendChild(e),e.setAttribute("data-s",""))}))}var r,i,o=e.stylisPlugins||ye,a={},s=[];r=e.container||document.head,Array.prototype.forEach.call(document.querySelectorAll('style[data-emotion^="'+t+' "]'),(function(e){for(var t=e.getAttribute("data-emotion").split(" "),n=1;n<t.length;n++)a[t[n]]=!0;s.push(e)}));var l,c,u,d,f=[le,(d=function(e){l.insert(e)},function(e){e.root||(e=e.return)&&d(e)})],h=(c=[me,ve].concat(o,f),u=T(c),function(e,t,n,r){for(var i="",o=0;o<u;o++)i+=c[o](e,t,n,r)||"";return i});i=function(e,t,n,r){l=n,function(e){se(ce(e),h)}(e?e+"{"+t.styles+"}":t.styles),r&&(p.inserted[t.name]=!0)};var p={key:t,sheet:new x({key:t,container:r,nonce:e.nonce,speedy:e.speedy,prepend:e.prepend,insertionPoint:e.insertionPoint}),nonce:e.nonce,inserted:a,registered:{},insert:i};return p.sheet.hydrate(s),p},we=function(e){for(var t,n=0,r=0,i=e.length;i>=4;++r,i-=4)t=1540483477*(65535&(t=255&e.charCodeAt(r)|(255&e.charCodeAt(++r))<<8|(255&e.charCodeAt(++r))<<16|(255&e.charCodeAt(++r))<<24))+(59797*(t>>>16)<<16),n=1540483477*(65535&(t^=t>>>24))+(59797*(t>>>16)<<16)^1540483477*(65535&n)+(59797*(n>>>16)<<16);switch(i){case 3:n^=(255&e.charCodeAt(r+2))<<16;case 2:n^=(255&e.charCodeAt(r+1))<<8;case 1:n=1540483477*(65535&(n^=255&e.charCodeAt(r)))+(59797*(n>>>16)<<16)}return(((n=1540483477*(65535&(n^=n>>>13))+(59797*(n>>>16)<<16))^n>>>15)>>>0).toString(36)},ke={animationIterationCount:1,borderImageOutset:1,borderImageSlice:1,borderImageWidth:1,boxFlex:1,boxFlexGroup:1,boxOrdinalGroup:1,columnCount:1,columns:1,flex:1,flexGrow:1,flexPositive:1,flexShrink:1,flexNegative:1,flexOrder:1,gridRow:1,gridRowEnd:1,gridRowSpan:1,gridRowStart:1,gridColumn:1,gridColumnEnd:1,gridColumnSpan:1,gridColumnStart:1,msGridRow:1,msGridRowSpan:1,msGridColumn:1,msGridColumnSpan:1,fontWeight:1,lineHeight:1,opacity:1,order:1,orphans:1,tabSize:1,widows:1,zIndex:1,zoom:1,WebkitLineClamp:1,fillOpacity:1,floodOpacity:1,stopOpacity:1,strokeDasharray:1,strokeDashoffset:1,strokeMiterlimit:1,strokeOpacity:1,strokeWidth:1};var _e=/[A-Z]|^ms/g,Ee=/_EMO_([^_]+?)_([^]*?)_EMO_/g,Se=function(e){return 45===e.charCodeAt(1)},Oe=function(e){return null!=e&&"boolean"!=typeof e},Pe=v((function(e){return Se(e)?e:e.replace(_e,"-$&").toLowerCase()})),Ce=function(e,t){switch(e){case"animation":case"animationName":if("string"==typeof t)return t.replace(Ee,(function(e,t,n){return Te={name:t,styles:n,next:Te},t}))}return 1===ke[e]||Se(e)||"number"!=typeof t||0===t?t:t+"px"};function Me(e,t,n){if(null==n)return"";if(void 0!==n.__emotion_styles)return n;switch(typeof n){case"boolean":return"";case"object":if(1===n.anim)return Te={name:n.name,styles:n.styles,next:Te},n.name;if(void 0!==n.styles){var r=n.next;if(void 0!==r)for(;void 0!==r;)Te={name:r.name,styles:r.styles,next:Te},r=r.next;return n.styles+";"}return function(e,t,n){var r="";if(Array.isArray(n))for(var i=0;i<n.length;i++)r+=Me(e,t,n[i])+";";else for(var o in n){var a=n[o];if("object"!=typeof a)null!=t&&void 0!==t[a]?r+=o+"{"+t[a]+"}":Oe(a)&&(r+=Pe(o)+":"+Ce(o,a)+";");else if(!Array.isArray(a)||"string"!=typeof a[0]||null!=t&&void 0!==t[a[0]]){var s=Me(e,t,a);switch(o){case"animation":case"animationName":r+=Pe(o)+":"+s+";";break;default:r+=o+"{"+s+"}"}}else for(var l=0;l<a.length;l++)Oe(a[l])&&(r+=Pe(o)+":"+Ce(o,a[l])+";")}return r}(e,t,n);case"function":if(void 0!==e){var i=Te,o=n(e);return Te=i,Me(e,t,o)}}if(null==t)return n;var a=t[n];return void 0!==a?a:n}var Te,Ne=/label:\s*([^\s;\n{]+)\s*(;|$)/g,Ae=!!a.useInsertionEffect&&a.useInsertionEffect||function(e){return e()},Re=(0,o.createContext)("undefined"!=typeof HTMLElement?xe({key:"css"}):null);Re.Provider;var Le=(0,o.createContext)({}),De=function(e,t,n){var r=e.key+"-"+t.name;!1===n&&void 0===e.registered[r]&&(e.registered[r]=t.styles)},Ie=y,je=function(e){return"theme"!==e},ze=function(e){return"string"==typeof e&&e.charCodeAt(0)>96?Ie:je},Fe=function(e,t,n){var r;if(t){var i=t.shouldForwardProp;r=e.__emotion_forwardProp&&i?function(t){return e.__emotion_forwardProp(t)&&i(t)}:i}return"function"!=typeof r&&n&&(r=e.__emotion_forwardProp),r},Be=function(e){var t=e.cache,n=e.serialized,r=e.isStringTag;return De(t,n,r),Ae((function(){return function(e,t,n){De(e,t,n);var r=e.key+"-"+t.name;if(void 0===e.inserted[t.name]){var i=t;do{e.insert(t===i?"."+r:"",i,e.sheet,!0),i=i.next}while(void 0!==i)}}(t,n,r)})),null};var Ve=function e(t,n){var r,a,s=t.__emotion_real===t,l=s&&t.__emotion_base||t;void 0!==n&&(r=n.label,a=n.target);var c=Fe(t,n,s),u=c||ze(l),d=!u("as");return function(){var f=arguments,h=s&&void 0!==t.__emotion_styles?t.__emotion_styles.slice(0):[];if(void 0!==r&&h.push("label:"+r+";"),null==f[0]||void 0===f[0].raw)h.push.apply(h,f);else{h.push(f[0][0]);for(var p=f.length,g=1;g<p;g++)h.push(f[g],f[0][g])}var m,v=(m=function(e,t,n){var r,i,s,f,p=d&&e.as||l,g="",m=[],v=e;if(null==e.theme){for(var b in v={},e)v[b]=e[b];v.theme=(0,o.useContext)(Le)}"string"==typeof e.className?(r=t.registered,i=m,s=e.className,f="",s.split(" ").forEach((function(e){void 0!==r[e]?i.push(r[e]+";"):f+=e+" "})),g=f):null!=e.className&&(g=e.className+" ");var y=function(e,t,n){if(1===e.length&&"object"==typeof e[0]&&null!==e[0]&&void 0!==e[0].styles)return e[0];var r=!0,i="";Te=void 0;var o=e[0];null==o||void 0===o.raw?(r=!1,i+=Me(n,t,o)):i+=o[0];for(var a=1;a<e.length;a++)i+=Me(n,t,e[a]),r&&(i+=o[a]);Ne.lastIndex=0;for(var s,l="";null!==(s=Ne.exec(i));)l+="-"+s[1];return{name:we(i)+l,styles:i,next:Te}}(h.concat(m),t.registered,v);g+=t.key+"-"+y.name,void 0!==a&&(g+=" "+a);var x=d&&void 0===c?ze(p):u,w={};for(var k in e)d&&"as"===k||x(k)&&(w[k]=e[k]);return w.className=g,w.ref=n,(0,o.createElement)(o.Fragment,null,(0,o.createElement)(Be,{cache:t,serialized:y,isStringTag:"string"==typeof p}),(0,o.createElement)(p,w))},(0,o.forwardRef)((function(e,t){var n=(0,o.useContext)(Re);return m(e,n,t)})));return v.displayName=void 0!==r?r:"Styled("+("string"==typeof l?l:l.displayName||l.name||"Component")+")",v.defaultProps=t.defaultProps,v.__emotion_real=v,v.__emotion_base=l,v.__emotion_styles=h,v.__emotion_forwardProp=c,Object.defineProperty(v,"toString",{value:function(){return"."+a}}),v.withComponent=function(t,r){return e(t,i({},n,r,{shouldForwardProp:Fe(v,r,!0)})).apply(void 0,h)},v}}.bind();["a","abbr","address","area","article","aside","audio","b","base","bdi","bdo","big","blockquote","body","br","button","canvas","caption","cite","code","col","colgroup","data","datalist","dd","del","details","dfn","dialog","div","dl","dt","em","embed","fieldset","figcaption","figure","footer","form","h1","h2","h3","h4","h5","h6","head","header","hgroup","hr","html","i","iframe","img","input","ins","kbd","keygen","label","legend","li","link","main","map","mark","marquee","menu","menuitem","meta","meter","nav","noscript","object","ol","optgroup","option","output","p","param","picture","pre","progress","q","rp","rt","ruby","s","samp","script","section","select","small","source","span","strong","style","sub","summary","sup","table","tbody","td","textarea","tfoot","th","thead","time","title","tr","track","u","ul","var","video","wbr","circle","clipPath","defs","ellipse","foreignObject","g","image","line","linearGradient","mask","path","pattern","polygon","polyline","radialGradient","rect","stop","svg","text","tspan"].forEach((function(e){Ve[e]=Ve(e)}));const We=Ve;function He(e){return null!==e&&"object"==typeof e&&e.constructor===Object}function $e(e,t,n={clone:!0}){const r=n.clone?i({},e):e;return He(e)&&He(t)&&Object.keys(t).forEach((i=>{"__proto__"!==i&&(He(t[i])&&i in e&&He(e[i])?r[i]=$e(e[i],t[i],n):r[i]=t[i])})),r}const Ue=["values","unit","step"];const Ke={borderRadius:4},Ye={xs:0,sm:600,md:900,lg:1200,xl:1536},qe={keys:["xs","sm","md","lg","xl"],up:e=>`@media (min-width:${Ye[e]}px)`};function Qe(e,t,n){const r=e.theme||{};if(Array.isArray(t)){const e=r.breakpoints||qe;return t.reduce(((r,i,o)=>(r[e.up(e.keys[o])]=n(t[o]),r)),{})}if("object"==typeof t){const e=r.breakpoints||qe;return Object.keys(t).reduce(((r,i)=>{if(-1!==Object.keys(e.values||Ye).indexOf(i))r[e.up(i)]=n(t[i],i);else{const e=i;r[e]=t[e]}return r}),{})}return n(t)}function Xe(e){if("string"!=typeof e)throw new Error(d(7));return e.charAt(0).toUpperCase()+e.slice(1)}function Ge(e,t,n=!0){if(!t||"string"!=typeof t)return null;if(e&&e.vars&&n){const n=`vars.${t}`.split(".").reduce(((e,t)=>e&&e[t]?e[t]:null),e);if(null!=n)return n}return t.split(".").reduce(((e,t)=>e&&null!=e[t]?e[t]:null),e)}function Je(e,t,n,r=n){let i;return i="function"==typeof e?e(n):Array.isArray(e)?e[n]||r:Ge(e,n)||r,t&&(i=t(i,r)),i}const Ze=function(e){const{prop:t,cssProperty:n=e.prop,themeKey:r,transform:i}=e,o=e=>{if(null==e[t])return null;const o=e[t],a=Ge(e.theme,r)||{};return Qe(e,o,(e=>{let r=Je(a,i,e);return e===r&&"string"==typeof e&&(r=Je(a,i,`${t}${"default"===e?"":Xe(e)}`,e)),!1===n?r:{[n]:r}}))};return o.propTypes={},o.filterProps=[t],o},et=function(e,t){return t?$e(e,t,{clone:!1}):e},tt={m:"margin",p:"padding"},nt={t:"Top",r:"Right",b:"Bottom",l:"Left",x:["Left","Right"],y:["Top","Bottom"]},rt={marginX:"mx",marginY:"my",paddingX:"px",paddingY:"py"},it=function(){const e={};return t=>(void 0===e[t]&&(e[t]=(e=>{if(e.length>2){if(!rt[e])return[e];e=rt[e]}const[t,n]=e.split(""),r=tt[t],i=nt[n]||"";return Array.isArray(i)?i.map((e=>r+e)):[r+i]})(t)),e[t])}(),ot=["m","mt","mr","mb","ml","mx","my","margin","marginTop","marginRight","marginBottom","marginLeft","marginX","marginY","marginInline","marginInlineStart","marginInlineEnd","marginBlock","marginBlockStart","marginBlockEnd"],at=["p","pt","pr","pb","pl","px","py","padding","paddingTop","paddingRight","paddingBottom","paddingLeft","paddingX","paddingY","paddingInline","paddingInlineStart","paddingInlineEnd","paddingBlock","paddingBlockStart","paddingBlockEnd"],st=[...ot,...at];function lt(e,t,n,r){var i;const o=null!=(i=Ge(e,t,!1))?i:n;return"number"==typeof o?e=>"string"==typeof e?e:o*e:Array.isArray(o)?e=>"string"==typeof e?e:o[e]:"function"==typeof o?o:()=>{}}function ct(e){return lt(e,"spacing",8)}function ut(e,t){if("string"==typeof t||null==t)return t;const n=e(Math.abs(t));return t>=0?n:"number"==typeof n?-n:`-${n}`}function dt(e,t){const n=ct(e.theme);return Object.keys(e).map((r=>function(e,t,n,r){if(-1===t.indexOf(n))return null;const i=function(e,t){return n=>e.reduce(((e,r)=>(e[r]=ut(t,n),e)),{})}(it(n),r);return Qe(e,e[n],i)}(e,t,r,n))).reduce(et,{})}function ft(e){return dt(e,ot)}function ht(e){return dt(e,at)}function pt(e){return dt(e,st)}ft.propTypes={},ft.filterProps=ot,ht.propTypes={},ht.filterProps=at,pt.propTypes={},pt.filterProps=st;const gt=pt,mt=["breakpoints","palette","spacing","shape"],vt=function(e={},...t){const{breakpoints:n={},palette:o={},spacing:a,shape:s={}}=e,l=(0,r.A)(e,mt),c=function(e){const{values:t={xs:0,sm:600,md:900,lg:1200,xl:1536},unit:n="px",step:o=5}=e,a=(0,r.A)(e,Ue),s=(e=>{const t=Object.keys(e).map((t=>({key:t,val:e[t]})))||[];return t.sort(((e,t)=>e.val-t.val)),t.reduce(((e,t)=>i({},e,{[t.key]:t.val})),{})})(t),l=Object.keys(s);function c(e){return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n})`}function u(e){return`@media (max-width:${("number"==typeof t[e]?t[e]:e)-o/100}${n})`}function d(e,r){const i=l.indexOf(r);return`@media (min-width:${"number"==typeof t[e]?t[e]:e}${n}) and (max-width:${(-1!==i&&"number"==typeof t[l[i]]?t[l[i]]:r)-o/100}${n})`}return i({keys:l,values:s,up:c,down:u,between:d,only:function(e){return l.indexOf(e)+1<l.length?d(e,l[l.indexOf(e)+1]):c(e)},not:function(e){const t=l.indexOf(e);return 0===t?c(l[1]):t===l.length-1?u(l[t]):d(e,l[l.indexOf(e)+1]).replace("@media","@media not all and")},unit:n},a)}(n),u=function(e=8){if(e.mui)return e;const t=ct({spacing:e}),n=(...e)=>(0===e.length?[1]:e).map((e=>{const n=t(e);return"number"==typeof n?`${n}px`:n})).join(" ");return n.mui=!0,n}(a);let d=$e({breakpoints:c,direction:"ltr",components:{},palette:i({mode:"light"},o),spacing:u,shape:i({},Ke,s)},l);return d=t.reduce(((e,t)=>$e(e,t)),d),d},bt=["variant"];function yt(e){return 0===e.length}function xt(e){const{variant:t}=e,n=(0,r.A)(e,bt);let i=t||"";return Object.keys(n).sort().forEach((t=>{i+="color"===t?yt(i)?e[t]:Xe(e[t]):`${yt(i)?t:Xe(t)}${Xe(e[t].toString())}`})),i}const wt=function(...e){const t=e.reduce(((e,t)=>(t.filterProps.forEach((n=>{e[n]=t})),e)),{}),n=e=>Object.keys(e).reduce(((n,r)=>t[r]?et(n,t[r](e)):n),{});return n.propTypes={},n.filterProps=e.reduce(((e,t)=>e.concat(t.filterProps)),[]),n};function kt(e){return"number"!=typeof e?e:`${e}px solid`}const _t=Ze({prop:"border",themeKey:"borders",transform:kt}),Et=Ze({prop:"borderTop",themeKey:"borders",transform:kt}),St=Ze({prop:"borderRight",themeKey:"borders",transform:kt}),Ot=Ze({prop:"borderBottom",themeKey:"borders",transform:kt}),Pt=Ze({prop:"borderLeft",themeKey:"borders",transform:kt}),Ct=Ze({prop:"borderColor",themeKey:"palette"}),Mt=Ze({prop:"borderTopColor",themeKey:"palette"}),Tt=Ze({prop:"borderRightColor",themeKey:"palette"}),Nt=Ze({prop:"borderBottomColor",themeKey:"palette"}),At=Ze({prop:"borderLeftColor",themeKey:"palette"}),Rt=e=>{if(void 0!==e.borderRadius&&null!==e.borderRadius){const t=lt(e.theme,"shape.borderRadius",4),n=e=>({borderRadius:ut(t,e)});return Qe(e,e.borderRadius,n)}return null};Rt.propTypes={},Rt.filterProps=["borderRadius"];const Lt=wt(_t,Et,St,Ot,Pt,Ct,Mt,Tt,Nt,At,Rt),Dt=wt(Ze({prop:"displayPrint",cssProperty:!1,transform:e=>({"@media print":{display:e}})}),Ze({prop:"display"}),Ze({prop:"overflow"}),Ze({prop:"textOverflow"}),Ze({prop:"visibility"}),Ze({prop:"whiteSpace"})),It=wt(Ze({prop:"flexBasis"}),Ze({prop:"flexDirection"}),Ze({prop:"flexWrap"}),Ze({prop:"justifyContent"}),Ze({prop:"alignItems"}),Ze({prop:"alignContent"}),Ze({prop:"order"}),Ze({prop:"flex"}),Ze({prop:"flexGrow"}),Ze({prop:"flexShrink"}),Ze({prop:"alignSelf"}),Ze({prop:"justifyItems"}),Ze({prop:"justifySelf"})),jt=e=>{if(void 0!==e.gap&&null!==e.gap){const t=lt(e.theme,"spacing",8),n=e=>({gap:ut(t,e)});return Qe(e,e.gap,n)}return null};jt.propTypes={},jt.filterProps=["gap"];const zt=e=>{if(void 0!==e.columnGap&&null!==e.columnGap){const t=lt(e.theme,"spacing",8),n=e=>({columnGap:ut(t,e)});return Qe(e,e.columnGap,n)}return null};zt.propTypes={},zt.filterProps=["columnGap"];const Ft=e=>{if(void 0!==e.rowGap&&null!==e.rowGap){const t=lt(e.theme,"spacing",8),n=e=>({rowGap:ut(t,e)});return Qe(e,e.rowGap,n)}return null};Ft.propTypes={},Ft.filterProps=["rowGap"];const Bt=wt(jt,zt,Ft,Ze({prop:"gridColumn"}),Ze({prop:"gridRow"}),Ze({prop:"gridAutoFlow"}),Ze({prop:"gridAutoColumns"}),Ze({prop:"gridAutoRows"}),Ze({prop:"gridTemplateColumns"}),Ze({prop:"gridTemplateRows"}),Ze({prop:"gridTemplateAreas"}),Ze({prop:"gridArea"})),Vt=wt(Ze({prop:"position"}),Ze({prop:"zIndex",themeKey:"zIndex"}),Ze({prop:"top"}),Ze({prop:"right"}),Ze({prop:"bottom"}),Ze({prop:"left"}));function Wt(e,t){return"grey"===t?t:e}const Ht=wt(Ze({prop:"color",themeKey:"palette",transform:Wt}),Ze({prop:"bgcolor",cssProperty:"backgroundColor",themeKey:"palette",transform:Wt}),Ze({prop:"backgroundColor",themeKey:"palette",transform:Wt})),$t=Ze({prop:"boxShadow",themeKey:"shadows"});function Ut(e){return e<=1&&0!==e?100*e+"%":e}const Kt=Ze({prop:"width",transform:Ut}),Yt=e=>{if(void 0!==e.maxWidth&&null!==e.maxWidth){const t=t=>{var n,r,i;return{maxWidth:(null==(n=e.theme)||null==(r=n.breakpoints)||null==(i=r.values)?void 0:i[t])||Ye[t]||Ut(t)}};return Qe(e,e.maxWidth,t)}return null};Yt.filterProps=["maxWidth"];const qt=Ze({prop:"minWidth",transform:Ut}),Qt=Ze({prop:"height",transform:Ut}),Xt=Ze({prop:"maxHeight",transform:Ut}),Gt=Ze({prop:"minHeight",transform:Ut}),Jt=(Ze({prop:"size",cssProperty:"width",transform:Ut}),Ze({prop:"size",cssProperty:"height",transform:Ut}),wt(Kt,Yt,qt,Qt,Xt,Gt,Ze({prop:"boxSizing"}))),Zt=Ze({prop:"fontFamily",themeKey:"typography"}),en=Ze({prop:"fontSize",themeKey:"typography"}),tn=Ze({prop:"fontStyle",themeKey:"typography"}),nn=Ze({prop:"fontWeight",themeKey:"typography"}),rn=Ze({prop:"letterSpacing"}),on=Ze({prop:"textTransform"}),an=Ze({prop:"lineHeight"}),sn=Ze({prop:"textAlign"}),ln=wt(Ze({prop:"typography",cssProperty:!1,themeKey:"typography"}),Zt,en,tn,nn,rn,an,sn,on),cn={borders:Lt.filterProps,display:Dt.filterProps,flexbox:It.filterProps,grid:Bt.filterProps,positions:Vt.filterProps,palette:Ht.filterProps,shadows:$t.filterProps,sizing:Jt.filterProps,spacing:gt.filterProps,typography:ln.filterProps},un={borders:Lt,display:Dt,flexbox:It,grid:Bt,positions:Vt,palette:Ht,shadows:$t,sizing:Jt,spacing:gt,typography:ln};Object.keys(cn).reduce(((e,t)=>(cn[t].forEach((n=>{e[n]=un[t]})),e)),{});const dn=function(e=un){const t=Object.keys(e).reduce(((t,n)=>(e[n].filterProps.forEach((r=>{t[r]=e[n]})),t)),{});function n(e,n,r){const i={[e]:n,theme:r},o=t[e];return o?o(i):{[e]:n}}return function e(r){const{sx:i,theme:o={}}=r||{};if(!i)return null;function a(r){let i=r;if("function"==typeof r)i=r(o);else if("object"!=typeof r)return r;if(!i)return null;const a=function(e={}){var t;return(null==(t=e.keys)?void 0:t.reduce(((t,n)=>(t[e.up(n)]={},t)),{}))||{}}(o.breakpoints),s=Object.keys(a);let l=a;return Object.keys(i).forEach((r=>{const a="function"==typeof(s=i[r])?s(o):s;var s;if(null!=a)if("object"==typeof a)if(t[r])l=et(l,n(r,a,o));else{const t=Qe({theme:o},a,(e=>({[r]:e})));!function(...e){const t=e.reduce(((e,t)=>e.concat(Object.keys(t))),[]),n=new Set(t);return e.every((e=>n.size===Object.keys(e).length))}(t,a)?l=et(l,t):l[r]=e({sx:a,theme:o})}else l=et(l,n(r,a,o))})),c=l,s.reduce(((e,t)=>{const n=e[t];return(!n||0===Object.keys(n).length)&&delete e[t],e}),c);var c}return Array.isArray(i)?i.map(a):a(i)}}();dn.filterProps=["sx"];const fn=dn,hn=["name","slot","skipVariantsResolver","skipSx","overridesResolver"],pn=["theme"],gn=["theme"];function mn(e){return 0===Object.keys(e).length}function vn(e){return"ownerState"!==e&&"theme"!==e&&"sx"!==e&&"as"!==e}const bn=vt();const yn={black:"#000",white:"#fff"},xn={50:"#fafafa",100:"#f5f5f5",200:"#eeeeee",300:"#e0e0e0",400:"#bdbdbd",500:"#9e9e9e",600:"#757575",700:"#616161",800:"#424242",900:"#212121",A100:"#f5f5f5",A200:"#eeeeee",A400:"#bdbdbd",A700:"#616161"},wn="#f3e5f5",kn="#ce93d8",_n="#ba68c8",En="#ab47bc",Sn="#9c27b0",On="#7b1fa2",Pn="#e57373",Cn="#ef5350",Mn="#f44336",Tn="#d32f2f",Nn="#c62828",An="#ffb74d",Rn="#ffa726",Ln="#ff9800",Dn="#f57c00",In="#e65100",jn="#e3f2fd",zn="#90caf9",Fn="#42a5f5",Bn="#1976d2",Vn="#1565c0",Wn="#4fc3f7",Hn="#29b6f6",$n="#03a9f4",Un="#0288d1",Kn="#01579b",Yn="#81c784",qn="#66bb6a",Qn="#4caf50",Xn="#388e3c",Gn="#2e7d32",Jn="#1b5e20",Zn=["mode","contrastThreshold","tonalOffset"],er={text:{primary:"rgba(0, 0, 0, 0.87)",secondary:"rgba(0, 0, 0, 0.6)",disabled:"rgba(0, 0, 0, 0.38)"},divider:"rgba(0, 0, 0, 0.12)",background:{paper:yn.white,default:yn.white},action:{active:"rgba(0, 0, 0, 0.54)",hover:"rgba(0, 0, 0, 0.04)",hoverOpacity:.04,selected:"rgba(0, 0, 0, 0.08)",selectedOpacity:.08,disabled:"rgba(0, 0, 0, 0.26)",disabledBackground:"rgba(0, 0, 0, 0.12)",disabledOpacity:.38,focus:"rgba(0, 0, 0, 0.12)",focusOpacity:.12,activatedOpacity:.12}},tr={text:{primary:yn.white,secondary:"rgba(255, 255, 255, 0.7)",disabled:"rgba(255, 255, 255, 0.5)",icon:"rgba(255, 255, 255, 0.5)"},divider:"rgba(255, 255, 255, 0.12)",background:{paper:"#121212",default:"#121212"},action:{active:yn.white,hover:"rgba(255, 255, 255, 0.08)",hoverOpacity:.08,selected:"rgba(255, 255, 255, 0.16)",selectedOpacity:.16,disabled:"rgba(255, 255, 255, 0.3)",disabledBackground:"rgba(255, 255, 255, 0.12)",disabledOpacity:.38,focus:"rgba(255, 255, 255, 0.12)",focusOpacity:.12,activatedOpacity:.24}};function nr(e,t,n,r){const i=r.light||r,o=r.dark||1.5*r;e[t]||(e.hasOwnProperty(n)?e[t]=e[n]:"light"===t?e.light=function(e,t){if(e=h(e),t=f(t),-1!==e.type.indexOf("hsl"))e.values[2]+=(100-e.values[2])*t;else if(-1!==e.type.indexOf("rgb"))for(let n=0;n<3;n+=1)e.values[n]+=(255-e.values[n])*t;else if(-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]+=(1-e.values[n])*t;return p(e)}(e.main,i):"dark"===t&&(e.dark=function(e,t){if(e=h(e),t=f(t),-1!==e.type.indexOf("hsl"))e.values[2]*=1-t;else if(-1!==e.type.indexOf("rgb")||-1!==e.type.indexOf("color"))for(let n=0;n<3;n+=1)e.values[n]*=1-t;return p(e)}(e.main,o)))}const rr=["fontFamily","fontSize","fontWeightLight","fontWeightRegular","fontWeightMedium","fontWeightBold","htmlFontSize","allVariants","pxToRem"],ir={textTransform:"uppercase"},or='"Roboto", "Helvetica", "Arial", sans-serif';function ar(e,t){const n="function"==typeof t?t(e):t,{fontFamily:o=or,fontSize:a=14,fontWeightLight:s=300,fontWeightRegular:l=400,fontWeightMedium:c=500,fontWeightBold:u=700,htmlFontSize:d=16,allVariants:f,pxToRem:h}=n,p=(0,r.A)(n,rr),g=a/14,m=h||(e=>e/d*g+"rem"),v=(e,t,n,r,a)=>{return i({fontFamily:o,fontWeight:e,fontSize:m(t),lineHeight:n},o===or?{letterSpacing:(s=r/t,Math.round(1e5*s)/1e5+"em")}:{},a,f);var s},b={h1:v(s,96,1.167,-1.5),h2:v(s,60,1.2,-.5),h3:v(l,48,1.167,0),h4:v(l,34,1.235,.25),h5:v(l,24,1.334,0),h6:v(c,20,1.6,.15),subtitle1:v(l,16,1.75,.15),subtitle2:v(c,14,1.57,.1),body1:v(l,16,1.5,.15),body2:v(l,14,1.43,.15),button:v(c,14,1.75,.4,ir),caption:v(l,12,1.66,.4),overline:v(l,12,2.66,1,ir)};return $e(i({htmlFontSize:d,pxToRem:m,fontFamily:o,fontSize:a,fontWeightLight:s,fontWeightRegular:l,fontWeightMedium:c,fontWeightBold:u},b),p,{clone:!1})}function sr(...e){return[`${e[0]}px ${e[1]}px ${e[2]}px ${e[3]}px rgba(0,0,0,0.2)`,`${e[4]}px ${e[5]}px ${e[6]}px ${e[7]}px rgba(0,0,0,0.14)`,`${e[8]}px ${e[9]}px ${e[10]}px ${e[11]}px rgba(0,0,0,0.12)`].join(",")}const lr=["none",sr(0,2,1,-1,0,1,1,0,0,1,3,0),sr(0,3,1,-2,0,2,2,0,0,1,5,0),sr(0,3,3,-2,0,3,4,0,0,1,8,0),sr(0,2,4,-1,0,4,5,0,0,1,10,0),sr(0,3,5,-1,0,5,8,0,0,1,14,0),sr(0,3,5,-1,0,6,10,0,0,1,18,0),sr(0,4,5,-2,0,7,10,1,0,2,16,1),sr(0,5,5,-3,0,8,10,1,0,3,14,2),sr(0,5,6,-3,0,9,12,1,0,3,16,2),sr(0,6,6,-3,0,10,14,1,0,4,18,3),sr(0,6,7,-4,0,11,15,1,0,4,20,3),sr(0,7,8,-4,0,12,17,2,0,5,22,4),sr(0,7,8,-4,0,13,19,2,0,5,24,4),sr(0,7,9,-4,0,14,21,2,0,5,26,4),sr(0,8,9,-5,0,15,22,2,0,6,28,5),sr(0,8,10,-5,0,16,24,2,0,6,30,5),sr(0,8,11,-5,0,17,26,2,0,6,32,5),sr(0,9,11,-5,0,18,28,2,0,7,34,6),sr(0,9,12,-6,0,19,29,2,0,7,36,6),sr(0,10,13,-6,0,20,31,3,0,8,38,7),sr(0,10,13,-6,0,21,33,3,0,8,40,7),sr(0,10,14,-6,0,22,35,3,0,8,42,7),sr(0,11,14,-7,0,23,36,3,0,9,44,8),sr(0,11,15,-7,0,24,38,3,0,9,46,8)],cr=["duration","easing","delay"],ur={easeInOut:"cubic-bezier(0.4, 0, 0.2, 1)",easeOut:"cubic-bezier(0.0, 0, 0.2, 1)",easeIn:"cubic-bezier(0.4, 0, 1, 1)",sharp:"cubic-bezier(0.4, 0, 0.6, 1)"},dr={shortest:150,shorter:200,short:250,standard:300,complex:375,enteringScreen:225,leavingScreen:195};function fr(e){return`${Math.round(e)}ms`}function hr(e){if(!e)return 0;const t=e/36;return Math.round(10*(4+15*t**.25+t/5))}function pr(e){const t=i({},ur,e.easing),n=i({},dr,e.duration);return i({getAutoHeightDuration:hr,create:(e=["all"],i={})=>{const{duration:o=n.standard,easing:a=t.easeInOut,delay:s=0}=i;return(0,r.A)(i,cr),(Array.isArray(e)?e:[e]).map((e=>`${e} ${"string"==typeof o?o:fr(o)} ${a} ${"string"==typeof s?s:fr(s)}`)).join(",")}},e,{easing:t,duration:n})}const gr={mobileStepper:1e3,fab:1050,speedDial:1050,appBar:1100,drawer:1200,modal:1300,snackbar:1400,tooltip:1500},mr=["breakpoints","mixins","spacing","palette","transitions","typography","shape"];const vr=function(e={},...t){const{mixins:n={},palette:o={},transitions:a={},typography:s={}}=e,l=(0,r.A)(e,mr);if(e.vars)throw new Error(d(18));const c=function(e){const{mode:t="light",contrastThreshold:n=3,tonalOffset:o=.2}=e,a=(0,r.A)(e,Zn),s=e.primary||function(e="light"){return"dark"===e?{main:zn,light:jn,dark:Fn}:{main:Bn,light:Fn,dark:Vn}}(t),l=e.secondary||function(e="light"){return"dark"===e?{main:kn,light:wn,dark:En}:{main:Sn,light:_n,dark:On}}(t),c=e.error||function(e="light"){return"dark"===e?{main:Mn,light:Pn,dark:Tn}:{main:Tn,light:Cn,dark:Nn}}(t),u=e.info||function(e="light"){return"dark"===e?{main:Hn,light:Wn,dark:Un}:{main:Un,light:$n,dark:Kn}}(t),f=e.success||function(e="light"){return"dark"===e?{main:qn,light:Yn,dark:Xn}:{main:Gn,light:Qn,dark:Jn}}(t),h=e.warning||function(e="light"){return"dark"===e?{main:Rn,light:An,dark:Dn}:{main:"#ed6c02",light:Ln,dark:In}}(t);function p(e){const t=function(e,t){const n=g(e),r=g(t);return(Math.max(n,r)+.05)/(Math.min(n,r)+.05)}(e,tr.text.primary)>=n?tr.text.primary:er.text.primary;return t}const m=({color:e,name:t,mainShade:n=500,lightShade:r=300,darkShade:a=700})=>{if(!(e=i({},e)).main&&e[n]&&(e.main=e[n]),!e.hasOwnProperty("main"))throw new Error(d(11,t?` (${t})`:"",n));if("string"!=typeof e.main)throw new Error(d(12,t?` (${t})`:"",JSON.stringify(e.main)));return nr(e,"light",r,o),nr(e,"dark",a,o),e.contrastText||(e.contrastText=p(e.main)),e},v={dark:tr,light:er};return $e(i({common:i({},yn),mode:t,primary:m({color:s,name:"primary"}),secondary:m({color:l,name:"secondary",mainShade:"A400",lightShade:"A200",darkShade:"A700"}),error:m({color:c,name:"error"}),warning:m({color:h,name:"warning"}),info:m({color:u,name:"info"}),success:m({color:f,name:"success"}),grey:xn,contrastThreshold:n,getContrastText:p,augmentColor:m,tonalOffset:o},v[t]),a)}(o),u=vt(e);let f=$e(u,{mixins:(h=u.breakpoints,p=n,i({toolbar:{minHeight:56,[h.up("xs")]:{"@media (orientation: landscape)":{minHeight:48}},[h.up("sm")]:{minHeight:64}}},p)),palette:c,shadows:lr.slice(),typography:ar(c,s),transitions:pr(a),zIndex:i({},gr)});var h,p;return f=$e(f,l),f=t.reduce(((e,t)=>$e(e,t)),f),f}(),br=function(e={}){const{defaultTheme:t=bn,rootShouldForwardProp:n=vn,slotShouldForwardProp:o=vn,styleFunctionSx:a=fn}=e,s=e=>{const n=mn(e.theme)?t:e.theme;return a(i({},e,{theme:n}))};return s.__mui_systemSx=!0,(e,a={})=>{(e=>{Array.isArray(e.__emotion_styles)&&(e.__emotion_styles=(e=>e.filter((e=>!(null!=e&&e.__mui_systemSx))))(e.__emotion_styles))})(e);const{name:l,slot:c,skipVariantsResolver:u,skipSx:d,overridesResolver:f}=a,h=(0,r.A)(a,hn),p=void 0!==u?u:c&&"Root"!==c||!1,g=d||!1;let m=vn;"Root"===c?m=n:c?m=o:function(e){return"string"==typeof e&&e.charCodeAt(0)>96}(e)&&(m=void 0);const v=function(e,t){return We(e,t)}(e,i({shouldForwardProp:m,label:void 0},h)),b=(e,...n)=>{const o=n?n.map((e=>"function"==typeof e&&e.__emotion_real!==e?n=>{let{theme:o}=n,a=(0,r.A)(n,pn);return e(i({theme:mn(o)?t:o},a))}:e)):[];let a=e;l&&f&&o.push((e=>{const n=mn(e.theme)?t:e.theme,r=((e,t)=>t.components&&t.components[e]&&t.components[e].styleOverrides?t.components[e].styleOverrides:null)(l,n);if(r){const t={};return Object.entries(r).forEach((([r,o])=>{t[r]="function"==typeof o?o(i({},e,{theme:n})):o})),f(e,t)}return null})),l&&!p&&o.push((e=>{const n=mn(e.theme)?t:e.theme;return((e,t,n,r)=>{var i,o;const{ownerState:a={}}=e,s=[],l=null==n||null==(i=n.components)||null==(o=i[r])?void 0:o.variants;return l&&l.forEach((n=>{let r=!0;Object.keys(n.props).forEach((t=>{a[t]!==n.props[t]&&e[t]!==n.props[t]&&(r=!1)})),r&&s.push(t[xt(n.props)])})),s})(e,((e,t)=>{let n=[];t&&t.components&&t.components[e]&&t.components[e].variants&&(n=t.components[e].variants);const r={};return n.forEach((e=>{const t=xt(e.props);r[t]=e.style})),r})(l,n),n,l)})),g||o.push(s);const c=o.length-n.length;if(Array.isArray(e)&&c>0){const t=new Array(c).fill("");a=[...e,...t],a.raw=[...e.raw,...t]}else"function"==typeof e&&e.__emotion_real!==e&&(a=n=>{let{theme:o}=n,a=(0,r.A)(n,gn);return e(i({theme:mn(o)?t:o},a))});return v(a,...o)};return v.withConfig&&(b.withConfig=v.withConfig),b}}({defaultTheme:vr,rootShouldForwardProp:e=>vn(e)&&"classes"!==e}),yr=br,xr=o.createContext(null),wr=function(e=null){const t=o.useContext(xr);return t&&(n=t,0!==Object.keys(n).length)?t:e;var n},kr=vt(),_r=function(e=kr){return wr(e)};function Er(){return _r(vr)}function Sr({props:e,name:t}){return function({props:e,name:t,defaultTheme:n}){return function(e){const{theme:t,name:n,props:r}=e;return t&&t.components&&t.components[n]&&t.components[n].defaultProps?function(e,t){const n=i({},t);return Object.keys(e).forEach((t=>{void 0===n[t]&&(n[t]=e[t])})),n}(t.components[n].defaultProps,r):r}({theme:_r(n),name:t,props:e})}({props:e,name:t,defaultTheme:vr})}const Or=Xe;var Pr=n(3662),Cr=n(961);const Mr=o.createContext(null);var Tr="unmounted",Nr="exited",Ar="entering",Rr="entered",Lr="exiting",Dr=function(e){var t,n;function i(t,n){var r;r=e.call(this,t,n)||this;var i,o=n&&!n.isMounting?t.enter:t.appear;return r.appearStatus=null,t.in?o?(i=Nr,r.appearStatus=Ar):i=Rr:i=t.unmountOnExit||t.mountOnEnter?Tr:Nr,r.state={status:i},r.nextCallback=null,r}n=e,(t=i).prototype=Object.create(n.prototype),t.prototype.constructor=t,(0,Pr.A)(t,n),i.getDerivedStateFromProps=function(e,t){return e.in&&t.status===Tr?{status:Nr}:null};var a=i.prototype;return a.componentDidMount=function(){this.updateStatus(!0,this.appearStatus)},a.componentDidUpdate=function(e){var t=null;if(e!==this.props){var n=this.state.status;this.props.in?n!==Ar&&n!==Rr&&(t=Ar):n!==Ar&&n!==Rr||(t=Lr)}this.updateStatus(!1,t)},a.componentWillUnmount=function(){this.cancelNextCallback()},a.getTimeouts=function(){var e,t,n,r=this.props.timeout;return e=t=n=r,null!=r&&"number"!=typeof r&&(e=r.exit,t=r.enter,n=void 0!==r.appear?r.appear:t),{exit:e,enter:t,appear:n}},a.updateStatus=function(e,t){if(void 0===e&&(e=!1),null!==t)if(this.cancelNextCallback(),t===Ar){if(this.props.unmountOnExit||this.props.mountOnEnter){var n=this.props.nodeRef?this.props.nodeRef.current:Cr.findDOMNode(this);n&&function(e){e.scrollTop}(n)}this.performEnter(e)}else this.performExit();else this.props.unmountOnExit&&this.state.status===Nr&&this.setState({status:Tr})},a.performEnter=function(e){var t=this,n=this.props.enter,r=this.context?this.context.isMounting:e,i=this.props.nodeRef?[r]:[Cr.findDOMNode(this),r],o=i[0],a=i[1],s=this.getTimeouts(),l=r?s.appear:s.enter;e||n?(this.props.onEnter(o,a),this.safeSetState({status:Ar},(function(){t.props.onEntering(o,a),t.onTransitionEnd(l,(function(){t.safeSetState({status:Rr},(function(){t.props.onEntered(o,a)}))}))}))):this.safeSetState({status:Rr},(function(){t.props.onEntered(o)}))},a.performExit=function(){var e=this,t=this.props.exit,n=this.getTimeouts(),r=this.props.nodeRef?void 0:Cr.findDOMNode(this);t?(this.props.onExit(r),this.safeSetState({status:Lr},(function(){e.props.onExiting(r),e.onTransitionEnd(n.exit,(function(){e.safeSetState({status:Nr},(function(){e.props.onExited(r)}))}))}))):this.safeSetState({status:Nr},(function(){e.props.onExited(r)}))},a.cancelNextCallback=function(){null!==this.nextCallback&&(this.nextCallback.cancel(),this.nextCallback=null)},a.safeSetState=function(e,t){t=this.setNextCallback(t),this.setState(e,t)},a.setNextCallback=function(e){var t=this,n=!0;return this.nextCallback=function(r){n&&(n=!1,t.nextCallback=null,e(r))},this.nextCallback.cancel=function(){n=!1},this.nextCallback},a.onTransitionEnd=function(e,t){this.setNextCallback(t);var n=this.props.nodeRef?this.props.nodeRef.current:Cr.findDOMNode(this),r=null==e&&!this.props.addEndListener;if(n&&!r){if(this.props.addEndListener){var i=this.props.nodeRef?[this.nextCallback]:[n,this.nextCallback],o=i[0],a=i[1];this.props.addEndListener(o,a)}null!=e&&setTimeout(this.nextCallback,e)}else setTimeout(this.nextCallback,0)},a.render=function(){var e=this.state.status;if(e===Tr)return null;var t=this.props,n=t.children,i=(t.in,t.mountOnEnter,t.unmountOnExit,t.appear,t.enter,t.exit,t.timeout,t.addEndListener,t.onEnter,t.onEntering,t.onEntered,t.onExit,t.onExiting,t.onExited,t.nodeRef,(0,r.A)(t,["children","in","mountOnEnter","unmountOnExit","appear","enter","exit","timeout","addEndListener","onEnter","onEntering","onEntered","onExit","onExiting","onExited","nodeRef"]));return o.createElement(Mr.Provider,{value:null},"function"==typeof n?n(e,i):o.cloneElement(o.Children.only(n),i))},i}(o.Component);function Ir(){}Dr.contextType=Mr,Dr.propTypes={},Dr.defaultProps={in:!1,mountOnEnter:!1,unmountOnExit:!1,appear:!1,enter:!0,exit:!0,onEnter:Ir,onEntering:Ir,onEntered:Ir,onExit:Ir,onExiting:Ir,onExited:Ir},Dr.UNMOUNTED=Tr,Dr.EXITED=Nr,Dr.ENTERING=Ar,Dr.ENTERED=Rr,Dr.EXITING=Lr;const jr=Dr;function zr(e,t){var n,r;const{timeout:i,easing:o,style:a={}}=e;return{duration:null!=(n=a.transitionDuration)?n:"number"==typeof i?i:i[t.mode]||0,easing:null!=(r=a.transitionTimingFunction)?r:"object"==typeof o?o[t.mode]:o,delay:a.transitionDelay}}function Fr(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function Br(...e){return o.useMemo((()=>e.every((e=>null==e))?null:t=>{e.forEach((e=>{Fr(e,t)}))}),e)}const Vr=Br;var Wr=n(4848);const Hr=["addEndListener","appear","children","easing","in","onEnter","onEntered","onEntering","onExit","onExited","onExiting","style","timeout","TransitionComponent"];function $r(e){return`scale(${e}, ${e**2})`}const Ur={entering:{opacity:1,transform:$r(1)},entered:{opacity:1,transform:"none"}},Kr="undefined"!=typeof navigator&&/^((?!chrome|android).)*(safari|mobile)/i.test(navigator.userAgent)&&/(os |version\/)15(.|_)4/i.test(navigator.userAgent),Yr=o.forwardRef((function(e,t){const{addEndListener:n,appear:a=!0,children:s,easing:l,in:c,onEnter:u,onEntered:d,onEntering:f,onExit:h,onExited:p,onExiting:g,style:m,timeout:v="auto",TransitionComponent:b=jr}=e,y=(0,r.A)(e,Hr),x=o.useRef(),w=o.useRef(),k=Er(),_=o.useRef(null),E=Vr(_,s.ref,t),S=e=>t=>{if(e){const n=_.current;void 0===t?e(n):e(n,t)}},O=S(f),P=S(((e,t)=>{(e=>{e.scrollTop})(e);const{duration:n,delay:r,easing:i}=zr({style:m,timeout:v,easing:l},{mode:"enter"});let o;"auto"===v?(o=k.transitions.getAutoHeightDuration(e.clientHeight),w.current=o):o=n,e.style.transition=[k.transitions.create("opacity",{duration:o,delay:r}),k.transitions.create("transform",{duration:Kr?o:.666*o,delay:r,easing:i})].join(","),u&&u(e,t)})),C=S(d),M=S(g),T=S((e=>{const{duration:t,delay:n,easing:r}=zr({style:m,timeout:v,easing:l},{mode:"exit"});let i;"auto"===v?(i=k.transitions.getAutoHeightDuration(e.clientHeight),w.current=i):i=t,e.style.transition=[k.transitions.create("opacity",{duration:i,delay:n}),k.transitions.create("transform",{duration:Kr?i:.666*i,delay:Kr?n:n||.333*i,easing:r})].join(","),e.style.opacity=0,e.style.transform=$r(.75),h&&h(e)})),N=S(p);return o.useEffect((()=>()=>{clearTimeout(x.current)}),[]),(0,Wr.jsx)(b,i({appear:a,in:c,nodeRef:_,onEnter:P,onEntered:C,onEntering:O,onExit:T,onExited:N,onExiting:M,addEndListener:e=>{"auto"===v&&(x.current=setTimeout(e,w.current||0)),n&&n(_.current,e)},timeout:"auto"===v?null:v},y,{children:(e,t)=>o.cloneElement(s,i({style:i({opacity:0,transform:$r(.75),visibility:"exited"!==e||c?void 0:"hidden"},Ur[e],m,s.props.style),ref:E},t))}))}));Yr.muiSupportAuto=!0;const qr=Yr,Qr="undefined"!=typeof window?o.useLayoutEffect:o.useEffect;function Xr(e){if(null==e)return window;if("[object Window]"!==e.toString()){var t=e.ownerDocument;return t&&t.defaultView||window}return e}function Gr(e){return e instanceof Xr(e).Element||e instanceof Element}function Jr(e){return e instanceof Xr(e).HTMLElement||e instanceof HTMLElement}function Zr(e){return"undefined"!=typeof ShadowRoot&&(e instanceof Xr(e).ShadowRoot||e instanceof ShadowRoot)}var ei=Math.max,ti=Math.min,ni=Math.round;function ri(){var e=navigator.userAgentData;return null!=e&&e.brands?e.brands.map((function(e){return e.brand+"/"+e.version})).join(" "):navigator.userAgent}function ii(){return!/^((?!chrome|android).)*safari/i.test(ri())}function oi(e,t,n){void 0===t&&(t=!1),void 0===n&&(n=!1);var r=e.getBoundingClientRect(),i=1,o=1;t&&Jr(e)&&(i=e.offsetWidth>0&&ni(r.width)/e.offsetWidth||1,o=e.offsetHeight>0&&ni(r.height)/e.offsetHeight||1);var a=(Gr(e)?Xr(e):window).visualViewport,s=!ii()&&n,l=(r.left+(s&&a?a.offsetLeft:0))/i,c=(r.top+(s&&a?a.offsetTop:0))/o,u=r.width/i,d=r.height/o;return{width:u,height:d,top:c,right:l+u,bottom:c+d,left:l,x:l,y:c}}function ai(e){var t=Xr(e);return{scrollLeft:t.pageXOffset,scrollTop:t.pageYOffset}}function si(e){return e?(e.nodeName||"").toLowerCase():null}function li(e){return((Gr(e)?e.ownerDocument:e.document)||window.document).documentElement}function ci(e){return oi(li(e)).left+ai(e).scrollLeft}function ui(e){return Xr(e).getComputedStyle(e)}function di(e){var t=ui(e),n=t.overflow,r=t.overflowX,i=t.overflowY;return/auto|scroll|overlay|hidden/.test(n+i+r)}function fi(e,t,n){void 0===n&&(n=!1);var r=Jr(t),i=Jr(t)&&function(e){var t=e.getBoundingClientRect(),n=ni(t.width)/e.offsetWidth||1,r=ni(t.height)/e.offsetHeight||1;return 1!==n||1!==r}(t),o=li(t),a=oi(e,i,n),s={scrollLeft:0,scrollTop:0},l={x:0,y:0};return(r||!r&&!n)&&(("body"!==si(t)||di(o))&&(s=function(e){return e!==Xr(e)&&Jr(e)?{scrollLeft:(t=e).scrollLeft,scrollTop:t.scrollTop}:ai(e);var t}(t)),Jr(t)?((l=oi(t,!0)).x+=t.clientLeft,l.y+=t.clientTop):o&&(l.x=ci(o))),{x:a.left+s.scrollLeft-l.x,y:a.top+s.scrollTop-l.y,width:a.width,height:a.height}}function hi(e){var t=oi(e),n=e.offsetWidth,r=e.offsetHeight;return Math.abs(t.width-n)<=1&&(n=t.width),Math.abs(t.height-r)<=1&&(r=t.height),{x:e.offsetLeft,y:e.offsetTop,width:n,height:r}}function pi(e){return"html"===si(e)?e:e.assignedSlot||e.parentNode||(Zr(e)?e.host:null)||li(e)}function gi(e){return["html","body","#document"].indexOf(si(e))>=0?e.ownerDocument.body:Jr(e)&&di(e)?e:gi(pi(e))}function mi(e,t){var n;void 0===t&&(t=[]);var r=gi(e),i=r===(null==(n=e.ownerDocument)?void 0:n.body),o=Xr(r),a=i?[o].concat(o.visualViewport||[],di(r)?r:[]):r,s=t.concat(a);return i?s:s.concat(mi(pi(a)))}function vi(e){return["table","td","th"].indexOf(si(e))>=0}function bi(e){return Jr(e)&&"fixed"!==ui(e).position?e.offsetParent:null}function yi(e){for(var t=Xr(e),n=bi(e);n&&vi(n)&&"static"===ui(n).position;)n=bi(n);return n&&("html"===si(n)||"body"===si(n)&&"static"===ui(n).position)?t:n||function(e){var t=/firefox/i.test(ri());if(/Trident/i.test(ri())&&Jr(e)&&"fixed"===ui(e).position)return null;var n=pi(e);for(Zr(n)&&(n=n.host);Jr(n)&&["html","body"].indexOf(si(n))<0;){var r=ui(n);if("none"!==r.transform||"none"!==r.perspective||"paint"===r.contain||-1!==["transform","perspective"].indexOf(r.willChange)||t&&"filter"===r.willChange||t&&r.filter&&"none"!==r.filter)return n;n=n.parentNode}return null}(e)||t}var xi="top",wi="bottom",ki="right",_i="left",Ei="auto",Si=[xi,wi,ki,_i],Oi="start",Pi="end",Ci="viewport",Mi="popper",Ti=Si.reduce((function(e,t){return e.concat([t+"-"+Oi,t+"-"+Pi])}),[]),Ni=[].concat(Si,[Ei]).reduce((function(e,t){return e.concat([t,t+"-"+Oi,t+"-"+Pi])}),[]),Ai=["beforeRead","read","afterRead","beforeMain","main","afterMain","beforeWrite","write","afterWrite"];function Ri(e){var t=new Map,n=new Set,r=[];function i(e){n.add(e.name),[].concat(e.requires||[],e.requiresIfExists||[]).forEach((function(e){if(!n.has(e)){var r=t.get(e);r&&i(r)}})),r.push(e)}return e.forEach((function(e){t.set(e.name,e)})),e.forEach((function(e){n.has(e.name)||i(e)})),r}var Li={placement:"bottom",modifiers:[],strategy:"absolute"};function Di(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return!t.some((function(e){return!(e&&"function"==typeof e.getBoundingClientRect)}))}function Ii(e){void 0===e&&(e={});var t=e,n=t.defaultModifiers,r=void 0===n?[]:n,i=t.defaultOptions,o=void 0===i?Li:i;return function(e,t,n){void 0===n&&(n=o);var i,a,s={placement:"bottom",orderedModifiers:[],options:Object.assign({},Li,o),modifiersData:{},elements:{reference:e,popper:t},attributes:{},styles:{}},l=[],c=!1,u={state:s,setOptions:function(n){var i="function"==typeof n?n(s.options):n;d(),s.options=Object.assign({},o,s.options,i),s.scrollParents={reference:Gr(e)?mi(e):e.contextElement?mi(e.contextElement):[],popper:mi(t)};var a,c,f=function(e){var t=Ri(e);return Ai.reduce((function(e,n){return e.concat(t.filter((function(e){return e.phase===n})))}),[])}((a=[].concat(r,s.options.modifiers),c=a.reduce((function(e,t){var n=e[t.name];return e[t.name]=n?Object.assign({},n,t,{options:Object.assign({},n.options,t.options),data:Object.assign({},n.data,t.data)}):t,e}),{}),Object.keys(c).map((function(e){return c[e]}))));return s.orderedModifiers=f.filter((function(e){return e.enabled})),s.orderedModifiers.forEach((function(e){var t=e.name,n=e.options,r=void 0===n?{}:n,i=e.effect;if("function"==typeof i){var o=i({state:s,name:t,instance:u,options:r});l.push(o||function(){})}})),u.update()},forceUpdate:function(){if(!c){var e=s.elements,t=e.reference,n=e.popper;if(Di(t,n)){s.rects={reference:fi(t,yi(n),"fixed"===s.options.strategy),popper:hi(n)},s.reset=!1,s.placement=s.options.placement,s.orderedModifiers.forEach((function(e){return s.modifiersData[e.name]=Object.assign({},e.data)}));for(var r=0;r<s.orderedModifiers.length;r++)if(!0!==s.reset){var i=s.orderedModifiers[r],o=i.fn,a=i.options,l=void 0===a?{}:a,d=i.name;"function"==typeof o&&(s=o({state:s,options:l,name:d,instance:u})||s)}else s.reset=!1,r=-1}}},update:(i=function(){return new Promise((function(e){u.forceUpdate(),e(s)}))},function(){return a||(a=new Promise((function(e){Promise.resolve().then((function(){a=void 0,e(i())}))}))),a}),destroy:function(){d(),c=!0}};if(!Di(e,t))return u;function d(){l.forEach((function(e){return e()})),l=[]}return u.setOptions(n).then((function(e){!c&&n.onFirstUpdate&&n.onFirstUpdate(e)})),u}}var ji={passive:!0};function zi(e){return e.split("-")[0]}function Fi(e){return e.split("-")[1]}function Bi(e){return["top","bottom"].indexOf(e)>=0?"x":"y"}function Vi(e){var t,n=e.reference,r=e.element,i=e.placement,o=i?zi(i):null,a=i?Fi(i):null,s=n.x+n.width/2-r.width/2,l=n.y+n.height/2-r.height/2;switch(o){case xi:t={x:s,y:n.y-r.height};break;case wi:t={x:s,y:n.y+n.height};break;case ki:t={x:n.x+n.width,y:l};break;case _i:t={x:n.x-r.width,y:l};break;default:t={x:n.x,y:n.y}}var c=o?Bi(o):null;if(null!=c){var u="y"===c?"height":"width";switch(a){case Oi:t[c]=t[c]-(n[u]/2-r[u]/2);break;case Pi:t[c]=t[c]+(n[u]/2-r[u]/2)}}return t}var Wi={top:"auto",right:"auto",bottom:"auto",left:"auto"};function Hi(e){var t,n=e.popper,r=e.popperRect,i=e.placement,o=e.variation,a=e.offsets,s=e.position,l=e.gpuAcceleration,c=e.adaptive,u=e.roundOffsets,d=e.isFixed,f=a.x,h=void 0===f?0:f,p=a.y,g=void 0===p?0:p,m="function"==typeof u?u({x:h,y:g}):{x:h,y:g};h=m.x,g=m.y;var v=a.hasOwnProperty("x"),b=a.hasOwnProperty("y"),y=_i,x=xi,w=window;if(c){var k=yi(n),_="clientHeight",E="clientWidth";k===Xr(n)&&"static"!==ui(k=li(n)).position&&"absolute"===s&&(_="scrollHeight",E="scrollWidth"),(i===xi||(i===_i||i===ki)&&o===Pi)&&(x=wi,g-=(d&&k===w&&w.visualViewport?w.visualViewport.height:k[_])-r.height,g*=l?1:-1),i!==_i&&(i!==xi&&i!==wi||o!==Pi)||(y=ki,h-=(d&&k===w&&w.visualViewport?w.visualViewport.width:k[E])-r.width,h*=l?1:-1)}var S,O=Object.assign({position:s},c&&Wi),P=!0===u?function(e){var t=e.x,n=e.y,r=window.devicePixelRatio||1;return{x:ni(t*r)/r||0,y:ni(n*r)/r||0}}({x:h,y:g}):{x:h,y:g};return h=P.x,g=P.y,l?Object.assign({},O,((S={})[x]=b?"0":"",S[y]=v?"0":"",S.transform=(w.devicePixelRatio||1)<=1?"translate("+h+"px, "+g+"px)":"translate3d("+h+"px, "+g+"px, 0)",S)):Object.assign({},O,((t={})[x]=b?g+"px":"",t[y]=v?h+"px":"",t.transform="",t))}var $i={left:"right",right:"left",bottom:"top",top:"bottom"};function Ui(e){return e.replace(/left|right|bottom|top/g,(function(e){return $i[e]}))}var Ki={start:"end",end:"start"};function Yi(e){return e.replace(/start|end/g,(function(e){return Ki[e]}))}function qi(e,t){var n=t.getRootNode&&t.getRootNode();if(e.contains(t))return!0;if(n&&Zr(n)){var r=t;do{if(r&&e.isSameNode(r))return!0;r=r.parentNode||r.host}while(r)}return!1}function Qi(e){return Object.assign({},e,{left:e.x,top:e.y,right:e.x+e.width,bottom:e.y+e.height})}function Xi(e,t,n){return t===Ci?Qi(function(e,t){var n=Xr(e),r=li(e),i=n.visualViewport,o=r.clientWidth,a=r.clientHeight,s=0,l=0;if(i){o=i.width,a=i.height;var c=ii();(c||!c&&"fixed"===t)&&(s=i.offsetLeft,l=i.offsetTop)}return{width:o,height:a,x:s+ci(e),y:l}}(e,n)):Gr(t)?function(e,t){var n=oi(e,!1,"fixed"===t);return n.top=n.top+e.clientTop,n.left=n.left+e.clientLeft,n.bottom=n.top+e.clientHeight,n.right=n.left+e.clientWidth,n.width=e.clientWidth,n.height=e.clientHeight,n.x=n.left,n.y=n.top,n}(t,n):Qi(function(e){var t,n=li(e),r=ai(e),i=null==(t=e.ownerDocument)?void 0:t.body,o=ei(n.scrollWidth,n.clientWidth,i?i.scrollWidth:0,i?i.clientWidth:0),a=ei(n.scrollHeight,n.clientHeight,i?i.scrollHeight:0,i?i.clientHeight:0),s=-r.scrollLeft+ci(e),l=-r.scrollTop;return"rtl"===ui(i||n).direction&&(s+=ei(n.clientWidth,i?i.clientWidth:0)-o),{width:o,height:a,x:s,y:l}}(li(e)))}function Gi(e){return Object.assign({},{top:0,right:0,bottom:0,left:0},e)}function Ji(e,t){return t.reduce((function(t,n){return t[n]=e,t}),{})}function Zi(e,t){void 0===t&&(t={});var n=t,r=n.placement,i=void 0===r?e.placement:r,o=n.strategy,a=void 0===o?e.strategy:o,s=n.boundary,l=void 0===s?"clippingParents":s,c=n.rootBoundary,u=void 0===c?Ci:c,d=n.elementContext,f=void 0===d?Mi:d,h=n.altBoundary,p=void 0!==h&&h,g=n.padding,m=void 0===g?0:g,v=Gi("number"!=typeof m?m:Ji(m,Si)),b=f===Mi?"reference":Mi,y=e.rects.popper,x=e.elements[p?b:f],w=function(e,t,n,r){var i="clippingParents"===t?function(e){var t=mi(pi(e)),n=["absolute","fixed"].indexOf(ui(e).position)>=0&&Jr(e)?yi(e):e;return Gr(n)?t.filter((function(e){return Gr(e)&&qi(e,n)&&"body"!==si(e)})):[]}(e):[].concat(t),o=[].concat(i,[n]),a=o[0],s=o.reduce((function(t,n){var i=Xi(e,n,r);return t.top=ei(i.top,t.top),t.right=ti(i.right,t.right),t.bottom=ti(i.bottom,t.bottom),t.left=ei(i.left,t.left),t}),Xi(e,a,r));return s.width=s.right-s.left,s.height=s.bottom-s.top,s.x=s.left,s.y=s.top,s}(Gr(x)?x:x.contextElement||li(e.elements.popper),l,u,a),k=oi(e.elements.reference),_=Vi({reference:k,element:y,strategy:"absolute",placement:i}),E=Qi(Object.assign({},y,_)),S=f===Mi?E:k,O={top:w.top-S.top+v.top,bottom:S.bottom-w.bottom+v.bottom,left:w.left-S.left+v.left,right:S.right-w.right+v.right},P=e.modifiersData.offset;if(f===Mi&&P){var C=P[i];Object.keys(O).forEach((function(e){var t=[ki,wi].indexOf(e)>=0?1:-1,n=[xi,wi].indexOf(e)>=0?"y":"x";O[e]+=C[n]*t}))}return O}const eo={name:"flip",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name;if(!t.modifiersData[r]._skip){for(var i=n.mainAxis,o=void 0===i||i,a=n.altAxis,s=void 0===a||a,l=n.fallbackPlacements,c=n.padding,u=n.boundary,d=n.rootBoundary,f=n.altBoundary,h=n.flipVariations,p=void 0===h||h,g=n.allowedAutoPlacements,m=t.options.placement,v=zi(m),b=l||(v!==m&&p?function(e){if(zi(e)===Ei)return[];var t=Ui(e);return[Yi(e),t,Yi(t)]}(m):[Ui(m)]),y=[m].concat(b).reduce((function(e,n){return e.concat(zi(n)===Ei?function(e,t){void 0===t&&(t={});var n=t,r=n.placement,i=n.boundary,o=n.rootBoundary,a=n.padding,s=n.flipVariations,l=n.allowedAutoPlacements,c=void 0===l?Ni:l,u=Fi(r),d=u?s?Ti:Ti.filter((function(e){return Fi(e)===u})):Si,f=d.filter((function(e){return c.indexOf(e)>=0}));0===f.length&&(f=d);var h=f.reduce((function(t,n){return t[n]=Zi(e,{placement:n,boundary:i,rootBoundary:o,padding:a})[zi(n)],t}),{});return Object.keys(h).sort((function(e,t){return h[e]-h[t]}))}(t,{placement:n,boundary:u,rootBoundary:d,padding:c,flipVariations:p,allowedAutoPlacements:g}):n)}),[]),x=t.rects.reference,w=t.rects.popper,k=new Map,_=!0,E=y[0],S=0;S<y.length;S++){var O=y[S],P=zi(O),C=Fi(O)===Oi,M=[xi,wi].indexOf(P)>=0,T=M?"width":"height",N=Zi(t,{placement:O,boundary:u,rootBoundary:d,altBoundary:f,padding:c}),A=M?C?ki:_i:C?wi:xi;x[T]>w[T]&&(A=Ui(A));var R=Ui(A),L=[];if(o&&L.push(N[P]<=0),s&&L.push(N[A]<=0,N[R]<=0),L.every((function(e){return e}))){E=O,_=!1;break}k.set(O,L)}if(_)for(var D=function(e){var t=y.find((function(t){var n=k.get(t);if(n)return n.slice(0,e).every((function(e){return e}))}));if(t)return E=t,"break"},I=p?3:1;I>0&&"break"!==D(I);I--);t.placement!==E&&(t.modifiersData[r]._skip=!0,t.placement=E,t.reset=!0)}},requiresIfExists:["offset"],data:{_skip:!1}};function to(e,t,n){return ei(e,ti(t,n))}const no={name:"preventOverflow",enabled:!0,phase:"main",fn:function(e){var t=e.state,n=e.options,r=e.name,i=n.mainAxis,o=void 0===i||i,a=n.altAxis,s=void 0!==a&&a,l=n.boundary,c=n.rootBoundary,u=n.altBoundary,d=n.padding,f=n.tether,h=void 0===f||f,p=n.tetherOffset,g=void 0===p?0:p,m=Zi(t,{boundary:l,rootBoundary:c,padding:d,altBoundary:u}),v=zi(t.placement),b=Fi(t.placement),y=!b,x=Bi(v),w="x"===x?"y":"x",k=t.modifiersData.popperOffsets,_=t.rects.reference,E=t.rects.popper,S="function"==typeof g?g(Object.assign({},t.rects,{placement:t.placement})):g,O="number"==typeof S?{mainAxis:S,altAxis:S}:Object.assign({mainAxis:0,altAxis:0},S),P=t.modifiersData.offset?t.modifiersData.offset[t.placement]:null,C={x:0,y:0};if(k){if(o){var M,T="y"===x?xi:_i,N="y"===x?wi:ki,A="y"===x?"height":"width",R=k[x],L=R+m[T],D=R-m[N],I=h?-E[A]/2:0,j=b===Oi?_[A]:E[A],z=b===Oi?-E[A]:-_[A],F=t.elements.arrow,B=h&&F?hi(F):{width:0,height:0},V=t.modifiersData["arrow#persistent"]?t.modifiersData["arrow#persistent"].padding:{top:0,right:0,bottom:0,left:0},W=V[T],H=V[N],$=to(0,_[A],B[A]),U=y?_[A]/2-I-$-W-O.mainAxis:j-$-W-O.mainAxis,K=y?-_[A]/2+I+$+H+O.mainAxis:z+$+H+O.mainAxis,Y=t.elements.arrow&&yi(t.elements.arrow),q=Y?"y"===x?Y.clientTop||0:Y.clientLeft||0:0,Q=null!=(M=null==P?void 0:P[x])?M:0,X=R+K-Q,G=to(h?ti(L,R+U-Q-q):L,R,h?ei(D,X):D);k[x]=G,C[x]=G-R}if(s){var J,Z="x"===x?xi:_i,ee="x"===x?wi:ki,te=k[w],ne="y"===w?"height":"width",re=te+m[Z],ie=te-m[ee],oe=-1!==[xi,_i].indexOf(v),ae=null!=(J=null==P?void 0:P[w])?J:0,se=oe?re:te-_[ne]-E[ne]-ae+O.altAxis,le=oe?te+_[ne]+E[ne]-ae-O.altAxis:ie,ce=h&&oe?function(e,t,n){var r=to(e,t,n);return r>n?n:r}(se,te,le):to(h?se:re,te,h?le:ie);k[w]=ce,C[w]=ce-te}t.modifiersData[r]=C}},requiresIfExists:["offset"]},ro={name:"arrow",enabled:!0,phase:"main",fn:function(e){var t,n=e.state,r=e.name,i=e.options,o=n.elements.arrow,a=n.modifiersData.popperOffsets,s=zi(n.placement),l=Bi(s),c=[_i,ki].indexOf(s)>=0?"height":"width";if(o&&a){var u=function(e,t){return Gi("number"!=typeof(e="function"==typeof e?e(Object.assign({},t.rects,{placement:t.placement})):e)?e:Ji(e,Si))}(i.padding,n),d=hi(o),f="y"===l?xi:_i,h="y"===l?wi:ki,p=n.rects.reference[c]+n.rects.reference[l]-a[l]-n.rects.popper[c],g=a[l]-n.rects.reference[l],m=yi(o),v=m?"y"===l?m.clientHeight||0:m.clientWidth||0:0,b=p/2-g/2,y=u[f],x=v-d[c]-u[h],w=v/2-d[c]/2+b,k=to(y,w,x),_=l;n.modifiersData[r]=((t={})[_]=k,t.centerOffset=k-w,t)}},effect:function(e){var t=e.state,n=e.options.element,r=void 0===n?"[data-popper-arrow]":n;null!=r&&("string"!=typeof r||(r=t.elements.popper.querySelector(r)))&&qi(t.elements.popper,r)&&(t.elements.arrow=r)},requires:["popperOffsets"],requiresIfExists:["preventOverflow"]};function io(e,t,n){return void 0===n&&(n={x:0,y:0}),{top:e.top-t.height-n.y,right:e.right-t.width+n.x,bottom:e.bottom-t.height+n.y,left:e.left-t.width-n.x}}function oo(e){return[xi,ki,wi,_i].some((function(t){return e[t]>=0}))}var ao=Ii({defaultModifiers:[{name:"eventListeners",enabled:!0,phase:"write",fn:function(){},effect:function(e){var t=e.state,n=e.instance,r=e.options,i=r.scroll,o=void 0===i||i,a=r.resize,s=void 0===a||a,l=Xr(t.elements.popper),c=[].concat(t.scrollParents.reference,t.scrollParents.popper);return o&&c.forEach((function(e){e.addEventListener("scroll",n.update,ji)})),s&&l.addEventListener("resize",n.update,ji),function(){o&&c.forEach((function(e){e.removeEventListener("scroll",n.update,ji)})),s&&l.removeEventListener("resize",n.update,ji)}},data:{}},{name:"popperOffsets",enabled:!0,phase:"read",fn:function(e){var t=e.state,n=e.name;t.modifiersData[n]=Vi({reference:t.rects.reference,element:t.rects.popper,strategy:"absolute",placement:t.placement})},data:{}},{name:"computeStyles",enabled:!0,phase:"beforeWrite",fn:function(e){var t=e.state,n=e.options,r=n.gpuAcceleration,i=void 0===r||r,o=n.adaptive,a=void 0===o||o,s=n.roundOffsets,l=void 0===s||s,c={placement:zi(t.placement),variation:Fi(t.placement),popper:t.elements.popper,popperRect:t.rects.popper,gpuAcceleration:i,isFixed:"fixed"===t.options.strategy};null!=t.modifiersData.popperOffsets&&(t.styles.popper=Object.assign({},t.styles.popper,Hi(Object.assign({},c,{offsets:t.modifiersData.popperOffsets,position:t.options.strategy,adaptive:a,roundOffsets:l})))),null!=t.modifiersData.arrow&&(t.styles.arrow=Object.assign({},t.styles.arrow,Hi(Object.assign({},c,{offsets:t.modifiersData.arrow,position:"absolute",adaptive:!1,roundOffsets:l})))),t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-placement":t.placement})},data:{}},{name:"applyStyles",enabled:!0,phase:"write",fn:function(e){var t=e.state;Object.keys(t.elements).forEach((function(e){var n=t.styles[e]||{},r=t.attributes[e]||{},i=t.elements[e];Jr(i)&&si(i)&&(Object.assign(i.style,n),Object.keys(r).forEach((function(e){var t=r[e];!1===t?i.removeAttribute(e):i.setAttribute(e,!0===t?"":t)})))}))},effect:function(e){var t=e.state,n={popper:{position:t.options.strategy,left:"0",top:"0",margin:"0"},arrow:{position:"absolute"},reference:{}};return Object.assign(t.elements.popper.style,n.popper),t.styles=n,t.elements.arrow&&Object.assign(t.elements.arrow.style,n.arrow),function(){Object.keys(t.elements).forEach((function(e){var r=t.elements[e],i=t.attributes[e]||{},o=Object.keys(t.styles.hasOwnProperty(e)?t.styles[e]:n[e]).reduce((function(e,t){return e[t]="",e}),{});Jr(r)&&si(r)&&(Object.assign(r.style,o),Object.keys(i).forEach((function(e){r.removeAttribute(e)})))}))}},requires:["computeStyles"]},{name:"offset",enabled:!0,phase:"main",requires:["popperOffsets"],fn:function(e){var t=e.state,n=e.options,r=e.name,i=n.offset,o=void 0===i?[0,0]:i,a=Ni.reduce((function(e,n){return e[n]=function(e,t,n){var r=zi(e),i=[_i,xi].indexOf(r)>=0?-1:1,o="function"==typeof n?n(Object.assign({},t,{placement:e})):n,a=o[0],s=o[1];return a=a||0,s=(s||0)*i,[_i,ki].indexOf(r)>=0?{x:s,y:a}:{x:a,y:s}}(n,t.rects,o),e}),{}),s=a[t.placement],l=s.x,c=s.y;null!=t.modifiersData.popperOffsets&&(t.modifiersData.popperOffsets.x+=l,t.modifiersData.popperOffsets.y+=c),t.modifiersData[r]=a}},eo,no,ro,{name:"hide",enabled:!0,phase:"main",requiresIfExists:["preventOverflow"],fn:function(e){var t=e.state,n=e.name,r=t.rects.reference,i=t.rects.popper,o=t.modifiersData.preventOverflow,a=Zi(t,{elementContext:"reference"}),s=Zi(t,{altBoundary:!0}),l=io(a,r),c=io(s,i,o),u=oo(l),d=oo(c);t.modifiersData[n]={referenceClippingOffsets:l,popperEscapeOffsets:c,isReferenceHidden:u,hasPopperEscaped:d},t.attributes.popper=Object.assign({},t.attributes.popper,{"data-popper-reference-hidden":u,"data-popper-escaped":d})}}]});const so=o.forwardRef((function(e,t){const{children:n,container:r,disablePortal:i=!1}=e,[a,s]=o.useState(null),l=Br(o.isValidElement(n)?n.ref:null,t);return Qr((()=>{i||s(function(e){return"function"==typeof e?e():e}(r)||document.body)}),[r,i]),Qr((()=>{if(a&&!i)return Fr(t,a),()=>{Fr(t,null)}}),[t,a,i]),i?o.isValidElement(n)?o.cloneElement(n,{ref:l}):n:(0,Wr.jsx)(o.Fragment,{children:a?Cr.createPortal(n,a):a})})),lo=e=>e,co=(()=>{let e=lo;return{configure(t){e=t},generate:t=>e(t),reset(){e=lo}}})(),uo={active:"active",checked:"checked",completed:"completed",disabled:"disabled",error:"error",expanded:"expanded",focused:"focused",focusVisible:"focusVisible",required:"required",selected:"selected"};function fo(e,t,n="Mui"){const r=uo[t];return r?`${n}-${r}`:`${co.generate(e)}-${t}`}function ho(e,t,n="Mui"){const r={};return t.forEach((t=>{r[t]=fo(e,t,n)})),r}function po(e){return fo("MuiPopperUnstyled",e)}function go(e){if(void 0===e)return{};const t={};return Object.keys(e).filter((t=>!(t.match(/^on[A-Z]/)&&"function"==typeof e[t]))).forEach((n=>{t[n]=e[n]})),t}ho("MuiPopperUnstyled",["root"]);const mo=["elementType","externalSlotProps","ownerState"],vo=["anchorEl","children","component","direction","disablePortal","modifiers","open","ownerState","placement","popperOptions","popperRef","slotProps","slots","TransitionProps"],bo=["anchorEl","children","container","direction","disablePortal","keepMounted","modifiers","open","placement","popperOptions","popperRef","style","transition"];function yo(e){return"function"==typeof e?e():e}const xo={},wo=o.forwardRef((function(e,t){var n;const{anchorEl:a,children:s,component:d,direction:f,disablePortal:h,modifiers:p,open:g,ownerState:m,placement:v,popperOptions:b,popperRef:y,slotProps:x={},slots:w={},TransitionProps:k}=e,_=(0,r.A)(e,vo),E=o.useRef(null),S=Br(E,t),O=o.useRef(null),P=Br(O,y),C=o.useRef(P);Qr((()=>{C.current=P}),[P]),o.useImperativeHandle(y,(()=>O.current),[]);const M=function(e,t){if("ltr"===t)return e;switch(e){case"bottom-end":return"bottom-start";case"bottom-start":return"bottom-end";case"top-end":return"top-start";case"top-start":return"top-end";default:return e}}(v,f),[T,N]=o.useState(M);o.useEffect((()=>{O.current&&O.current.forceUpdate()})),Qr((()=>{if(!a||!g)return;yo(a);let e=[{name:"preventOverflow",options:{altBoundary:h}},{name:"flip",options:{altBoundary:h}},{name:"onUpdate",enabled:!0,phase:"afterWrite",fn:({state:e})=>{N(e.placement)}}];null!=p&&(e=e.concat(p)),b&&null!=b.modifiers&&(e=e.concat(b.modifiers));const t=ao(yo(a),E.current,i({placement:M},b,{modifiers:e}));return C.current(t),()=>{t.destroy(),C.current(null)}}),[a,h,p,g,b,M]);const A={placement:T};null!==k&&(A.TransitionProps=k);const R=c({root:["root"]},po,{}),L=null!=(n=null!=d?d:w.root)?n:"div",D=function(e){var t;const{elementType:n,externalSlotProps:o,ownerState:a}=e,s=(0,r.A)(e,mo),c=function(e,t){return"function"==typeof e?e(t):e}(o,a),{props:d,internalRef:f}=function(e){const{getSlotProps:t,additionalProps:n,externalSlotProps:r,externalForwardedProps:o,className:a}=e;if(!t){const e=l(null==o?void 0:o.className,null==r?void 0:r.className,a,null==n?void 0:n.className),t=i({},null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),s=i({},n,o,r);return e.length>0&&(s.className=e),Object.keys(t).length>0&&(s.style=t),{props:s,internalRef:void 0}}const s=function(e,t=[]){if(void 0===e)return{};const n={};return Object.keys(e).filter((n=>n.match(/^on[A-Z]/)&&"function"==typeof e[n]&&!t.includes(n))).forEach((t=>{n[t]=e[t]})),n}(i({},o,r)),c=go(r),u=go(o),d=t(s),f=l(null==d?void 0:d.className,null==n?void 0:n.className,a,null==o?void 0:o.className,null==r?void 0:r.className),h=i({},null==d?void 0:d.style,null==n?void 0:n.style,null==o?void 0:o.style,null==r?void 0:r.style),p=i({},d,n,u,c);return f.length>0&&(p.className=f),Object.keys(h).length>0&&(p.style=h),{props:p,internalRef:d.ref}}(i({},s,{externalSlotProps:c}));return u(n,i({},d,{ref:Br(f,null==c?void 0:c.ref,null==(t=e.additionalProps)?void 0:t.ref)}),a)}({elementType:L,externalSlotProps:x.root,externalForwardedProps:_,additionalProps:{role:"tooltip",ref:S},ownerState:i({},e,m),className:R.root});return(0,Wr.jsx)(L,i({},D,{children:"function"==typeof s?s(A):s}))})),ko=o.forwardRef((function(e,t){const{anchorEl:n,children:a,container:s,direction:l="ltr",disablePortal:c=!1,keepMounted:u=!1,modifiers:d,open:f,placement:h="bottom",popperOptions:p=xo,popperRef:g,style:m,transition:v=!1}=e,b=(0,r.A)(e,bo),[y,x]=o.useState(!0);if(!u&&!f&&(!v||y))return null;const w=s||(n?function(e){return e&&e.ownerDocument||document}(yo(n)).body:void 0);return(0,Wr.jsx)(so,{disablePortal:c,container:w,children:(0,Wr.jsx)(wo,i({anchorEl:n,direction:l,disablePortal:c,modifiers:d,ref:t,open:v?!y:f,placement:h,popperOptions:p,popperRef:g},b,{style:i({position:"fixed",top:0,left:0,display:f||!u||v&&!y?null:"none"},m),TransitionProps:v?{in:f,onEnter:()=>{x(!1)},onExited:()=>{x(!0)}}:null,children:a}))})})),_o=["components","componentsProps","slots","slotProps"],Eo=yr(ko,{name:"MuiPopper",slot:"Root",overridesResolver:(e,t)=>t.root})({}),So=o.forwardRef((function(e,t){var n;const o=wr(),a=Sr({props:e,name:"MuiPopper"}),{components:s,componentsProps:l,slots:c,slotProps:u}=a,d=(0,r.A)(a,_o),f=null!=(n=null==c?void 0:c.root)?n:null==s?void 0:s.Root;return(0,Wr.jsx)(Eo,i({direction:null==o?void 0:o.direction,slots:{root:f},slotProps:null!=u?u:l},d,{ref:t}))}));let Oo=0;const Po=a.useId;let Co,Mo=!0,To=!1;const No={text:!0,search:!0,url:!0,tel:!0,email:!0,password:!0,number:!0,date:!0,month:!0,week:!0,time:!0,datetime:!0,"datetime-local":!0};function Ao(e){e.metaKey||e.altKey||e.ctrlKey||(Mo=!0)}function Ro(){Mo=!1}function Lo(){"hidden"===this.visibilityState&&To&&(Mo=!0)}const Do=function(){const e=o.useCallback((e=>{var t;null!=e&&((t=e.ownerDocument).addEventListener("keydown",Ao,!0),t.addEventListener("mousedown",Ro,!0),t.addEventListener("pointerdown",Ro,!0),t.addEventListener("touchstart",Ro,!0),t.addEventListener("visibilitychange",Lo,!0))}),[]),t=o.useRef(!1);return{isFocusVisibleRef:t,onFocus:function(e){return!!function(e){const{target:t}=e;try{return t.matches(":focus-visible")}catch(e){}return Mo||function(e){const{type:t,tagName:n}=e;return!("INPUT"!==n||!No[t]||e.readOnly)||"TEXTAREA"===n&&!e.readOnly||!!e.isContentEditable}(t)}(e)&&(t.current=!0,!0)},onBlur:function(){return!!t.current&&(To=!0,window.clearTimeout(Co),Co=window.setTimeout((()=>{To=!1}),100),t.current=!1,!0)},ref:e}};function Io(e){return fo("MuiTooltip",e)}const jo=ho("MuiTooltip",["popper","popperInteractive","popperArrow","popperClose","tooltip","tooltipArrow","touch","tooltipPlacementLeft","tooltipPlacementRight","tooltipPlacementTop","tooltipPlacementBottom","arrow"]),zo=["arrow","children","classes","components","componentsProps","describeChild","disableFocusListener","disableHoverListener","disableInteractive","disableTouchListener","enterDelay","enterNextDelay","enterTouchDelay","followCursor","id","leaveDelay","leaveTouchDelay","onClose","onOpen","open","placement","PopperComponent","PopperProps","title","TransitionComponent","TransitionProps"],Fo=yr(So,{name:"MuiTooltip",slot:"Popper",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.popper,!n.disableInteractive&&t.popperInteractive,n.arrow&&t.popperArrow,!n.open&&t.popperClose]}})((({theme:e,ownerState:t,open:n})=>i({zIndex:(e.vars||e).zIndex.tooltip,pointerEvents:"none"},!t.disableInteractive&&{pointerEvents:"auto"},!n&&{pointerEvents:"none"},t.arrow&&{[`&[data-popper-placement*="bottom"] .${jo.arrow}`]:{top:0,marginTop:"-0.71em","&::before":{transformOrigin:"0 100%"}},[`&[data-popper-placement*="top"] .${jo.arrow}`]:{bottom:0,marginBottom:"-0.71em","&::before":{transformOrigin:"100% 0"}},[`&[data-popper-placement*="right"] .${jo.arrow}`]:i({},t.isRtl?{right:0,marginRight:"-0.71em"}:{left:0,marginLeft:"-0.71em"},{height:"1em",width:"0.71em","&::before":{transformOrigin:"100% 100%"}}),[`&[data-popper-placement*="left"] .${jo.arrow}`]:i({},t.isRtl?{left:0,marginLeft:"-0.71em"}:{right:0,marginRight:"-0.71em"},{height:"1em",width:"0.71em","&::before":{transformOrigin:"0 0"}})}))),Bo=yr("div",{name:"MuiTooltip",slot:"Tooltip",overridesResolver:(e,t)=>{const{ownerState:n}=e;return[t.tooltip,n.touch&&t.touch,n.arrow&&t.tooltipArrow,t[`tooltipPlacement${Or(n.placement.split("-")[0])}`]]}})((({theme:e,ownerState:t})=>{return i({backgroundColor:e.vars?e.vars.palette.Tooltip.bg:m(e.palette.grey[700],.92),borderRadius:(e.vars||e).shape.borderRadius,color:(e.vars||e).palette.common.white,fontFamily:e.typography.fontFamily,padding:"4px 8px",fontSize:e.typography.pxToRem(11),maxWidth:300,margin:2,wordWrap:"break-word",fontWeight:e.typography.fontWeightMedium},t.arrow&&{position:"relative",margin:0},t.touch&&{padding:"8px 16px",fontSize:e.typography.pxToRem(14),lineHeight:(n=16/14,Math.round(1e5*n)/1e5+"em"),fontWeight:e.typography.fontWeightRegular},{[`.${jo.popper}[data-popper-placement*="left"] &`]:i({transformOrigin:"right center"},t.isRtl?i({marginLeft:"14px"},t.touch&&{marginLeft:"24px"}):i({marginRight:"14px"},t.touch&&{marginRight:"24px"})),[`.${jo.popper}[data-popper-placement*="right"] &`]:i({transformOrigin:"left center"},t.isRtl?i({marginRight:"14px"},t.touch&&{marginRight:"24px"}):i({marginLeft:"14px"},t.touch&&{marginLeft:"24px"})),[`.${jo.popper}[data-popper-placement*="top"] &`]:i({transformOrigin:"center bottom",marginBottom:"14px"},t.touch&&{marginBottom:"24px"}),[`.${jo.popper}[data-popper-placement*="bottom"] &`]:i({transformOrigin:"center top",marginTop:"14px"},t.touch&&{marginTop:"24px"})});var n})),Vo=yr("span",{name:"MuiTooltip",slot:"Arrow",overridesResolver:(e,t)=>t.arrow})((({theme:e})=>({overflow:"hidden",position:"absolute",width:"1em",height:"0.71em",boxSizing:"border-box",color:e.vars?e.vars.palette.Tooltip.bg:m(e.palette.grey[700],.9),"&::before":{content:'""',margin:"auto",display:"block",width:"100%",height:"100%",backgroundColor:"currentColor",transform:"rotate(45deg)"}})));let Wo=!1,Ho=null;function $o(e,t){return n=>{t&&t(n),e(n)}}const Uo=o.forwardRef((function(e,t){var n,a,s,d,f,h;const p=Sr({props:e,name:"MuiTooltip"}),{arrow:g=!1,children:m,components:v={},componentsProps:b={},describeChild:y=!1,disableFocusListener:x=!1,disableHoverListener:w=!1,disableInteractive:k=!1,disableTouchListener:_=!1,enterDelay:E=100,enterNextDelay:S=0,enterTouchDelay:O=700,followCursor:P=!1,id:C,leaveDelay:M=0,leaveTouchDelay:T=1500,onClose:N,onOpen:A,open:R,placement:L="bottom",PopperComponent:D,PopperProps:I={},title:j,TransitionComponent:z=qr,TransitionProps:F}=p,B=(0,r.A)(p,zo),V=Er(),W="rtl"===V.direction,[H,$]=o.useState(),[U,K]=o.useState(null),Y=o.useRef(!1),q=k||P,Q=o.useRef(),X=o.useRef(),G=o.useRef(),J=o.useRef(),[Z,ee]=function({controlled:e,default:t,name:n,state:r="value"}){const{current:i}=o.useRef(void 0!==e),[a,s]=o.useState(t);return[i?e:a,o.useCallback((e=>{i||s(e)}),[])]}({controlled:R,default:!1,name:"Tooltip",state:"open"});let te=Z;const ne=function(e){if(void 0!==Po){const t=Po();return null!=e?e:t}return function(e){const[t,n]=o.useState(e),r=e||t;return o.useEffect((()=>{null==t&&(Oo+=1,n(`mui-${Oo}`))}),[t]),r}(e)}(C),re=o.useRef(),ie=o.useCallback((()=>{void 0!==re.current&&(document.body.style.WebkitUserSelect=re.current,re.current=void 0),clearTimeout(J.current)}),[]);o.useEffect((()=>()=>{clearTimeout(Q.current),clearTimeout(X.current),clearTimeout(G.current),ie()}),[ie]);const oe=e=>{clearTimeout(Ho),Wo=!0,ee(!0),A&&!te&&A(e)},ae=function(e){const t=o.useRef(e);return Qr((()=>{t.current=e})),o.useCallback(((...e)=>(0,t.current)(...e)),[])}((e=>{clearTimeout(Ho),Ho=setTimeout((()=>{Wo=!1}),800+M),ee(!1),N&&te&&N(e),clearTimeout(Q.current),Q.current=setTimeout((()=>{Y.current=!1}),V.transitions.duration.shortest)})),se=e=>{Y.current&&"touchstart"!==e.type||(H&&H.removeAttribute("title"),clearTimeout(X.current),clearTimeout(G.current),E||Wo&&S?X.current=setTimeout((()=>{oe(e)}),Wo?S:E):oe(e))},le=e=>{clearTimeout(X.current),clearTimeout(G.current),G.current=setTimeout((()=>{ae(e)}),M)},{isFocusVisibleRef:ce,onBlur:ue,onFocus:de,ref:fe}=Do(),[,he]=o.useState(!1),pe=e=>{ue(e),!1===ce.current&&(he(!1),le(e))},ge=e=>{H||$(e.currentTarget),de(e),!0===ce.current&&(he(!0),se(e))},me=e=>{Y.current=!0;const t=m.props;t.onTouchStart&&t.onTouchStart(e)},ve=se,be=le;o.useEffect((()=>{if(te)return document.addEventListener("keydown",e),()=>{document.removeEventListener("keydown",e)};function e(e){"Escape"!==e.key&&"Esc"!==e.key||ae(e)}}),[ae,te]);const ye=Vr(m.ref,fe,$,t);j||0===j||(te=!1);const xe=o.useRef({x:0,y:0}),we=o.useRef(),ke={},_e="string"==typeof j;y?(ke.title=te||!_e||w?null:j,ke["aria-describedby"]=te?ne:null):(ke["aria-label"]=_e?j:null,ke["aria-labelledby"]=te&&!_e?ne:null);const Ee=i({},ke,B,m.props,{className:l(B.className,m.props.className),onTouchStart:me,ref:ye},P?{onMouseMove:e=>{const t=m.props;t.onMouseMove&&t.onMouseMove(e),xe.current={x:e.clientX,y:e.clientY},we.current&&we.current.update()}}:{}),Se={};_||(Ee.onTouchStart=e=>{me(e),clearTimeout(G.current),clearTimeout(Q.current),ie(),re.current=document.body.style.WebkitUserSelect,document.body.style.WebkitUserSelect="none",J.current=setTimeout((()=>{document.body.style.WebkitUserSelect=re.current,se(e)}),O)},Ee.onTouchEnd=e=>{m.props.onTouchEnd&&m.props.onTouchEnd(e),ie(),clearTimeout(G.current),G.current=setTimeout((()=>{ae(e)}),T)}),w||(Ee.onMouseOver=$o(ve,Ee.onMouseOver),Ee.onMouseLeave=$o(be,Ee.onMouseLeave),q||(Se.onMouseOver=ve,Se.onMouseLeave=be)),x||(Ee.onFocus=$o(ge,Ee.onFocus),Ee.onBlur=$o(pe,Ee.onBlur),q||(Se.onFocus=ge,Se.onBlur=pe));const Oe=o.useMemo((()=>{var e;let t=[{name:"arrow",enabled:Boolean(U),options:{element:U,padding:4}}];return null!=(e=I.popperOptions)&&e.modifiers&&(t=t.concat(I.popperOptions.modifiers)),i({},I.popperOptions,{modifiers:t})}),[U,I]),Pe=i({},p,{isRtl:W,arrow:g,disableInteractive:q,placement:L,PopperComponentProp:D,touch:Y.current}),Ce=(e=>{const{classes:t,disableInteractive:n,arrow:r,touch:i,placement:o}=e;return c({popper:["popper",!n&&"popperInteractive",r&&"popperArrow"],tooltip:["tooltip",r&&"tooltipArrow",i&&"touch",`tooltipPlacement${Or(o.split("-")[0])}`],arrow:["arrow"]},Io,t)})(Pe),Me=null!=(n=v.Popper)?n:Fo,Te=null!=(a=null!=(s=v.Transition)?s:z)?a:qr,Ne=null!=(d=v.Tooltip)?d:Bo,Ae=null!=(f=v.Arrow)?f:Vo,Re=u(Me,i({},I,b.popper),Pe),Le=u(Te,i({},F,b.transition),Pe),De=u(Ne,i({},b.tooltip),Pe),Ie=u(Ae,i({},b.arrow),Pe);return(0,Wr.jsxs)(o.Fragment,{children:[o.cloneElement(m,Ee),(0,Wr.jsx)(Me,i({as:null!=D?D:So,placement:L,anchorEl:P?{getBoundingClientRect:()=>({top:xe.current.y,left:xe.current.x,right:xe.current.x,bottom:xe.current.y,width:0,height:0})}:H,popperRef:we,open:!!H&&te,id:ne,transition:!0},Se,Re,{className:l(Ce.popper,null==I?void 0:I.className,null==(h=b.popper)?void 0:h.className),popperOptions:Oe,children:({TransitionProps:e})=>{var t,n;return(0,Wr.jsx)(Te,i({timeout:V.transitions.duration.shorter},e,Le,{children:(0,Wr.jsxs)(Ne,i({},De,{className:l(Ce.tooltip,null==(t=b.tooltip)?void 0:t.className),children:[j,g?(0,Wr.jsx)(Ae,i({},Ie,{className:l(Ce.arrow,null==(n=b.arrow)?void 0:n.className),ref:K})):null]}))}))}}))]})})),Ko=Uo},4292:(e,t,n)=>{"use strict";n.r(t),n.d(t,{default:()=>M});var r=n(2998),i=n(7237),o=function(){if("undefined"!=typeof window){if(window.devicePixelRatio)return window.devicePixelRatio;var e=window.screen;if(e)return(e.deviceXDPI||1)/(e.logicalXDPI||1)}return 1}(),a=function(e,t,n){var r,i=[].concat(t),o=i.length,a=e.font,s=0;for(e.font=n.string,r=0;r<o;++r)s=Math.max(e.measureText(i[r]).width,s);return e.font=a,{height:o*n.lineHeight,width:s}};function s(e,t){var n=t.x,r=t.y;if(null===n)return{x:0,y:-1};if(null===r)return{x:1,y:0};var i=e.x-n,o=e.y-r,a=Math.sqrt(i*i+o*o);return{x:a?i/a:0,y:a?o/a:-1}}function l(e,t,n){var r=0;return e<n.left?r|=1:e>n.right&&(r|=2),t<n.top?r|=8:t>n.bottom&&(r|=4),r}function c(e,t){var n,r,i=t.anchor,o=e;return t.clamp&&(o=function(e,t){for(var n,r,i,o=e.x0,a=e.y0,s=e.x1,c=e.y1,u=l(o,a,t),d=l(s,c,t);u|d&&!(u&d);)8&(n=u||d)?(r=o+(s-o)*(t.top-a)/(c-a),i=t.top):4&n?(r=o+(s-o)*(t.bottom-a)/(c-a),i=t.bottom):2&n?(i=a+(c-a)*(t.right-o)/(s-o),r=t.right):1&n&&(i=a+(c-a)*(t.left-o)/(s-o),r=t.left),n===u?u=l(o=r,a=i,t):d=l(s=r,c=i,t);return{x0:o,x1:s,y0:a,y1:c}}(o,t.area)),"start"===i?(n=o.x0,r=o.y0):"end"===i?(n=o.x1,r=o.y1):(n=(o.x0+o.x1)/2,r=(o.y0+o.y1)/2),function(e,t,n,r,i){switch(i){case"center":n=r=0;break;case"bottom":n=0,r=1;break;case"right":n=1,r=0;break;case"left":n=-1,r=0;break;case"top":n=0,r=-1;break;case"start":n=-n,r=-r;break;case"end":break;default:i*=Math.PI/180,n=Math.cos(i),r=Math.sin(i)}return{x:e,y:t,vx:n,vy:r}}(n,r,e.vx,e.vy,t.align)}var u=function(e,t){var n=(e.startAngle+e.endAngle)/2,r=Math.cos(n),i=Math.sin(n),o=e.innerRadius,a=e.outerRadius;return c({x0:e.x+r*o,y0:e.y+i*o,x1:e.x+r*a,y1:e.y+i*a,vx:r,vy:i},t)},d=function(e,t){var n=s(e,t.origin),r=n.x*e.options.radius,i=n.y*e.options.radius;return c({x0:e.x-r,y0:e.y-i,x1:e.x+r,y1:e.y+i,vx:n.x,vy:n.y},t)},f=function(e,t){var n=s(e,t.origin),r=e.x,i=e.y,o=0,a=0;return e.horizontal?(r=Math.min(e.x,e.base),o=Math.abs(e.base-e.x)):(i=Math.min(e.y,e.base),a=Math.abs(e.base-e.y)),c({x0:r,y0:i+a,x1:r+o,y1:i,vx:n.x,vy:n.y},t)},h=function(e,t){var n=s(e,t.origin);return c({x0:e.x,y0:e.y,x1:e.x+(e.width||0),y1:e.y+(e.height||0),vx:n.x,vy:n.y},t)},p=function(e){return Math.round(e*o)/o};function g(e,t){var n=t.chart.getDatasetMeta(t.datasetIndex).vScale;if(!n)return null;if(void 0!==n.xCenter&&void 0!==n.yCenter)return{x:n.xCenter,y:n.yCenter};var r=n.getBasePixel();return e.horizontal?{x:r,y:null}:{x:null,y:r}}function m(e,t,n){var r=e.shadowBlur,i=n.stroked,o=p(n.x),a=p(n.y),s=p(n.w);i&&e.strokeText(t,o,a,s),n.filled&&(r&&i&&(e.shadowBlur=0),e.fillText(t,o,a,s),r&&i&&(e.shadowBlur=r))}var v=function(e,t,n,r){var i=this;i._config=e,i._index=r,i._model=null,i._rects=null,i._ctx=t,i._el=n};(0,r.V)(v.prototype,{_modelize:function(e,t,n,o){var s,l=this,c=l._index,p=(0,r.O)((0,r.a)([n.font,{}],o,c)),m=(0,r.a)([n.color,i.defaults.color],o,c);return{align:(0,r.a)([n.align,"center"],o,c),anchor:(0,r.a)([n.anchor,"center"],o,c),area:o.chart.chartArea,backgroundColor:(0,r.a)([n.backgroundColor,null],o,c),borderColor:(0,r.a)([n.borderColor,null],o,c),borderRadius:(0,r.a)([n.borderRadius,0],o,c),borderWidth:(0,r.a)([n.borderWidth,0],o,c),clamp:(0,r.a)([n.clamp,!1],o,c),clip:(0,r.a)([n.clip,!1],o,c),color:m,display:e,font:p,lines:t,offset:(0,r.a)([n.offset,4],o,c),opacity:(0,r.a)([n.opacity,1],o,c),origin:g(l._el,o),padding:(0,r.K)((0,r.a)([n.padding,4],o,c)),positioner:(s=l._el,s instanceof i.ArcElement?u:s instanceof i.PointElement?d:s instanceof i.BarElement?f:h),rotation:(0,r.a)([n.rotation,0],o,c)*(Math.PI/180),size:a(l._ctx,t,p),textAlign:(0,r.a)([n.textAlign,"start"],o,c),textShadowBlur:(0,r.a)([n.textShadowBlur,0],o,c),textShadowColor:(0,r.a)([n.textShadowColor,m],o,c),textStrokeColor:(0,r.a)([n.textStrokeColor,m],o,c),textStrokeWidth:(0,r.a)([n.textStrokeWidth,0],o,c)}},update:function(e){var t,n,i,o=this,a=null,s=null,l=o._index,c=o._config,u=(0,r.a)([c.display,!0],e,l);u&&(t=e.dataset.data[l],n=(0,r.v)((0,r.C)(c.formatter,[t,e]),t),(i=(0,r.k)(n)?[]:function(e){var t,n=[];for(e=[].concat(e);e.length;)"string"==typeof(t=e.pop())?n.unshift.apply(n,t.split("\n")):Array.isArray(t)?e.push.apply(e,t):(0,r.k)(e)||n.unshift(""+t);return n}(n)).length&&(s=function(e){var t=e.borderWidth||0,n=e.padding,r=e.size.height,i=e.size.width,o=-i/2,a=-r/2;return{frame:{x:o-n.left-t,y:a-n.top-t,w:i+n.width+2*t,h:r+n.height+2*t},text:{x:o,y:a,w:i,h:r}}}(a=o._modelize(u,i,c,e)))),o._model=a,o._rects=s},geometry:function(){return this._rects?this._rects.frame:{}},rotation:function(){return this._model?this._model.rotation:0},visible:function(){return this._model&&this._model.opacity},model:function(){return this._model},draw:function(e,t){var n,r,i,o,a=e.ctx,s=this._model,l=this._rects;this.visible()&&(a.save(),s.clip&&(n=s.area,a.beginPath(),a.rect(n.left,n.top,n.right-n.left,n.bottom-n.top),a.clip()),a.globalAlpha=(r=0,i=s.opacity,o=1,Math.max(r,Math.min(i,o))),a.translate(p(t.x),p(t.y)),a.rotate(s.rotation),function(e,t,n){var r=n.backgroundColor,i=n.borderColor,o=n.borderWidth;(r||i&&o)&&(e.beginPath(),function(e,t,n,r,i,o){var a=Math.PI/2;if(o){var s=Math.min(o,i/2,r/2),l=t+s,c=n+s,u=t+r-s,d=n+i-s;e.moveTo(t,c),l<u&&c<d?(e.arc(l,c,s,-Math.PI,-a),e.arc(u,c,s,-a,0),e.arc(u,d,s,0,a),e.arc(l,d,s,a,Math.PI)):l<u?(e.moveTo(l,n),e.arc(u,c,s,-a,a),e.arc(l,c,s,a,Math.PI+a)):c<d?(e.arc(l,c,s,-Math.PI,0),e.arc(l,d,s,0,Math.PI)):e.arc(l,c,s,-Math.PI,Math.PI),e.closePath(),e.moveTo(t,n)}else e.rect(t,n,r,i)}(e,p(t.x)+o/2,p(t.y)+o/2,p(t.w)-o,p(t.h)-o,n.borderRadius),e.closePath(),r&&(e.fillStyle=r,e.fill()),i&&o&&(e.strokeStyle=i,e.lineWidth=o,e.lineJoin="miter",e.stroke()))}(a,l.frame,s),function(e,t,n,r){var i,o=r.textAlign,a=r.color,s=!!a,l=r.font,c=t.length,u=r.textStrokeColor,d=r.textStrokeWidth,f=u&&d;if(c&&(s||f))for(n=function(e,t,n){var r=n.lineHeight,i=e.w,o=e.x;return"center"===t?o+=i/2:"end"!==t&&"right"!==t||(o+=i),{h:r,w:i,x:o,y:e.y+r/2}}(n,o,l),e.font=l.string,e.textAlign=o,e.textBaseline="middle",e.shadowBlur=r.textShadowBlur,e.shadowColor=r.textShadowColor,s&&(e.fillStyle=a),f&&(e.lineJoin="round",e.lineWidth=d,e.strokeStyle=u),i=0,c=t.length;i<c;++i)m(e,t[i],{stroked:f,filled:s,w:n.w,x:n.x,y:n.y+n.h*i})}(a,s.lines,l.text,s),a.restore())}});var b=Number.MIN_SAFE_INTEGER||-9007199254740991,y=Number.MAX_SAFE_INTEGER||9007199254740991;function x(e,t,n){var r=Math.cos(n),i=Math.sin(n),o=t.x,a=t.y;return{x:o+r*(e.x-o)-i*(e.y-a),y:a+i*(e.x-o)+r*(e.y-a)}}function w(e,t){var n,r,i,o,a,s=y,l=b,c=t.origin;for(n=0;n<e.length;++n)i=(r=e[n]).x-c.x,o=r.y-c.y,a=t.vx*i+t.vy*o,s=Math.min(s,a),l=Math.max(l,a);return{min:s,max:l}}function k(e,t){var n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r);return{vx:(t.x-e.x)/i,vy:(t.y-e.y)/i,origin:e,ln:i}}var _=function(){this._rotation=0,this._rect={x:0,y:0,w:0,h:0}};function E(e,t,n){var r=t.positioner(e,t),i=r.vx,o=r.vy;if(!i&&!o)return{x:r.x,y:r.y};var a=n.w,s=n.h,l=t.rotation,c=Math.abs(a/2*Math.cos(l))+Math.abs(s/2*Math.sin(l)),u=Math.abs(a/2*Math.sin(l))+Math.abs(s/2*Math.cos(l)),d=1/Math.max(Math.abs(i),Math.abs(o));return c*=i*d,u*=o*d,c+=t.offset*i,u+=t.offset*o,{x:r.x+c,y:r.y+u}}(0,r.V)(_.prototype,{center:function(){var e=this._rect;return{x:e.x+e.w/2,y:e.y+e.h/2}},update:function(e,t,n){this._rotation=n,this._rect={x:t.x+e.x,y:t.y+e.y,w:t.w,h:t.h}},contains:function(e){var t=this,n=t._rect;return!((e=x(e,t.center(),-t._rotation)).x<n.x-1||e.y<n.y-1||e.x>n.x+n.w+2||e.y>n.y+n.h+2)},intersects:function(e){var t,n,r,i=this._points(),o=e._points(),a=[k(i[0],i[1]),k(i[0],i[3])];for(this._rotation!==e._rotation&&a.push(k(o[0],o[1]),k(o[0],o[3])),t=0;t<a.length;++t)if(n=w(i,a[t]),r=w(o,a[t]),n.max<r.min||r.max<n.min)return!1;return!0},_points:function(){var e=this,t=e._rect,n=e._rotation,r=e.center();return[x({x:t.x,y:t.y},r,n),x({x:t.x+t.w,y:t.y},r,n),x({x:t.x+t.w,y:t.y+t.h},r,n),x({x:t.x,y:t.y+t.h},r,n)]}});var S={prepare:function(e){var t,n,r,i,o,a=[];for(t=0,r=e.length;t<r;++t)for(n=0,i=e[t].length;n<i;++n)o=e[t][n],a.push(o),o.$layout={_box:new _,_hidable:!1,_visible:!0,_set:t,_idx:o._index};return a.sort((function(e,t){var n=e.$layout,r=t.$layout;return n._idx===r._idx?r._set-n._set:r._idx-n._idx})),this.update(a),a},update:function(e){var t,n,r,i,o,a=!1;for(t=0,n=e.length;t<n;++t)i=(r=e[t]).model(),(o=r.$layout)._hidable=i&&"auto"===i.display,o._visible=r.visible(),a|=o._hidable;a&&function(e){var t,n,r,i,o,a,s;for(t=0,n=e.length;t<n;++t)(i=(r=e[t]).$layout)._visible&&(s=new Proxy(r._el,{get:(e,t)=>e.getProps([t],!0)[t]}),o=r.geometry(),a=E(s,r.model(),o),i._box.update(a,o,r.rotation()));!function(e,t){var n,r,i,o;for(n=e.length-1;n>=0;--n)for(i=e[n].$layout,r=n-1;r>=0&&i._visible;--r)(o=e[r].$layout)._visible&&i._box.intersects(o._box)&&t(i,o)}(e,(function(e,t){var n=e._hidable,r=t._hidable;n&&r||r?t._visible=!1:n&&(e._visible=!1)}))}(e)},lookup:function(e,t){var n,r;for(n=e.length-1;n>=0;--n)if((r=e[n].$layout)&&r._visible&&r._box.contains(t))return e[n];return null},draw:function(e,t){var n,r,i,o,a,s;for(n=0,r=t.length;n<r;++n)(o=(i=t[n]).$layout)._visible&&(a=i.geometry(),s=E(i._el,i.model(),a),o._box.update(s,a,i.rotation()),i.draw(e,s))}},O="$datalabels",P="$default";function C(e,t,n,i){if(t){var o,a=n.$context,s=n.$groups;t[s._set]&&(o=t[s._set][s._key])&&!0===(0,r.C)(o,[a,i])&&(e[O]._dirty=!0,n.update(a))}}var M={id:"datalabels",defaults:{align:"center",anchor:"center",backgroundColor:null,borderColor:null,borderRadius:0,borderWidth:0,clamp:!1,clip:!1,color:void 0,display:!0,font:{family:void 0,lineHeight:1.2,size:void 0,style:void 0,weight:null},formatter:function(e){if((0,r.k)(e))return null;var t,n,i,o=e;if((0,r.i)(e))if((0,r.k)(e.label))if((0,r.k)(e.r))for(o="",i=0,n=(t=Object.keys(e)).length;i<n;++i)o+=(0!==i?", ":"")+t[i]+": "+e[t[i]];else o=e.r;else o=e.label;return""+o},labels:void 0,listeners:{},offset:4,opacity:1,padding:{top:4,right:4,bottom:4,left:4},rotation:0,textAlign:"start",textStrokeColor:void 0,textStrokeWidth:0,textShadowBlur:0,textShadowColor:void 0},beforeInit:function(e){e[O]={_actives:[]}},beforeUpdate:function(e){var t=e[O];t._listened=!1,t._listeners={},t._datasets=[],t._labels=[]},afterDatasetUpdate:function(e,t,n){var i,o,a,s,l,c,u,d,f=t.index,h=e[O],p=h._datasets[f]=[],g=e.isDatasetVisible(f),m=e.data.datasets[f],b=function(e,t){var n,i,o,a=e.datalabels,s=[];return!1===a?null:(!0===a&&(a={}),t=(0,r.V)({},[t,a]),i=t.labels||{},o=Object.keys(i),delete t.labels,o.length?o.forEach((function(e){i[e]&&s.push((0,r.V)({},[t,i[e],{_key:e}]))})):s.push(t),n=s.reduce((function(e,t){return(0,r.Q)(t.listeners||{},(function(n,r){e[r]=e[r]||{},e[r][t._key||P]=n})),delete t.listeners,e}),{}),{labels:s,listeners:n})}(m,n),y=t.meta.data||[],x=e.ctx;for(x.save(),i=0,a=y.length;i<a;++i)if((u=y[i])[O]=[],g&&u&&e.getDataVisibility(i)&&!u.skip)for(o=0,s=b.labels.length;o<s;++o)c=(l=b.labels[o])._key,(d=new v(l,x,u,i)).$groups={_set:f,_key:c||P},d.$context={active:!1,chart:e,dataIndex:i,dataset:m,datasetIndex:f},d.update(d.$context),u[O].push(d),p.push(d);x.restore(),(0,r.V)(h._listeners,b.listeners,{merger:function(e,n,r){n[e]=n[e]||{},n[e][t.index]=r[e],h._listened=!0}})},afterUpdate:function(e){e[O]._labels=S.prepare(e[O]._datasets)},afterDatasetsDraw:function(e){S.draw(e,e[O]._labels)},beforeEvent:function(e,t){if(e[O]._listened){var n=t.event;switch(n.type){case"mousemove":case"mouseout":!function(e,t){var n,r,i=e[O],o=i._listeners;if(o.enter||o.leave){if("mousemove"===t.type)r=S.lookup(i._labels,t);else if("mouseout"!==t.type)return;n=i._hovered,i._hovered=r,function(e,t,n,r,i){var o,a;(n||r)&&(n?r?n!==r&&(a=o=!0):a=!0:o=!0,a&&C(e,t.leave,n,i),o&&C(e,t.enter,r,i))}(e,o,n,r,t)}}(e,n);break;case"click":!function(e,t){var n=e[O],r=n._listeners.click,i=r&&S.lookup(n._labels,t);i&&C(e,r,i,t)}(e,n)}}},afterEvent:function(e){var t,n,r,i,o,a,s,l=e[O],c=function(e,t){var n,r,i,o,a=e.slice(),s=[];for(n=0,i=t.length;n<i;++n)o=t[n],-1===(r=a.indexOf(o))?s.push([o,1]):a.splice(r,1);for(n=0,i=a.length;n<i;++n)s.push([a[n],-1]);return s}(l._actives,l._actives=e.getActiveElements());for(t=0,n=c.length;t<n;++t)if((o=c[t])[1])for(r=0,i=(s=o[0].element[O]||[]).length;r<i;++r)(a=s[r]).$context.active=1===o[1],a.update(a.$context);(l._dirty||c.length)&&(S.update(l._labels),e.render()),delete l._dirty}}},5228:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,i){for(var o,a,s=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),l=1;l<arguments.length;l++){for(var c in o=Object(arguments[l]))n.call(o,c)&&(s[c]=o[c]);if(t){a=t(o);for(var u=0;u<a.length;u++)r.call(o,a[u])&&(s[a[u]]=o[a[u]])}}return s}},6734:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Bar:()=>v,Bubble:()=>w,Chart:()=>p,Doughnut:()=>y,Line:()=>m,Pie:()=>k,PolarArea:()=>x,Radar:()=>b,Scatter:()=>_,getDatasetAtEvent:()=>u,getElementAtEvent:()=>d,getElementsAtEvent:()=>f});var r=n(6540),i=n(7237);const o="label";function a(e,t){"function"==typeof e?e(t):e&&(e.current=t)}function s(e,t){e.labels=t}function l(e,t){let n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:o;const r=[];e.datasets=t.map((t=>{const i=e.datasets.find((e=>e[n]===t[n]));return i&&t.data&&!r.includes(i)?(r.push(i),Object.assign(i,t),i):{...t}}))}function c(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:o;const n={labels:[],datasets:[]};return s(n,e.labels),l(n,e.datasets,t),n}function u(e,t){return e.getElementsAtEventForMode(t.nativeEvent,"dataset",{intersect:!0},!1)}function d(e,t){return e.getElementsAtEventForMode(t.nativeEvent,"nearest",{intersect:!0},!1)}function f(e,t){return e.getElementsAtEventForMode(t.nativeEvent,"index",{intersect:!0},!1)}function h(e,t){let{height:n=150,width:o=300,redraw:u=!1,datasetIdKey:d,type:f,data:h,options:p,plugins:g=[],fallbackContent:m,updateMode:v,...b}=e;const y=(0,r.useRef)(null),x=(0,r.useRef)(),w=()=>{y.current&&(x.current=new i.Chart(y.current,{type:f,data:c(h,d),options:p&&{...p},plugins:g}),a(t,x.current))},k=()=>{a(t,null),x.current&&(x.current.destroy(),x.current=null)};return(0,r.useEffect)((()=>{var e,t;!u&&x.current&&p&&(e=x.current,t=p,Object.assign(e.options,t))}),[u,p]),(0,r.useEffect)((()=>{!u&&x.current&&s(x.current.config.data,h.labels)}),[u,h.labels]),(0,r.useEffect)((()=>{!u&&x.current&&h.datasets&&l(x.current.config.data,h.datasets,d)}),[u,h.datasets]),(0,r.useEffect)((()=>{x.current&&(u?(k(),setTimeout(w)):x.current.update(v))}),[u,p,h.labels,h.datasets,v]),(0,r.useEffect)((()=>{x.current&&(k(),setTimeout(w))}),[f]),(0,r.useEffect)((()=>(w(),()=>k())),[]),r.createElement("canvas",Object.assign({ref:y,role:"img",height:n,width:o},b),m)}const p=(0,r.forwardRef)(h);function g(e,t){return i.Chart.register(t),(0,r.forwardRef)(((t,n)=>r.createElement(p,Object.assign({},t,{ref:n,type:e}))))}const m=g("line",i.LineController),v=g("bar",i.BarController),b=g("radar",i.RadarController),y=g("doughnut",i.DoughnutController),x=g("polarArea",i.PolarAreaController),w=g("bubble",i.BubbleController),k=g("pie",i.PieController),_=g("scatter",i.ScatterController)},2551:(e,t,n)=>{"use strict";var r=n(6540),i=n(5228),o=n(9982);function a(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(a(227));var s=new Set,l={};function c(e,t){u(e,t),u(e+"Capture",t)}function u(e,t){for(l[e]=t,e=0;e<t.length;e++)s.add(t[e])}var d=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,h=Object.prototype.hasOwnProperty,p={},g={};function m(e,t,n,r,i,o,a){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=i,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=o,this.removeEmptyString=a}var v={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){v[e]=new m(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];v[t]=new m(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){v[e]=new m(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){v[e]=new m(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){v[e]=new m(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){v[e]=new m(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){v[e]=new m(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){v[e]=new m(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){v[e]=new m(e,5,!1,e.toLowerCase(),null,!1,!1)}));var b=/[\-:]([a-z])/g;function y(e){return e[1].toUpperCase()}function x(e,t,n,r){var i=v.hasOwnProperty(t)?v[t]:null;(null!==i?0===i.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,i,r)&&(n=null),r||null===i?function(e){return!!h.call(g,e)||!h.call(p,e)&&(f.test(e)?g[e]=!0:(p[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):i.mustUseProperty?e[i.propertyName]=null===n?3!==i.type&&"":n:(t=i.attributeName,r=i.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(i=i.type)||4===i&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(b,y);v[t]=new m(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(b,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(b,y);v[t]=new m(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!1,!1)})),v.xlinkHref=new m("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){v[e]=new m(e,1,!1,e.toLowerCase(),null,!0,!0)}));var w=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,_=60106,E=60107,S=60108,O=60114,P=60109,C=60110,M=60112,T=60113,N=60120,A=60115,R=60116,L=60121,D=60128,I=60129,j=60130,z=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),_=F("react.portal"),E=F("react.fragment"),S=F("react.strict_mode"),O=F("react.profiler"),P=F("react.provider"),C=F("react.context"),M=F("react.forward_ref"),T=F("react.suspense"),N=F("react.suspense_list"),A=F("react.memo"),R=F("react.lazy"),L=F("react.block"),F("react.scope"),D=F("react.opaque.id"),I=F("react.debug_trace_mode"),j=F("react.offscreen"),z=F("react.legacy_hidden")}var B,V="function"==typeof Symbol&&Symbol.iterator;function W(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=V&&e[V]||e["@@iterator"])?e:null}function H(e){if(void 0===B)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);B=t&&t[1]||""}return"\n"+B+e}var $=!1;function U(e,t){if(!e||$)return"";$=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var i=e.stack.split("\n"),o=r.stack.split("\n"),a=i.length-1,s=o.length-1;1<=a&&0<=s&&i[a]!==o[s];)s--;for(;1<=a&&0<=s;a--,s--)if(i[a]!==o[s]){if(1!==a||1!==s)do{if(a--,0>--s||i[a]!==o[s])return"\n"+i[a].replace(" at new "," at ")}while(1<=a&&0<=s);break}}}finally{$=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?H(e):""}function K(e){switch(e.tag){case 5:return H(e.type);case 16:return H("Lazy");case 13:return H("Suspense");case 19:return H("SuspenseList");case 0:case 2:case 15:return U(e.type,!1);case 11:return U(e.type.render,!1);case 22:return U(e.type._render,!1);case 1:return U(e.type,!0);default:return""}}function Y(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case E:return"Fragment";case _:return"Portal";case O:return"Profiler";case S:return"StrictMode";case T:return"Suspense";case N:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case C:return(e.displayName||"Context")+".Consumer";case P:return(e._context.displayName||"Context")+".Provider";case M:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case A:return Y(e.type);case L:return Y(e._render);case R:t=e._payload,e=e._init;try{return Y(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function Q(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function X(e){e._valueTracker||(e._valueTracker=function(e){var t=Q(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var i=n.get,o=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return i.call(this)},set:function(e){r=""+e,o.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function G(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=Q(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function J(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return i({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&x(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ie(e,t.type,n):t.hasOwnProperty("defaultValue")&&ie(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ie(e,t,n){"number"===t&&J(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function oe(e,t){return e=i({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function ae(e,t,n,r){if(e=e.options,t){t={};for(var i=0;i<n.length;i++)t["$"+n[i]]=!0;for(n=0;n<e.length;n++)i=t.hasOwnProperty("$"+e[n].value),e[n].selected!==i&&(e[n].selected=i),i&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,i=0;i<e.length;i++){if(e[i].value===n)return e[i].selected=!0,void(r&&(e[i].defaultSelected=!0));null!==t||e[i].disabled||(t=e[i])}null!==t&&(t.selected=!0)}}function se(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(a(91));return i({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function le(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(a(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(a(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function ce(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function ue(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var de="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function he(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var pe,ge,me=(ge=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((pe=pe||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=pe.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return ge(e,t)}))}:ge);function ve(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var be={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ye=["Webkit","ms","Moz","O"];function xe(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||be.hasOwnProperty(e)&&be[e]?(""+t).trim():t+"px"}function we(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),i=xe(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,i):e[n]=i}}Object.keys(be).forEach((function(e){ye.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),be[t]=be[e]}))}));var ke=i({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function _e(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(a(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(a(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(a(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(a(62))}}function Ee(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function Se(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var Oe=null,Pe=null,Ce=null;function Me(e){if(e=ni(e)){if("function"!=typeof Oe)throw Error(a(280));var t=e.stateNode;t&&(t=ii(t),Oe(e.stateNode,e.type,t))}}function Te(e){Pe?Ce?Ce.push(e):Ce=[e]:Pe=e}function Ne(){if(Pe){var e=Pe,t=Ce;if(Ce=Pe=null,Me(e),t)for(e=0;e<t.length;e++)Me(t[e])}}function Ae(e,t){return e(t)}function Re(e,t,n,r,i){return e(t,n,r,i)}function Le(){}var De=Ae,Ie=!1,je=!1;function ze(){null===Pe&&null===Ce||(Le(),Ne())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=ii(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(a(231,t,typeof n));return n}var Be=!1;if(d)try{var Ve={};Object.defineProperty(Ve,"passive",{get:function(){Be=!0}}),window.addEventListener("test",Ve,Ve),window.removeEventListener("test",Ve,Ve)}catch(ge){Be=!1}function We(e,t,n,r,i,o,a,s,l){var c=Array.prototype.slice.call(arguments,3);try{t.apply(n,c)}catch(e){this.onError(e)}}var He=!1,$e=null,Ue=!1,Ke=null,Ye={onError:function(e){He=!0,$e=e}};function qe(e,t,n,r,i,o,a,s,l){He=!1,$e=null,We.apply(Ye,arguments)}function Qe(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Xe(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Ge(e){if(Qe(e)!==e)throw Error(a(188))}function Je(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=Qe(e)))throw Error(a(188));return t!==e?null:e}for(var n=e,r=t;;){var i=n.return;if(null===i)break;var o=i.alternate;if(null===o){if(null!==(r=i.return)){n=r;continue}break}if(i.child===o.child){for(o=i.child;o;){if(o===n)return Ge(i),e;if(o===r)return Ge(i),t;o=o.sibling}throw Error(a(188))}if(n.return!==r.return)n=i,r=o;else{for(var s=!1,l=i.child;l;){if(l===n){s=!0,n=i,r=o;break}if(l===r){s=!0,r=i,n=o;break}l=l.sibling}if(!s){for(l=o.child;l;){if(l===n){s=!0,n=o,r=i;break}if(l===r){s=!0,r=o,n=i;break}l=l.sibling}if(!s)throw Error(a(189))}}if(n.alternate!==r)throw Error(a(190))}if(3!==n.tag)throw Error(a(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}function Ze(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var et,tt,nt,rt,it=!1,ot=[],at=null,st=null,lt=null,ct=new Map,ut=new Map,dt=[],ft="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ht(e,t,n,r,i){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:i,targetContainers:[r]}}function pt(e,t){switch(e){case"focusin":case"focusout":at=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":lt=null;break;case"pointerover":case"pointerout":ct.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":ut.delete(t.pointerId)}}function gt(e,t,n,r,i,o){return null===e||e.nativeEvent!==o?(e=ht(t,n,r,i,o),null!==t&&null!==(t=ni(t))&&tt(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==i&&-1===t.indexOf(i)&&t.push(i),e)}function mt(e){var t=ti(e.target);if(null!==t){var n=Qe(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Xe(n)))return e.blockedOn=t,void rt(e.lanePriority,(function(){o.unstable_runWithPriority(e.priority,(function(){nt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function vt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ni(n))&&tt(t),e.blockedOn=n,!1;t.shift()}return!0}function bt(e,t,n){vt(e)&&n.delete(t)}function yt(){for(it=!1;0<ot.length;){var e=ot[0];if(null!==e.blockedOn){null!==(e=ni(e.blockedOn))&&et(e);break}for(var t=e.targetContainers;0<t.length;){var n=Jt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&ot.shift()}null!==at&&vt(at)&&(at=null),null!==st&&vt(st)&&(st=null),null!==lt&&vt(lt)&&(lt=null),ct.forEach(bt),ut.forEach(bt)}function xt(e,t){e.blockedOn===t&&(e.blockedOn=null,it||(it=!0,o.unstable_scheduleCallback(o.unstable_NormalPriority,yt)))}function wt(e){function t(t){return xt(t,e)}if(0<ot.length){xt(ot[0],e);for(var n=1;n<ot.length;n++){var r=ot[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==at&&xt(at,e),null!==st&&xt(st,e),null!==lt&&xt(lt,e),ct.forEach(t),ut.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)mt(n),null===n.blockedOn&&dt.shift()}function kt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var _t={animationend:kt("Animation","AnimationEnd"),animationiteration:kt("Animation","AnimationIteration"),animationstart:kt("Animation","AnimationStart"),transitionend:kt("Transition","TransitionEnd")},Et={},St={};function Ot(e){if(Et[e])return Et[e];if(!_t[e])return e;var t,n=_t[e];for(t in n)if(n.hasOwnProperty(t)&&t in St)return Et[e]=n[t];return e}d&&(St=document.createElement("div").style,"AnimationEvent"in window||(delete _t.animationend.animation,delete _t.animationiteration.animation,delete _t.animationstart.animation),"TransitionEvent"in window||delete _t.transitionend.transition);var Pt=Ot("animationend"),Ct=Ot("animationiteration"),Mt=Ot("animationstart"),Tt=Ot("transitionend"),Nt=new Map,At=new Map,Rt=["abort","abort",Pt,"animationEnd",Ct,"animationIteration",Mt,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",Tt,"transitionEnd","waiting","waiting"];function Lt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],i=e[n+1];i="on"+(i[0].toUpperCase()+i.slice(1)),At.set(r,t),Nt.set(r,i),c(i,[r])}}(0,o.unstable_now)();var Dt=8;function It(e){if(1&e)return Dt=15,1;if(2&e)return Dt=14,2;if(4&e)return Dt=13,4;var t=24&e;return 0!==t?(Dt=12,t):32&e?(Dt=11,32):0!=(t=192&e)?(Dt=10,t):256&e?(Dt=9,256):0!=(t=3584&e)?(Dt=8,t):4096&e?(Dt=7,4096):0!=(t=4186112&e)?(Dt=6,t):0!=(t=62914560&e)?(Dt=5,t):67108864&e?(Dt=4,67108864):134217728&e?(Dt=3,134217728):0!=(t=805306368&e)?(Dt=2,t):1073741824&e?(Dt=1,1073741824):(Dt=8,e)}function jt(e,t){var n=e.pendingLanes;if(0===n)return Dt=0;var r=0,i=0,o=e.expiredLanes,a=e.suspendedLanes,s=e.pingedLanes;if(0!==o)r=o,i=Dt=15;else if(0!=(o=134217727&n)){var l=o&~a;0!==l?(r=It(l),i=Dt):0!=(s&=o)&&(r=It(s),i=Dt)}else 0!=(o=n&~a)?(r=It(o),i=Dt):0!==s&&(r=It(s),i=Dt);if(0===r)return 0;if(r=n&((0>(r=31-Ht(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&!(t&a)){if(It(t),i<=Dt)return t;Dt=i}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)i=1<<(n=31-Ht(t)),r|=e[n],t&=~i;return r}function zt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Ft(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Bt(24&~t))?Ft(10,t):e;case 10:return 0===(e=Bt(192&~t))?Ft(8,t):e;case 8:return 0===(e=Bt(3584&~t))&&0===(e=Bt(4186112&~t))&&(e=512),e;case 2:return 0===(t=Bt(805306368&~t))&&(t=268435456),t}throw Error(a(358,e))}function Bt(e){return e&-e}function Vt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Wt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-Ht(t)]=n}var Ht=Math.clz32?Math.clz32:function(e){return 0===e?32:31-($t(e)/Ut|0)|0},$t=Math.log,Ut=Math.LN2,Kt=o.unstable_UserBlockingPriority,Yt=o.unstable_runWithPriority,qt=!0;function Qt(e,t,n,r){Ie||Le();var i=Gt,o=Ie;Ie=!0;try{Re(i,e,t,n,r)}finally{(Ie=o)||ze()}}function Xt(e,t,n,r){Yt(Kt,Gt.bind(null,e,t,n,r))}function Gt(e,t,n,r){var i;if(qt)if((i=!(4&t))&&0<ot.length&&-1<ft.indexOf(e))e=ht(null,e,t,n,r),ot.push(e);else{var o=Jt(e,t,n,r);if(null===o)i&&pt(e,r);else{if(i){if(-1<ft.indexOf(e))return e=ht(o,e,t,n,r),void ot.push(e);if(function(e,t,n,r,i){switch(t){case"focusin":return at=gt(at,e,t,n,r,i),!0;case"dragenter":return st=gt(st,e,t,n,r,i),!0;case"mouseover":return lt=gt(lt,e,t,n,r,i),!0;case"pointerover":var o=i.pointerId;return ct.set(o,gt(ct.get(o)||null,e,t,n,r,i)),!0;case"gotpointercapture":return o=i.pointerId,ut.set(o,gt(ut.get(o)||null,e,t,n,r,i)),!0}return!1}(o,e,t,n,r))return;pt(e,r)}Lr(e,t,r,null,n)}}}function Jt(e,t,n,r){var i=Se(r);if(null!==(i=ti(i))){var o=Qe(i);if(null===o)i=null;else{var a=o.tag;if(13===a){if(null!==(i=Xe(o)))return i;i=null}else if(3===a){if(o.stateNode.hydrate)return 3===o.tag?o.stateNode.containerInfo:null;i=null}else o!==i&&(i=null)}}return Lr(e,t,r,i,n),null}var Zt=null,en=null,tn=null;function nn(){if(tn)return tn;var e,t,n=en,r=n.length,i="value"in Zt?Zt.value:Zt.textContent,o=i.length;for(e=0;e<r&&n[e]===i[e];e++);var a=r-e;for(t=1;t<=a&&n[r-t]===i[o-t];t++);return tn=i.slice(e,1<t?1-t:void 0)}function rn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function on(){return!0}function an(){return!1}function sn(e){function t(t,n,r,i,o){for(var a in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=i,this.target=o,this.currentTarget=null,e)e.hasOwnProperty(a)&&(t=e[a],this[a]=t?t(i):i[a]);return this.isDefaultPrevented=(null!=i.defaultPrevented?i.defaultPrevented:!1===i.returnValue)?on:an,this.isPropagationStopped=an,this}return i(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=on)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=on)},persist:function(){},isPersistent:on}),t}var ln,cn,un,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},fn=sn(dn),hn=i({},dn,{view:0,detail:0}),pn=sn(hn),gn=i({},hn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Pn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==un&&(un&&"mousemove"===e.type?(ln=e.screenX-un.screenX,cn=e.screenY-un.screenY):cn=ln=0,un=e),ln)},movementY:function(e){return"movementY"in e?e.movementY:cn}}),mn=sn(gn),vn=sn(i({},gn,{dataTransfer:0})),bn=sn(i({},hn,{relatedTarget:0})),yn=sn(i({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),xn=i({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),wn=sn(xn),kn=sn(i({},dn,{data:0})),_n={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},En={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Sn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function On(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Sn[e])&&!!t[e]}function Pn(){return On}var Cn=i({},hn,{key:function(e){if(e.key){var t=_n[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=rn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?En[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Pn,charCode:function(e){return"keypress"===e.type?rn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?rn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Mn=sn(Cn),Tn=sn(i({},gn,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),Nn=sn(i({},hn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Pn})),An=sn(i({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),Rn=i({},gn,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Ln=sn(Rn),Dn=[9,13,27,32],In=d&&"CompositionEvent"in window,jn=null;d&&"documentMode"in document&&(jn=document.documentMode);var zn=d&&"TextEvent"in window&&!jn,Fn=d&&(!In||jn&&8<jn&&11>=jn),Bn=String.fromCharCode(32),Vn=!1;function Wn(e,t){switch(e){case"keyup":return-1!==Dn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function Hn(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var $n=!1,Un={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Kn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Un[e.type]:"textarea"===t}function Yn(e,t,n,r){Te(r),0<(t=Ir(t,"onChange")).length&&(n=new fn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var qn=null,Qn=null;function Xn(e){Cr(e,0)}function Gn(e){if(G(ri(e)))return e}function Jn(e,t){if("change"===e)return t}var Zn=!1;if(d){var er;if(d){var tr="oninput"in document;if(!tr){var nr=document.createElement("div");nr.setAttribute("oninput","return;"),tr="function"==typeof nr.oninput}er=tr}else er=!1;Zn=er&&(!document.documentMode||9<document.documentMode)}function rr(){qn&&(qn.detachEvent("onpropertychange",ir),Qn=qn=null)}function ir(e){if("value"===e.propertyName&&Gn(Qn)){var t=[];if(Yn(t,Qn,e,Se(e)),e=Xn,Ie)e(t);else{Ie=!0;try{Ae(e,t)}finally{Ie=!1,ze()}}}}function or(e,t,n){"focusin"===e?(rr(),Qn=n,(qn=t).attachEvent("onpropertychange",ir)):"focusout"===e&&rr()}function ar(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Gn(Qn)}function sr(e,t){if("click"===e)return Gn(t)}function lr(e,t){if("input"===e||"change"===e)return Gn(t)}var cr="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},ur=Object.prototype.hasOwnProperty;function dr(e,t){if(cr(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!ur.call(t,n[r])||!cr(e[n[r]],t[n[r]]))return!1;return!0}function fr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function hr(e,t){var n,r=fr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=fr(r)}}function pr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?pr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function gr(){for(var e=window,t=J();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=J((e=t.contentWindow).document)}return t}function mr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var vr=d&&"documentMode"in document&&11>=document.documentMode,br=null,yr=null,xr=null,wr=!1;function kr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;wr||null==br||br!==J(r)||(r="selectionStart"in(r=br)&&mr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},xr&&dr(xr,r)||(xr=r,0<(r=Ir(yr,"onSelect")).length&&(t=new fn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=br)))}Lt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Lt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Lt(Rt,2);for(var _r="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),Er=0;Er<_r.length;Er++)At.set(_r[Er],0);u("onMouseEnter",["mouseout","mouseover"]),u("onMouseLeave",["mouseout","mouseover"]),u("onPointerEnter",["pointerout","pointerover"]),u("onPointerLeave",["pointerout","pointerover"]),c("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),c("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),c("onBeforeInput",["compositionend","keypress","textInput","paste"]),c("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),c("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Sr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),Or=new Set("cancel close invalid load scroll toggle".split(" ").concat(Sr));function Pr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,i,o,s,l,c){if(qe.apply(this,arguments),He){if(!He)throw Error(a(198));var u=$e;He=!1,$e=null,Ue||(Ue=!0,Ke=u)}}(r,t,void 0,e),e.currentTarget=null}function Cr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],i=r.event;r=r.listeners;e:{var o=void 0;if(t)for(var a=r.length-1;0<=a;a--){var s=r[a],l=s.instance,c=s.currentTarget;if(s=s.listener,l!==o&&i.isPropagationStopped())break e;Pr(i,s,c),o=l}else for(a=0;a<r.length;a++){if(l=(s=r[a]).instance,c=s.currentTarget,s=s.listener,l!==o&&i.isPropagationStopped())break e;Pr(i,s,c),o=l}}}if(Ue)throw e=Ke,Ue=!1,Ke=null,e}function Mr(e,t){var n=oi(t),r=e+"__bubble";n.has(r)||(Rr(t,e,2,!1),n.add(r))}var Tr="_reactListening"+Math.random().toString(36).slice(2);function Nr(e){e[Tr]||(e[Tr]=!0,s.forEach((function(t){Or.has(t)||Ar(t,!1,e,null),Ar(t,!0,e,null)})))}function Ar(e,t,n,r){var i=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,o=n;if("selectionchange"===e&&9!==n.nodeType&&(o=n.ownerDocument),null!==r&&!t&&Or.has(e)){if("scroll"!==e)return;i|=2,o=r}var a=oi(o),s=e+"__"+(t?"capture":"bubble");a.has(s)||(t&&(i|=4),Rr(o,e,i,t),a.add(s))}function Rr(e,t,n,r){var i=At.get(t);switch(void 0===i?2:i){case 0:i=Qt;break;case 1:i=Xt;break;default:i=Gt}n=i.bind(null,t,n,e),i=void 0,!Be||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(i=!0),r?void 0!==i?e.addEventListener(t,n,{capture:!0,passive:i}):e.addEventListener(t,n,!0):void 0!==i?e.addEventListener(t,n,{passive:i}):e.addEventListener(t,n,!1)}function Lr(e,t,n,r,i){var o=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var a=r.tag;if(3===a||4===a){var s=r.stateNode.containerInfo;if(s===i||8===s.nodeType&&s.parentNode===i)break;if(4===a)for(a=r.return;null!==a;){var l=a.tag;if((3===l||4===l)&&((l=a.stateNode.containerInfo)===i||8===l.nodeType&&l.parentNode===i))return;a=a.return}for(;null!==s;){if(null===(a=ti(s)))return;if(5===(l=a.tag)||6===l){r=o=a;continue e}s=s.parentNode}}r=r.return}!function(e,t,n){if(je)return e();je=!0;try{return De(e,t,n)}finally{je=!1,ze()}}((function(){var r=o,i=Se(n),a=[];e:{var s=Nt.get(e);if(void 0!==s){var l=fn,c=e;switch(e){case"keypress":if(0===rn(n))break e;case"keydown":case"keyup":l=Mn;break;case"focusin":c="focus",l=bn;break;case"focusout":c="blur",l=bn;break;case"beforeblur":case"afterblur":l=bn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":l=mn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":l=vn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":l=Nn;break;case Pt:case Ct:case Mt:l=yn;break;case Tt:l=An;break;case"scroll":l=pn;break;case"wheel":l=Ln;break;case"copy":case"cut":case"paste":l=wn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":l=Tn}var u=!!(4&t),d=!u&&"scroll"===e,f=u?null!==s?s+"Capture":null:s;u=[];for(var h,p=r;null!==p;){var g=(h=p).stateNode;if(5===h.tag&&null!==g&&(h=g,null!==f&&null!=(g=Fe(p,f))&&u.push(Dr(p,g,h))),d)break;p=p.return}0<u.length&&(s=new l(s,c,null,n,i),a.push({event:s,listeners:u}))}}if(!(7&t)){if(l="mouseout"===e||"pointerout"===e,(!(s="mouseover"===e||"pointerover"===e)||16&t||!(c=n.relatedTarget||n.fromElement)||!ti(c)&&!c[Zr])&&(l||s)&&(s=i.window===i?i:(s=i.ownerDocument)?s.defaultView||s.parentWindow:window,l?(l=r,null!==(c=(c=n.relatedTarget||n.toElement)?ti(c):null)&&(c!==(d=Qe(c))||5!==c.tag&&6!==c.tag)&&(c=null)):(l=null,c=r),l!==c)){if(u=mn,g="onMouseLeave",f="onMouseEnter",p="mouse","pointerout"!==e&&"pointerover"!==e||(u=Tn,g="onPointerLeave",f="onPointerEnter",p="pointer"),d=null==l?s:ri(l),h=null==c?s:ri(c),(s=new u(g,p+"leave",l,n,i)).target=d,s.relatedTarget=h,g=null,ti(i)===r&&((u=new u(f,p+"enter",c,n,i)).target=h,u.relatedTarget=d,g=u),d=g,l&&c)e:{for(f=c,p=0,h=u=l;h;h=jr(h))p++;for(h=0,g=f;g;g=jr(g))h++;for(;0<p-h;)u=jr(u),p--;for(;0<h-p;)f=jr(f),h--;for(;p--;){if(u===f||null!==f&&u===f.alternate)break e;u=jr(u),f=jr(f)}u=null}else u=null;null!==l&&zr(a,s,l,u,!1),null!==c&&null!==d&&zr(a,d,c,u,!0)}if("select"===(l=(s=r?ri(r):window).nodeName&&s.nodeName.toLowerCase())||"input"===l&&"file"===s.type)var m=Jn;else if(Kn(s))if(Zn)m=lr;else{m=ar;var v=or}else(l=s.nodeName)&&"input"===l.toLowerCase()&&("checkbox"===s.type||"radio"===s.type)&&(m=sr);switch(m&&(m=m(e,r))?Yn(a,m,n,i):(v&&v(e,s,r),"focusout"===e&&(v=s._wrapperState)&&v.controlled&&"number"===s.type&&ie(s,"number",s.value)),v=r?ri(r):window,e){case"focusin":(Kn(v)||"true"===v.contentEditable)&&(br=v,yr=r,xr=null);break;case"focusout":xr=yr=br=null;break;case"mousedown":wr=!0;break;case"contextmenu":case"mouseup":case"dragend":wr=!1,kr(a,n,i);break;case"selectionchange":if(vr)break;case"keydown":case"keyup":kr(a,n,i)}var b;if(In)e:{switch(e){case"compositionstart":var y="onCompositionStart";break e;case"compositionend":y="onCompositionEnd";break e;case"compositionupdate":y="onCompositionUpdate";break e}y=void 0}else $n?Wn(e,n)&&(y="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(y="onCompositionStart");y&&(Fn&&"ko"!==n.locale&&($n||"onCompositionStart"!==y?"onCompositionEnd"===y&&$n&&(b=nn()):(en="value"in(Zt=i)?Zt.value:Zt.textContent,$n=!0)),0<(v=Ir(r,y)).length&&(y=new kn(y,e,null,n,i),a.push({event:y,listeners:v}),(b||null!==(b=Hn(n)))&&(y.data=b))),(b=zn?function(e,t){switch(e){case"compositionend":return Hn(t);case"keypress":return 32!==t.which?null:(Vn=!0,Bn);case"textInput":return(e=t.data)===Bn&&Vn?null:e;default:return null}}(e,n):function(e,t){if($n)return"compositionend"===e||!In&&Wn(e,t)?(e=nn(),tn=en=Zt=null,$n=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Fn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Ir(r,"onBeforeInput")).length&&(i=new kn("onBeforeInput","beforeinput",null,n,i),a.push({event:i,listeners:r}),i.data=b)}Cr(a,t)}))}function Dr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Ir(e,t){for(var n=t+"Capture",r=[];null!==e;){var i=e,o=i.stateNode;5===i.tag&&null!==o&&(i=o,null!=(o=Fe(e,n))&&r.unshift(Dr(e,o,i)),null!=(o=Fe(e,t))&&r.push(Dr(e,o,i))),e=e.return}return r}function jr(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function zr(e,t,n,r,i){for(var o=t._reactName,a=[];null!==n&&n!==r;){var s=n,l=s.alternate,c=s.stateNode;if(null!==l&&l===r)break;5===s.tag&&null!==c&&(s=c,i?null!=(l=Fe(n,o))&&a.unshift(Dr(n,l,s)):i||null!=(l=Fe(n,o))&&a.push(Dr(n,l,s))),n=n.return}0!==a.length&&e.push({event:t,listeners:a})}function Fr(){}var Br=null,Vr=null;function Wr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Hr(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var $r="function"==typeof setTimeout?setTimeout:void 0,Ur="function"==typeof clearTimeout?clearTimeout:void 0;function Kr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Yr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function qr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var Qr=0,Xr=Math.random().toString(36).slice(2),Gr="__reactFiber$"+Xr,Jr="__reactProps$"+Xr,Zr="__reactContainer$"+Xr,ei="__reactEvents$"+Xr;function ti(e){var t=e[Gr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Zr]||n[Gr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=qr(e);null!==e;){if(n=e[Gr])return n;e=qr(e)}return t}n=(e=n).parentNode}return null}function ni(e){return!(e=e[Gr]||e[Zr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function ri(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(a(33))}function ii(e){return e[Jr]||null}function oi(e){var t=e[ei];return void 0===t&&(t=e[ei]=new Set),t}var ai=[],si=-1;function li(e){return{current:e}}function ci(e){0>si||(e.current=ai[si],ai[si]=null,si--)}function ui(e,t){si++,ai[si]=e.current,e.current=t}var di={},fi=li(di),hi=li(!1),pi=di;function gi(e,t){var n=e.type.contextTypes;if(!n)return di;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var i,o={};for(i in n)o[i]=t[i];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=o),o}function mi(e){return null!=e.childContextTypes}function vi(){ci(hi),ci(fi)}function bi(e,t,n){if(fi.current!==di)throw Error(a(168));ui(fi,t),ui(hi,n)}function yi(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var o in r=r.getChildContext())if(!(o in e))throw Error(a(108,Y(t)||"Unknown",o));return i({},n,r)}function xi(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||di,pi=fi.current,ui(fi,e),ui(hi,hi.current),!0}function wi(e,t,n){var r=e.stateNode;if(!r)throw Error(a(169));n?(e=yi(e,t,pi),r.__reactInternalMemoizedMergedChildContext=e,ci(hi),ci(fi),ui(fi,e)):ci(hi),ui(hi,n)}var ki=null,_i=null,Ei=o.unstable_runWithPriority,Si=o.unstable_scheduleCallback,Oi=o.unstable_cancelCallback,Pi=o.unstable_shouldYield,Ci=o.unstable_requestPaint,Mi=o.unstable_now,Ti=o.unstable_getCurrentPriorityLevel,Ni=o.unstable_ImmediatePriority,Ai=o.unstable_UserBlockingPriority,Ri=o.unstable_NormalPriority,Li=o.unstable_LowPriority,Di=o.unstable_IdlePriority,Ii={},ji=void 0!==Ci?Ci:function(){},zi=null,Fi=null,Bi=!1,Vi=Mi(),Wi=1e4>Vi?Mi:function(){return Mi()-Vi};function Hi(){switch(Ti()){case Ni:return 99;case Ai:return 98;case Ri:return 97;case Li:return 96;case Di:return 95;default:throw Error(a(332))}}function $i(e){switch(e){case 99:return Ni;case 98:return Ai;case 97:return Ri;case 96:return Li;case 95:return Di;default:throw Error(a(332))}}function Ui(e,t){return e=$i(e),Ei(e,t)}function Ki(e,t,n){return e=$i(e),Si(e,t,n)}function Yi(){if(null!==Fi){var e=Fi;Fi=null,Oi(e)}qi()}function qi(){if(!Bi&&null!==zi){Bi=!0;var e=0;try{var t=zi;Ui(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),zi=null}catch(t){throw null!==zi&&(zi=zi.slice(e+1)),Si(Ni,Yi),t}finally{Bi=!1}}}var Qi=w.ReactCurrentBatchConfig;function Xi(e,t){if(e&&e.defaultProps){for(var n in t=i({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Gi=li(null),Ji=null,Zi=null,eo=null;function to(){eo=Zi=Ji=null}function no(e){var t=Gi.current;ci(Gi),e.type._context._currentValue=t}function ro(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function io(e,t){Ji=e,eo=Zi=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(Ia=!0),e.firstContext=null)}function oo(e,t){if(eo!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(eo=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Zi){if(null===Ji)throw Error(a(308));Zi=t,Ji.dependencies={lanes:0,firstContext:t,responders:null}}else Zi=Zi.next=t;return e._currentValue}var ao=!1;function so(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function lo(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function co(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function uo(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function fo(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var i=null,o=null;if(null!==(n=n.firstBaseUpdate)){do{var a={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===o?i=o=a:o=o.next=a,n=n.next}while(null!==n);null===o?i=o=t:o=o.next=t}else i=o=t;return n={baseState:r.baseState,firstBaseUpdate:i,lastBaseUpdate:o,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ho(e,t,n,r){var o=e.updateQueue;ao=!1;var a=o.firstBaseUpdate,s=o.lastBaseUpdate,l=o.shared.pending;if(null!==l){o.shared.pending=null;var c=l,u=c.next;c.next=null,null===s?a=u:s.next=u,s=c;var d=e.alternate;if(null!==d){var f=(d=d.updateQueue).lastBaseUpdate;f!==s&&(null===f?d.firstBaseUpdate=u:f.next=u,d.lastBaseUpdate=c)}}if(null!==a){for(f=o.baseState,s=0,d=u=c=null;;){l=a.lane;var h=a.eventTime;if((r&l)===l){null!==d&&(d=d.next={eventTime:h,lane:0,tag:a.tag,payload:a.payload,callback:a.callback,next:null});e:{var p=e,g=a;switch(l=t,h=n,g.tag){case 1:if("function"==typeof(p=g.payload)){f=p.call(h,f,l);break e}f=p;break e;case 3:p.flags=-4097&p.flags|64;case 0:if(null==(l="function"==typeof(p=g.payload)?p.call(h,f,l):p))break e;f=i({},f,l);break e;case 2:ao=!0}}null!==a.callback&&(e.flags|=32,null===(l=o.effects)?o.effects=[a]:l.push(a))}else h={eventTime:h,lane:l,tag:a.tag,payload:a.payload,callback:a.callback,next:null},null===d?(u=d=h,c=f):d=d.next=h,s|=l;if(null===(a=a.next)){if(null===(l=o.shared.pending))break;a=l.next,l.next=null,o.lastBaseUpdate=l,o.shared.pending=null}}null===d&&(c=f),o.baseState=c,o.firstBaseUpdate=u,o.lastBaseUpdate=d,Fs|=s,e.lanes=s,e.memoizedState=f}}function po(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],i=r.callback;if(null!==i){if(r.callback=null,r=n,"function"!=typeof i)throw Error(a(191,i));i.call(r)}}}var go=(new r.Component).refs;function mo(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:i({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var vo={isMounted:function(e){return!!(e=e._reactInternals)&&Qe(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=ul(),i=dl(e),o=co(r,i);o.payload=t,null!=n&&(o.callback=n),uo(e,o),fl(e,i,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=ul(),i=dl(e),o=co(r,i);o.tag=1,o.payload=t,null!=n&&(o.callback=n),uo(e,o),fl(e,i,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=ul(),r=dl(e),i=co(n,r);i.tag=2,null!=t&&(i.callback=t),uo(e,i),fl(e,r,n)}};function bo(e,t,n,r,i,o,a){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,o,a):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(i,o))}function yo(e,t,n){var r=!1,i=di,o=t.contextType;return"object"==typeof o&&null!==o?o=oo(o):(i=mi(t)?pi:fi.current,o=(r=null!=(r=t.contextTypes))?gi(e,i):di),t=new t(n,o),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=vo,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=i,e.__reactInternalMemoizedMaskedChildContext=o),t}function xo(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&vo.enqueueReplaceState(t,t.state,null)}function wo(e,t,n,r){var i=e.stateNode;i.props=n,i.state=e.memoizedState,i.refs=go,so(e);var o=t.contextType;"object"==typeof o&&null!==o?i.context=oo(o):(o=mi(t)?pi:fi.current,i.context=gi(e,o)),ho(e,n,i,r),i.state=e.memoizedState,"function"==typeof(o=t.getDerivedStateFromProps)&&(mo(e,t,o,n),i.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof i.getSnapshotBeforeUpdate||"function"!=typeof i.UNSAFE_componentWillMount&&"function"!=typeof i.componentWillMount||(t=i.state,"function"==typeof i.componentWillMount&&i.componentWillMount(),"function"==typeof i.UNSAFE_componentWillMount&&i.UNSAFE_componentWillMount(),t!==i.state&&vo.enqueueReplaceState(i,i.state,null),ho(e,n,i,r),i.state=e.memoizedState),"function"==typeof i.componentDidMount&&(e.flags|=4)}var ko=Array.isArray;function _o(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(a(309));var r=n.stateNode}if(!r)throw Error(a(147,e));var i=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===i?t.ref:(t=function(e){var t=r.refs;t===go&&(t=r.refs={}),null===e?delete t[i]:t[i]=e},t._stringRef=i,t)}if("string"!=typeof e)throw Error(a(284));if(!n._owner)throw Error(a(290,e))}return e}function Eo(e,t){if("textarea"!==e.type)throw Error(a(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function So(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function i(e,t){return(e=$l(e,t)).index=0,e.sibling=null,e}function o(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function s(t){return e&&null===t.alternate&&(t.flags=2),t}function l(e,t,n,r){return null===t||6!==t.tag?((t=ql(n,e.mode,r)).return=e,t):((t=i(t,n)).return=e,t)}function c(e,t,n,r){return null!==t&&t.elementType===n.type?((r=i(t,n.props)).ref=_o(e,t,n),r.return=e,r):((r=Ul(n.type,n.key,n.props,null,e.mode,r)).ref=_o(e,t,n),r.return=e,r)}function u(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ql(n,e.mode,r)).return=e,t):((t=i(t,n.children||[])).return=e,t)}function d(e,t,n,r,o){return null===t||7!==t.tag?((t=Kl(n,e.mode,r,o)).return=e,t):((t=i(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=ql(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Ul(t.type,t.key,t.props,null,e.mode,n)).ref=_o(e,null,t),n.return=e,n;case _:return(t=Ql(t,e.mode,n)).return=e,t}if(ko(t)||W(t))return(t=Kl(t,e.mode,n,null)).return=e,t;Eo(e,t)}return null}function h(e,t,n,r){var i=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==i?null:l(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===i?n.type===E?d(e,t,n.props.children,r,i):c(e,t,n,r):null;case _:return n.key===i?u(e,t,n,r):null}if(ko(n)||W(n))return null!==i?null:d(e,t,n,r,null);Eo(e,n)}return null}function p(e,t,n,r,i){if("string"==typeof r||"number"==typeof r)return l(t,e=e.get(n)||null,""+r,i);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===E?d(t,e,r.props.children,i,r.key):c(t,e,r,i);case _:return u(t,e=e.get(null===r.key?n:r.key)||null,r,i)}if(ko(r)||W(r))return d(t,e=e.get(n)||null,r,i,null);Eo(t,r)}return null}function g(i,a,s,l){for(var c=null,u=null,d=a,g=a=0,m=null;null!==d&&g<s.length;g++){d.index>g?(m=d,d=null):m=d.sibling;var v=h(i,d,s[g],l);if(null===v){null===d&&(d=m);break}e&&d&&null===v.alternate&&t(i,d),a=o(v,a,g),null===u?c=v:u.sibling=v,u=v,d=m}if(g===s.length)return n(i,d),c;if(null===d){for(;g<s.length;g++)null!==(d=f(i,s[g],l))&&(a=o(d,a,g),null===u?c=d:u.sibling=d,u=d);return c}for(d=r(i,d);g<s.length;g++)null!==(m=p(d,i,g,s[g],l))&&(e&&null!==m.alternate&&d.delete(null===m.key?g:m.key),a=o(m,a,g),null===u?c=m:u.sibling=m,u=m);return e&&d.forEach((function(e){return t(i,e)})),c}function m(i,s,l,c){var u=W(l);if("function"!=typeof u)throw Error(a(150));if(null==(l=u.call(l)))throw Error(a(151));for(var d=u=null,g=s,m=s=0,v=null,b=l.next();null!==g&&!b.done;m++,b=l.next()){g.index>m?(v=g,g=null):v=g.sibling;var y=h(i,g,b.value,c);if(null===y){null===g&&(g=v);break}e&&g&&null===y.alternate&&t(i,g),s=o(y,s,m),null===d?u=y:d.sibling=y,d=y,g=v}if(b.done)return n(i,g),u;if(null===g){for(;!b.done;m++,b=l.next())null!==(b=f(i,b.value,c))&&(s=o(b,s,m),null===d?u=b:d.sibling=b,d=b);return u}for(g=r(i,g);!b.done;m++,b=l.next())null!==(b=p(g,i,m,b.value,c))&&(e&&null!==b.alternate&&g.delete(null===b.key?m:b.key),s=o(b,s,m),null===d?u=b:d.sibling=b,d=b);return e&&g.forEach((function(e){return t(i,e)})),u}return function(e,r,o,l){var c="object"==typeof o&&null!==o&&o.type===E&&null===o.key;c&&(o=o.props.children);var u="object"==typeof o&&null!==o;if(u)switch(o.$$typeof){case k:e:{for(u=o.key,c=r;null!==c;){if(c.key===u){if(7===c.tag){if(o.type===E){n(e,c.sibling),(r=i(c,o.props.children)).return=e,e=r;break e}}else if(c.elementType===o.type){n(e,c.sibling),(r=i(c,o.props)).ref=_o(e,c,o),r.return=e,e=r;break e}n(e,c);break}t(e,c),c=c.sibling}o.type===E?((r=Kl(o.props.children,e.mode,l,o.key)).return=e,e=r):((l=Ul(o.type,o.key,o.props,null,e.mode,l)).ref=_o(e,r,o),l.return=e,e=l)}return s(e);case _:e:{for(c=o.key;null!==r;){if(r.key===c){if(4===r.tag&&r.stateNode.containerInfo===o.containerInfo&&r.stateNode.implementation===o.implementation){n(e,r.sibling),(r=i(r,o.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ql(o,e.mode,l)).return=e,e=r}return s(e)}if("string"==typeof o||"number"==typeof o)return o=""+o,null!==r&&6===r.tag?(n(e,r.sibling),(r=i(r,o)).return=e,e=r):(n(e,r),(r=ql(o,e.mode,l)).return=e,e=r),s(e);if(ko(o))return g(e,r,o,l);if(W(o))return m(e,r,o,l);if(u&&Eo(e,o),void 0===o&&!c)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(a(152,Y(e.type)||"Component"))}return n(e,r)}}var Oo=So(!0),Po=So(!1),Co={},Mo=li(Co),To=li(Co),No=li(Co);function Ao(e){if(e===Co)throw Error(a(174));return e}function Ro(e,t){switch(ui(No,t),ui(To,e),ui(Mo,Co),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:he(null,"");break;default:t=he(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ci(Mo),ui(Mo,t)}function Lo(){ci(Mo),ci(To),ci(No)}function Do(e){Ao(No.current);var t=Ao(Mo.current),n=he(t,e.type);t!==n&&(ui(To,e),ui(Mo,n))}function Io(e){To.current===e&&(ci(Mo),ci(To))}var jo=li(0);function zo(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(64&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Fo=null,Bo=null,Vo=!1;function Wo(e,t){var n=Wl(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Ho(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function $o(e){if(Vo){var t=Bo;if(t){var n=t;if(!Ho(e,t)){if(!(t=Yr(n.nextSibling))||!Ho(e,t))return e.flags=-1025&e.flags|2,Vo=!1,void(Fo=e);Wo(Fo,n)}Fo=e,Bo=Yr(t.firstChild)}else e.flags=-1025&e.flags|2,Vo=!1,Fo=e}}function Uo(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Fo=e}function Ko(e){if(e!==Fo)return!1;if(!Vo)return Uo(e),Vo=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Hr(t,e.memoizedProps))for(t=Bo;t;)Wo(e,t),t=Yr(t.nextSibling);if(Uo(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(a(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Bo=Yr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Bo=null}}else Bo=Fo?Yr(e.stateNode.nextSibling):null;return!0}function Yo(){Bo=Fo=null,Vo=!1}var qo=[];function Qo(){for(var e=0;e<qo.length;e++)qo[e]._workInProgressVersionPrimary=null;qo.length=0}var Xo=w.ReactCurrentDispatcher,Go=w.ReactCurrentBatchConfig,Jo=0,Zo=null,ea=null,ta=null,na=!1,ra=!1;function ia(){throw Error(a(321))}function oa(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!cr(e[n],t[n]))return!1;return!0}function aa(e,t,n,r,i,o){if(Jo=o,Zo=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,Xo.current=null===e||null===e.memoizedState?Aa:Ra,e=n(r,i),ra){o=0;do{if(ra=!1,!(25>o))throw Error(a(301));o+=1,ta=ea=null,t.updateQueue=null,Xo.current=La,e=n(r,i)}while(ra)}if(Xo.current=Na,t=null!==ea&&null!==ea.next,Jo=0,ta=ea=Zo=null,na=!1,t)throw Error(a(300));return e}function sa(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===ta?Zo.memoizedState=ta=e:ta=ta.next=e,ta}function la(){if(null===ea){var e=Zo.alternate;e=null!==e?e.memoizedState:null}else e=ea.next;var t=null===ta?Zo.memoizedState:ta.next;if(null!==t)ta=t,ea=e;else{if(null===e)throw Error(a(310));e={memoizedState:(ea=e).memoizedState,baseState:ea.baseState,baseQueue:ea.baseQueue,queue:ea.queue,next:null},null===ta?Zo.memoizedState=ta=e:ta=ta.next=e}return ta}function ca(e,t){return"function"==typeof t?t(e):t}function ua(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=ea,i=r.baseQueue,o=n.pending;if(null!==o){if(null!==i){var s=i.next;i.next=o.next,o.next=s}r.baseQueue=i=o,n.pending=null}if(null!==i){i=i.next,r=r.baseState;var l=s=o=null,c=i;do{var u=c.lane;if((Jo&u)===u)null!==l&&(l=l.next={lane:0,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null}),r=c.eagerReducer===e?c.eagerState:e(r,c.action);else{var d={lane:u,action:c.action,eagerReducer:c.eagerReducer,eagerState:c.eagerState,next:null};null===l?(s=l=d,o=r):l=l.next=d,Zo.lanes|=u,Fs|=u}c=c.next}while(null!==c&&c!==i);null===l?o=r:l.next=s,cr(r,t.memoizedState)||(Ia=!0),t.memoizedState=r,t.baseState=o,t.baseQueue=l,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function da(e){var t=la(),n=t.queue;if(null===n)throw Error(a(311));n.lastRenderedReducer=e;var r=n.dispatch,i=n.pending,o=t.memoizedState;if(null!==i){n.pending=null;var s=i=i.next;do{o=e(o,s.action),s=s.next}while(s!==i);cr(o,t.memoizedState)||(Ia=!0),t.memoizedState=o,null===t.baseQueue&&(t.baseState=o),n.lastRenderedState=o}return[o,r]}function fa(e,t,n){var r=t._getVersion;r=r(t._source);var i=t._workInProgressVersionPrimary;if(null!==i?e=i===r:(e=e.mutableReadLanes,(e=(Jo&e)===e)&&(t._workInProgressVersionPrimary=r,qo.push(t))),e)return n(t._source);throw qo.push(t),Error(a(350))}function ha(e,t,n,r){var i=Ns;if(null===i)throw Error(a(349));var o=t._getVersion,s=o(t._source),l=Xo.current,c=l.useState((function(){return fa(i,t,n)})),u=c[1],d=c[0];c=ta;var f=e.memoizedState,h=f.refs,p=h.getSnapshot,g=f.source;f=f.subscribe;var m=Zo;return e.memoizedState={refs:h,source:t,subscribe:r},l.useEffect((function(){h.getSnapshot=n,h.setSnapshot=u;var e=o(t._source);if(!cr(s,e)){e=n(t._source),cr(d,e)||(u(e),e=dl(m),i.mutableReadLanes|=e&i.pendingLanes),e=i.mutableReadLanes,i.entangledLanes|=e;for(var r=i.entanglements,a=e;0<a;){var l=31-Ht(a),c=1<<l;r[l]|=e,a&=~c}}}),[n,t,r]),l.useEffect((function(){return r(t._source,(function(){var e=h.getSnapshot,n=h.setSnapshot;try{n(e(t._source));var r=dl(m);i.mutableReadLanes|=r&i.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),cr(p,n)&&cr(g,t)&&cr(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:ca,lastRenderedState:d}).dispatch=u=Ta.bind(null,Zo,e),c.queue=e,c.baseQueue=null,d=fa(i,t,n),c.memoizedState=c.baseState=d),d}function pa(e,t,n){return ha(la(),e,t,n)}function ga(e){var t=sa();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:ca,lastRenderedState:e}).dispatch=Ta.bind(null,Zo,e),[t.memoizedState,e]}function ma(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Zo.updateQueue)?(t={lastEffect:null},Zo.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function va(e){return e={current:e},sa().memoizedState=e}function ba(){return la().memoizedState}function ya(e,t,n,r){var i=sa();Zo.flags|=e,i.memoizedState=ma(1|t,n,void 0,void 0===r?null:r)}function xa(e,t,n,r){var i=la();r=void 0===r?null:r;var o=void 0;if(null!==ea){var a=ea.memoizedState;if(o=a.destroy,null!==r&&oa(r,a.deps))return void ma(t,n,o,r)}Zo.flags|=e,i.memoizedState=ma(1|t,n,o,r)}function wa(e,t){return ya(516,4,e,t)}function ka(e,t){return xa(516,4,e,t)}function _a(e,t){return xa(4,2,e,t)}function Ea(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function Sa(e,t,n){return n=null!=n?n.concat([e]):null,xa(4,2,Ea.bind(null,t,e),n)}function Oa(){}function Pa(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oa(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ca(e,t){var n=la();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&oa(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ma(e,t){var n=Hi();Ui(98>n?98:n,(function(){e(!0)})),Ui(97<n?97:n,(function(){var n=Go.transition;Go.transition=1;try{e(!1),t()}finally{Go.transition=n}}))}function Ta(e,t,n){var r=ul(),i=dl(e),o={lane:i,action:n,eagerReducer:null,eagerState:null,next:null},a=t.pending;if(null===a?o.next=o:(o.next=a.next,a.next=o),t.pending=o,a=e.alternate,e===Zo||null!==a&&a===Zo)ra=na=!0;else{if(0===e.lanes&&(null===a||0===a.lanes)&&null!==(a=t.lastRenderedReducer))try{var s=t.lastRenderedState,l=a(s,n);if(o.eagerReducer=a,o.eagerState=l,cr(l,s))return}catch(e){}fl(e,i,r)}}var Na={readContext:oo,useCallback:ia,useContext:ia,useEffect:ia,useImperativeHandle:ia,useLayoutEffect:ia,useMemo:ia,useReducer:ia,useRef:ia,useState:ia,useDebugValue:ia,useDeferredValue:ia,useTransition:ia,useMutableSource:ia,useOpaqueIdentifier:ia,unstable_isNewReconciler:!1},Aa={readContext:oo,useCallback:function(e,t){return sa().memoizedState=[e,void 0===t?null:t],e},useContext:oo,useEffect:wa,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ya(4,2,Ea.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ya(4,2,e,t)},useMemo:function(e,t){var n=sa();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=sa();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ta.bind(null,Zo,e),[r.memoizedState,e]},useRef:va,useState:ga,useDebugValue:Oa,useDeferredValue:function(e){var t=ga(e),n=t[0],r=t[1];return wa((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=ga(!1),t=e[0];return va(e=Ma.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=sa();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},ha(r,e,t,n)},useOpaqueIdentifier:function(){if(Vo){var e=!1,t=function(e){return{$$typeof:D,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(Qr++).toString(36))),Error(a(355))})),n=ga(t)[1];return!(2&Zo.mode)&&(Zo.flags|=516,ma(5,(function(){n("r:"+(Qr++).toString(36))}),void 0,null)),t}return ga(t="r:"+(Qr++).toString(36)),t},unstable_isNewReconciler:!1},Ra={readContext:oo,useCallback:Pa,useContext:oo,useEffect:ka,useImperativeHandle:Sa,useLayoutEffect:_a,useMemo:Ca,useReducer:ua,useRef:ba,useState:function(){return ua(ca)},useDebugValue:Oa,useDeferredValue:function(e){var t=ua(ca),n=t[0],r=t[1];return ka((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=ua(ca)[0];return[ba().current,e]},useMutableSource:pa,useOpaqueIdentifier:function(){return ua(ca)[0]},unstable_isNewReconciler:!1},La={readContext:oo,useCallback:Pa,useContext:oo,useEffect:ka,useImperativeHandle:Sa,useLayoutEffect:_a,useMemo:Ca,useReducer:da,useRef:ba,useState:function(){return da(ca)},useDebugValue:Oa,useDeferredValue:function(e){var t=da(ca),n=t[0],r=t[1];return ka((function(){var t=Go.transition;Go.transition=1;try{r(e)}finally{Go.transition=t}}),[e]),n},useTransition:function(){var e=da(ca)[0];return[ba().current,e]},useMutableSource:pa,useOpaqueIdentifier:function(){return da(ca)[0]},unstable_isNewReconciler:!1},Da=w.ReactCurrentOwner,Ia=!1;function ja(e,t,n,r){t.child=null===e?Po(t,null,n,r):Oo(t,e.child,n,r)}function za(e,t,n,r,i){n=n.render;var o=t.ref;return io(t,i),r=aa(e,t,n,r,o,i),null===e||Ia?(t.flags|=1,ja(e,t,r,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,rs(e,t,i))}function Fa(e,t,n,r,i,o){if(null===e){var a=n.type;return"function"!=typeof a||Hl(a)||void 0!==a.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Ul(n.type,null,r,t,t.mode,o)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=a,Ba(e,t,a,r,i,o))}return a=e.child,i&o||(i=a.memoizedProps,!(n=null!==(n=n.compare)?n:dr)(i,r)||e.ref!==t.ref)?(t.flags|=1,(e=$l(a,r)).ref=t.ref,e.return=t,t.child=e):rs(e,t,o)}function Ba(e,t,n,r,i,o){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Ia=!1,!(o&i))return t.lanes=e.lanes,rs(e,t,o);16384&e.flags&&(Ia=!0)}return Ha(e,t,n,r,o)}function Va(e,t,n){var r=t.pendingProps,i=r.children,o=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(4&t.mode){if(!(1073741824&n))return e=null!==o?o.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},xl(0,e),null;t.memoizedState={baseLanes:0},xl(0,null!==o?o.baseLanes:n)}else t.memoizedState={baseLanes:0},xl(0,n);else null!==o?(r=o.baseLanes|n,t.memoizedState=null):r=n,xl(0,r);return ja(e,t,i,n),t.child}function Wa(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ha(e,t,n,r,i){var o=mi(n)?pi:fi.current;return o=gi(t,o),io(t,i),n=aa(e,t,n,r,o,i),null===e||Ia?(t.flags|=1,ja(e,t,n,i),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~i,rs(e,t,i))}function $a(e,t,n,r,i){if(mi(n)){var o=!0;xi(t)}else o=!1;if(io(t,i),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yo(t,n,r),wo(t,n,r,i),r=!0;else if(null===e){var a=t.stateNode,s=t.memoizedProps;a.props=s;var l=a.context,c=n.contextType;c="object"==typeof c&&null!==c?oo(c):gi(t,c=mi(n)?pi:fi.current);var u=n.getDerivedStateFromProps,d="function"==typeof u||"function"==typeof a.getSnapshotBeforeUpdate;d||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==r||l!==c)&&xo(t,a,r,c),ao=!1;var f=t.memoizedState;a.state=f,ho(t,r,a,i),l=t.memoizedState,s!==r||f!==l||hi.current||ao?("function"==typeof u&&(mo(t,n,u,r),l=t.memoizedState),(s=ao||bo(t,n,s,r,f,l,c))?(d||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||("function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount()),"function"==typeof a.componentDidMount&&(t.flags|=4)):("function"==typeof a.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=l),a.props=r,a.state=l,a.context=c,r=s):("function"==typeof a.componentDidMount&&(t.flags|=4),r=!1)}else{a=t.stateNode,lo(e,t),s=t.memoizedProps,c=t.type===t.elementType?s:Xi(t.type,s),a.props=c,d=t.pendingProps,f=a.context,l="object"==typeof(l=n.contextType)&&null!==l?oo(l):gi(t,l=mi(n)?pi:fi.current);var h=n.getDerivedStateFromProps;(u="function"==typeof h||"function"==typeof a.getSnapshotBeforeUpdate)||"function"!=typeof a.UNSAFE_componentWillReceiveProps&&"function"!=typeof a.componentWillReceiveProps||(s!==d||f!==l)&&xo(t,a,r,l),ao=!1,f=t.memoizedState,a.state=f,ho(t,r,a,i);var p=t.memoizedState;s!==d||f!==p||hi.current||ao?("function"==typeof h&&(mo(t,n,h,r),p=t.memoizedState),(c=ao||bo(t,n,c,r,f,p,l))?(u||"function"!=typeof a.UNSAFE_componentWillUpdate&&"function"!=typeof a.componentWillUpdate||("function"==typeof a.componentWillUpdate&&a.componentWillUpdate(r,p,l),"function"==typeof a.UNSAFE_componentWillUpdate&&a.UNSAFE_componentWillUpdate(r,p,l)),"function"==typeof a.componentDidUpdate&&(t.flags|=4),"function"==typeof a.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=p),a.props=r,a.state=p,a.context=l,r=c):("function"!=typeof a.componentDidUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof a.getSnapshotBeforeUpdate||s===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Ua(e,t,n,r,o,i)}function Ua(e,t,n,r,i,o){Wa(e,t);var a=!!(64&t.flags);if(!r&&!a)return i&&wi(t,n,!1),rs(e,t,o);r=t.stateNode,Da.current=t;var s=a&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&a?(t.child=Oo(t,e.child,null,o),t.child=Oo(t,null,s,o)):ja(e,t,s,o),t.memoizedState=r.state,i&&wi(t,n,!0),t.child}function Ka(e){var t=e.stateNode;t.pendingContext?bi(0,t.pendingContext,t.pendingContext!==t.context):t.context&&bi(0,t.context,!1),Ro(e,t.containerInfo)}var Ya,qa,Qa,Xa,Ga={dehydrated:null,retryLane:0};function Ja(e,t,n){var r,i=t.pendingProps,o=jo.current,a=!1;return(r=!!(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&!!(2&o)),r?(a=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===i.fallback||!0===i.unstable_avoidThisFallback||(o|=1),ui(jo,1&o),null===e?(void 0!==i.fallback&&$o(t),e=i.children,o=i.fallback,a?(e=Za(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ga,e):"number"==typeof i.unstable_expectedLoadTime?(e=Za(t,e,o,n),t.child.memoizedState={baseLanes:n},t.memoizedState=Ga,t.lanes=33554432,e):((n=Yl({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,a?(i=function(e,t,n,r,i){var o=t.mode,a=e.child;e=a.sibling;var s={mode:"hidden",children:n};return 2&o||t.child===a?n=$l(a,s):((n=t.child).childLanes=0,n.pendingProps=s,null!==(a=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=a,a.nextEffect=null):t.firstEffect=t.lastEffect=null),null!==e?r=$l(e,r):(r=Kl(r,o,i,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,i.children,i.fallback,n),a=t.child,o=e.child.memoizedState,a.memoizedState=null===o?{baseLanes:n}:{baseLanes:o.baseLanes|n},a.childLanes=e.childLanes&~n,t.memoizedState=Ga,i):(n=function(e,t,n,r){var i=e.child;return e=i.sibling,n=$l(i,{mode:"visible",children:n}),!(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,i.children,n),t.memoizedState=null,n))}function Za(e,t,n,r){var i=e.mode,o=e.child;return t={mode:"hidden",children:t},2&i||null===o?o=Yl(t,i,0,null):(o.childLanes=0,o.pendingProps=t),n=Kl(n,i,r,null),o.return=e,n.return=e,o.sibling=n,e.child=o,n}function es(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ro(e.return,t)}function ts(e,t,n,r,i,o){var a=e.memoizedState;null===a?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:i,lastEffect:o}:(a.isBackwards=t,a.rendering=null,a.renderingStartTime=0,a.last=r,a.tail=n,a.tailMode=i,a.lastEffect=o)}function ns(e,t,n){var r=t.pendingProps,i=r.revealOrder,o=r.tail;if(ja(e,t,r.children,n),2&(r=jo.current))r=1&r|2,t.flags|=64;else{if(null!==e&&64&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&es(e,n);else if(19===e.tag)es(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(ui(jo,r),2&t.mode)switch(i){case"forwards":for(n=t.child,i=null;null!==n;)null!==(e=n.alternate)&&null===zo(e)&&(i=n),n=n.sibling;null===(n=i)?(i=t.child,t.child=null):(i=n.sibling,n.sibling=null),ts(t,!1,i,n,o,t.lastEffect);break;case"backwards":for(n=null,i=t.child,t.child=null;null!==i;){if(null!==(e=i.alternate)&&null===zo(e)){t.child=i;break}e=i.sibling,i.sibling=n,n=i,i=e}ts(t,!0,n,null,o,t.lastEffect);break;case"together":ts(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function rs(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Fs|=t.lanes,n&t.childLanes){if(null!==e&&t.child!==e.child)throw Error(a(153));if(null!==t.child){for(n=$l(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=$l(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function is(e,t){if(!Vo)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function os(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return mi(t.type)&&vi(),null;case 3:return Lo(),ci(hi),ci(fi),Qo(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Ko(t)?t.flags|=4:r.hydrate||(t.flags|=256)),qa(t),null;case 5:Io(t);var o=Ao(No.current);if(n=t.type,null!==e&&null!=t.stateNode)Qa(e,t,n,r,o),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(a(166));return null}if(e=Ao(Mo.current),Ko(t)){r=t.stateNode,n=t.type;var s=t.memoizedProps;switch(r[Gr]=t,r[Jr]=s,n){case"dialog":Mr("cancel",r),Mr("close",r);break;case"iframe":case"object":case"embed":Mr("load",r);break;case"video":case"audio":for(e=0;e<Sr.length;e++)Mr(Sr[e],r);break;case"source":Mr("error",r);break;case"img":case"image":case"link":Mr("error",r),Mr("load",r);break;case"details":Mr("toggle",r);break;case"input":ee(r,s),Mr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!s.multiple},Mr("invalid",r);break;case"textarea":le(r,s),Mr("invalid",r)}for(var c in _e(n,s),e=null,s)s.hasOwnProperty(c)&&(o=s[c],"children"===c?"string"==typeof o?r.textContent!==o&&(e=["children",o]):"number"==typeof o&&r.textContent!==""+o&&(e=["children",""+o]):l.hasOwnProperty(c)&&null!=o&&"onScroll"===c&&Mr("scroll",r));switch(n){case"input":X(r),re(r,s,!0);break;case"textarea":X(r),ue(r);break;case"select":case"option":break;default:"function"==typeof s.onClick&&(r.onclick=Fr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(c=9===o.nodeType?o:o.ownerDocument,e===de&&(e=fe(n)),e===de?"script"===n?((e=c.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=c.createElement(n,{is:r.is}):(e=c.createElement(n),"select"===n&&(c=e,r.multiple?c.multiple=!0:r.size&&(c.size=r.size))):e=c.createElementNS(e,n),e[Gr]=t,e[Jr]=r,Ya(e,t,!1,!1),t.stateNode=e,c=Ee(n,r),n){case"dialog":Mr("cancel",e),Mr("close",e),o=r;break;case"iframe":case"object":case"embed":Mr("load",e),o=r;break;case"video":case"audio":for(o=0;o<Sr.length;o++)Mr(Sr[o],e);o=r;break;case"source":Mr("error",e),o=r;break;case"img":case"image":case"link":Mr("error",e),Mr("load",e),o=r;break;case"details":Mr("toggle",e),o=r;break;case"input":ee(e,r),o=Z(e,r),Mr("invalid",e);break;case"option":o=oe(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},o=i({},r,{value:void 0}),Mr("invalid",e);break;case"textarea":le(e,r),o=se(e,r),Mr("invalid",e);break;default:o=r}_e(n,o);var u=o;for(s in u)if(u.hasOwnProperty(s)){var d=u[s];"style"===s?we(e,d):"dangerouslySetInnerHTML"===s?null!=(d=d?d.__html:void 0)&&me(e,d):"children"===s?"string"==typeof d?("textarea"!==n||""!==d)&&ve(e,d):"number"==typeof d&&ve(e,""+d):"suppressContentEditableWarning"!==s&&"suppressHydrationWarning"!==s&&"autoFocus"!==s&&(l.hasOwnProperty(s)?null!=d&&"onScroll"===s&&Mr("scroll",e):null!=d&&x(e,s,d,c))}switch(n){case"input":X(e),re(e,r,!1);break;case"textarea":X(e),ue(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(s=r.value)?ae(e,!!r.multiple,s,!1):null!=r.defaultValue&&ae(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof o.onClick&&(e.onclick=Fr)}Wr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)Xa(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(a(166));n=Ao(No.current),Ao(Mo.current),Ko(t)?(r=t.stateNode,n=t.memoizedProps,r[Gr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Gr]=t,t.stateNode=r)}return null;case 13:return ci(jo),r=t.memoizedState,64&t.flags?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Ko(t):n=null!==e.memoizedState,r&&!n&&2&t.mode&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||1&jo.current?0===Is&&(Is=3):(0!==Is&&3!==Is||(Is=4),null===Ns||!(134217727&Fs)&&!(134217727&Bs)||ml(Ns,Rs))),(r||n)&&(t.flags|=4),null);case 4:return Lo(),qa(t),null===e&&Nr(t.stateNode.containerInfo),null;case 10:return no(t),null;case 19:if(ci(jo),null===(r=t.memoizedState))return null;if(s=!!(64&t.flags),null===(c=r.rendering))if(s)is(r,!1);else{if(0!==Is||null!==e&&64&e.flags)for(e=t.child;null!==e;){if(null!==(c=zo(e))){for(t.flags|=64,is(r,!1),null!==(s=c.updateQueue)&&(t.updateQueue=s,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(s=n).flags&=2,s.nextEffect=null,s.firstEffect=null,s.lastEffect=null,null===(c=s.alternate)?(s.childLanes=0,s.lanes=e,s.child=null,s.memoizedProps=null,s.memoizedState=null,s.updateQueue=null,s.dependencies=null,s.stateNode=null):(s.childLanes=c.childLanes,s.lanes=c.lanes,s.child=c.child,s.memoizedProps=c.memoizedProps,s.memoizedState=c.memoizedState,s.updateQueue=c.updateQueue,s.type=c.type,e=c.dependencies,s.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return ui(jo,1&jo.current|2),t.child}e=e.sibling}null!==r.tail&&Wi()>$s&&(t.flags|=64,s=!0,is(r,!1),t.lanes=33554432)}else{if(!s)if(null!==(e=zo(c))){if(t.flags|=64,s=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),is(r,!0),null===r.tail&&"hidden"===r.tailMode&&!c.alternate&&!Vo)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wi()-r.renderingStartTime>$s&&1073741824!==n&&(t.flags|=64,s=!0,is(r,!1),t.lanes=33554432);r.isBackwards?(c.sibling=t.child,t.child=c):(null!==(n=r.last)?n.sibling=c:t.child=c,r.last=c)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wi(),n.sibling=null,t=jo.current,ui(jo,s?1&t|2:1&t),n):null;case 23:case 24:return wl(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(a(156,t.tag))}function as(e){switch(e.tag){case 1:mi(e.type)&&vi();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(Lo(),ci(hi),ci(fi),Qo(),64&(t=e.flags))throw Error(a(285));return e.flags=-4097&t|64,e;case 5:return Io(e),null;case 13:return ci(jo),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ci(jo),null;case 4:return Lo(),null;case 10:return no(e),null;case 23:case 24:return wl(),null;default:return null}}function ss(e,t){try{var n="",r=t;do{n+=K(r),r=r.return}while(r);var i=n}catch(e){i="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:i}}function ls(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Ya=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},qa=function(){},Qa=function(e,t,n,r){var o=e.memoizedProps;if(o!==r){e=t.stateNode,Ao(Mo.current);var a,s=null;switch(n){case"input":o=Z(e,o),r=Z(e,r),s=[];break;case"option":o=oe(e,o),r=oe(e,r),s=[];break;case"select":o=i({},o,{value:void 0}),r=i({},r,{value:void 0}),s=[];break;case"textarea":o=se(e,o),r=se(e,r),s=[];break;default:"function"!=typeof o.onClick&&"function"==typeof r.onClick&&(e.onclick=Fr)}for(d in _e(n,r),n=null,o)if(!r.hasOwnProperty(d)&&o.hasOwnProperty(d)&&null!=o[d])if("style"===d){var c=o[d];for(a in c)c.hasOwnProperty(a)&&(n||(n={}),n[a]="")}else"dangerouslySetInnerHTML"!==d&&"children"!==d&&"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&"autoFocus"!==d&&(l.hasOwnProperty(d)?s||(s=[]):(s=s||[]).push(d,null));for(d in r){var u=r[d];if(c=null!=o?o[d]:void 0,r.hasOwnProperty(d)&&u!==c&&(null!=u||null!=c))if("style"===d)if(c){for(a in c)!c.hasOwnProperty(a)||u&&u.hasOwnProperty(a)||(n||(n={}),n[a]="");for(a in u)u.hasOwnProperty(a)&&c[a]!==u[a]&&(n||(n={}),n[a]=u[a])}else n||(s||(s=[]),s.push(d,n)),n=u;else"dangerouslySetInnerHTML"===d?(u=u?u.__html:void 0,c=c?c.__html:void 0,null!=u&&c!==u&&(s=s||[]).push(d,u)):"children"===d?"string"!=typeof u&&"number"!=typeof u||(s=s||[]).push(d,""+u):"suppressContentEditableWarning"!==d&&"suppressHydrationWarning"!==d&&(l.hasOwnProperty(d)?(null!=u&&"onScroll"===d&&Mr("scroll",e),s||c===u||(s=[])):"object"==typeof u&&null!==u&&u.$$typeof===D?u.toString():(s=s||[]).push(d,u))}n&&(s=s||[]).push("style",n);var d=s;(t.updateQueue=d)&&(t.flags|=4)}},Xa=function(e,t,n,r){n!==r&&(t.flags|=4)};var cs="function"==typeof WeakMap?WeakMap:Map;function us(e,t,n){(n=co(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){qs||(qs=!0,Qs=r),ls(0,t)},n}function ds(e,t,n){(n=co(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var i=t.value;n.payload=function(){return ls(0,t),r(i)}}var o=e.stateNode;return null!==o&&"function"==typeof o.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===Xs?Xs=new Set([this]):Xs.add(this),ls(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var fs="function"==typeof WeakSet?WeakSet:Set;function hs(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){zl(e,t)}else t.current=null}function ps(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:Xi(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Kr(t.stateNode.containerInfo))}throw Error(a(163))}function gs(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(!(3&~e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var i=e;r=i.next,4&(i=i.tag)&&1&i&&(Dl(n,e),Ll(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:Xi(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&po(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}po(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Wr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&wt(n)))))}throw Error(a(163))}function ms(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var i=n.memoizedProps.style;i=null!=i&&i.hasOwnProperty("display")?i.display:null,r.style.display=xe("display",i)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function vs(e,t){if(_i&&"function"==typeof _i.onCommitFiberUnmount)try{_i.onCommitFiberUnmount(ki,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,i=r.destroy;if(r=r.tag,void 0!==i)if(4&r)Dl(t,n);else{r=t;try{i()}catch(e){zl(r,e)}}n=n.next}while(n!==e)}break;case 1:if(hs(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){zl(t,e)}break;case 5:hs(t);break;case 4:_s(e,t)}}function bs(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function ys(e){return 5===e.tag||3===e.tag||4===e.tag}function xs(e){e:{for(var t=e.return;null!==t;){if(ys(t))break e;t=t.return}throw Error(a(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(a(161))}16&n.flags&&(ve(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||ys(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?ws(e,n,t):ks(e,n,t)}function ws(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Fr));else if(4!==r&&null!==(e=e.child))for(ws(e,t,n),e=e.sibling;null!==e;)ws(e,t,n),e=e.sibling}function ks(e,t,n){var r=e.tag,i=5===r||6===r;if(i)e=i?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(ks(e,t,n),e=e.sibling;null!==e;)ks(e,t,n),e=e.sibling}function _s(e,t){for(var n,r,i=t,o=!1;;){if(!o){o=i.return;e:for(;;){if(null===o)throw Error(a(160));switch(n=o.stateNode,o.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}o=o.return}o=!0}if(5===i.tag||6===i.tag){e:for(var s=e,l=i,c=l;;)if(vs(s,c),null!==c.child&&4!==c.tag)c.child.return=c,c=c.child;else{if(c===l)break e;for(;null===c.sibling;){if(null===c.return||c.return===l)break e;c=c.return}c.sibling.return=c.return,c=c.sibling}r?(s=n,l=i.stateNode,8===s.nodeType?s.parentNode.removeChild(l):s.removeChild(l)):n.removeChild(i.stateNode)}else if(4===i.tag){if(null!==i.child){n=i.stateNode.containerInfo,r=!0,i.child.return=i,i=i.child;continue}}else if(vs(e,i),null!==i.child){i.child.return=i,i=i.child;continue}if(i===t)break;for(;null===i.sibling;){if(null===i.return||i.return===t)return;4===(i=i.return).tag&&(o=!1)}i.sibling.return=i.return,i=i.sibling}}function Es(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{!(3&~r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var i=null!==e?e.memoizedProps:r;e=t.type;var o=t.updateQueue;if(t.updateQueue=null,null!==o){for(n[Jr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ee(e,i),t=Ee(e,r),i=0;i<o.length;i+=2){var s=o[i],l=o[i+1];"style"===s?we(n,l):"dangerouslySetInnerHTML"===s?me(n,l):"children"===s?ve(n,l):x(n,s,l,t)}switch(e){case"input":ne(n,r);break;case"textarea":ce(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(o=r.value)?ae(n,!!r.multiple,o,!1):e!==!!r.multiple&&(null!=r.defaultValue?ae(n,!!r.multiple,r.defaultValue,!0):ae(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(a(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,wt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Hs=Wi(),ms(t.child,!0)),void Ss(t);case 19:return void Ss(t);case 23:case 24:return void ms(t,null!==t.memoizedState)}throw Error(a(163))}function Ss(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new fs),t.forEach((function(t){var r=Bl.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function Os(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Ps=Math.ceil,Cs=w.ReactCurrentDispatcher,Ms=w.ReactCurrentOwner,Ts=0,Ns=null,As=null,Rs=0,Ls=0,Ds=li(0),Is=0,js=null,zs=0,Fs=0,Bs=0,Vs=0,Ws=null,Hs=0,$s=1/0;function Us(){$s=Wi()+500}var Ks,Ys=null,qs=!1,Qs=null,Xs=null,Gs=!1,Js=null,Zs=90,el=[],tl=[],nl=null,rl=0,il=null,ol=-1,al=0,sl=0,ll=null,cl=!1;function ul(){return 48&Ts?Wi():-1!==ol?ol:ol=Wi()}function dl(e){if(!(2&(e=e.mode)))return 1;if(!(4&e))return 99===Hi()?1:2;if(0===al&&(al=zs),0!==Qi.transition){0!==sl&&(sl=null!==Ws?Ws.pendingLanes:0),e=al;var t=4186112&~sl;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Hi(),e=Ft(4&Ts&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),al)}function fl(e,t,n){if(50<rl)throw rl=0,il=null,Error(a(185));if(null===(e=hl(e,t)))return null;Wt(e,t,n),e===Ns&&(Bs|=t,4===Is&&ml(e,Rs));var r=Hi();1===t?8&Ts&&!(48&Ts)?vl(e):(pl(e,n),0===Ts&&(Us(),Yi())):(!(4&Ts)||98!==r&&99!==r||(null===nl?nl=new Set([e]):nl.add(e)),pl(e,n)),Ws=e}function hl(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function pl(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,i=e.pingedLanes,o=e.expirationTimes,s=e.pendingLanes;0<s;){var l=31-Ht(s),c=1<<l,u=o[l];if(-1===u){if(!(c&r)||c&i){u=t,It(c);var d=Dt;o[l]=10<=d?u+250:6<=d?u+5e3:-1}}else u<=t&&(e.expiredLanes|=c);s&=~c}if(r=jt(e,e===Ns?Rs:0),t=Dt,0===r)null!==n&&(n!==Ii&&Oi(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ii&&Oi(n)}15===t?(n=vl.bind(null,e),null===zi?(zi=[n],Fi=Si(Ni,qi)):zi.push(n),n=Ii):14===t?n=Ki(99,vl.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(a(358,e))}}(t),n=Ki(n,gl.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function gl(e){if(ol=-1,sl=al=0,48&Ts)throw Error(a(327));var t=e.callbackNode;if(Rl()&&e.callbackNode!==t)return null;var n=jt(e,e===Ns?Rs:0);if(0===n)return null;var r=n,i=Ts;Ts|=16;var o=El();for(Ns===e&&Rs===r||(Us(),kl(e,r));;)try{Pl();break}catch(t){_l(e,t)}if(to(),Cs.current=o,Ts=i,null!==As?r=0:(Ns=null,Rs=0,r=Is),zs&Bs)kl(e,0);else if(0!==r){if(2===r&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Kr(e.containerInfo)),0!==(n=zt(e))&&(r=Sl(e,n))),1===r)throw t=js,kl(e,0),ml(e,n),pl(e,Wi()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(a(345));case 2:case 5:Tl(e);break;case 3:if(ml(e,n),(62914560&n)===n&&10<(r=Hs+500-Wi())){if(0!==jt(e,0))break;if(((i=e.suspendedLanes)&n)!==n){ul(),e.pingedLanes|=e.suspendedLanes&i;break}e.timeoutHandle=$r(Tl.bind(null,e),r);break}Tl(e);break;case 4:if(ml(e,n),(4186112&n)===n)break;for(r=e.eventTimes,i=-1;0<n;){var s=31-Ht(n);o=1<<s,(s=r[s])>i&&(i=s),n&=~o}if(n=i,10<(n=(120>(n=Wi()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Ps(n/1960))-n)){e.timeoutHandle=$r(Tl.bind(null,e),n);break}Tl(e);break;default:throw Error(a(329))}}return pl(e,Wi()),e.callbackNode===t?gl.bind(null,e):null}function ml(e,t){for(t&=~Vs,t&=~Bs,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-Ht(t),r=1<<n;e[n]=-1,t&=~r}}function vl(e){if(48&Ts)throw Error(a(327));if(Rl(),e===Ns&&e.expiredLanes&Rs){var t=Rs,n=Sl(e,t);zs&Bs&&(n=Sl(e,t=jt(e,t)))}else n=Sl(e,t=jt(e,0));if(0!==e.tag&&2===n&&(Ts|=64,e.hydrate&&(e.hydrate=!1,Kr(e.containerInfo)),0!==(t=zt(e))&&(n=Sl(e,t))),1===n)throw n=js,kl(e,0),ml(e,t),pl(e,Wi()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tl(e),pl(e,Wi()),null}function bl(e,t){var n=Ts;Ts|=1;try{return e(t)}finally{0===(Ts=n)&&(Us(),Yi())}}function yl(e,t){var n=Ts;Ts&=-2,Ts|=8;try{return e(t)}finally{0===(Ts=n)&&(Us(),Yi())}}function xl(e,t){ui(Ds,Ls),Ls|=t,zs|=t}function wl(){Ls=Ds.current,ci(Ds)}function kl(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Ur(n)),null!==As)for(n=As.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&vi();break;case 3:Lo(),ci(hi),ci(fi),Qo();break;case 5:Io(r);break;case 4:Lo();break;case 13:case 19:ci(jo);break;case 10:no(r);break;case 23:case 24:wl()}n=n.return}Ns=e,As=$l(e.current,null),Rs=Ls=zs=t,Is=0,js=null,Vs=Bs=Fs=0}function _l(e,t){for(;;){var n=As;try{if(to(),Xo.current=Na,na){for(var r=Zo.memoizedState;null!==r;){var i=r.queue;null!==i&&(i.pending=null),r=r.next}na=!1}if(Jo=0,ta=ea=Zo=null,ra=!1,Ms.current=null,null===n||null===n.return){Is=1,js=t,As=null;break}e:{var o=e,a=n.return,s=n,l=t;if(t=Rs,s.flags|=2048,s.firstEffect=s.lastEffect=null,null!==l&&"object"==typeof l&&"function"==typeof l.then){var c=l;if(!(2&s.mode)){var u=s.alternate;u?(s.updateQueue=u.updateQueue,s.memoizedState=u.memoizedState,s.lanes=u.lanes):(s.updateQueue=null,s.memoizedState=null)}var d=!!(1&jo.current),f=a;do{var h;if(h=13===f.tag){var p=f.memoizedState;if(null!==p)h=null!==p.dehydrated;else{var g=f.memoizedProps;h=void 0!==g.fallback&&(!0!==g.unstable_avoidThisFallback||!d)}}if(h){var m=f.updateQueue;if(null===m){var v=new Set;v.add(c),f.updateQueue=v}else m.add(c);if(!(2&f.mode)){if(f.flags|=64,s.flags|=16384,s.flags&=-2981,1===s.tag)if(null===s.alternate)s.tag=17;else{var b=co(-1,1);b.tag=2,uo(s,b)}s.lanes|=1;break e}l=void 0,s=t;var y=o.pingCache;if(null===y?(y=o.pingCache=new cs,l=new Set,y.set(c,l)):void 0===(l=y.get(c))&&(l=new Set,y.set(c,l)),!l.has(s)){l.add(s);var x=Fl.bind(null,o,c,s);c.then(x,x)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);l=Error((Y(s.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Is&&(Is=2),l=ss(l,s),f=a;do{switch(f.tag){case 3:o=l,f.flags|=4096,t&=-t,f.lanes|=t,fo(f,us(0,o,t));break e;case 1:o=l;var w=f.type,k=f.stateNode;if(!(64&f.flags||"function"!=typeof w.getDerivedStateFromError&&(null===k||"function"!=typeof k.componentDidCatch||null!==Xs&&Xs.has(k)))){f.flags|=4096,t&=-t,f.lanes|=t,fo(f,ds(f,o,t));break e}}f=f.return}while(null!==f)}Ml(n)}catch(e){t=e,As===n&&null!==n&&(As=n=n.return);continue}break}}function El(){var e=Cs.current;return Cs.current=Na,null===e?Na:e}function Sl(e,t){var n=Ts;Ts|=16;var r=El();for(Ns===e&&Rs===t||kl(e,t);;)try{Ol();break}catch(t){_l(e,t)}if(to(),Ts=n,Cs.current=r,null!==As)throw Error(a(261));return Ns=null,Rs=0,Is}function Ol(){for(;null!==As;)Cl(As)}function Pl(){for(;null!==As&&!Pi();)Cl(As)}function Cl(e){var t=Ks(e.alternate,e,Ls);e.memoizedProps=e.pendingProps,null===t?Ml(e):As=t,Ms.current=null}function Ml(e){var t=e;do{var n=t.alternate;if(e=t.return,2048&t.flags){if(null!==(n=as(t)))return n.flags&=2047,void(As=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}else{if(null!==(n=os(n,t,Ls)))return void(As=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||1073741824&Ls||!(4&n.mode)){for(var r=0,i=n.child;null!==i;)r|=i.lanes|i.childLanes,i=i.sibling;n.childLanes=r}null!==e&&!(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}if(null!==(t=t.sibling))return void(As=t);As=t=e}while(null!==t);0===Is&&(Is=5)}function Tl(e){var t=Hi();return Ui(99,Nl.bind(null,e,t)),null}function Nl(e,t){do{Rl()}while(null!==Js);if(48&Ts)throw Error(a(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(a(177));e.callbackNode=null;var r=n.lanes|n.childLanes,i=r,o=e.pendingLanes&~i;e.pendingLanes=i,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=i,e.mutableReadLanes&=i,e.entangledLanes&=i,i=e.entanglements;for(var s=e.eventTimes,l=e.expirationTimes;0<o;){var c=31-Ht(o),u=1<<c;i[c]=0,s[c]=-1,l[c]=-1,o&=~u}if(null!==nl&&!(24&r)&&nl.has(e)&&nl.delete(e),e===Ns&&(As=Ns=null,Rs=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(i=Ts,Ts|=32,Ms.current=null,Br=qt,mr(s=gr())){if("selectionStart"in s)l={start:s.selectionStart,end:s.selectionEnd};else e:if(l=(l=s.ownerDocument)&&l.defaultView||window,(u=l.getSelection&&l.getSelection())&&0!==u.rangeCount){l=u.anchorNode,o=u.anchorOffset,c=u.focusNode,u=u.focusOffset;try{l.nodeType,c.nodeType}catch(e){l=null;break e}var d=0,f=-1,h=-1,p=0,g=0,m=s,v=null;t:for(;;){for(var b;m!==l||0!==o&&3!==m.nodeType||(f=d+o),m!==c||0!==u&&3!==m.nodeType||(h=d+u),3===m.nodeType&&(d+=m.nodeValue.length),null!==(b=m.firstChild);)v=m,m=b;for(;;){if(m===s)break t;if(v===l&&++p===o&&(f=d),v===c&&++g===u&&(h=d),null!==(b=m.nextSibling))break;v=(m=v).parentNode}m=b}l=-1===f||-1===h?null:{start:f,end:h}}else l=null;l=l||{start:0,end:0}}else l=null;Vr={focusedElem:s,selectionRange:l},qt=!1,ll=null,cl=!1,Ys=r;do{try{Al()}catch(e){if(null===Ys)throw Error(a(330));zl(Ys,e),Ys=Ys.nextEffect}}while(null!==Ys);ll=null,Ys=r;do{try{for(s=e;null!==Ys;){var y=Ys.flags;if(16&y&&ve(Ys.stateNode,""),128&y){var x=Ys.alternate;if(null!==x){var w=x.ref;null!==w&&("function"==typeof w?w(null):w.current=null)}}switch(1038&y){case 2:xs(Ys),Ys.flags&=-3;break;case 6:xs(Ys),Ys.flags&=-3,Es(Ys.alternate,Ys);break;case 1024:Ys.flags&=-1025;break;case 1028:Ys.flags&=-1025,Es(Ys.alternate,Ys);break;case 4:Es(Ys.alternate,Ys);break;case 8:_s(s,l=Ys);var k=l.alternate;bs(l),null!==k&&bs(k)}Ys=Ys.nextEffect}}catch(e){if(null===Ys)throw Error(a(330));zl(Ys,e),Ys=Ys.nextEffect}}while(null!==Ys);if(w=Vr,x=gr(),y=w.focusedElem,s=w.selectionRange,x!==y&&y&&y.ownerDocument&&pr(y.ownerDocument.documentElement,y)){null!==s&&mr(y)&&(x=s.start,void 0===(w=s.end)&&(w=x),"selectionStart"in y?(y.selectionStart=x,y.selectionEnd=Math.min(w,y.value.length)):(w=(x=y.ownerDocument||document)&&x.defaultView||window).getSelection&&(w=w.getSelection(),l=y.textContent.length,k=Math.min(s.start,l),s=void 0===s.end?k:Math.min(s.end,l),!w.extend&&k>s&&(l=s,s=k,k=l),l=hr(y,k),o=hr(y,s),l&&o&&(1!==w.rangeCount||w.anchorNode!==l.node||w.anchorOffset!==l.offset||w.focusNode!==o.node||w.focusOffset!==o.offset)&&((x=x.createRange()).setStart(l.node,l.offset),w.removeAllRanges(),k>s?(w.addRange(x),w.extend(o.node,o.offset)):(x.setEnd(o.node,o.offset),w.addRange(x))))),x=[];for(w=y;w=w.parentNode;)1===w.nodeType&&x.push({element:w,left:w.scrollLeft,top:w.scrollTop});for("function"==typeof y.focus&&y.focus(),y=0;y<x.length;y++)(w=x[y]).element.scrollLeft=w.left,w.element.scrollTop=w.top}qt=!!Br,Vr=Br=null,e.current=n,Ys=r;do{try{for(y=e;null!==Ys;){var _=Ys.flags;if(36&_&&gs(y,Ys.alternate,Ys),128&_){x=void 0;var E=Ys.ref;if(null!==E){var S=Ys.stateNode;Ys.tag,x=S,"function"==typeof E?E(x):E.current=x}}Ys=Ys.nextEffect}}catch(e){if(null===Ys)throw Error(a(330));zl(Ys,e),Ys=Ys.nextEffect}}while(null!==Ys);Ys=null,ji(),Ts=i}else e.current=n;if(Gs)Gs=!1,Js=e,Zs=t;else for(Ys=r;null!==Ys;)t=Ys.nextEffect,Ys.nextEffect=null,8&Ys.flags&&((_=Ys).sibling=null,_.stateNode=null),Ys=t;if(0===(r=e.pendingLanes)&&(Xs=null),1===r?e===il?rl++:(rl=0,il=e):rl=0,n=n.stateNode,_i&&"function"==typeof _i.onCommitFiberRoot)try{_i.onCommitFiberRoot(ki,n,void 0,!(64&~n.current.flags))}catch(e){}if(pl(e,Wi()),qs)throw qs=!1,e=Qs,Qs=null,e;return 8&Ts||Yi(),null}function Al(){for(;null!==Ys;){var e=Ys.alternate;cl||null===ll||(8&Ys.flags?Ze(Ys,ll)&&(cl=!0):13===Ys.tag&&Os(e,Ys)&&Ze(Ys,ll)&&(cl=!0));var t=Ys.flags;256&t&&ps(e,Ys),!(512&t)||Gs||(Gs=!0,Ki(97,(function(){return Rl(),null}))),Ys=Ys.nextEffect}}function Rl(){if(90!==Zs){var e=97<Zs?97:Zs;return Zs=90,Ui(e,Il)}return!1}function Ll(e,t){el.push(t,e),Gs||(Gs=!0,Ki(97,(function(){return Rl(),null})))}function Dl(e,t){tl.push(t,e),Gs||(Gs=!0,Ki(97,(function(){return Rl(),null})))}function Il(){if(null===Js)return!1;var e=Js;if(Js=null,48&Ts)throw Error(a(331));var t=Ts;Ts|=32;var n=tl;tl=[];for(var r=0;r<n.length;r+=2){var i=n[r],o=n[r+1],s=i.destroy;if(i.destroy=void 0,"function"==typeof s)try{s()}catch(e){if(null===o)throw Error(a(330));zl(o,e)}}for(n=el,el=[],r=0;r<n.length;r+=2){i=n[r],o=n[r+1];try{var l=i.create;i.destroy=l()}catch(e){if(null===o)throw Error(a(330));zl(o,e)}}for(l=e.current.firstEffect;null!==l;)e=l.nextEffect,l.nextEffect=null,8&l.flags&&(l.sibling=null,l.stateNode=null),l=e;return Ts=t,Yi(),!0}function jl(e,t,n){uo(e,t=us(0,t=ss(n,t),1)),t=ul(),null!==(e=hl(e,1))&&(Wt(e,1,t),pl(e,t))}function zl(e,t){if(3===e.tag)jl(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){jl(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===Xs||!Xs.has(r))){var i=ds(n,e=ss(t,e),1);if(uo(n,i),i=ul(),null!==(n=hl(n,1)))Wt(n,1,i),pl(n,i);else if("function"==typeof r.componentDidCatch&&(null===Xs||!Xs.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Fl(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=ul(),e.pingedLanes|=e.suspendedLanes&n,Ns===e&&(Rs&n)===n&&(4===Is||3===Is&&(62914560&Rs)===Rs&&500>Wi()-Hs?kl(e,0):Vs|=n),pl(e,t)}function Bl(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(2&(t=e.mode)?4&t?(0===al&&(al=zs),0===(t=Bt(62914560&~al))&&(t=4194304)):t=99===Hi()?1:2:t=1),n=ul(),null!==(e=hl(e,t))&&(Wt(e,t,n),pl(e,n))}function Vl(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Wl(e,t,n,r){return new Vl(e,t,n,r)}function Hl(e){return!(!(e=e.prototype)||!e.isReactComponent)}function $l(e,t){var n=e.alternate;return null===n?((n=Wl(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Ul(e,t,n,r,i,o){var s=2;if(r=e,"function"==typeof e)Hl(e)&&(s=1);else if("string"==typeof e)s=5;else e:switch(e){case E:return Kl(n.children,i,o,t);case I:s=8,i|=16;break;case S:s=8,i|=1;break;case O:return(e=Wl(12,n,t,8|i)).elementType=O,e.type=O,e.lanes=o,e;case T:return(e=Wl(13,n,t,i)).type=T,e.elementType=T,e.lanes=o,e;case N:return(e=Wl(19,n,t,i)).elementType=N,e.lanes=o,e;case j:return Yl(n,i,o,t);case z:return(e=Wl(24,n,t,i)).elementType=z,e.lanes=o,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case P:s=10;break e;case C:s=9;break e;case M:s=11;break e;case A:s=14;break e;case R:s=16,r=null;break e;case L:s=22;break e}throw Error(a(130,null==e?e:typeof e,""))}return(t=Wl(s,n,t,i)).elementType=e,t.type=r,t.lanes=o,t}function Kl(e,t,n,r){return(e=Wl(7,e,r,t)).lanes=n,e}function Yl(e,t,n,r){return(e=Wl(23,e,r,t)).elementType=j,e.lanes=n,e}function ql(e,t,n){return(e=Wl(6,e,null,t)).lanes=n,e}function Ql(e,t,n){return(t=Wl(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Xl(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=Vt(0),this.expirationTimes=Vt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=Vt(0),this.mutableSourceEagerHydrationData=null}function Gl(e,t,n,r){var i=t.current,o=ul(),s=dl(i);e:if(n){t:{if(Qe(n=n._reactInternals)!==n||1!==n.tag)throw Error(a(170));var l=n;do{switch(l.tag){case 3:l=l.stateNode.context;break t;case 1:if(mi(l.type)){l=l.stateNode.__reactInternalMemoizedMergedChildContext;break t}}l=l.return}while(null!==l);throw Error(a(171))}if(1===n.tag){var c=n.type;if(mi(c)){n=yi(n,c,l);break e}}n=l}else n=di;return null===t.context?t.context=n:t.pendingContext=n,(t=co(o,s)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),uo(i,t),fl(i,s,o),s}function Jl(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Zl(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function ec(e,t){Zl(e,t),(e=e.alternate)&&Zl(e,t)}function tc(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Xl(e,t,null!=n&&!0===n.hydrate),t=Wl(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,so(t),e[Zr]=n.current,Nr(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var i=(t=r[e])._getVersion;i=i(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,i]:n.mutableSourceEagerHydrationData.push(t,i)}this._internalRoot=n}function nc(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function rc(e,t,n,r,i){var o=n._reactRootContainer;if(o){var a=o._internalRoot;if("function"==typeof i){var s=i;i=function(){var e=Jl(a);s.call(e)}}Gl(t,a,e,i)}else{if(o=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new tc(e,0,t?{hydrate:!0}:void 0)}(n,r),a=o._internalRoot,"function"==typeof i){var l=i;i=function(){var e=Jl(a);l.call(e)}}yl((function(){Gl(t,a,e,i)}))}return Jl(a)}function ic(e,t){var n=2<arguments.length&&void 0!==arguments[2]?arguments[2]:null;if(!nc(t))throw Error(a(200));return function(e,t,n){var r=3<arguments.length&&void 0!==arguments[3]?arguments[3]:null;return{$$typeof:_,key:null==r?null:""+r,children:e,containerInfo:t,implementation:n}}(e,t,null,n)}Ks=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||hi.current)Ia=!0;else{if(!(n&r)){switch(Ia=!1,t.tag){case 3:Ka(t),Yo();break;case 5:Do(t);break;case 1:mi(t.type)&&xi(t);break;case 4:Ro(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var i=t.type._context;ui(Gi,i._currentValue),i._currentValue=r;break;case 13:if(null!==t.memoizedState)return n&t.child.childLanes?Ja(e,t,n):(ui(jo,1&jo.current),null!==(t=rs(e,t,n))?t.sibling:null);ui(jo,1&jo.current);break;case 19:if(r=!!(n&t.childLanes),64&e.flags){if(r)return ns(e,t,n);t.flags|=64}if(null!==(i=t.memoizedState)&&(i.rendering=null,i.tail=null,i.lastEffect=null),ui(jo,jo.current),r)break;return null;case 23:case 24:return t.lanes=0,Va(e,t,n)}return rs(e,t,n)}Ia=!!(16384&e.flags)}else Ia=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=gi(t,fi.current),io(t,n),i=aa(null,t,r,e,i,n),t.flags|=1,"object"==typeof i&&null!==i&&"function"==typeof i.render&&void 0===i.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,mi(r)){var o=!0;xi(t)}else o=!1;t.memoizedState=null!==i.state&&void 0!==i.state?i.state:null,so(t);var s=r.getDerivedStateFromProps;"function"==typeof s&&mo(t,r,s,e),i.updater=vo,t.stateNode=i,i._reactInternals=t,wo(t,r,e,n),t=Ua(null,t,r,!0,o,n)}else t.tag=0,ja(null,t,i,n),t=t.child;return t;case 16:i=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,i=(o=i._init)(i._payload),t.type=i,o=t.tag=function(e){if("function"==typeof e)return Hl(e)?1:0;if(null!=e){if((e=e.$$typeof)===M)return 11;if(e===A)return 14}return 2}(i),e=Xi(i,e),o){case 0:t=Ha(null,t,i,e,n);break e;case 1:t=$a(null,t,i,e,n);break e;case 11:t=za(null,t,i,e,n);break e;case 14:t=Fa(null,t,i,Xi(i.type,e),r,n);break e}throw Error(a(306,i,""))}return t;case 0:return r=t.type,i=t.pendingProps,Ha(e,t,r,i=t.elementType===r?i:Xi(r,i),n);case 1:return r=t.type,i=t.pendingProps,$a(e,t,r,i=t.elementType===r?i:Xi(r,i),n);case 3:if(Ka(t),r=t.updateQueue,null===e||null===r)throw Error(a(282));if(r=t.pendingProps,i=null!==(i=t.memoizedState)?i.element:null,lo(e,t),ho(t,r,null,n),(r=t.memoizedState.element)===i)Yo(),t=rs(e,t,n);else{if((o=(i=t.stateNode).hydrate)&&(Bo=Yr(t.stateNode.containerInfo.firstChild),Fo=t,o=Vo=!0),o){if(null!=(e=i.mutableSourceEagerHydrationData))for(i=0;i<e.length;i+=2)(o=e[i])._workInProgressVersionPrimary=e[i+1],qo.push(o);for(n=Po(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else ja(e,t,r,n),Yo();t=t.child}return t;case 5:return Do(t),null===e&&$o(t),r=t.type,i=t.pendingProps,o=null!==e?e.memoizedProps:null,s=i.children,Hr(r,i)?s=null:null!==o&&Hr(r,o)&&(t.flags|=16),Wa(e,t),ja(e,t,s,n),t.child;case 6:return null===e&&$o(t),null;case 13:return Ja(e,t,n);case 4:return Ro(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Oo(t,null,r,n):ja(e,t,r,n),t.child;case 11:return r=t.type,i=t.pendingProps,za(e,t,r,i=t.elementType===r?i:Xi(r,i),n);case 7:return ja(e,t,t.pendingProps,n),t.child;case 8:case 12:return ja(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,i=t.pendingProps,s=t.memoizedProps,o=i.value;var l=t.type._context;if(ui(Gi,l._currentValue),l._currentValue=o,null!==s)if(l=s.value,0==(o=cr(l,o)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(l,o):1073741823))){if(s.children===i.children&&!hi.current){t=rs(e,t,n);break e}}else for(null!==(l=t.child)&&(l.return=t);null!==l;){var c=l.dependencies;if(null!==c){s=l.child;for(var u=c.firstContext;null!==u;){if(u.context===r&&u.observedBits&o){1===l.tag&&((u=co(-1,n&-n)).tag=2,uo(l,u)),l.lanes|=n,null!==(u=l.alternate)&&(u.lanes|=n),ro(l.return,n),c.lanes|=n;break}u=u.next}}else s=10===l.tag&&l.type===t.type?null:l.child;if(null!==s)s.return=l;else for(s=l;null!==s;){if(s===t){s=null;break}if(null!==(l=s.sibling)){l.return=s.return,s=l;break}s=s.return}l=s}ja(e,t,i.children,n),t=t.child}return t;case 9:return i=t.type,r=(o=t.pendingProps).children,io(t,n),r=r(i=oo(i,o.unstable_observedBits)),t.flags|=1,ja(e,t,r,n),t.child;case 14:return o=Xi(i=t.type,t.pendingProps),Fa(e,t,i,o=Xi(i.type,o),r,n);case 15:return Ba(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,i=t.pendingProps,i=t.elementType===r?i:Xi(r,i),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,mi(r)?(e=!0,xi(t)):e=!1,io(t,n),yo(t,r,i),wo(t,r,i,n),Ua(null,t,r,!0,e,n);case 19:return ns(e,t,n);case 23:case 24:return Va(e,t,n)}throw Error(a(156,t.tag))},tc.prototype.render=function(e){Gl(e,this._internalRoot,null,null)},tc.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;Gl(null,e,null,(function(){t[Zr]=null}))},et=function(e){13===e.tag&&(fl(e,4,ul()),ec(e,4))},tt=function(e){13===e.tag&&(fl(e,67108864,ul()),ec(e,67108864))},nt=function(e){if(13===e.tag){var t=ul(),n=dl(e);fl(e,n,t),ec(e,n)}},rt=function(e,t){return t()},Oe=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var i=ii(r);if(!i)throw Error(a(90));G(r),ne(r,i)}}}break;case"textarea":ce(e,n);break;case"select":null!=(t=n.value)&&ae(e,!!n.multiple,t,!1)}},Ae=bl,Re=function(e,t,n,r,i){var o=Ts;Ts|=4;try{return Ui(98,e.bind(null,t,n,r,i))}finally{0===(Ts=o)&&(Us(),Yi())}},Le=function(){!(49&Ts)&&(function(){if(null!==nl){var e=nl;nl=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,pl(e,Wi())}))}Yi()}(),Rl())},De=function(e,t){var n=Ts;Ts|=2;try{return e(t)}finally{0===(Ts=n)&&(Us(),Yi())}};var oc={Events:[ni,ri,ii,Te,Ne,Rl,{current:!1}]},ac={findFiberByHostInstance:ti,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},sc={bundleType:ac.bundleType,version:ac.version,rendererPackageName:ac.rendererPackageName,rendererConfig:ac.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:w.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=Je(e))?null:e.stateNode},findFiberByHostInstance:ac.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var lc=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!lc.isDisabled&&lc.supportsFiber)try{ki=lc.inject(sc),_i=lc}catch(ge){}}t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=oc,t.createPortal=ic,t.findDOMNode=function(e){if(null==e)return null;if(1===e.nodeType)return e;var t=e._reactInternals;if(void 0===t){if("function"==typeof e.render)throw Error(a(188));throw Error(a(268,Object.keys(e)))}return null===(e=Je(t))?null:e.stateNode},t.flushSync=function(e,t){var n=Ts;if(48&n)return e(t);Ts|=1;try{if(e)return Ui(99,e.bind(null,t))}finally{Ts=n,Yi()}},t.hydrate=function(e,t,n){if(!nc(t))throw Error(a(200));return rc(null,e,t,!0,n)},t.render=function(e,t,n){if(!nc(t))throw Error(a(200));return rc(null,e,t,!1,n)},t.unmountComponentAtNode=function(e){if(!nc(e))throw Error(a(40));return!!e._reactRootContainer&&(yl((function(){rc(null,null,e,!1,(function(){e._reactRootContainer=null,e[Zr]=null}))})),!0)},t.unstable_batchedUpdates=bl,t.unstable_createPortal=function(e,t){return ic(e,t,2<arguments.length&&void 0!==arguments[2]?arguments[2]:null)},t.unstable_renderSubtreeIntoContainer=function(e,t,n,r){if(!nc(n))throw Error(a(200));if(null==e||void 0===e._reactInternals)throw Error(a(38));return rc(e,t,n,!1,r)},t.version="17.0.2"},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},1020:(e,t,n)=>{"use strict";n(5228);var r=n(6540),i=60103;if("function"==typeof Symbol&&Symbol.for){var o=Symbol.for;i=o("react.element"),o("react.fragment")}var a=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED.ReactCurrentOwner,s=Object.prototype.hasOwnProperty,l={key:!0,ref:!0,__self:!0,__source:!0};function c(e,t,n){var r,o={},c=null,u=null;for(r in void 0!==n&&(c=""+n),void 0!==t.key&&(c=""+t.key),void 0!==t.ref&&(u=t.ref),t)s.call(t,r)&&!l.hasOwnProperty(r)&&(o[r]=t[r]);if(e&&e.defaultProps)for(r in t=e.defaultProps)void 0===o[r]&&(o[r]=t[r]);return{$$typeof:i,type:e,key:c,ref:u,props:o,_owner:a.current}}t.jsx=c,t.jsxs=c},5287:(e,t,n)=>{"use strict";var r=n(5228),i=60103,o=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var a=60109,s=60110,l=60112;t.Suspense=60113;var c=60115,u=60116;if("function"==typeof Symbol&&Symbol.for){var d=Symbol.for;i=d("react.element"),o=d("react.portal"),t.Fragment=d("react.fragment"),t.StrictMode=d("react.strict_mode"),t.Profiler=d("react.profiler"),a=d("react.provider"),s=d("react.context"),l=d("react.forward_ref"),t.Suspense=d("react.suspense"),c=d("react.memo"),u=d("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function h(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var p={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},g={};function m(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}function v(){}function b(e,t,n){this.props=e,this.context=t,this.refs=g,this.updater=n||p}m.prototype.isReactComponent={},m.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(h(85));this.updater.enqueueSetState(this,e,t,"setState")},m.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},v.prototype=m.prototype;var y=b.prototype=new v;y.constructor=b,r(y,m.prototype),y.isPureReactComponent=!0;var x={current:null},w=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function _(e,t,n){var r,o={},a=null,s=null;if(null!=t)for(r in void 0!==t.ref&&(s=t.ref),void 0!==t.key&&(a=""+t.key),t)w.call(t,r)&&!k.hasOwnProperty(r)&&(o[r]=t[r]);var l=arguments.length-2;if(1===l)o.children=n;else if(1<l){for(var c=Array(l),u=0;u<l;u++)c[u]=arguments[u+2];o.children=c}if(e&&e.defaultProps)for(r in l=e.defaultProps)void 0===o[r]&&(o[r]=l[r]);return{$$typeof:i,type:e,key:a,ref:s,props:o,_owner:x.current}}function E(e){return"object"==typeof e&&null!==e&&e.$$typeof===i}var S=/\/+/g;function O(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function P(e,t,n,r,a){var s=typeof e;"undefined"!==s&&"boolean"!==s||(e=null);var l=!1;if(null===e)l=!0;else switch(s){case"string":case"number":l=!0;break;case"object":switch(e.$$typeof){case i:case o:l=!0}}if(l)return a=a(l=e),e=""===r?"."+O(l,0):r,Array.isArray(a)?(n="",null!=e&&(n=e.replace(S,"$&/")+"/"),P(a,t,n,"",(function(e){return e}))):null!=a&&(E(a)&&(a=function(e,t){return{$$typeof:i,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(a,n+(!a.key||l&&l.key===a.key?"":(""+a.key).replace(S,"$&/")+"/")+e)),t.push(a)),1;if(l=0,r=""===r?".":r+":",Array.isArray(e))for(var c=0;c<e.length;c++){var u=r+O(s=e[c],c);l+=P(s,t,n,u,a)}else if(u=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof u)for(e=u.call(e),c=0;!(s=e.next()).done;)l+=P(s=s.value,t,n,u=r+O(s,c++),a);else if("object"===s)throw t=""+e,Error(h(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return l}function C(e,t,n){if(null==e)return e;var r=[],i=0;return P(e,r,"","",(function(e){return t.call(n,e,i++)})),r}function M(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var T={current:null};function N(){var e=T.current;if(null===e)throw Error(h(321));return e}var A={ReactCurrentDispatcher:T,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:x,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:C,forEach:function(e,t,n){C(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return C(e,(function(){t++})),t},toArray:function(e){return C(e,(function(e){return e}))||[]},only:function(e){if(!E(e))throw Error(h(143));return e}},t.Component=m,t.PureComponent=b,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=A,t.cloneElement=function(e,t,n){if(null==e)throw Error(h(267,e));var o=r({},e.props),a=e.key,s=e.ref,l=e._owner;if(null!=t){if(void 0!==t.ref&&(s=t.ref,l=x.current),void 0!==t.key&&(a=""+t.key),e.type&&e.type.defaultProps)var c=e.type.defaultProps;for(u in t)w.call(t,u)&&!k.hasOwnProperty(u)&&(o[u]=void 0===t[u]&&void 0!==c?c[u]:t[u])}var u=arguments.length-2;if(1===u)o.children=n;else if(1<u){c=Array(u);for(var d=0;d<u;d++)c[d]=arguments[d+2];o.children=c}return{$$typeof:i,type:e.type,key:a,ref:s,props:o,_owner:l}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:s,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:a,_context:e},e.Consumer=e},t.createElement=_,t.createFactory=function(e){var t=_.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:l,render:e}},t.isValidElement=E,t.lazy=function(e){return{$$typeof:u,_payload:{_status:-1,_result:e},_init:M}},t.memo=function(e,t){return{$$typeof:c,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return N().useCallback(e,t)},t.useContext=function(e,t){return N().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return N().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return N().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return N().useLayoutEffect(e,t)},t.useMemo=function(e,t){return N().useMemo(e,t)},t.useReducer=function(e,t,n){return N().useReducer(e,t,n)},t.useRef=function(e){return N().useRef(e)},t.useState=function(e){return N().useState(e)},t.version="17.0.2"},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},4848:(e,t,n)=>{"use strict";e.exports=n(1020)},7463:(e,t)=>{"use strict";var n,r,i,o;if("object"==typeof performance&&"function"==typeof performance.now){var a=performance;t.unstable_now=function(){return a.now()}}else{var s=Date,l=s.now();t.unstable_now=function(){return s.now()-l}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var c=null,u=null,d=function(){if(null!==c)try{var e=t.unstable_now();c(!0,e),c=null}catch(e){throw setTimeout(d,0),e}};n=function(e){null!==c?setTimeout(n,0,e):(c=e,setTimeout(d,0))},r=function(e,t){u=setTimeout(e,t)},i=function(){clearTimeout(u)},t.unstable_shouldYield=function(){return!1},o=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,h=window.clearTimeout;if("undefined"!=typeof console){var p=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof p&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var g=!1,m=null,v=-1,b=5,y=0;t.unstable_shouldYield=function(){return t.unstable_now()>=y},o=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):b=0<e?Math.floor(1e3/e):5};var x=new MessageChannel,w=x.port2;x.port1.onmessage=function(){if(null!==m){var e=t.unstable_now();y=e+b;try{m(!0,e)?w.postMessage(null):(g=!1,m=null)}catch(e){throw w.postMessage(null),e}}else g=!1},n=function(e){m=e,g||(g=!0,w.postMessage(null))},r=function(e,n){v=f((function(){e(t.unstable_now())}),n)},i=function(){h(v),v=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,i=e[r];if(!(void 0!==i&&0<S(i,t)))break e;e[r]=t,e[n]=i,n=r}}function _(e){return void 0===(e=e[0])?null:e}function E(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,i=e.length;r<i;){var o=2*(r+1)-1,a=e[o],s=o+1,l=e[s];if(void 0!==a&&0>S(a,n))void 0!==l&&0>S(l,a)?(e[r]=l,e[s]=n,r=s):(e[r]=a,e[o]=n,r=o);else{if(!(void 0!==l&&0>S(l,n)))break e;e[r]=l,e[s]=n,r=s}}}return t}return null}function S(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var O=[],P=[],C=1,M=null,T=3,N=!1,A=!1,R=!1;function L(e){for(var t=_(P);null!==t;){if(null===t.callback)E(P);else{if(!(t.startTime<=e))break;E(P),t.sortIndex=t.expirationTime,k(O,t)}t=_(P)}}function D(e){if(R=!1,L(e),!A)if(null!==_(O))A=!0,n(I);else{var t=_(P);null!==t&&r(D,t.startTime-e)}}function I(e,n){A=!1,R&&(R=!1,i()),N=!0;var o=T;try{for(L(n),M=_(O);null!==M&&(!(M.expirationTime>n)||e&&!t.unstable_shouldYield());){var a=M.callback;if("function"==typeof a){M.callback=null,T=M.priorityLevel;var s=a(M.expirationTime<=n);n=t.unstable_now(),"function"==typeof s?M.callback=s:M===_(O)&&E(O),L(n)}else E(O);M=_(O)}if(null!==M)var l=!0;else{var c=_(P);null!==c&&r(D,c.startTime-n),l=!1}return l}finally{M=null,T=o,N=!1}}var j=o;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){A||N||(A=!0,n(I))},t.unstable_getCurrentPriorityLevel=function(){return T},t.unstable_getFirstCallbackNode=function(){return _(O)},t.unstable_next=function(e){switch(T){case 1:case 2:case 3:var t=3;break;default:t=T}var n=T;T=t;try{return e()}finally{T=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=j,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=T;T=e;try{return t()}finally{T=n}},t.unstable_scheduleCallback=function(e,o,a){var s=t.unstable_now();switch(a="object"==typeof a&&null!==a&&"number"==typeof(a=a.delay)&&0<a?s+a:s,e){case 1:var l=-1;break;case 2:l=250;break;case 5:l=1073741823;break;case 4:l=1e4;break;default:l=5e3}return e={id:C++,callback:o,priorityLevel:e,startTime:a,expirationTime:l=a+l,sortIndex:-1},a>s?(e.sortIndex=a,k(P,e),null===_(O)&&e===_(P)&&(R?i():R=!0,r(D,a-s))):(e.sortIndex=l,k(O,e),A||N||(A=!0,n(I))),e},t.unstable_wrapCallback=function(e){var t=T;return function(){var n=T;T=t;try{return e.apply(this,arguments)}finally{T=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},3721:(e,t,n)=>{"use strict";n.r(t),n.d(t,{SWRConfig:()=>q,default:()=>X,mutate:()=>V,unstable_serialize:()=>Q,useSWRConfig:()=>U});var r=n(6540);function i(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))}function o(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}}var a,s=function(){},l=s(),c=Object,u=function(e){return e===l},d=function(e){return"function"==typeof e},f=function(e,t){return c.assign({},e,t)},h="undefined",p=function(){return typeof window!=h},g=new WeakMap,m=0,v=function(e){var t,n,r=typeof e,i=e&&e.constructor,o=i==Date;if(c(e)!==e||o||i==RegExp)t=o?e.toJSON():"symbol"==r?e.toString():"string"==r?JSON.stringify(e):""+e;else{if(t=g.get(e))return t;if(t=++m+"~",g.set(e,t),i==Array){for(t="@",n=0;n<e.length;n++)t+=v(e[n])+",";g.set(e,t)}if(i==c){t="#";for(var a=c.keys(e).sort();!u(n=a.pop());)u(e[n])||(t+=n+":"+v(e[n])+",");g.set(e,t)}}return t},b=!0,y=p(),x=typeof document!=h,w=y&&window.addEventListener?window.addEventListener.bind(window):s,k=x?document.addEventListener.bind(document):s,_=y&&window.removeEventListener?window.removeEventListener.bind(window):s,E=x?document.removeEventListener.bind(document):s,S={isOnline:function(){return b},isVisible:function(){var e=x&&document.visibilityState;return u(e)||"hidden"!==e}},O={initFocus:function(e){return k("visibilitychange",e),w("focus",e),function(){E("visibilitychange",e),_("focus",e)}},initReconnect:function(e){var t=function(){b=!0,e()},n=function(){b=!1};return w("online",t),w("offline",n),function(){_("online",t),_("offline",n)}}},P=!p()||"Deno"in window,C=P?r.useEffect:r.useLayoutEffect,M="undefined"!=typeof navigator&&navigator.connection,T=!P&&M&&(["slow-2g","2g"].includes(M.effectiveType)||M.saveData),N=function(e){if(d(e))try{e=e()}catch(t){e=""}var t=[].concat(e);return[e="string"==typeof e?e:(Array.isArray(e)?e.length:e)?v(e):"",t,e?"$swr$"+e:""]},A=new WeakMap,R=function(e,t,n,r,i,o,a){void 0===a&&(a=!0);var s=A.get(e),l=s[0],c=s[1],u=s[3],d=l[t],f=c[t];if(a&&f)for(var h=0;h<f.length;++h)f[h](n,r,i);return o&&(delete u[t],d&&d[0])?d[0](2).then((function(){return e.get(t)})):e.get(t)},L=0,D=function(){return++L},I=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return i(void 0,void 0,void 0,(function(){var t,n,r,i,a,s,c,h,p,g,m,v,b,y,x,w,k,_,E,S,O;return o(this,(function(o){switch(o.label){case 0:if(t=e[0],n=e[1],r=e[2],i=e[3],s=!!u((a="boolean"==typeof i?{revalidate:i}:i||{}).populateCache)||a.populateCache,c=!1!==a.revalidate,h=!1!==a.rollbackOnError,p=a.optimisticData,g=N(n),m=g[0],v=g[2],!m)return[2];if(b=A.get(t),y=b[2],e.length<3)return[2,R(t,m,t.get(m),l,l,c,!0)];if(x=r,k=D(),y[m]=[k,0],_=!u(p),E=t.get(m),_&&(S=d(p)?p(E):p,t.set(m,S),R(t,m,S)),d(x))try{x=x(t.get(m))}catch(e){w=e}return x&&d(x.then)?[4,x.catch((function(e){w=e}))]:[3,2];case 1:if(x=o.sent(),k!==y[m][0]){if(w)throw w;return[2,x]}w&&_&&h&&(s=!0,x=E,t.set(m,E)),o.label=2;case 2:return s&&(w||(d(s)&&(x=s(x,E)),t.set(m,x)),t.set(v,f(t.get(v),{error:w}))),y[m][1]=D(),[4,R(t,m,x,w,l,c,!!s)];case 3:if(O=o.sent(),w)throw w;return[2,s?O:x]}}))}))},j=function(e,t){for(var n in e)e[n][0]&&e[n][0](t)},z=function(e,t){if(!A.has(e)){var n=f(O,t),r={},i=I.bind(l,e),o=s;if(A.set(e,[r,{},{},{},i]),!P){var a=n.initFocus(setTimeout.bind(l,j.bind(l,r,0))),c=n.initReconnect(setTimeout.bind(l,j.bind(l,r,1)));o=function(){a&&a(),c&&c(),A.delete(e)}}return[e,i,o]}return[e,A.get(e)[4]]},F=z(new Map),B=F[0],V=F[1],W=f({onLoadingSlow:s,onSuccess:s,onError:s,onErrorRetry:function(e,t,n,r,i){var o=n.errorRetryCount,a=i.retryCount,s=~~((Math.random()+.5)*(1<<(a<8?a:8)))*n.errorRetryInterval;!u(o)&&a>o||setTimeout(r,s,i)},onDiscarded:s,revalidateOnFocus:!0,revalidateOnReconnect:!0,revalidateIfStale:!0,shouldRetryOnError:!0,errorRetryInterval:T?1e4:5e3,focusThrottleInterval:5e3,dedupingInterval:2e3,loadingTimeout:T?5e3:3e3,compare:function(e,t){return v(e)==v(t)},isPaused:function(){return!1},cache:B,mutate:V,fallback:{}},S),H=function(e,t){var n=f(e,t);if(t){var r=e.use,i=e.fallback,o=t.use,a=t.fallback;r&&o&&(n.use=r.concat(o)),i&&a&&(n.fallback=f(i,a))}return n},$=(0,r.createContext)({}),U=function(){return f(W,(0,r.useContext)($))},K=function(e,t,n){var r=t[e]||(t[e]=[]);return r.push(n),function(){var e=r.indexOf(n);e>=0&&(r[e]=r[r.length-1],r.pop())}},Y={dedupe:!0},q=c.defineProperty((function(e){var t=e.value,n=H((0,r.useContext)($),t),i=t&&t.provider,o=(0,r.useState)((function(){return i?z(i(n.cache||B),t):l}))[0];return o&&(n.cache=o[0],n.mutate=o[1]),C((function(){return o?o[2]:l}),[]),(0,r.createElement)($.Provider,f(e,{value:n}))}),"default",{value:W}),Q=function(e){return N(e)[0]},X=(a=function(e,t,n){var a=n.cache,s=n.compare,c=n.fallbackData,g=n.suspense,m=n.revalidateOnMount,v=n.refreshInterval,b=n.refreshWhenHidden,y=n.refreshWhenOffline,x=A.get(a),w=x[0],k=x[1],_=x[2],E=x[3],S=N(e),O=S[0],M=S[1],T=S[2],L=(0,r.useRef)(!1),j=(0,r.useRef)(!1),z=(0,r.useRef)(O),F=(0,r.useRef)(t),B=(0,r.useRef)(n),V=function(){return B.current},W=function(){return V().isVisible()&&V().isOnline()},H=function(e){return a.set(T,f(a.get(T),e))},$=a.get(O),U=u(c)?n.fallback[O]:c,q=u($)?U:$,Q=a.get(T)||{},X=Q.error,G=!L.current,J=function(){return G&&!u(m)?m:!V().isPaused()&&(g?!u(q)&&n.revalidateIfStale:u(q)||n.revalidateIfStale)},Z=!(!O||!t)&&(!!Q.isValidating||G&&J()),ee=function(e,t){var n=(0,r.useState)({})[1],i=(0,r.useRef)(e),o=(0,r.useRef)({data:!1,error:!1,isValidating:!1}),a=(0,r.useCallback)((function(e){var r=!1,a=i.current;for(var s in e){var l=s;a[l]!==e[l]&&(a[l]=e[l],o.current[l]&&(r=!0))}r&&!t.current&&n({})}),[]);return C((function(){i.current=e})),[i,o.current,a]}({data:q,error:X,isValidating:Z},j),te=ee[0],ne=ee[1],re=ee[2],ie=(0,r.useCallback)((function(e){return i(void 0,void 0,void 0,(function(){var t,r,i,c,f,h,p,g,m,v,b,y,x;return o(this,(function(o){switch(o.label){case 0:if(t=F.current,!O||!t||j.current||V().isPaused())return[2,!1];c=!0,f=e||{},h=!E[O]||!f.dedupe,p=function(){return!j.current&&O===z.current&&L.current},g=function(){var e=E[O];e&&e[1]===i&&delete E[O]},m={isValidating:!1},v=function(){H({isValidating:!1}),p()&&re(m)},H({isValidating:!0}),re({isValidating:!0}),o.label=1;case 1:return o.trys.push([1,3,,4]),h&&(R(a,O,te.current.data,te.current.error,!0),n.loadingTimeout&&!a.get(O)&&setTimeout((function(){c&&p()&&V().onLoadingSlow(O,n)}),n.loadingTimeout),E[O]=[t.apply(void 0,M),D()]),x=E[O],r=x[0],i=x[1],[4,r];case 2:return r=o.sent(),h&&setTimeout(g,n.dedupingInterval),E[O]&&E[O][1]===i?(H({error:l}),m.error=l,b=_[O],!u(b)&&(i<=b[0]||i<=b[1]||0===b[1])?(v(),h&&p()&&V().onDiscarded(O),[2,!1]):(s(te.current.data,r)?m.data=te.current.data:m.data=r,s(a.get(O),r)||a.set(O,r),h&&p()&&V().onSuccess(r,O,n),[3,4])):(h&&p()&&V().onDiscarded(O),[2,!1]);case 3:return y=o.sent(),g(),V().isPaused()||(H({error:y}),m.error=y,h&&p()&&(V().onError(y,O,n),("boolean"==typeof n.shouldRetryOnError&&n.shouldRetryOnError||d(n.shouldRetryOnError)&&n.shouldRetryOnError(y))&&W()&&V().onErrorRetry(y,O,n,ie,{retryCount:(f.retryCount||0)+1,dedupe:!0}))),[3,4];case 4:return c=!1,v(),p()&&h&&R(a,O,m.data,m.error,!1),[2,!0]}}))}))}),[O]),oe=(0,r.useCallback)(I.bind(l,a,(function(){return z.current})),[]);if(C((function(){F.current=t,B.current=n})),C((function(){if(O){var e=O!==z.current,t=ie.bind(l,Y),n=0,r=K(O,k,(function(e,t,n){re(f({error:t,isValidating:n},s(te.current.data,e)?l:{data:e}))})),i=K(O,w,(function(e){if(0==e){var r=Date.now();V().revalidateOnFocus&&r>n&&W()&&(n=r+V().focusThrottleInterval,t())}else if(1==e)V().revalidateOnReconnect&&W()&&t();else if(2==e)return ie()}));return j.current=!1,z.current=O,L.current=!0,e&&re({data:q,error:X,isValidating:Z}),J()&&(u(q)||P?t():(o=t,p()&&typeof window.requestAnimationFrame!=h?window.requestAnimationFrame(o):setTimeout(o,1))),function(){j.current=!0,r(),i()}}var o}),[O,ie]),C((function(){var e;function t(){var t=d(v)?v(q):v;t&&-1!==e&&(e=setTimeout(n,t))}function n(){te.current.error||!b&&!V().isVisible()||!y&&!V().isOnline()?t():ie(Y).then(t)}return t(),function(){e&&(clearTimeout(e),e=-1)}}),[v,b,y,ie]),(0,r.useDebugValue)(q),g&&u(q)&&O)throw F.current=t,B.current=n,j.current=!1,u(X)?ie(Y):X;return{mutate:oe,get data(){return ne.data=!0,q},get error(){return ne.error=!0,X},get isValidating(){return ne.isValidating=!0,Z}}},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=U(),r=function(e){return d(e[1])?[e[0],e[1],e[2]||{}]:[e[0],null,(null===e[1]?e[2]:e[1])||{}]}(e),i=r[0],o=r[1],s=r[2],l=H(n,s),c=a,u=l.use;if(u)for(var f=u.length;f-- >0;)c=u[f](c);return c(i,o||l.fetcher,l)})},3166:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(1947);t.default=function(e){var t=e.title,n=e.zhTWTitle,o=e.breadcrumbs,a=e.picType,s=void 0===a?"turtle":a,l=r.useState(!1),c=l[0],u=l[1];return r.useEffect((function(){u(!0)}),[]),r.createElement("div",{className:"big-top"},r.createElement("div",{className:"float-dot-yel"},r.createElement("img",{src:"/static/image/cir_yel.png"})),r.createElement("div",{className:"float-dot-blue"},r.createElement("img",{src:"/static/image/cir_blue.png"})),r.createElement("div",{className:"top-wave"}),r.createElement(i.default,{breadcrumbs:o}),r.createElement("div",{className:"main-box"},"turtle"==s&&c&&r.createElement(r.Fragment,null,r.createElement("div",{className:"pic-right1"},r.createElement("img",{src:"/static/image/cont-rightimg1.png"})),r.createElement("div",{className:"pic-right1s"},r.createElement("img",{src:"/static/image/cont-rightimg1s.png"}))),"crap"==s&&c&&r.createElement("div",{className:"pic-right2"},r.createElement("img",{src:"/static/image/cont-rightimg2.png"})),r.createElement("div",{className:"float-dot-yel2"},r.createElement("img",{src:"/static/image/cir_yel.png"})),r.createElement("div",{className:"float-dot-blue2"},r.createElement("img",{src:"/static/image/cir_blue.png"})),r.createElement("div",{className:"title-box"},r.createElement("h2",null,n," ",r.createElement("span",null)),r.createElement("p",{className:"capitalize-first"},t))))}},1947:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(3981);t.default=function(e){var t;return r.createElement("div",{className:"path"},null===(t=null==e?void 0:e.breadcrumbs)||void 0===t?void 0:t.map((function(t,n){var o="breadcrumb-".concat(n),a=n==e.breadcrumbs.length-1?" ":">";return(null==t?void 0:t.href)?r.createElement(i.Translation,null,(function(e){return r.createElement("a",{key:o,href:t.href},e(t.title),a)})):r.createElement(i.Translation,null,(function(e){return r.createElement("p",{key:o},e(t.title),a)}))})))}},4815:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(3981);t.default=function(e){var t=e.zhTWTitle,n=e.circleTitle,o=e.count,a=e.className,s=(0,i.useTranslation)().t;return r.createElement("li",{className:"item ".concat(a)},r.createElement("div",{className:"bg-animate"}),r.createElement("div",{className:"left_area"},r.createElement("div",{className:"cir-box"},n),r.createElement("p",null,s(t))),r.createElement("div",{className:"num"},o))}},9242:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6540),o=n(4815),a=n(3981),s={1:"附錄一",2:"附錄二",3:"附錄三",NC:"NC"},l={1:"I",2:"II",3:"III",NC:"NC"};t.default=function(e){var t=e.data;return i.createElement("div",{className:"item-p1"},i.createElement("div",{className:"mark-title mb-0"},i.createElement("img",{src:"/static/image/title-mark.svg"}),i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("CITES附錄統計"))}))),i.createElement("div",{className:"mark-title-note"},i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("單位：種 / 種下"))}))),i.createElement("ul",{className:"stsrank-area"},t.map((function(e,t){return i.createElement(o.default,r({},e,{zhTWTitle:s[e.zhTWTitle],circleTitle:l[e.zhTWTitle],className:"cir-blue",key:"class-count-".concat(t)}))}))))}},570:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(7237),o=n(6734);n(4292);var a=n(3981);i.Chart.register(i.CategoryScale,i.LinearScale,i.BarElement,i.Title,i.Tooltip,i.Legend);var s={maintainAspectRatio:!1,plugins:{datalabels:{display:!1},title:{display:!1},legend:{display:!1}},responsive:!0,redraw:!0,interaction:{mode:"index",intersect:!1},scales:{xAxes:{grid:{display:!1},ticks:{display:!0}},yAxes:{grid:{display:!0},ticks:{display:!0,callback:function(e){return(parseInt(e)/1e3).toString()+"k"}}}}};t.default=function(e){var t=e.data,n=(0,a.useTranslation)(),i=n.t,l=(n.i18n,i("臺灣現有種數")),c=i("全球現有種數"),u={labels:t.map((function(e){return i(e.name)})),datasets:[{label:l,data:t.map((function(e){return e.TaiwanCount||0})),backgroundColor:"#FDD440",borderWidth:0,stack:"Stack 0"},{label:c,data:t.map((function(e){return e.GlobalCount||0})),backgroundColor:"#85BBD0",borderWidth:0,stack:"Stack 0"}]};return r.createElement(o.Bar,{data:u,options:s})}},8080:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(3981);t.default=function(e){var t=e.zhTWTitle,n=e.count,o=e.className,a=(0,i.useTranslation)().t;return r.createElement("li",{className:"item ".concat(o)},r.createElement("div",{className:"bg-animate"}),r.createElement("div",{className:"left_area"},r.createElement("div",{className:"cir-box"},t[0]),r.createElement("p",null,a(t))),r.createElement("div",{className:"num"},n))}},6483:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6540),o=n(8080),a=n(3981),s={is_terrestrial:"陸生",is_freshwater:"淡水",is_brackish:"半鹹水",is_marine:"海洋"};t.default=function(e){var t=e.data;return i.createElement("div",{className:"item-p1 m_marb_20"},i.createElement("div",{className:"mark-title mb-0"},i.createElement("img",{src:"/static/image/title-mark.svg"}),i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("棲地環境統計"))}))),i.createElement("div",{className:"mark-title-note"},i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("單位：種 / 種下"))}))),i.createElement("ul",{className:"stsrank-area"},t.map((function(e,t){return i.createElement(o.default,r({},e,{zhTWTitle:s[e.enTitle],className:"cir-blue",key:"class-count-".concat(t)}))}))))}},6045:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTotal=void 0;var r=n(6540),i=n(7237),o=n(6734);n(4292);var a=n(4292),s=n(3981),l=n(3981),c=["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#ff7f00","#cab2d6","#6a3d9a","#ffff99","#b15928","#d3d3d3"];i.Chart.register(i.ArcElement,i.Tooltip,i.Legend,a.default),i.Chart.defaults.font.size=14,i.Chart.defaults.plugins.legend.labels.boxHeight=6,i.Chart.defaults.plugins.legend.labels.boxWidth=25,i.Chart.defaults.plugins.legend.labels.padding=20,t.getTotal=function(e){return e.reduce((function(e,t){return e+t.count}),0)},t.default=function(e){var n=e.data,i=(0,t.getTotal)(n),a=(0,l.useTranslation)(),u=a.t,d=(a.i18n,{labels:n.map((function(e){return u(e.name)})),datasets:[{data:n.map((function(e){return e.count})),backgroundColor:c,borderWidth:0}]}),f=function(e,t){return{plugins:{datalabels:{display:function(e){return Math.ceil(e.dataset.data[e.dataIndex]/t*100)>=2},color:"#000",font:{size:10,weight:"bold"},formatter:function(e){return Math.ceil(e/t*100)+"%"}}}}}(0,i);return r.createElement("div",{className:"item-p1"},r.createElement("div",{className:"mark-title mb-0"},r.createElement("img",{src:"/static/image/title-mark.svg"}),r.createElement(s.Translation,null,(function(e){return r.createElement("p",null,e("IUCN評估統計"))}))),r.createElement("div",{className:"mark-title-note"},r.createElement(s.Translation,null,(function(e){return r.createElement("p",null,e("單位：種 / 種下"))}))),r.createElement("div",{className:"for-canvas doughnut"},r.createElement(o.Doughnut,{data:d,options:f})))}},9112:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(3981);t.default=function(e){var t=(0,i.useTranslation)(),n=t.t,o=(t.i18n,e.data),a=e.show,s=e.handleShowCompareTableClick,l=e.globalUpdated;return a?r.createElement("div",{className:"popbox-table"},r.createElement("div",{className:"rel"},r.createElement("div",{className:"w-bg "},r.createElement("div",{className:"xxx",onClick:function(){return s(!1)}},r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"50",height:"50",viewBox:"0 0 50 50"},r.createElement("g",{id:"Group_8961","data-name":"Group 8961",transform:"translate(-1288 -210)"},r.createElement("g",{id:"Ellipse_145","data-name":"Ellipse 145",transform:"translate(1288 210)",fill:"#fff",stroke:"#4c8da7",strokeWidth:"2"},r.createElement("circle",{cx:"25",cy:"25",r:"25",stroke:"none"}),r.createElement("circle",{cx:"25",cy:"25",r:"24",fill:"none"})),r.createElement("g",{id:"Group_7748","data-name":"Group 7748",transform:"translate(100.696 1061.993) rotate(-45)"},r.createElement("line",{id:"Line_265","data-name":"Line 265",x2:"25",transform:"translate(1429.5 271.5)",fill:"none",stroke:"#4c8da7",strokeLinecap:"round",strokeWidth:"2"}),r.createElement("line",{id:"Line_266","data-name":"Line 266",x2:"25",transform:"translate(1442.5 259.5) rotate(90)",fill:"none",stroke:"#4c8da7",strokeLinecap:"round",strokeWidth:"2"}))))),r.createElement("div",{className:"title-area"},r.createElement(i.Translation,null,(function(e){return r.createElement("h2",null,e("臺灣與全球物種數比較"),r.createElement("span",null))}))),r.createElement("p",{className:"global-table-updated"},n("全球物種數更新時間"),": ",l," / ",n("單位：種")),r.createElement(i.Translation,null,(function(e){return r.createElement("p",{className:"pad-note"},e("請往右滑動"),">>>")})),r.createElement("div",{className:"pad-mb-scro"},r.createElement("table",{className:"table-style1 b-0",cellPadding:"0",cellSpacing:"0"},r.createElement("tbody",null,r.createElement("tr",null,r.createElement(i.Translation,null,(function(e){return r.createElement("td",null,e("界"))})),r.createElement(i.Translation,null,(function(e){return r.createElement("td",null,e("門"))})),r.createElement(i.Translation,null,(function(e){return r.createElement("td",null,e("綱"))})),r.createElement(i.Translation,null,(function(e){return r.createElement("td",null,e("全球現有種數"))})),r.createElement(i.Translation,null,(function(e){return r.createElement("td",null,e("臺灣現有種數"))})),r.createElement(i.Translation,null,(function(e){return r.createElement("td",{width:"22%"},e("臺灣名錄主要提供者"))}))),o.map((function(e,t){return"全球物種數更新時間"!=e.kingdomName?r.createElement("tr",{key:"species-compare-table-tr-".concat(t)},r.createElement("td",null,n(e.kingdomName)),r.createElement("td",null,n(e.phylumName)),r.createElement("td",null,n(e.className)),r.createElement("td",null,e.globalCount),r.createElement("td",null,e.taiwanCount),r.createElement("td",null,e.twProvider)):""})))))))):r.createElement(r.Fragment,null)}},9277:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(3981);t.default=function(e){var t=e.zhTWTitle,n=e.circleTitle,o=e.count,a=e.className,s=(0,i.useTranslation)().t;return r.createElement("li",{className:"item ".concat(a)},r.createElement("div",{className:"bg-animate"}),r.createElement("div",{className:"left_area"},r.createElement("div",{className:"cir-box"},n),r.createElement("p",null,s(t))),r.createElement("div",{className:"num"},o))}},8716:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6540),o=n(9277),a=n(3981),s={I:"第 I 級 瀕臨絕種野生動物",II:"第 II 級 珍貴稀有野生動物",III:"第 III 級 其他應予保育之野生動物",1:"文資法珍貴稀有植物"},l={I:"I",II:"II",III:"III",1:"珍"};t.default=function(e){var t=e.data;return i.createElement("div",{className:"item-p1"},i.createElement("div",{className:"mark-title mb-0"},i.createElement("img",{src:"/static/image/title-mark.svg"}),i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("臺灣保育類統計"))}))),i.createElement("div",{className:"mark-title-note"},i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("單位：種 / 種下"))}))),i.createElement("ul",{className:"stsrank-area"},t.map((function(e,t){return i.createElement(o.default,r({},e,{zhTWTitle:s[e.zhTWTitle],circleTitle:l[e.zhTWTitle],className:"cir-blue",key:"class-count-".concat(t)}))}))))}},1367:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540);t.default=function(e){var t=e.zhTWTitle,n=e.enTitle,i=e.count,o=e.className;return r.createElement("li",{className:"item ".concat(o)},r.createElement("div",{className:"bg-animate"}),r.createElement("div",{className:"left_area"},r.createElement("div",{className:"cir-box"},t),r.createElement("p",null,n)),r.createElement("div",{className:"num"},i))}},1762:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6540),o=n(1367),a=n(3981),s=["rank-1-red","rank-2-org","rank-3-yell","rank-4-green","rank-5-blue","rank-6-deepblue","rank-7-purple","rank-second-gray"],l={Kingdom:"界",Phylum:"門",Class:"綱",Order:"目",Family:"科",Genus:"屬",Species:"種",Infraspecies:"種下"};t.default=function(e){var t=e.data;return i.createElement("div",{className:"item-p1"},i.createElement("div",{className:"mark-title"},i.createElement("img",{src:"/static/image/title-mark.svg"}),i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("各階層數量統計"))}))),i.createElement("ul",{className:"stsrank-area"},t.map((function(e,t){return i.createElement(o.default,r({},e,{zhTWTitle:l[e.enTitle],className:s[t],key:"class-count-".concat(t)}))}))))}},5687:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTotal=void 0;var r=n(6540),i=n(7237),o=n(6734);n(4292);var a=n(4292),s=n(3981),l=n(3981),c=["#a6cee3","#1f78b4","#b2df8a","#33a02c","#fb9a99","#e31a1c","#fdbf6f","#cab2d6","#6a3d9a","#ffff99","#b15928","#d3d3d3"];i.Chart.register(i.ArcElement,i.Tooltip,i.Legend,a.default),i.Chart.defaults.font.size=14,i.Chart.defaults.plugins.legend.labels.boxHeight=6,i.Chart.defaults.plugins.legend.labels.boxWidth=25,i.Chart.defaults.plugins.legend.labels.padding=20,t.getTotal=function(e){return e.reduce((function(e,t){return e+t.count}),0)},t.default=function(e){var n=e.data,i=(0,t.getTotal)(n),a=(0,l.useTranslation)(),u=a.t,d=(a.i18n,{labels:n.map((function(e){return u(e.name)})),datasets:[{data:n.map((function(e){return e.count})),backgroundColor:c,borderWidth:0}]}),f=function(e,t){return{plugins:{datalabels:{display:function(e){return Math.ceil(e.dataset.data[e.dataIndex]/t*100)>=2},color:"#000",font:{size:10,weight:"bold"},formatter:function(e){return Math.ceil(e/t*100)+"%"}}}}}(0,i);return r.createElement("div",{className:"item-p1"},r.createElement("div",{className:"mark-title mb-0"},r.createElement("img",{src:"/static/image/title-mark.svg"}),r.createElement(s.Translation,null,(function(e){return r.createElement("p",null,e("臺灣紅皮書評估統計"))}))),r.createElement("div",{className:"mark-title-note"},r.createElement(s.Translation,null,(function(e){return r.createElement("p",null,e("單位：種 / 種下"))}))),r.createElement("div",{className:"for-canvas doughnut"},r.createElement(o.Doughnut,{data:d,options:f})))}},6767:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.getTotal=void 0;var r=n(6540),i=n(7237),o=n(6734);n(4292);var a=n(4292),s=n(3981),l=n(3981);i.Chart.register(i.ArcElement,i.Tooltip,i.Legend,a.default),i.Chart.defaults.font.size=14,i.Chart.defaults.plugins.legend.labels.boxHeight=6,i.Chart.defaults.plugins.legend.labels.boxWidth=25,i.Chart.defaults.plugins.legend.labels.padding=20,t.getTotal=function(e){return e.reduce((function(e,t){return e+t.count}),0)},t.default=function(e){var n=e.data,i=(0,t.getTotal)(n),a=(0,l.useTranslation)(),c=a.t,u=(a.i18n,{labels:n.map((function(e){return c(e.name)})),datasets:[{data:n.map((function(e){return e.count})),backgroundColor:n.map((function(e){return e.color})),borderWidth:0}]}),d=function(e,t){return{plugins:{datalabels:{display:function(e){return Math.ceil(e.dataset.data[e.dataIndex]/t*100)>=2},color:"#000",font:{size:10,weight:"bold"},formatter:function(e){return Math.ceil(e/t*100)+"%"}}}}}(0,i);return r.createElement("div",{className:"item-p1 m_marb_20"},r.createElement("div",{className:"mark-title mb-0"},r.createElement("img",{src:"/static/image/title-mark.svg"}),r.createElement(s.Translation,null,(function(e){return r.createElement("p",null,e("物種來源"))}))),r.createElement("div",{className:"mark-title-note"},r.createElement(s.Translation,null,(function(e){return r.createElement("p",null,e("單位：種 / 種下"))}))),r.createElement("div",{className:"for-canvas doughnut"},r.createElement(o.Doughnut,{data:u,options:d})))}},2854:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(5158),o=n(3981),a=n(9759);t.default=function(e){var t=e.name,n=e.image,s=e.count,l=e.ratio,c=e.total,u=parseFloat(l).toFixed(0);return r.createElement("li",null,r.createElement("div",{className:"title-sp"},r.createElement(o.Translation,null,(function(e){return r.createElement("p",null,e(t),r.createElement("span",null))})),r.createElement("div",{className:"num"},(0,i.formatNumber)(c))),r.createElement("div",{className:"pie-box"},r.createElement(a.default,{title:(0,i.formatNumber)(s),enterTouchDelay:0},r.createElement("div",{className:"pie"},r.createElement("svg",{width:"170",height:"170"},r.createElement("circle",{className:"pie".concat(u),r:"70",cx:"85",cy:"85"})))),r.createElement("div",{className:"center-iconbox"},r.createElement("div",{className:"center-use"},r.createElement("div",{className:"icon"},r.createElement("img",{src:n})),r.createElement("div",{className:"per"},l,"%")))))}},8397:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6540),o=n(2854),a=n(3981);t.default=function(e){var t=e.data;return i.createElement("div",{className:"boxarea-1 vivi"},i.createElement("div",{className:"title-flex"},i.createElement("div",{className:"mark-title"},i.createElement("img",{src:"/static/image/title-mark.svg"}),i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("臺灣各類生物種數與特有比例"))}))),i.createElement("div",{className:"color-inf"},i.createElement("div",{className:"blue-sq"}),i.createElement(a.Translation,null,(function(e){return i.createElement("p",null,e("特有種 / 種下"))})))),i.createElement("ul",{className:"special-specise"},t.map((function(e,t){return i.createElement(o.default,r({key:"species-and-endemic-ratios-".concat(t)},e))}))))}},4476:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(7237),o=n(6734);n(4292),i.Chart.register(i.CategoryScale,i.LinearScale,i.BarElement,i.Title,i.Tooltip,i.Legend);var a=n(3981),s={legend:{display:!0,position:"right",labels:{padding:16,usePointStyle:!0}},indexAxis:"y",plugins:{datalabels:{display:!1},title:{display:!1},legend:{display:!1}},responsive:!0,redraw:!0,interaction:{mode:"index",intersect:!1},scales:{xAxes:{grid:{display:!0},ticks:{display:!0,callback:function(e){return(parseInt(e)/1e3).toString()+"k"}}},yAxes:{grid:{display:!1},ticks:{display:!0}}}};t.default=function(e){var t=e.data,n=(0,a.useTranslation)(),i=n.t,l=(n.i18n,i("物種數")),c={labels:t.map((function(e){return i(e.name)})),datasets:[{label:l,data:t.map((function(e){return e.count})),backgroundColor:"#85BBD0",borderWidth:0}]};return r.createElement(o.Bar,{data:c,options:s})}},2008:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(4476),o=n(3981);t.default=function(e){var t=e.data;return r.createElement("div",{className:"item-p2"},r.createElement("div",{className:"mark-title mb-0"},r.createElement("img",{src:"/static/image/title-mark.svg"}),r.createElement(o.Translation,null,(function(e){return r.createElement("p",null,e("各界物種數統計"))}))),r.createElement("div",{className:"mark-title-note"},r.createElement(o.Translation,null,(function(e){return r.createElement("p",null,e("單位：種"))}))),r.createElement("div",{className:"for-canvas"},r.createElement(i.default,{data:t})))}},2487:function(e,t,n){"use strict";var r=this&&this.__spreadArray||function(e,t,n){if(n||2===arguments.length)for(var r,i=0,o=t.length;i<o;i++)!r&&i in t||(r||(r=Array.prototype.slice.call(t,0,i)),r[i]=t[i]);return e.concat(r||Array.prototype.slice.call(t))};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6540),o=n(8214),a=n(570),s=n(3981),l=n(3981);t.default=function(e){var t=e.data,n=e.handleCompareTypeChange,c=e.handleShowCompareTableClick,u=e.kingdomInfo,d=e.compareType,f=e.globalUpdated,h=i.useState(u.map((function(e,t){return e.chineseName}))),p=h[0],g=h[1],m=function(e){var t=e.target.checked?r(r([],p,!0),[e.target.value],!1):p.filter((function(t){return t!==e.target.value}));g(t.map((function(e){return e})))},v=t;"kingdom_compare"==d&&(v=t.filter((function(e,t){return p.includes(e.name)})));var b=(0,l.useTranslation)(),y=b.t,x=b.i18n,w=o.speciesOptions.map((function(e,t){return i.createElement("option",{key:"species-option-".concat(t),value:e.value},y((e.label||"").toString()))}));return i.createElement("div",{className:"boxarea-2-1"},i.createElement("div",{className:"item-p2 item-p-100"},i.createElement("div",{className:"title-flex-box"},i.createElement("div",{className:"left-box"},i.createElement("div",{className:"mark-title"},i.createElement("img",{src:"/static/image/title-mark.svg"}),i.createElement(s.Translation,null,(function(e){return i.createElement("p",null,e("臺灣與全球物種數比較"))}))),i.createElement("div",{className:"color-inf"},i.createElement("div",{className:"colorbox"},i.createElement("div",{className:"color1"}),i.createElement(s.Translation,null,(function(e){return i.createElement("p",null,e("全球現有種數"))}))),i.createElement("div",{className:"colorbox"},i.createElement("div",{className:"color2"}),i.createElement(s.Translation,null,(function(e){return i.createElement("p",null,e("臺灣現有種數"))}))))),i.createElement("div",{className:"right-select"},i.createElement("select",{name:"",id:"",onChange:n},w))),i.createElement("p",{className:"global-stat-updated"},y("全球物種數更新時間"),": ",f," / ",y("單位：種")),i.createElement("div",{className:"for-canvas-vh"},i.createElement(a.default,{data:v}),"kingdom_compare"==d&&i.createElement("div",{className:"more-selection-area"},i.createElement("div",{className:'item-box check-set"'},i.createElement("div",{className:"right-check"},null==u?void 0:u.map((function(e,t){return i.createElement("label",{className:"check-item mr-[8px]"},"en-us"==x.language?e.kingdom:e.chineseName,i.createElement("input",{type:"checkbox",name:"alien_type",checked:!!p.includes(e.chineseName),value:e.chineseName,onChange:m}),i.createElement("span",{className:"checkmark"}))})))))),i.createElement("a",{href:"#",className:"btn-more",onClick:function(){return c(!0)}},i.createElement(s.Translation,null,(function(e){return i.createElement("p",{className:"en-us"==x.language?"fs-12":""},e("查看比較總表"))})),i.createElement("div",{className:"arr"},i.createElement("div",{className:"arline"}),i.createElement("div",{className:"arrrot"},i.createElement("img",{src:"/static/image/arrlinrot.svg"}))))))}},395:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),i=n(5158),o=n(3981);t.default=function(e){var t=(0,o.useTranslation)(),n=(t.t,t.i18n),a=e.img,s=e.title,l=e.count,c=e.CircleClassName,u=e.enTitle,d=e.tooltip;return r.createElement("li",null,r.createElement("div",{className:"titlebox"},r.createElement("div",{className:"cir_icon"},r.createElement("img",{src:a}),r.createElement("div",{className:c})),r.createElement("div",{className:"txtbox"},r.createElement("div",{className:"title"},r.createElement("h3",{className:"en-us"==n.language?"w-min-content":""},r.createElement(o.Trans,{i18nKey:s,components:[r.createElement("br",null)]})),d&&r.createElement("div",{className:"markq"},r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"28",height:"28",viewBox:"0 0 28 28"},r.createElement("g",{id:"qs_mark",transform:"translate(-1536.736 -1209.631)"},r.createElement("g",{id:"Ellipse_8","data-name":"Ellipse 8",transform:"translate(1536.736 1209.631)",fill:"#fff",stroke:"#aaa",strokeWidth:"1"},r.createElement("circle",{cx:"14",cy:"14",r:"14",stroke:"none"}),r.createElement("circle",{cx:"14",cy:"14",r:"13.5",fill:"none"})),r.createElement("text",{id:"_","data-name":"?",transform:"translate(1545.736 1230.631)",fill:"#aaa",fontSize:"20",fontFamily:"Fredoka-Regular, Fredoka",letterSpacing:"0.05em"},r.createElement("tspan",{x:"0",y:"0"},"?")))),r.createElement("div",{className:"hvbubble ".concat("en-us"==n.language?"en-tooltip":"")},r.createElement("p",null,d)))),r.createElement("p",{className:"uppercase"},u))),r.createElement("div",{className:"numberbox"},(0,i.formatNumber)(l)))}},3474:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var i in t=arguments[n])Object.prototype.hasOwnProperty.call(t,i)&&(e[i]=t[i]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var i=n(6540),o=n(395),a=n(3981),s=[{img:"/static/image/ssicon01.svg",title:"收錄物種數",enTitle:i.createElement(a.Translation,null,(function(e){return i.createElement(i.Fragment,null,e("SPECIES AND")," ",i.createElement("br",null),e("INFRASPECIES"))})),count:0,type:"taxon",CircleClassName:"cir-line1",tooltip:i.createElement(a.Translation,null,(function(e){return i.createElement(i.Fragment,null,e("排除有種下分類群的種階層"))}))},{img:"/static/image/ssicon02.svg",title:"收錄學名數",enTitle:i.createElement(a.Translation,null,(function(e){return i.createElement(i.Fragment,null,e("SCIENTIFIC NAMES"))})),count:0,type:"name",CircleClassName:"cir-line2",tooltip:i.createElement(a.Translation,null,(function(e){return i.createElement(i.Fragment,null,e("包含種上階層學名"))}))},{img:"/static/image/ssicon03.svg",title:"收錄文獻數",enTitle:i.createElement(a.Translation,null,(function(e){return i.createElement(i.Fragment,null,e("REFERENCES"))})),count:0,type:"reference",CircleClassName:"cir-line1"}];t.default=function(){var e=i.useState([]),t=e[0],n=e[1];return i.useEffect((function(){fetch("".concat("https://api.taicol.tw/v2","/web/stat/index")).then((function(e){return e.json()})).then((function(e){n(e)}))}),[]),i.createElement("div",{className:"statis-3-cont"},i.createElement("div",{className:"main-box"},i.createElement("ul",{className:"statis-3"},null==s?void 0:s.map((function(e,n){var a,s=t&&(null===(a=null==t?void 0:t.find((function(t){return t[0]===e.type})))||void 0===a?void 0:a[1])||0;return e.count=s,i.createElement(o.default,r({},e,{key:"taxon-count-".concat(n)}))})))))}},7828:(e,t,n)=>{"use strict";var r=n(6540),i=n(3166),o=n(1762),a=n(2008),s=n(3721),l=n(6540),c=n(8397),u=n(6767),d=n(2487),f=n(3474),h=n(8214),p=n(9112),g=n(5158),m=n(3981),v=n(6483),b=n(8716),y=n(5687),x=n(6045),w=n(9242),k=[{rank:"kingdom",name:"界",className:"rank-1-red"},{rank:"phylum",name:"門",className:"rank-2-org"},{rank:"class",name:"綱",className:"rank-3-yell"},{rank:"order",name:"目",className:"rank-4-green"},{rank:"family",name:"科",className:"rank-5-blue"},{rank:"genus",name:"屬",className:"rank-6-deepblue"},{rank:"species",name:"種",className:"rank-7-purple"},{rank:"infraspecies",name:"種",className:"rank-second-gray"}],_=[{endemic:"昆蟲",image:"/static/image/statistic-icon01.svg"},{endemic:"魚類",image:"/static/image/statistic-icon02.svg"},{endemic:"爬蟲類",image:"/static/image/statistic-icon03.svg"},{endemic:"真菌",image:"/static/image/statistic-icon04.svg"},{endemic:"植物",image:"/static/image/statistic-icon05.svg"},{endemic:"鳥類",image:"/static/image/statistic-icon06.svg"},{endemic:"哺乳類",image:"/static/image/statistic-icon07.svg"},{endemic:"其他",image:"/static/image/statistic-icon08.svg"}],E=[{source:"原生",color:"#FDD440"},{source:"歸化",color:"#85BBD0"},{source:"入侵",color:"#74BDB6"},{source:"栽培豢養",color:"#BED368"},{source:"無資料",color:"#eeeeee"}],S=[{kingdom:"Viruses",chineseName:"病毒"},{kingdom:"Bacteria",chineseName:"細菌界"},{kingdom:"Archaea",chineseName:"古菌界"},{kingdom:"Protozoa",chineseName:"原生生物界"},{kingdom:"Chromista",chineseName:"原藻界"},{kingdom:"Fungi",chineseName:"真菌界"},{kingdom:"Plantae",chineseName:"植物界"},{kingdom:"Animalia",chineseName:"動物界"}],O=[{title:"首頁",href:"/"},{title:"更多資訊"},{title:"資料統計"}];t.A=function(){var e=r.useState([]),t=e[0],n=e[1],P=r.useState([]),C=P[0],M=P[1],T=r.useState([]),N=T[0],A=T[1],R=r.useState([]),L=R[0],D=R[1],I=r.useState([]),j=I[0],z=I[1],F=r.useState([]),B=F[0],V=F[1],W=r.useState(h.speciesOptions[0].value),H=W[0],$=W[1],U=r.useState([]),K=U[0],Y=U[1],q=r.useState([]),Q=q[0],X=q[1],G=r.useState([]),J=G[0],Z=G[1],ee=r.useState([]),te=ee[0],ne=ee[1],re=r.useState([]),ie=re[0],oe=re[1],ae=r.useState(!1),se=ae[0],le=ae[1],ce=r.useState(""),ue=ce[0],de=ce[1],fe=(0,s.default)("".concat("https://api.taicol.tw/v2","/web/stat/statistics"),g.fetcher).data,he=function(e){le(e)};return(0,l.useEffect)((function(){var e;fe&&(console.log(fe),e=fe.iucn_count.map((function(e){return{name:e.category,count:e.count}})),Z(e),function(e){var t=e.map((function(e){var t,n=(null===(t=E.find((function(t){return t.source===e.category})))||void 0===t?void 0:t.color)||"#000";return{name:e.category,color:n,count:e.count}}));ne(t)}(fe.redlist_count),function(e){var t=e.map((function(e){var t=e.category;return{zhTWTitle:t,count:e.count,className:"",circleTitle:t}}));V(t)}(fe.protected_count),function(e){var t=e.map((function(e){var t=e.category;return{zhTWTitle:t,circleTitle:t,count:e.count,className:""}}));A(t)}(fe.cites_count),function(e){var t=e.map((function(e){var t=e.category;return{zhTWTitle:t,enTitle:t,count:e.count,className:""}}));z(t)}(fe.habitat_count),function(e){var t=e.map((function(e){var t,n,r=(null===(t=k.find((function(t){return t.rank===e.category})))||void 0===t?void 0:t.name)||"",i=(null===(n=k.find((function(t){return t.rank===e.category})))||void 0===n?void 0:n.className)||"";return{zhTWTitle:r,enTitle:e.category,count:e.count,className:i}}));D(t)}(fe.rank_count),function(e){var t=e.map((function(e){var t,n=(null===(t=_.find((function(t){return t.endemic===e.category})))||void 0===t?void 0:t.image)||"",r=e.category,i=e.count,o=e.total_count;return{name:r,image:n,count:i,total:o,ratio:(i/o*100).toFixed(2)}}));Y(t)}(fe.endemic_count),function(e){var t=e.map((function(e){var t,n=(null===(t=E.find((function(t){return t.source===e.category})))||void 0===t?void 0:t.color)||"#000";return{name:e.category,color:n,count:e.count}}));X(t)}(fe.source_count),function(e,t){var n;n="kingdom_compare"==t?S.map((function(t){var n=e.find((function(e){return t.kingdom==e.category}));return{name:n?t.chineseName:"",TaiwanCount:n?n.count:0,GlobalCount:n?n.total_count:0}})):e.map((function(e){return{name:e.category,TaiwanCount:e.count,GlobalCount:e.total_count}})),oe(n)}(fe[H],H),function(e){var t=S.map((function(t){var n,r=e.find((function(e){return t.kingdom==e.category})),i=r?r.category:"",o=r?r.count:0;return{name:r&&(null===(n=S.find((function(e){return e.kingdom==i})))||void 0===n?void 0:n.chineseName)||"",count:o}}));M(t)}(fe.kingdom_count),function(e){var t=e.map((function(e){var t=e[0].split(">");return{kingdomName:(null==t?void 0:t[0])||"",phylumName:(null==t?void 0:t[1])||"",className:(null==t?void 0:t[2])||"",globalCount:e[1],taiwanCount:e[2],twProvider:e[3]}}));n(t)}(fe.compare_table),de(fe.global_updated))}),[fe,H]),r.createElement(r.Fragment,null,r.createElement("div",{className:"page-top"},r.createElement(m.Translation,null,(function(e){return r.createElement(i.default,{title:e("STATISTICS"),zhTWTitle:e("資料統計"),picType:"crap",breadcrumbs:O})})),r.createElement(f.default,null),r.createElement("div",{className:"chart-box"},r.createElement("div",{className:"main-box"},r.createElement("div",{className:"boxarea-2-1"},r.createElement(a.default,{data:C}),r.createElement(o.default,{data:L})),r.createElement(c.default,{data:K}),r.createElement("div",{className:"boxarea-2-1"},r.createElement(u.default,{data:Q}),r.createElement(v.default,{data:j}),r.createElement(b.default,{data:B})),r.createElement("div",{className:"boxarea-2-1"},r.createElement(y.default,{data:te}),r.createElement(x.default,{data:J}),r.createElement(w.default,{data:N})),r.createElement(d.default,{data:ie,compareType:H,handleCompareTypeChange:function(e){var t=e.target.value;$(t)},handleShowCompareTableClick:he,kingdomInfo:S,globalUpdated:ue})))),r.createElement(p.default,{show:se,handleShowCompareTableClick:he,data:t,globalUpdated:ue}))}},8214:(e,t)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.speciesOptions=void 0,t.speciesOptions=[{value:"kingdom_compare",label:"各界比較"},{value:"plantae_compare",label:"植物界比較"},{value:"animalia_compare",label:"動物界比較"},{value:"arthropoda_compare",label:"節肢動物門比較"},{value:"chordata_compare",label:"脊索動物門比較"}],t.default={speciesOptions:t.speciesOptions}},5158:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(i,o){function a(e){try{l(r.next(e))}catch(e){o(e)}}function s(e){try{l(r.throw(e))}catch(e){o(e)}}function l(e){var t;e.done?i(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(a,s)}l((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,i,o,a={label:0,sent:function(){if(1&i[0])throw i[1];return i[1]},trys:[],ops:[]};return o={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(o[Symbol.iterator]=function(){return this}),o;function s(o){return function(s){return function(o){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,r&&(i=2&o[0]?r.return:o[0]?r.throw||((i=r.return)&&i.call(r),0):r.next)&&!(i=i.call(r,o[1])).done)return i;switch(r=0,i&&(o=[2&o[0],i.value]),o[0]){case 0:case 1:i=o;break;case 4:return a.label++,{value:o[1],done:!1};case 5:a.label++,r=o[1],o=[0];continue;case 7:o=a.ops.pop(),a.trys.pop();continue;default:if(!((i=(i=a.trys).length>0&&i[i.length-1])||6!==o[0]&&2!==o[0])){a=0;continue}if(3===o[0]&&(!i||o[1]>i[0]&&o[1]<i[3])){a.label=o[1];break}if(6===o[0]&&a.label<i[1]){a.label=i[1],i=o;break}if(i&&a.label<i[2]){a.label=i[2],a.ops.push(o);break}i[2]&&a.ops.pop(),a.trys.pop();continue}o=t.call(e,a)}catch(e){o=[6,e],r=0}finally{n=i=0}if(5&o[0])throw o[1];return{value:o[0]?o[1]:void 0,done:!0}}([o,s])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.replaceDomain=t.replaceIp=t.timeout=t.fetcher=t.getTotal=t.capitalize=t.shortDescription=t.formatNumber=void 0,t.formatNumber=function(e){return e.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,")},t.shortDescription=function(e,t){return e.replace(/(<([^>]+)>)/gi,"").substring(0,t)+(e.length>100?"...":"")},t.capitalize=function(e){return e?e[0].toUpperCase()+e.slice(1):""},t.getTotal=function(e){return e.reduce((function(e,t){return e+t[1]}),0)},t.fetcher=function(e,t){return n(this,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,fetch(e,t)];case 1:return[2,n.sent().json()]}}))}))},t.timeout=function(e){return new Promise((function(t){return setTimeout(t,e)}))},t.replaceIp=function(e,t){return e.replace(/[a-zA-Z]{3,5}\:\/{2}[a-zA-Z0-9_.:-]+/g,t)},t.replaceDomain=function(e,t){return e.replace(/[a-zA-Z]{3,5}\:\/{2}[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+(:\d+)?/g,t)}},4915:e=>{e.exports={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}},6369:(e,t,n)=>{"use strict";function r(e){if(Array.isArray(e))return e}n.d(t,{A:()=>r})},3029:(e,t,n)=>{"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{A:()=>r})},2901:(e,t,n)=>{"use strict";n.d(t,{A:()=>o});var r=n(816);function i(e,t){for(var n=0;n<t.length;n++){var i=t[n];i.enumerable=i.enumerable||!1,i.configurable=!0,"value"in i&&(i.writable=!0),Object.defineProperty(e,(0,r.A)(i.key),i)}}function o(e,t,n){return t&&i(e.prototype,t),n&&i(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}},4467:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(816);function i(e,t,n){return(t=(0,r.A)(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6562:(e,t,n)=>{"use strict";function r(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}n.d(t,{A:()=>r})},8587:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n}n.d(t,{A:()=>r})},3662:(e,t,n)=>{"use strict";function r(e,t){return r=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},r(e,t)}n.d(t,{A:()=>r})},816:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(2284);function i(e){var t=function(e){if("object"!=(0,r.A)(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=(0,r.A)(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==(0,r.A)(t)?t:t+""}},2284:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n.d(t,{A:()=>r})},8394:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function i(e,t){if(e){if("string"==typeof e)return r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}n.d(t,{A:()=>i})},7237:(e,t,n)=>{"use strict";n.r(t),n.d(t,{Animation:()=>s,Animations:()=>c,ArcElement:()=>ft,BarController:()=>T,BarElement:()=>Ct,BasePlatform:()=>ye,BasicPlatform:()=>xe,BubbleController:()=>N,CategoryScale:()=>vn,Chart:()=>at,DatasetController:()=>w,Decimation:()=>At,DomPlatform:()=>De,DoughnutController:()=>A,Element:()=>j,Filler:()=>qt,Interaction:()=>ae,Legend:()=>Gt,LineController:()=>R,LineElement:()=>xt,LinearScale:()=>xn,LogarithmicScale:()=>kn,PieController:()=>D,PointElement:()=>kt,PolarAreaController:()=>L,RadarController:()=>I,RadialLinearScale:()=>Mn,Scale:()=>Y,ScatterController:()=>X,SubTitle:()=>tn,Ticks:()=>F,TimeScale:()=>jn,TimeSeriesScale:()=>Fn,Title:()=>Zt,Tooltip:()=>gn,_adapters:()=>ee,_detectPlatform:()=>Ie,animator:()=>i,controllers:()=>G,defaults:()=>r.d,elements:()=>Mt,layouts:()=>be,plugins:()=>mn,registerables:()=>Vn,registry:()=>Q,scales:()=>Bn});var r=n(2998),i=new class{constructor(){this._request=null,this._charts=new Map,this._running=!1,this._lastDate=void 0}_notify(e,t,n,r){const i=t.listeners[r],o=t.duration;i.forEach((r=>r({chart:e,initial:t.initial,numSteps:o,currentStep:Math.min(n-t.start,o)})))}_refresh(){this._request||(this._running=!0,this._request=r.r.call(window,(()=>{this._update(),this._request=null,this._running&&this._refresh()})))}_update(e=Date.now()){let t=0;this._charts.forEach(((n,r)=>{if(!n.running||!n.items.length)return;const i=n.items;let o,a=i.length-1,s=!1;for(;a>=0;--a)o=i[a],o._active?(o._total>n.duration&&(n.duration=o._total),o.tick(e),s=!0):(i[a]=i[i.length-1],i.pop());s&&(r.draw(),this._notify(r,n,e,"progress")),i.length||(n.running=!1,this._notify(r,n,e,"complete"),n.initial=!1),t+=i.length})),this._lastDate=e,0===t&&(this._running=!1)}_getAnims(e){const t=this._charts;let n=t.get(e);return n||(n={running:!1,initial:!0,items:[],listeners:{complete:[],progress:[]}},t.set(e,n)),n}listen(e,t,n){this._getAnims(e).listeners[t].push(n)}add(e,t){t&&t.length&&this._getAnims(e).items.push(...t)}has(e){return this._getAnims(e).items.length>0}start(e){const t=this._charts.get(e);t&&(t.running=!0,t.start=Date.now(),t.duration=t.items.reduce(((e,t)=>Math.max(e,t._duration)),0),this._refresh())}running(e){if(!this._running)return!1;const t=this._charts.get(e);return!!(t&&t.running&&t.items.length)}stop(e){const t=this._charts.get(e);if(!t||!t.items.length)return;const n=t.items;let r=n.length-1;for(;r>=0;--r)n[r].cancel();t.items=[],this._notify(e,t,Date.now(),"complete")}remove(e){return this._charts.delete(e)}};const o="transparent",a={boolean:(e,t,n)=>n>.5?t:e,color(e,t,n){const i=(0,r.c)(e||o),a=i.valid&&(0,r.c)(t||o);return a&&a.valid?a.mix(i,n).hexString():t},number:(e,t,n)=>e+(t-e)*n};class s{constructor(e,t,n,i){const o=t[n];i=(0,r.a)([e.to,i,o,e.from]);const s=(0,r.a)([e.from,o,i]);this._active=!0,this._fn=e.fn||a[e.type||typeof s],this._easing=r.e[e.easing]||r.e.linear,this._start=Math.floor(Date.now()+(e.delay||0)),this._duration=this._total=Math.floor(e.duration),this._loop=!!e.loop,this._target=t,this._prop=n,this._from=s,this._to=i,this._promises=void 0}active(){return this._active}update(e,t,n){if(this._active){this._notify(!1);const i=this._target[this._prop],o=n-this._start,a=this._duration-o;this._start=n,this._duration=Math.floor(Math.max(a,e.duration)),this._total+=o,this._loop=!!e.loop,this._to=(0,r.a)([e.to,t,i,e.from]),this._from=(0,r.a)([e.from,i,t])}}cancel(){this._active&&(this.tick(Date.now()),this._active=!1,this._notify(!1))}tick(e){const t=e-this._start,n=this._duration,r=this._prop,i=this._from,o=this._loop,a=this._to;let s;if(this._active=i!==a&&(o||t<n),!this._active)return this._target[r]=a,void this._notify(!0);t<0?this._target[r]=i:(s=t/n%2,s=o&&s>1?2-s:s,s=this._easing(Math.min(1,Math.max(0,s))),this._target[r]=this._fn(i,a,s))}wait(){const e=this._promises||(this._promises=[]);return new Promise(((t,n)=>{e.push({res:t,rej:n})}))}_notify(e){const t=e?"res":"rej",n=this._promises||[];for(let e=0;e<n.length;e++)n[e][t]()}}r.d.set("animation",{delay:void 0,duration:1e3,easing:"easeOutQuart",fn:void 0,from:void 0,loop:void 0,to:void 0,type:void 0});const l=Object.keys(r.d.animation);r.d.describe("animation",{_fallback:!1,_indexable:!1,_scriptable:e=>"onProgress"!==e&&"onComplete"!==e&&"fn"!==e}),r.d.set("animations",{colors:{type:"color",properties:["color","borderColor","backgroundColor"]},numbers:{type:"number",properties:["x","y","borderWidth","radius","tension"]}}),r.d.describe("animations",{_fallback:"animation"}),r.d.set("transitions",{active:{animation:{duration:400}},resize:{animation:{duration:0}},show:{animations:{colors:{from:"transparent"},visible:{type:"boolean",duration:0}}},hide:{animations:{colors:{to:"transparent"},visible:{type:"boolean",easing:"linear",fn:e=>0|e}}}});class c{constructor(e,t){this._chart=e,this._properties=new Map,this.configure(t)}configure(e){if(!(0,r.i)(e))return;const t=this._properties;Object.getOwnPropertyNames(e).forEach((n=>{const i=e[n];if(!(0,r.i)(i))return;const o={};for(const e of l)o[e]=i[e];((0,r.b)(i.properties)&&i.properties||[n]).forEach((e=>{e!==n&&t.has(e)||t.set(e,o)}))}))}_animateOptions(e,t){const n=t.options,r=function(e,t){if(!t)return;let n=e.options;if(n)return n.$shared&&(e.options=n=Object.assign({},n,{$shared:!1,$animations:{}})),n;e.options=t}(e,n);if(!r)return[];const i=this._createAnimations(r,n);return n.$shared&&function(e,t){const n=[],r=Object.keys(t);for(let t=0;t<r.length;t++){const i=e[r[t]];i&&i.active()&&n.push(i.wait())}return Promise.all(n)}(e.options.$animations,n).then((()=>{e.options=n}),(()=>{})),i}_createAnimations(e,t){const n=this._properties,r=[],i=e.$animations||(e.$animations={}),o=Object.keys(t),a=Date.now();let l;for(l=o.length-1;l>=0;--l){const c=o[l];if("$"===c.charAt(0))continue;if("options"===c){r.push(...this._animateOptions(e,t));continue}const u=t[c];let d=i[c];const f=n.get(c);if(d){if(f&&d.active()){d.update(f,u,a);continue}d.cancel()}f&&f.duration?(i[c]=d=new s(f,e,c,u),r.push(d)):e[c]=u}return r}update(e,t){if(0===this._properties.size)return void Object.assign(e,t);const n=this._createAnimations(e,t);return n.length?(i.add(this._chart,n),!0):void 0}}function u(e,t){const n=e&&e.options||{},r=n.reverse,i=void 0===n.min?t:0,o=void 0===n.max?t:0;return{start:r?o:i,end:r?i:o}}function d(e,t){const n=[],r=e._getSortedDatasetMetas(t);let i,o;for(i=0,o=r.length;i<o;++i)n.push(r[i].index);return n}function f(e,t,n,i={}){const o=e.keys,a="single"===i.mode;let s,l,c,u;if(null!==t){for(s=0,l=o.length;s<l;++s){if(c=+o[s],c===n){if(i.all)continue;break}u=e.values[c],(0,r.g)(u)&&(a||0===t||(0,r.s)(t)===(0,r.s)(u))&&(t+=u)}return t}}function h(e,t){const n=e&&e.options.stacked;return n||void 0===n&&void 0!==t.stack}function p(e,t,n){const r=e[t]||(e[t]={});return r[n]||(r[n]={})}function g(e,t,n,r){for(const i of t.getMatchingVisibleMetas(r).reverse()){const t=e[i.index];if(n&&t>0||!n&&t<0)return i.index}return null}function m(e,t){const{chart:n,_cachedMeta:r}=e,i=n._stacks||(n._stacks={}),{iScale:o,vScale:a,index:s}=r,l=o.axis,c=a.axis,u=function(e,t,n){return`${e.id}.${t.id}.${n.stack||n.type}`}(o,a,r),d=t.length;let f;for(let e=0;e<d;++e){const n=t[e],{[l]:o,[c]:d}=n;f=(n._stacks||(n._stacks={}))[c]=p(i,u,o),f[s]=d,f._top=g(f,a,!0,r.type),f._bottom=g(f,a,!1,r.type)}}function v(e,t){const n=e.scales;return Object.keys(n).filter((e=>n[e].axis===t)).shift()}function b(e,t){const n=e.controller.index,r=e.vScale&&e.vScale.axis;if(r){t=t||e._parsed;for(const e of t){const t=e._stacks;if(!t||void 0===t[r]||void 0===t[r][n])return;delete t[r][n]}}}const y=e=>"reset"===e||"none"===e,x=(e,t)=>t?e:Object.assign({},e);class w{constructor(e,t){this.chart=e,this._ctx=e.ctx,this.index=t,this._cachedDataOpts={},this._cachedMeta=this.getMeta(),this._type=this._cachedMeta.type,this.options=void 0,this._parsing=!1,this._data=void 0,this._objectData=void 0,this._sharedOptions=void 0,this._drawStart=void 0,this._drawCount=void 0,this.enableOptionSharing=!1,this.supportsDecimation=!1,this.$context=void 0,this._syncList=[],this.initialize()}initialize(){const e=this._cachedMeta;this.configure(),this.linkScales(),e._stacked=h(e.vScale,e),this.addElements()}updateIndex(e){this.index!==e&&b(this._cachedMeta),this.index=e}linkScales(){const e=this.chart,t=this._cachedMeta,n=this.getDataset(),i=(e,t,n,r)=>"x"===e?t:"r"===e?r:n,o=t.xAxisID=(0,r.v)(n.xAxisID,v(e,"x")),a=t.yAxisID=(0,r.v)(n.yAxisID,v(e,"y")),s=t.rAxisID=(0,r.v)(n.rAxisID,v(e,"r")),l=t.indexAxis,c=t.iAxisID=i(l,o,a,s),u=t.vAxisID=i(l,a,o,s);t.xScale=this.getScaleForId(o),t.yScale=this.getScaleForId(a),t.rScale=this.getScaleForId(s),t.iScale=this.getScaleForId(c),t.vScale=this.getScaleForId(u)}getDataset(){return this.chart.data.datasets[this.index]}getMeta(){return this.chart.getDatasetMeta(this.index)}getScaleForId(e){return this.chart.scales[e]}_getOtherScale(e){const t=this._cachedMeta;return e===t.iScale?t.vScale:t.iScale}reset(){this._update("reset")}_destroy(){const e=this._cachedMeta;this._data&&(0,r.u)(this._data,this),e._stacked&&b(e)}_dataCheck(){const e=this.getDataset(),t=e.data||(e.data=[]),n=this._data;if((0,r.i)(t))this._data=function(e){const t=Object.keys(e),n=new Array(t.length);let r,i,o;for(r=0,i=t.length;r<i;++r)o=t[r],n[r]={x:o,y:e[o]};return n}(t);else if(n!==t){if(n){(0,r.u)(n,this);const e=this._cachedMeta;b(e),e._parsed=[]}t&&Object.isExtensible(t)&&(0,r.l)(t,this),this._syncList=[],this._data=t}}addElements(){const e=this._cachedMeta;this._dataCheck(),this.datasetElementType&&(e.dataset=new this.datasetElementType)}buildOrUpdateElements(e){const t=this._cachedMeta,n=this.getDataset();let r=!1;this._dataCheck();const i=t._stacked;t._stacked=h(t.vScale,t),t.stack!==n.stack&&(r=!0,b(t),t.stack=n.stack),this._resyncElements(e),(r||i!==t._stacked)&&m(this,t._parsed)}configure(){const e=this.chart.config,t=e.datasetScopeKeys(this._type),n=e.getOptionScopes(this.getDataset(),t,!0);this.options=e.createResolver(n,this.getContext()),this._parsing=this.options.parsing,this._cachedDataOpts={}}parse(e,t){const{_cachedMeta:n,_data:i}=this,{iScale:o,_stacked:a}=n,s=o.axis;let l,c,u,d=0===e&&t===i.length||n._sorted,f=e>0&&n._parsed[e-1];if(!1===this._parsing)n._parsed=i,n._sorted=!0,u=i;else{u=(0,r.b)(i[e])?this.parseArrayData(n,i,e,t):(0,r.i)(i[e])?this.parseObjectData(n,i,e,t):this.parsePrimitiveData(n,i,e,t);const o=()=>null===c[s]||f&&c[s]<f[s];for(l=0;l<t;++l)n._parsed[l+e]=c=u[l],d&&(o()&&(d=!1),f=c);n._sorted=d}a&&m(this,u)}parsePrimitiveData(e,t,n,r){const{iScale:i,vScale:o}=e,a=i.axis,s=o.axis,l=i.getLabels(),c=i===o,u=new Array(r);let d,f,h;for(d=0,f=r;d<f;++d)h=d+n,u[d]={[a]:c||i.parse(l[h],h),[s]:o.parse(t[h],h)};return u}parseArrayData(e,t,n,r){const{xScale:i,yScale:o}=e,a=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=t[c],a[s]={x:i.parse(u[0],c),y:o.parse(u[1],c)};return a}parseObjectData(e,t,n,i){const{xScale:o,yScale:a}=e,{xAxisKey:s="x",yAxisKey:l="y"}=this._parsing,c=new Array(i);let u,d,f,h;for(u=0,d=i;u<d;++u)f=u+n,h=t[f],c[u]={x:o.parse((0,r.f)(h,s),f),y:a.parse((0,r.f)(h,l),f)};return c}getParsed(e){return this._cachedMeta._parsed[e]}getDataElement(e){return this._cachedMeta.data[e]}applyStack(e,t,n){const r=this.chart,i=this._cachedMeta,o=t[e.axis];return f({keys:d(r,!0),values:t._stacks[e.axis]},o,i.index,{mode:n})}updateRangeFromParsed(e,t,n,r){const i=n[t.axis];let o=null===i?NaN:i;const a=r&&n._stacks[t.axis];r&&a&&(r.values=a,o=f(r,i,this._cachedMeta.index)),e.min=Math.min(e.min,o),e.max=Math.max(e.max,o)}getMinMax(e,t){const n=this._cachedMeta,i=n._parsed,o=n._sorted&&e===n.iScale,a=i.length,s=this._getOtherScale(e),l=((e,t,n)=>e&&!t.hidden&&t._stacked&&{keys:d(n,!0),values:null})(t,n,this.chart),c={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY},{min:u,max:f}=function(e){const{min:t,max:n,minDefined:r,maxDefined:i}=e.getUserBounds();return{min:r?t:Number.NEGATIVE_INFINITY,max:i?n:Number.POSITIVE_INFINITY}}(s);let h,p;function g(){p=i[h];const t=p[s.axis];return!(0,r.g)(p[e.axis])||u>t||f<t}for(h=0;h<a&&(g()||(this.updateRangeFromParsed(c,e,p,l),!o));++h);if(o)for(h=a-1;h>=0;--h)if(!g()){this.updateRangeFromParsed(c,e,p,l);break}return c}getAllParsedValues(e){const t=this._cachedMeta._parsed,n=[];let i,o,a;for(i=0,o=t.length;i<o;++i)a=t[i][e.axis],(0,r.g)(a)&&n.push(a);return n}getMaxOverflow(){return!1}getLabelAndValue(e){const t=this._cachedMeta,n=t.iScale,r=t.vScale,i=this.getParsed(e);return{label:n?""+n.getLabelForValue(i[n.axis]):"",value:r?""+r.getLabelForValue(i[r.axis]):""}}_update(e){const t=this._cachedMeta;this.update(e||"default"),t._clip=function(e){let t,n,i,o;return(0,r.i)(e)?(t=e.top,n=e.right,i=e.bottom,o=e.left):t=n=i=o=e,{top:t,right:n,bottom:i,left:o,disabled:!1===e}}((0,r.v)(this.options.clip,function(e,t,n){if(!1===n)return!1;const r=u(e,n),i=u(t,n);return{top:i.end,right:r.end,bottom:i.start,left:r.start}}(t.xScale,t.yScale,this.getMaxOverflow())))}update(e){}draw(){const e=this._ctx,t=this.chart,n=this._cachedMeta,r=n.data||[],i=t.chartArea,o=[],a=this._drawStart||0,s=this._drawCount||r.length-a,l=this.options.drawActiveElementsOnTop;let c;for(n.dataset&&n.dataset.draw(e,i,a,s),c=a;c<a+s;++c){const t=r[c];t.hidden||(t.active&&l?o.push(t):t.draw(e,i))}for(c=0;c<o.length;++c)o[c].draw(e,i)}getStyle(e,t){const n=t?"active":"default";return void 0===e&&this._cachedMeta.dataset?this.resolveDatasetElementOptions(n):this.resolveDataElementOptions(e||0,n)}getContext(e,t,n){const i=this.getDataset();let o;if(e>=0&&e<this._cachedMeta.data.length){const t=this._cachedMeta.data[e];o=t.$context||(t.$context=function(e,t,n){return(0,r.h)(e,{active:!1,dataIndex:t,parsed:void 0,raw:void 0,element:n,index:t,mode:"default",type:"data"})}(this.getContext(),e,t)),o.parsed=this.getParsed(e),o.raw=i.data[e],o.index=o.dataIndex=e}else o=this.$context||(this.$context=function(e,t){return(0,r.h)(e,{active:!1,dataset:void 0,datasetIndex:t,index:t,mode:"default",type:"dataset"})}(this.chart.getContext(),this.index)),o.dataset=i,o.index=o.datasetIndex=this.index;return o.active=!!t,o.mode=n,o}resolveDatasetElementOptions(e){return this._resolveElementOptions(this.datasetElementType.id,e)}resolveDataElementOptions(e,t){return this._resolveElementOptions(this.dataElementType.id,t,e)}_resolveElementOptions(e,t="default",n){const i="active"===t,o=this._cachedDataOpts,a=e+"-"+t,s=o[a],l=this.enableOptionSharing&&(0,r.j)(n);if(s)return x(s,l);const c=this.chart.config,u=c.datasetElementScopeKeys(this._type,e),d=i?[`${e}Hover`,"hover",e,""]:[e,""],f=c.getOptionScopes(this.getDataset(),u),h=Object.keys(r.d.elements[e]),p=c.resolveNamedOptions(f,h,(()=>this.getContext(n,i)),d);return p.$shared&&(p.$shared=l,o[a]=Object.freeze(x(p,l))),p}_resolveAnimations(e,t,n){const r=this.chart,i=this._cachedDataOpts,o=`animation-${t}`,a=i[o];if(a)return a;let s;if(!1!==r.options.animation){const r=this.chart.config,i=r.datasetAnimationScopeKeys(this._type,t),o=r.getOptionScopes(this.getDataset(),i);s=r.createResolver(o,this.getContext(e,n,t))}const l=new c(r,s&&s.animations);return s&&s._cacheable&&(i[o]=Object.freeze(l)),l}getSharedOptions(e){if(e.$shared)return this._sharedOptions||(this._sharedOptions=Object.assign({},e))}includeOptions(e,t){return!t||y(e)||this.chart._animationsDisabled}_getSharedOptions(e,t){const n=this.resolveDataElementOptions(e,t),r=this._sharedOptions,i=this.getSharedOptions(n),o=this.includeOptions(t,i)||i!==r;return this.updateSharedOptions(i,t,n),{sharedOptions:i,includeOptions:o}}updateElement(e,t,n,r){y(r)?Object.assign(e,n):this._resolveAnimations(t,r).update(e,n)}updateSharedOptions(e,t,n){e&&!y(t)&&this._resolveAnimations(void 0,t).update(e,n)}_setStyle(e,t,n,r){e.active=r;const i=this.getStyle(t,r);this._resolveAnimations(t,n,r).update(e,{options:!r&&this.getSharedOptions(i)||i})}removeHoverStyle(e,t,n){this._setStyle(e,n,"active",!1)}setHoverStyle(e,t,n){this._setStyle(e,n,"active",!0)}_removeDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!1)}_setDatasetHoverStyle(){const e=this._cachedMeta.dataset;e&&this._setStyle(e,void 0,"active",!0)}_resyncElements(e){const t=this._data,n=this._cachedMeta.data;for(const[e,t,n]of this._syncList)this[e](t,n);this._syncList=[];const r=n.length,i=t.length,o=Math.min(i,r);o&&this.parse(0,o),i>r?this._insertElements(r,i-r,e):i<r&&this._removeElements(i,r-i)}_insertElements(e,t,n=!0){const r=this._cachedMeta,i=r.data,o=e+t;let a;const s=e=>{for(e.length+=t,a=e.length-1;a>=o;a--)e[a]=e[a-t]};for(s(i),a=e;a<o;++a)i[a]=new this.dataElementType;this._parsing&&s(r._parsed),this.parse(e,t),n&&this.updateElements(i,e,t,"reset")}updateElements(e,t,n,r){}_removeElements(e,t){const n=this._cachedMeta;if(this._parsing){const r=n._parsed.splice(e,t);n._stacked&&b(n,r)}n.data.splice(e,t)}_sync(e){if(this._parsing)this._syncList.push(e);else{const[t,n,r]=e;this[t](n,r)}this.chart._dataChanges.push([this.index,...e])}_onDataPush(){const e=arguments.length;this._sync(["_insertElements",this.getDataset().data.length-e,e])}_onDataPop(){this._sync(["_removeElements",this._cachedMeta.data.length-1,1])}_onDataShift(){this._sync(["_removeElements",0,1])}_onDataSplice(e,t){t&&this._sync(["_removeElements",e,t]);const n=arguments.length-2;n&&this._sync(["_insertElements",e,n])}_onDataUnshift(){this._sync(["_insertElements",0,arguments.length])}}function k(e){const t=e.iScale,n=function(e,t){if(!e._cache.$bar){const n=e.getMatchingVisibleMetas(t);let i=[];for(let t=0,r=n.length;t<r;t++)i=i.concat(n[t].controller.getAllParsedValues(e));e._cache.$bar=(0,r._)(i.sort(((e,t)=>e-t)))}return e._cache.$bar}(t,e.type);let i,o,a,s,l=t._length;const c=()=>{32767!==a&&-32768!==a&&((0,r.j)(s)&&(l=Math.min(l,Math.abs(a-s)||l)),s=a)};for(i=0,o=n.length;i<o;++i)a=t.getPixelForValue(n[i]),c();for(s=void 0,i=0,o=t.ticks.length;i<o;++i)a=t.getPixelForTick(i),c();return l}function _(e,t,n,i){return(0,r.b)(e)?function(e,t,n,r){const i=n.parse(e[0],r),o=n.parse(e[1],r),a=Math.min(i,o),s=Math.max(i,o);let l=a,c=s;Math.abs(a)>Math.abs(s)&&(l=s,c=a),t[n.axis]=c,t._custom={barStart:l,barEnd:c,start:i,end:o,min:a,max:s}}(e,t,n,i):t[n.axis]=n.parse(e,i),t}function E(e,t,n,r){const i=e.iScale,o=e.vScale,a=i.getLabels(),s=i===o,l=[];let c,u,d,f;for(c=n,u=n+r;c<u;++c)f=t[c],d={},d[i.axis]=s||i.parse(a[c],c),l.push(_(f,d,o,c));return l}function S(e){return e&&void 0!==e.barStart&&void 0!==e.barEnd}function O(e,t,n,r){let i=t.borderSkipped;const o={};if(!i)return void(e.borderSkipped=o);if(!0===i)return void(e.borderSkipped={top:!0,right:!0,bottom:!0,left:!0});const{start:a,end:s,reverse:l,top:c,bottom:u}=function(e){let t,n,r,i,o;return e.horizontal?(t=e.base>e.x,n="left",r="right"):(t=e.base<e.y,n="bottom",r="top"),t?(i="end",o="start"):(i="start",o="end"),{start:n,end:r,reverse:t,top:i,bottom:o}}(e);"middle"===i&&n&&(e.enableBorderRadius=!0,(n._top||0)===r?i=c:(n._bottom||0)===r?i=u:(o[P(u,a,s,l)]=!0,i=c)),o[P(i,a,s,l)]=!0,e.borderSkipped=o}function P(e,t,n,r){var i,o,a;return r?(a=n,e=C(e=(i=e)===(o=t)?a:i===a?o:i,n,t)):e=C(e,t,n),e}function C(e,t,n){return"start"===e?t:"end"===e?n:e}function M(e,{inflateAmount:t},n){e.inflateAmount="auto"===t?1===n?.33:0:t}w.defaults={},w.prototype.datasetElementType=null,w.prototype.dataElementType=null;class T extends w{parsePrimitiveData(e,t,n,r){return E(e,t,n,r)}parseArrayData(e,t,n,r){return E(e,t,n,r)}parseObjectData(e,t,n,i){const{iScale:o,vScale:a}=e,{xAxisKey:s="x",yAxisKey:l="y"}=this._parsing,c="x"===o.axis?s:l,u="x"===a.axis?s:l,d=[];let f,h,p,g;for(f=n,h=n+i;f<h;++f)g=t[f],p={},p[o.axis]=o.parse((0,r.f)(g,c),f),d.push(_((0,r.f)(g,u),p,a,f));return d}updateRangeFromParsed(e,t,n,r){super.updateRangeFromParsed(e,t,n,r);const i=n._custom;i&&t===this._cachedMeta.vScale&&(e.min=Math.min(e.min,i.min),e.max=Math.max(e.max,i.max))}getMaxOverflow(){return 0}getLabelAndValue(e){const t=this._cachedMeta,{iScale:n,vScale:r}=t,i=this.getParsed(e),o=i._custom,a=S(o)?"["+o.start+", "+o.end+"]":""+r.getLabelForValue(i[r.axis]);return{label:""+n.getLabelForValue(i[n.axis]),value:a}}initialize(){this.enableOptionSharing=!0,super.initialize(),this._cachedMeta.stack=this.getDataset().stack}update(e){const t=this._cachedMeta;this.updateElements(t.data,0,t.data.length,e)}updateElements(e,t,n,i){const o="reset"===i,{index:a,_cachedMeta:{vScale:s}}=this,l=s.getBasePixel(),c=s.isHorizontal(),u=this._getRuler(),{sharedOptions:d,includeOptions:f}=this._getSharedOptions(t,i);for(let h=t;h<t+n;h++){const t=this.getParsed(h),n=o||(0,r.k)(t[s.axis])?{base:l,head:l}:this._calculateBarValuePixels(h),p=this._calculateBarIndexPixels(h,u),g=(t._stacks||{})[s.axis],m={horizontal:c,base:n.base,enableBorderRadius:!g||S(t._custom)||a===g._top||a===g._bottom,x:c?n.head:p.center,y:c?p.center:n.head,height:c?p.size:Math.abs(n.size),width:c?Math.abs(n.size):p.size};f&&(m.options=d||this.resolveDataElementOptions(h,e[h].active?"active":i));const v=m.options||e[h].options;O(m,v,g,a),M(m,v,u.ratio),this.updateElement(e[h],h,m,i)}}_getStacks(e,t){const{iScale:n}=this._cachedMeta,i=n.getMatchingVisibleMetas(this._type).filter((e=>e.controller.options.grouped)),o=n.options.stacked,a=[],s=e=>{const n=e.controller.getParsed(t),i=n&&n[e.vScale.axis];if((0,r.k)(i)||isNaN(i))return!0};for(const n of i)if((void 0===t||!s(n))&&((!1===o||-1===a.indexOf(n.stack)||void 0===o&&void 0===n.stack)&&a.push(n.stack),n.index===e))break;return a.length||a.push(void 0),a}_getStackCount(e){return this._getStacks(void 0,e).length}_getStackIndex(e,t,n){const r=this._getStacks(e,n),i=void 0!==t?r.indexOf(t):-1;return-1===i?r.length-1:i}_getRuler(){const e=this.options,t=this._cachedMeta,n=t.iScale,r=[];let i,o;for(i=0,o=t.data.length;i<o;++i)r.push(n.getPixelForValue(this.getParsed(i)[n.axis],i));const a=e.barThickness;return{min:a||k(t),pixels:r,start:n._startPixel,end:n._endPixel,stackCount:this._getStackCount(),scale:n,grouped:e.grouped,ratio:a?1:e.categoryPercentage*e.barPercentage}}_calculateBarValuePixels(e){const{_cachedMeta:{vScale:t,_stacked:n},options:{base:i,minBarLength:o}}=this,a=i||0,s=this.getParsed(e),l=s._custom,c=S(l);let u,d,f=s[t.axis],h=0,p=n?this.applyStack(t,s,n):f;p!==f&&(h=p-f,p=f),c&&(f=l.barStart,p=l.barEnd-l.barStart,0!==f&&(0,r.s)(f)!==(0,r.s)(l.barEnd)&&(h=0),h+=f);const g=(0,r.k)(i)||c?h:i;let m=t.getPixelForValue(g);if(u=this.chart.getDataVisibility(e)?t.getPixelForValue(h+p):m,d=u-m,Math.abs(d)<o){d=function(e,t,n){return 0!==e?(0,r.s)(e):(t.isHorizontal()?1:-1)*(t.min>=n?1:-1)}(d,t,a)*o,f===a&&(m-=d/2);const e=t.getPixelForDecimal(0),n=t.getPixelForDecimal(1),i=Math.min(e,n),s=Math.max(e,n);m=Math.max(Math.min(m,s),i),u=m+d}if(m===t.getPixelForValue(a)){const e=(0,r.s)(d)*t.getLineWidthForValue(a)/2;m+=e,d-=e}return{size:d,base:m,head:u,center:u+d/2}}_calculateBarIndexPixels(e,t){const n=t.scale,i=this.options,o=i.skipNull,a=(0,r.v)(i.maxBarThickness,1/0);let s,l;if(t.grouped){const n=o?this._getStackCount(e):t.stackCount,c="flex"===i.barThickness?function(e,t,n,r){const i=t.pixels,o=i[e];let a=e>0?i[e-1]:null,s=e<i.length-1?i[e+1]:null;const l=n.categoryPercentage;null===a&&(a=o-(null===s?t.end-t.start:s-o)),null===s&&(s=o+o-a);const c=o-(o-Math.min(a,s))/2*l;return{chunk:Math.abs(s-a)/2*l/r,ratio:n.barPercentage,start:c}}(e,t,i,n):function(e,t,n,i){const o=n.barThickness;let a,s;return(0,r.k)(o)?(a=t.min*n.categoryPercentage,s=n.barPercentage):(a=o*i,s=1),{chunk:a/i,ratio:s,start:t.pixels[e]-a/2}}(e,t,i,n),u=this._getStackIndex(this.index,this._cachedMeta.stack,o?e:void 0);s=c.start+c.chunk*u+c.chunk/2,l=Math.min(a,c.chunk*c.ratio)}else s=n.getPixelForValue(this.getParsed(e)[n.axis],e),l=Math.min(a,t.min*t.ratio);return{base:s-l/2,head:s+l/2,center:s,size:l}}draw(){const e=this._cachedMeta,t=e.vScale,n=e.data,r=n.length;let i=0;for(;i<r;++i)null!==this.getParsed(i)[t.axis]&&n[i].draw(this._ctx)}}T.id="bar",T.defaults={datasetElementType:!1,dataElementType:"bar",categoryPercentage:.8,barPercentage:.9,grouped:!0,animations:{numbers:{type:"number",properties:["x","y","base","width","height"]}}},T.overrides={scales:{_index_:{type:"category",offset:!0,grid:{offset:!0}},_value_:{type:"linear",beginAtZero:!0}}};class N extends w{initialize(){this.enableOptionSharing=!0,super.initialize()}parsePrimitiveData(e,t,n,r){const i=super.parsePrimitiveData(e,t,n,r);for(let e=0;e<i.length;e++)i[e]._custom=this.resolveDataElementOptions(e+n).radius;return i}parseArrayData(e,t,n,i){const o=super.parseArrayData(e,t,n,i);for(let e=0;e<o.length;e++){const i=t[n+e];o[e]._custom=(0,r.v)(i[2],this.resolveDataElementOptions(e+n).radius)}return o}parseObjectData(e,t,n,i){const o=super.parseObjectData(e,t,n,i);for(let e=0;e<o.length;e++){const i=t[n+e];o[e]._custom=(0,r.v)(i&&i.r&&+i.r,this.resolveDataElementOptions(e+n).radius)}return o}getMaxOverflow(){const e=this._cachedMeta.data;let t=0;for(let n=e.length-1;n>=0;--n)t=Math.max(t,e[n].size(this.resolveDataElementOptions(n))/2);return t>0&&t}getLabelAndValue(e){const t=this._cachedMeta,{xScale:n,yScale:r}=t,i=this.getParsed(e),o=n.getLabelForValue(i.x),a=r.getLabelForValue(i.y),s=i._custom;return{label:t.label,value:"("+o+", "+a+(s?", "+s:"")+")"}}update(e){const t=this._cachedMeta.data;this.updateElements(t,0,t.length,e)}updateElements(e,t,n,r){const i="reset"===r,{iScale:o,vScale:a}=this._cachedMeta,{sharedOptions:s,includeOptions:l}=this._getSharedOptions(t,r),c=o.axis,u=a.axis;for(let d=t;d<t+n;d++){const t=e[d],n=!i&&this.getParsed(d),f={},h=f[c]=i?o.getPixelForDecimal(.5):o.getPixelForValue(n[c]),p=f[u]=i?a.getBasePixel():a.getPixelForValue(n[u]);f.skip=isNaN(h)||isNaN(p),l&&(f.options=s||this.resolveDataElementOptions(d,t.active?"active":r),i&&(f.options.radius=0)),this.updateElement(t,d,f,r)}}resolveDataElementOptions(e,t){const n=this.getParsed(e);let i=super.resolveDataElementOptions(e,t);i.$shared&&(i=Object.assign({},i,{$shared:!1}));const o=i.radius;return"active"!==t&&(i.radius=0),i.radius+=(0,r.v)(n&&n._custom,o),i}}N.id="bubble",N.defaults={datasetElementType:!1,dataElementType:"point",animations:{numbers:{type:"number",properties:["x","y","borderWidth","radius"]}}},N.overrides={scales:{x:{type:"linear"},y:{type:"linear"}},plugins:{tooltip:{callbacks:{title:()=>""}}}};class A extends w{constructor(e,t){super(e,t),this.enableOptionSharing=!0,this.innerRadius=void 0,this.outerRadius=void 0,this.offsetX=void 0,this.offsetY=void 0}linkScales(){}parse(e,t){const n=this.getDataset().data,i=this._cachedMeta;if(!1===this._parsing)i._parsed=n;else{let o,a,s=e=>+n[e];if((0,r.i)(n[e])){const{key:e="value"}=this._parsing;s=t=>+(0,r.f)(n[t],e)}for(o=e,a=e+t;o<a;++o)i._parsed[o]=s(o)}}_getRotation(){return(0,r.t)(this.options.rotation-90)}_getCircumference(){return(0,r.t)(this.options.circumference)}_getRotationExtents(){let e=r.T,t=-r.T;for(let n=0;n<this.chart.data.datasets.length;++n)if(this.chart.isDatasetVisible(n)){const r=this.chart.getDatasetMeta(n).controller,i=r._getRotation(),o=r._getCircumference();e=Math.min(e,i),t=Math.max(t,i+o)}return{rotation:e,circumference:t-e}}update(e){const t=this.chart,{chartArea:n}=t,i=this._cachedMeta,o=i.data,a=this.getMaxBorderWidth()+this.getMaxOffset(o)+this.options.spacing,s=Math.max((Math.min(n.width,n.height)-a)/2,0),l=Math.min((0,r.m)(this.options.cutout,s),1),c=this._getRingWeight(this.index),{circumference:u,rotation:d}=this._getRotationExtents(),{ratioX:f,ratioY:h,offsetX:p,offsetY:g}=function(e,t,n){let i=1,o=1,a=0,s=0;if(t<r.T){const l=e,c=l+t,u=Math.cos(l),d=Math.sin(l),f=Math.cos(c),h=Math.sin(c),p=(e,t,i)=>(0,r.p)(e,l,c,!0)?1:Math.max(t,t*n,i,i*n),g=(e,t,i)=>(0,r.p)(e,l,c,!0)?-1:Math.min(t,t*n,i,i*n),m=p(0,u,f),v=p(r.H,d,h),b=g(r.P,u,f),y=g(r.P+r.H,d,h);i=(m-b)/2,o=(v-y)/2,a=-(m+b)/2,s=-(v+y)/2}return{ratioX:i,ratioY:o,offsetX:a,offsetY:s}}(d,u,l),m=(n.width-a)/f,v=(n.height-a)/h,b=Math.max(Math.min(m,v)/2,0),y=(0,r.n)(this.options.radius,b),x=(y-Math.max(y*l,0))/this._getVisibleDatasetWeightTotal();this.offsetX=p*y,this.offsetY=g*y,i.total=this.calculateTotal(),this.outerRadius=y-x*this._getRingWeightOffset(this.index),this.innerRadius=Math.max(this.outerRadius-x*c,0),this.updateElements(o,0,o.length,e)}_circumference(e,t){const n=this.options,i=this._cachedMeta,o=this._getCircumference();return t&&n.animation.animateRotate||!this.chart.getDataVisibility(e)||null===i._parsed[e]||i.data[e].hidden?0:this.calculateCircumference(i._parsed[e]*o/r.T)}updateElements(e,t,n,r){const i="reset"===r,o=this.chart,a=o.chartArea,s=o.options.animation,l=(a.left+a.right)/2,c=(a.top+a.bottom)/2,u=i&&s.animateScale,d=u?0:this.innerRadius,f=u?0:this.outerRadius,{sharedOptions:h,includeOptions:p}=this._getSharedOptions(t,r);let g,m=this._getRotation();for(g=0;g<t;++g)m+=this._circumference(g,i);for(g=t;g<t+n;++g){const t=this._circumference(g,i),n=e[g],o={x:l+this.offsetX,y:c+this.offsetY,startAngle:m,endAngle:m+t,circumference:t,outerRadius:f,innerRadius:d};p&&(o.options=h||this.resolveDataElementOptions(g,n.active?"active":r)),m+=t,this.updateElement(n,g,o,r)}}calculateTotal(){const e=this._cachedMeta,t=e.data;let n,r=0;for(n=0;n<t.length;n++){const i=e._parsed[n];null===i||isNaN(i)||!this.chart.getDataVisibility(n)||t[n].hidden||(r+=Math.abs(i))}return r}calculateCircumference(e){const t=this._cachedMeta.total;return t>0&&!isNaN(e)?r.T*(Math.abs(e)/t):0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,i=n.data.labels||[],o=(0,r.o)(t._parsed[e],n.options.locale);return{label:i[e]||"",value:o}}getMaxBorderWidth(e){let t=0;const n=this.chart;let r,i,o,a,s;if(!e)for(r=0,i=n.data.datasets.length;r<i;++r)if(n.isDatasetVisible(r)){o=n.getDatasetMeta(r),e=o.data,a=o.controller;break}if(!e)return 0;for(r=0,i=e.length;r<i;++r)s=a.resolveDataElementOptions(r),"inner"!==s.borderAlign&&(t=Math.max(t,s.borderWidth||0,s.hoverBorderWidth||0));return t}getMaxOffset(e){let t=0;for(let n=0,r=e.length;n<r;++n){const e=this.resolveDataElementOptions(n);t=Math.max(t,e.offset||0,e.hoverOffset||0)}return t}_getRingWeightOffset(e){let t=0;for(let n=0;n<e;++n)this.chart.isDatasetVisible(n)&&(t+=this._getRingWeight(n));return t}_getRingWeight(e){return Math.max((0,r.v)(this.chart.data.datasets[e].weight,1),0)}_getVisibleDatasetWeightTotal(){return this._getRingWeightOffset(this.chart.data.datasets.length)||1}}A.id="doughnut",A.defaults={datasetElementType:!1,dataElementType:"arc",animation:{animateRotate:!0,animateScale:!1},animations:{numbers:{type:"number",properties:["circumference","endAngle","innerRadius","outerRadius","startAngle","x","y","offset","borderWidth","spacing"]}},cutout:"50%",rotation:0,circumference:360,radius:"100%",spacing:0,indexAxis:"r"},A.descriptors={_scriptable:e=>"spacing"!==e,_indexable:e=>"spacing"!==e},A.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,r)=>{const i=e.getDatasetMeta(0).controller.getStyle(r);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(r),index:r}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label(e){let t=e.label;const n=": "+e.formattedValue;return(0,r.b)(t)?(t=t.slice(),t[0]+=n):t+=n,t}}}}};class R extends w{initialize(){this.enableOptionSharing=!0,this.supportsDecimation=!0,super.initialize()}update(e){const t=this._cachedMeta,{dataset:n,data:i=[],_dataset:o}=t,a=this.chart._animationsDisabled;let{start:s,count:l}=(0,r.q)(t,i,a);this._drawStart=s,this._drawCount=l,(0,r.w)(t)&&(s=0,l=i.length),n._chart=this.chart,n._datasetIndex=this.index,n._decimated=!!o._decimated,n.points=i;const c=this.resolveDatasetElementOptions(e);this.options.showLine||(c.borderWidth=0),c.segment=this.options.segment,this.updateElement(n,void 0,{animated:!a,options:c},e),this.updateElements(i,s,l,e)}updateElements(e,t,n,i){const o="reset"===i,{iScale:a,vScale:s,_stacked:l,_dataset:c}=this._cachedMeta,{sharedOptions:u,includeOptions:d}=this._getSharedOptions(t,i),f=a.axis,h=s.axis,{spanGaps:p,segment:g}=this.options,m=(0,r.x)(p)?p:Number.POSITIVE_INFINITY,v=this.chart._animationsDisabled||o||"none"===i;let b=t>0&&this.getParsed(t-1);for(let p=t;p<t+n;++p){const t=e[p],n=this.getParsed(p),y=v?t:{},x=(0,r.k)(n[h]),w=y[f]=a.getPixelForValue(n[f],p),k=y[h]=o||x?s.getBasePixel():s.getPixelForValue(l?this.applyStack(s,n,l):n[h],p);y.skip=isNaN(w)||isNaN(k)||x,y.stop=p>0&&Math.abs(n[f]-b[f])>m,g&&(y.parsed=n,y.raw=c.data[p]),d&&(y.options=u||this.resolveDataElementOptions(p,t.active?"active":i)),v||this.updateElement(t,p,y,i),b=n}}getMaxOverflow(){const e=this._cachedMeta,t=e.dataset,n=t.options&&t.options.borderWidth||0,r=e.data||[];if(!r.length)return n;const i=r[0].size(this.resolveDataElementOptions(0)),o=r[r.length-1].size(this.resolveDataElementOptions(r.length-1));return Math.max(n,i,o)/2}draw(){const e=this._cachedMeta;e.dataset.updateControlPoints(this.chart.chartArea,e.iScale.axis),super.draw()}}R.id="line",R.defaults={datasetElementType:"line",dataElementType:"point",showLine:!0,spanGaps:!1},R.overrides={scales:{_index_:{type:"category"},_value_:{type:"linear"}}};class L extends w{constructor(e,t){super(e,t),this.innerRadius=void 0,this.outerRadius=void 0}getLabelAndValue(e){const t=this._cachedMeta,n=this.chart,i=n.data.labels||[],o=(0,r.o)(t._parsed[e].r,n.options.locale);return{label:i[e]||"",value:o}}parseObjectData(e,t,n,i){return r.y.bind(this)(e,t,n,i)}update(e){const t=this._cachedMeta.data;this._updateRadius(),this.updateElements(t,0,t.length,e)}getMinMax(){const e=this._cachedMeta,t={min:Number.POSITIVE_INFINITY,max:Number.NEGATIVE_INFINITY};return e.data.forEach(((e,n)=>{const r=this.getParsed(n).r;!isNaN(r)&&this.chart.getDataVisibility(n)&&(r<t.min&&(t.min=r),r>t.max&&(t.max=r))})),t}_updateRadius(){const e=this.chart,t=e.chartArea,n=e.options,r=Math.min(t.right-t.left,t.bottom-t.top),i=Math.max(r/2,0),o=(i-Math.max(n.cutoutPercentage?i/100*n.cutoutPercentage:1,0))/e.getVisibleDatasetCount();this.outerRadius=i-o*this.index,this.innerRadius=this.outerRadius-o}updateElements(e,t,n,i){const o="reset"===i,a=this.chart,s=a.options.animation,l=this._cachedMeta.rScale,c=l.xCenter,u=l.yCenter,d=l.getIndexAngle(0)-.5*r.P;let f,h=d;const p=360/this.countVisibleElements();for(f=0;f<t;++f)h+=this._computeAngle(f,i,p);for(f=t;f<t+n;f++){const t=e[f];let n=h,r=h+this._computeAngle(f,i,p),g=a.getDataVisibility(f)?l.getDistanceFromCenterForValue(this.getParsed(f).r):0;h=r,o&&(s.animateScale&&(g=0),s.animateRotate&&(n=r=d));const m={x:c,y:u,innerRadius:0,outerRadius:g,startAngle:n,endAngle:r,options:this.resolveDataElementOptions(f,t.active?"active":i)};this.updateElement(t,f,m,i)}}countVisibleElements(){const e=this._cachedMeta;let t=0;return e.data.forEach(((e,n)=>{!isNaN(this.getParsed(n).r)&&this.chart.getDataVisibility(n)&&t++})),t}_computeAngle(e,t,n){return this.chart.getDataVisibility(e)?(0,r.t)(this.resolveDataElementOptions(e,t).angle||n):0}}L.id="polarArea",L.defaults={dataElementType:"arc",animation:{animateRotate:!0,animateScale:!0},animations:{numbers:{type:"number",properties:["x","y","startAngle","endAngle","innerRadius","outerRadius"]}},indexAxis:"r",startAngle:0},L.overrides={aspectRatio:1,plugins:{legend:{labels:{generateLabels(e){const t=e.data;if(t.labels.length&&t.datasets.length){const{labels:{pointStyle:n}}=e.legend.options;return t.labels.map(((t,r)=>{const i=e.getDatasetMeta(0).controller.getStyle(r);return{text:t,fillStyle:i.backgroundColor,strokeStyle:i.borderColor,lineWidth:i.borderWidth,pointStyle:n,hidden:!e.getDataVisibility(r),index:r}}))}return[]}},onClick(e,t,n){n.chart.toggleDataVisibility(t.index),n.chart.update()}},tooltip:{callbacks:{title:()=>"",label:e=>e.chart.data.labels[e.dataIndex]+": "+e.formattedValue}}},scales:{r:{type:"radialLinear",angleLines:{display:!1},beginAtZero:!0,grid:{circular:!0},pointLabels:{display:!1},startAngle:0}}};class D extends A{}D.id="pie",D.defaults={cutout:0,rotation:0,circumference:360,radius:"100%"};class I extends w{getLabelAndValue(e){const t=this._cachedMeta.vScale,n=this.getParsed(e);return{label:t.getLabels()[e],value:""+t.getLabelForValue(n[t.axis])}}parseObjectData(e,t,n,i){return r.y.bind(this)(e,t,n,i)}update(e){const t=this._cachedMeta,n=t.dataset,r=t.data||[],i=t.iScale.getLabels();if(n.points=r,"resize"!==e){const t=this.resolveDatasetElementOptions(e);this.options.showLine||(t.borderWidth=0);const o={_loop:!0,_fullLoop:i.length===r.length,options:t};this.updateElement(n,void 0,o,e)}this.updateElements(r,0,r.length,e)}updateElements(e,t,n,r){const i=this._cachedMeta.rScale,o="reset"===r;for(let a=t;a<t+n;a++){const t=e[a],n=this.resolveDataElementOptions(a,t.active?"active":r),s=i.getPointPositionForValue(a,this.getParsed(a).r),l=o?i.xCenter:s.x,c=o?i.yCenter:s.y,u={x:l,y:c,angle:s.angle,skip:isNaN(l)||isNaN(c),options:n};this.updateElement(t,a,u,r)}}}I.id="radar",I.defaults={datasetElementType:"line",dataElementType:"point",indexAxis:"r",showLine:!0,elements:{line:{fill:"start"}}},I.overrides={aspectRatio:1,scales:{r:{type:"radialLinear"}}};class j{constructor(){this.x=void 0,this.y=void 0,this.active=!1,this.options=void 0,this.$animations=void 0}tooltipPosition(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}hasValue(){return(0,r.x)(this.x)&&(0,r.x)(this.y)}getProps(e,t){const n=this.$animations;if(!t||!n)return this;const r={};return e.forEach((e=>{r[e]=n[e]&&n[e].active()?n[e]._to:this[e]})),r}}j.defaults={},j.defaultRoutes=void 0;const z={values:e=>(0,r.b)(e)?e:""+e,numeric(e,t,n){if(0===e)return"0";const i=this.chart.options.locale;let o,a=e;if(n.length>1){const t=Math.max(Math.abs(n[0].value),Math.abs(n[n.length-1].value));(t<1e-4||t>1e15)&&(o="scientific"),a=function(e,t){let n=t.length>3?t[2].value-t[1].value:t[1].value-t[0].value;return Math.abs(n)>=1&&e!==Math.floor(e)&&(n=e-Math.floor(e)),n}(e,n)}const s=(0,r.z)(Math.abs(a)),l=Math.max(Math.min(-1*Math.floor(s),20),0),c={notation:o,minimumFractionDigits:l,maximumFractionDigits:l};return Object.assign(c,this.options.ticks.format),(0,r.o)(e,i,c)},logarithmic(e,t,n){if(0===e)return"0";const i=e/Math.pow(10,Math.floor((0,r.z)(e)));return 1===i||2===i||5===i?z.numeric.call(this,e,t,n):""}};var F={formatters:z};function B(e,t,n,i,o){const a=(0,r.v)(i,0),s=Math.min((0,r.v)(o,e.length),e.length);let l,c,u,d=0;for(n=Math.ceil(n),o&&(l=o-i,n=l/Math.floor(l/n)),u=a;u<0;)d++,u=Math.round(a+d*n);for(c=Math.max(a,0);c<s;c++)c===u&&(t.push(e[c]),d++,u=Math.round(a+d*n))}r.d.set("scale",{display:!0,offset:!1,reverse:!1,beginAtZero:!1,bounds:"ticks",grace:0,grid:{display:!0,lineWidth:1,drawBorder:!0,drawOnChartArea:!0,drawTicks:!0,tickLength:8,tickWidth:(e,t)=>t.lineWidth,tickColor:(e,t)=>t.color,offset:!1,borderDash:[],borderDashOffset:0,borderWidth:1},title:{display:!1,text:"",padding:{top:4,bottom:4}},ticks:{minRotation:0,maxRotation:50,mirror:!1,textStrokeWidth:0,textStrokeColor:"",padding:3,display:!0,autoSkip:!0,autoSkipPadding:3,labelOffset:0,callback:F.formatters.values,minor:{},major:{},align:"center",crossAlign:"near",showLabelBackdrop:!1,backdropColor:"rgba(255, 255, 255, 0.75)",backdropPadding:2}}),r.d.route("scale.ticks","color","","color"),r.d.route("scale.grid","color","","borderColor"),r.d.route("scale.grid","borderColor","","borderColor"),r.d.route("scale.title","color","","color"),r.d.describe("scale",{_fallback:!1,_scriptable:e=>!e.startsWith("before")&&!e.startsWith("after")&&"callback"!==e&&"parser"!==e,_indexable:e=>"borderDash"!==e&&"tickBorderDash"!==e}),r.d.describe("scales",{_fallback:"scale"}),r.d.describe("scale.ticks",{_scriptable:e=>"backdropPadding"!==e&&"callback"!==e,_indexable:e=>"backdropPadding"!==e});const V=(e,t,n)=>"top"===t||"left"===t?e[t]+n:e[t]-n;function W(e,t){const n=[],r=e.length/t,i=e.length;let o=0;for(;o<i;o+=r)n.push(e[Math.floor(o)]);return n}function H(e,t,n){const r=e.ticks.length,i=Math.min(t,r-1),o=e._startPixel,a=e._endPixel,s=1e-6;let l,c=e.getPixelForTick(i);if(!(n&&(l=1===r?Math.max(c-o,a-c):0===t?(e.getPixelForTick(1)-c)/2:(c-e.getPixelForTick(i-1))/2,c+=i<t?l:-l,c<o-s||c>a+s)))return c}function $(e){return e.drawTicks?e.tickLength:0}function U(e,t){if(!e.display)return 0;const n=(0,r.O)(e.font,t),i=(0,r.K)(e.padding);return((0,r.b)(e.text)?e.text.length:1)*n.lineHeight+i.height}function K(e,t,n){let i=(0,r.R)(e);return(n&&"right"!==t||!n&&"right"===t)&&(i=(e=>"left"===e?"right":"right"===e?"left":e)(i)),i}class Y extends j{constructor(e){super(),this.id=e.id,this.type=e.type,this.options=void 0,this.ctx=e.ctx,this.chart=e.chart,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this._margins={left:0,right:0,top:0,bottom:0},this.maxWidth=void 0,this.maxHeight=void 0,this.paddingTop=void 0,this.paddingBottom=void 0,this.paddingLeft=void 0,this.paddingRight=void 0,this.axis=void 0,this.labelRotation=void 0,this.min=void 0,this.max=void 0,this._range=void 0,this.ticks=[],this._gridLineItems=null,this._labelItems=null,this._labelSizes=null,this._length=0,this._maxLength=0,this._longestTextCache={},this._startPixel=void 0,this._endPixel=void 0,this._reversePixels=!1,this._userMax=void 0,this._userMin=void 0,this._suggestedMax=void 0,this._suggestedMin=void 0,this._ticksLength=0,this._borderValue=0,this._cache={},this._dataLimitsCached=!1,this.$context=void 0}init(e){this.options=e.setContext(this.getContext()),this.axis=e.axis,this._userMin=this.parse(e.min),this._userMax=this.parse(e.max),this._suggestedMin=this.parse(e.suggestedMin),this._suggestedMax=this.parse(e.suggestedMax)}parse(e,t){return e}getUserBounds(){let{_userMin:e,_userMax:t,_suggestedMin:n,_suggestedMax:i}=this;return e=(0,r.B)(e,Number.POSITIVE_INFINITY),t=(0,r.B)(t,Number.NEGATIVE_INFINITY),n=(0,r.B)(n,Number.POSITIVE_INFINITY),i=(0,r.B)(i,Number.NEGATIVE_INFINITY),{min:(0,r.B)(e,n),max:(0,r.B)(t,i),minDefined:(0,r.g)(e),maxDefined:(0,r.g)(t)}}getMinMax(e){let t,{min:n,max:i,minDefined:o,maxDefined:a}=this.getUserBounds();if(o&&a)return{min:n,max:i};const s=this.getMatchingVisibleMetas();for(let r=0,l=s.length;r<l;++r)t=s[r].controller.getMinMax(this,e),o||(n=Math.min(n,t.min)),a||(i=Math.max(i,t.max));return n=a&&n>i?i:n,i=o&&n>i?n:i,{min:(0,r.B)(n,(0,r.B)(i,n)),max:(0,r.B)(i,(0,r.B)(n,i))}}getPadding(){return{left:this.paddingLeft||0,top:this.paddingTop||0,right:this.paddingRight||0,bottom:this.paddingBottom||0}}getTicks(){return this.ticks}getLabels(){const e=this.chart.data;return this.options.labels||(this.isHorizontal()?e.xLabels:e.yLabels)||e.labels||[]}beforeLayout(){this._cache={},this._dataLimitsCached=!1}beforeUpdate(){(0,r.C)(this.options.beforeUpdate,[this])}update(e,t,n){const{beginAtZero:i,grace:o,ticks:a}=this.options,s=a.sampleSize;this.beforeUpdate(),this.maxWidth=e,this.maxHeight=t,this._margins=n=Object.assign({left:0,right:0,top:0,bottom:0},n),this.ticks=null,this._labelSizes=null,this._gridLineItems=null,this._labelItems=null,this.beforeSetDimensions(),this.setDimensions(),this.afterSetDimensions(),this._maxLength=this.isHorizontal()?this.width+n.left+n.right:this.height+n.top+n.bottom,this._dataLimitsCached||(this.beforeDataLimits(),this.determineDataLimits(),this.afterDataLimits(),this._range=(0,r.D)(this,o,i),this._dataLimitsCached=!0),this.beforeBuildTicks(),this.ticks=this.buildTicks()||[],this.afterBuildTicks();const l=s<this.ticks.length;this._convertTicksToLabels(l?W(this.ticks,s):this.ticks),this.configure(),this.beforeCalculateLabelRotation(),this.calculateLabelRotation(),this.afterCalculateLabelRotation(),a.display&&(a.autoSkip||"auto"===a.source)&&(this.ticks=function(e,t){const n=e.options.ticks,i=n.maxTicksLimit||function(e){const t=e.options.offset,n=e._tickSize(),r=e._length/n+(t?0:1),i=e._maxLength/n;return Math.floor(Math.min(r,i))}(e),o=n.major.enabled?function(e){const t=[];let n,r;for(n=0,r=e.length;n<r;n++)e[n].major&&t.push(n);return t}(t):[],a=o.length,s=o[0],l=o[a-1],c=[];if(a>i)return function(e,t,n,r){let i,o=0,a=n[0];for(r=Math.ceil(r),i=0;i<e.length;i++)i===a&&(t.push(e[i]),o++,a=n[o*r])}(t,c,o,a/i),c;const u=function(e,t,n){const i=function(e){const t=e.length;let n,r;if(t<2)return!1;for(r=e[0],n=1;n<t;++n)if(e[n]-e[n-1]!==r)return!1;return r}(e),o=t.length/n;if(!i)return Math.max(o,1);const a=(0,r.A)(i);for(let e=0,t=a.length-1;e<t;e++){const t=a[e];if(t>o)return t}return Math.max(o,1)}(o,t,i);if(a>0){let e,n;const i=a>1?Math.round((l-s)/(a-1)):null;for(B(t,c,u,(0,r.k)(i)?0:s-i,s),e=0,n=a-1;e<n;e++)B(t,c,u,o[e],o[e+1]);return B(t,c,u,l,(0,r.k)(i)?t.length:l+i),c}return B(t,c,u),c}(this,this.ticks),this._labelSizes=null,this.afterAutoSkip()),l&&this._convertTicksToLabels(this.ticks),this.beforeFit(),this.fit(),this.afterFit(),this.afterUpdate()}configure(){let e,t,n=this.options.reverse;this.isHorizontal()?(e=this.left,t=this.right):(e=this.top,t=this.bottom,n=!n),this._startPixel=e,this._endPixel=t,this._reversePixels=n,this._length=t-e,this._alignToPixels=this.options.alignToPixels}afterUpdate(){(0,r.C)(this.options.afterUpdate,[this])}beforeSetDimensions(){(0,r.C)(this.options.beforeSetDimensions,[this])}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=0,this.right=this.width):(this.height=this.maxHeight,this.top=0,this.bottom=this.height),this.paddingLeft=0,this.paddingTop=0,this.paddingRight=0,this.paddingBottom=0}afterSetDimensions(){(0,r.C)(this.options.afterSetDimensions,[this])}_callHooks(e){this.chart.notifyPlugins(e,this.getContext()),(0,r.C)(this.options[e],[this])}beforeDataLimits(){this._callHooks("beforeDataLimits")}determineDataLimits(){}afterDataLimits(){this._callHooks("afterDataLimits")}beforeBuildTicks(){this._callHooks("beforeBuildTicks")}buildTicks(){return[]}afterBuildTicks(){this._callHooks("afterBuildTicks")}beforeTickToLabelConversion(){(0,r.C)(this.options.beforeTickToLabelConversion,[this])}generateTickLabels(e){const t=this.options.ticks;let n,i,o;for(n=0,i=e.length;n<i;n++)o=e[n],o.label=(0,r.C)(t.callback,[o.value,n,e],this)}afterTickToLabelConversion(){(0,r.C)(this.options.afterTickToLabelConversion,[this])}beforeCalculateLabelRotation(){(0,r.C)(this.options.beforeCalculateLabelRotation,[this])}calculateLabelRotation(){const e=this.options,t=e.ticks,n=this.ticks.length,i=t.minRotation||0,o=t.maxRotation;let a,s,l,c=i;if(!this._isVisible()||!t.display||i>=o||n<=1||!this.isHorizontal())return void(this.labelRotation=i);const u=this._getLabelSizes(),d=u.widest.width,f=u.highest.height,h=(0,r.E)(this.chart.width-d,0,this.maxWidth);a=e.offset?this.maxWidth/n:h/(n-1),d+6>a&&(a=h/(n-(e.offset?.5:1)),s=this.maxHeight-$(e.grid)-t.padding-U(e.title,this.chart.options.font),l=Math.sqrt(d*d+f*f),c=(0,r.F)(Math.min(Math.asin((0,r.E)((u.highest.height+6)/a,-1,1)),Math.asin((0,r.E)(s/l,-1,1))-Math.asin((0,r.E)(f/l,-1,1)))),c=Math.max(i,Math.min(o,c))),this.labelRotation=c}afterCalculateLabelRotation(){(0,r.C)(this.options.afterCalculateLabelRotation,[this])}afterAutoSkip(){}beforeFit(){(0,r.C)(this.options.beforeFit,[this])}fit(){const e={width:0,height:0},{chart:t,options:{ticks:n,title:i,grid:o}}=this,a=this._isVisible(),s=this.isHorizontal();if(a){const a=U(i,t.options.font);if(s?(e.width=this.maxWidth,e.height=$(o)+a):(e.height=this.maxHeight,e.width=$(o)+a),n.display&&this.ticks.length){const{first:t,last:i,widest:o,highest:a}=this._getLabelSizes(),l=2*n.padding,c=(0,r.t)(this.labelRotation),u=Math.cos(c),d=Math.sin(c);if(s){const t=n.mirror?0:d*o.width+u*a.height;e.height=Math.min(this.maxHeight,e.height+t+l)}else{const t=n.mirror?0:u*o.width+d*a.height;e.width=Math.min(this.maxWidth,e.width+t+l)}this._calculatePadding(t,i,d,u)}}this._handleMargins(),s?(this.width=this._length=t.width-this._margins.left-this._margins.right,this.height=e.height):(this.width=e.width,this.height=this._length=t.height-this._margins.top-this._margins.bottom)}_calculatePadding(e,t,n,r){const{ticks:{align:i,padding:o},position:a}=this.options,s=0!==this.labelRotation,l="top"!==a&&"x"===this.axis;if(this.isHorizontal()){const a=this.getPixelForTick(0)-this.left,c=this.right-this.getPixelForTick(this.ticks.length-1);let u=0,d=0;s?l?(u=r*e.width,d=n*t.height):(u=n*e.height,d=r*t.width):"start"===i?d=t.width:"end"===i?u=e.width:"inner"!==i&&(u=e.width/2,d=t.width/2),this.paddingLeft=Math.max((u-a+o)*this.width/(this.width-a),0),this.paddingRight=Math.max((d-c+o)*this.width/(this.width-c),0)}else{let n=t.height/2,r=e.height/2;"start"===i?(n=0,r=e.height):"end"===i&&(n=t.height,r=0),this.paddingTop=n+o,this.paddingBottom=r+o}}_handleMargins(){this._margins&&(this._margins.left=Math.max(this.paddingLeft,this._margins.left),this._margins.top=Math.max(this.paddingTop,this._margins.top),this._margins.right=Math.max(this.paddingRight,this._margins.right),this._margins.bottom=Math.max(this.paddingBottom,this._margins.bottom))}afterFit(){(0,r.C)(this.options.afterFit,[this])}isHorizontal(){const{axis:e,position:t}=this.options;return"top"===t||"bottom"===t||"x"===e}isFullSize(){return this.options.fullSize}_convertTicksToLabels(e){let t,n;for(this.beforeTickToLabelConversion(),this.generateTickLabels(e),t=0,n=e.length;t<n;t++)(0,r.k)(e[t].label)&&(e.splice(t,1),n--,t--);this.afterTickToLabelConversion()}_getLabelSizes(){let e=this._labelSizes;if(!e){const t=this.options.ticks.sampleSize;let n=this.ticks;t<n.length&&(n=W(n,t)),this._labelSizes=e=this._computeLabelSizes(n,n.length)}return e}_computeLabelSizes(e,t){const{ctx:n,_longestTextCache:i}=this,o=[],a=[];let s,l,c,u,d,f,h,p,g,m,v,b=0,y=0;for(s=0;s<t;++s){if(u=e[s].label,d=this._resolveTickFontOptions(s),n.font=f=d.string,h=i[f]=i[f]||{data:{},gc:[]},p=d.lineHeight,g=m=0,(0,r.k)(u)||(0,r.b)(u)){if((0,r.b)(u))for(l=0,c=u.length;l<c;++l)v=u[l],(0,r.k)(v)||(0,r.b)(v)||(g=(0,r.G)(n,h.data,h.gc,g,v),m+=p)}else g=(0,r.G)(n,h.data,h.gc,g,u),m=p;o.push(g),a.push(m),b=Math.max(g,b),y=Math.max(m,y)}!function(e,t){(0,r.Q)(e,(e=>{const n=e.gc,r=n.length/2;let i;if(r>t){for(i=0;i<r;++i)delete e.data[n[i]];n.splice(0,r)}}))}(i,t);const x=o.indexOf(b),w=a.indexOf(y),k=e=>({width:o[e]||0,height:a[e]||0});return{first:k(0),last:k(t-1),widest:k(x),highest:k(w),widths:o,heights:a}}getLabelForValue(e){return e}getPixelForValue(e,t){return NaN}getValueForPixel(e){}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getPixelForDecimal(e){this._reversePixels&&(e=1-e);const t=this._startPixel+e*this._length;return(0,r.I)(this._alignToPixels?(0,r.J)(this.chart,t,0):t)}getDecimalForPixel(e){const t=(e-this._startPixel)/this._length;return this._reversePixels?1-t:t}getBasePixel(){return this.getPixelForValue(this.getBaseValue())}getBaseValue(){const{min:e,max:t}=this;return e<0&&t<0?t:e>0&&t>0?e:0}getContext(e){const t=this.ticks||[];if(e>=0&&e<t.length){const n=t[e];return n.$context||(n.$context=function(e,t,n){return(0,r.h)(e,{tick:n,index:t,type:"tick"})}(this.getContext(),e,n))}return this.$context||(this.$context=(n=this.chart.getContext(),(0,r.h)(n,{scale:this,type:"scale"})));var n}_tickSize(){const e=this.options.ticks,t=(0,r.t)(this.labelRotation),n=Math.abs(Math.cos(t)),i=Math.abs(Math.sin(t)),o=this._getLabelSizes(),a=e.autoSkipPadding||0,s=o?o.widest.width+a:0,l=o?o.highest.height+a:0;return this.isHorizontal()?l*n>s*i?s/n:l/i:l*i<s*n?l/n:s/i}_isVisible(){const e=this.options.display;return"auto"!==e?!!e:this.getMatchingVisibleMetas().length>0}_computeGridLineItems(e){const t=this.axis,n=this.chart,i=this.options,{grid:o,position:a}=i,s=o.offset,l=this.isHorizontal(),c=this.ticks.length+(s?1:0),u=$(o),d=[],f=o.setContext(this.getContext()),h=f.drawBorder?f.borderWidth:0,p=h/2,g=function(e){return(0,r.J)(n,e,h)};let m,v,b,y,x,w,k,_,E,S,O,P;if("top"===a)m=g(this.bottom),w=this.bottom-u,_=m-p,S=g(e.top)+p,P=e.bottom;else if("bottom"===a)m=g(this.top),S=e.top,P=g(e.bottom)-p,w=m+p,_=this.top+u;else if("left"===a)m=g(this.right),x=this.right-u,k=m-p,E=g(e.left)+p,O=e.right;else if("right"===a)m=g(this.left),E=e.left,O=g(e.right)-p,x=m+p,k=this.left+u;else if("x"===t){if("center"===a)m=g((e.top+e.bottom)/2+.5);else if((0,r.i)(a)){const e=Object.keys(a)[0],t=a[e];m=g(this.chart.scales[e].getPixelForValue(t))}S=e.top,P=e.bottom,w=m+p,_=w+u}else if("y"===t){if("center"===a)m=g((e.left+e.right)/2);else if((0,r.i)(a)){const e=Object.keys(a)[0],t=a[e];m=g(this.chart.scales[e].getPixelForValue(t))}x=m-p,k=x-u,E=e.left,O=e.right}const C=(0,r.v)(i.ticks.maxTicksLimit,c),M=Math.max(1,Math.ceil(c/C));for(v=0;v<c;v+=M){const e=o.setContext(this.getContext(v)),t=e.lineWidth,i=e.color,a=e.borderDash||[],c=e.borderDashOffset,u=e.tickWidth,f=e.tickColor,h=e.tickBorderDash||[],p=e.tickBorderDashOffset;b=H(this,v,s),void 0!==b&&(y=(0,r.J)(n,b,t),l?x=k=E=O=y:w=_=S=P=y,d.push({tx1:x,ty1:w,tx2:k,ty2:_,x1:E,y1:S,x2:O,y2:P,width:t,color:i,borderDash:a,borderDashOffset:c,tickWidth:u,tickColor:f,tickBorderDash:h,tickBorderDashOffset:p}))}return this._ticksLength=c,this._borderValue=m,d}_computeLabelItems(e){const t=this.axis,n=this.options,{position:i,ticks:o}=n,a=this.isHorizontal(),s=this.ticks,{align:l,crossAlign:c,padding:u,mirror:d}=o,f=$(n.grid),h=f+u,p=d?-u:h,g=-(0,r.t)(this.labelRotation),m=[];let v,b,y,x,w,k,_,E,S,O,P,C,M="middle";if("top"===i)k=this.bottom-p,_=this._getXAxisLabelAlignment();else if("bottom"===i)k=this.top+p,_=this._getXAxisLabelAlignment();else if("left"===i){const e=this._getYAxisLabelAlignment(f);_=e.textAlign,w=e.x}else if("right"===i){const e=this._getYAxisLabelAlignment(f);_=e.textAlign,w=e.x}else if("x"===t){if("center"===i)k=(e.top+e.bottom)/2+h;else if((0,r.i)(i)){const e=Object.keys(i)[0],t=i[e];k=this.chart.scales[e].getPixelForValue(t)+h}_=this._getXAxisLabelAlignment()}else if("y"===t){if("center"===i)w=(e.left+e.right)/2-h;else if((0,r.i)(i)){const e=Object.keys(i)[0],t=i[e];w=this.chart.scales[e].getPixelForValue(t)}_=this._getYAxisLabelAlignment(f).textAlign}"y"===t&&("start"===l?M="top":"end"===l&&(M="bottom"));const T=this._getLabelSizes();for(v=0,b=s.length;v<b;++v){y=s[v],x=y.label;const e=o.setContext(this.getContext(v));E=this.getPixelForTick(v)+o.labelOffset,S=this._resolveTickFontOptions(v),O=S.lineHeight,P=(0,r.b)(x)?x.length:1;const t=P/2,n=e.color,l=e.textStrokeColor,u=e.textStrokeWidth;let f,h=_;if(a?(w=E,"inner"===_&&(h=v===b-1?this.options.reverse?"left":"right":0===v?this.options.reverse?"right":"left":"center"),C="top"===i?"near"===c||0!==g?-P*O+O/2:"center"===c?-T.highest.height/2-t*O+O:-T.highest.height+O/2:"near"===c||0!==g?O/2:"center"===c?T.highest.height/2-t*O:T.highest.height-P*O,d&&(C*=-1)):(k=E,C=(1-P)*O/2),e.showLabelBackdrop){const t=(0,r.K)(e.backdropPadding),n=T.heights[v],i=T.widths[v];let o=k+C-t.top,a=w-t.left;switch(M){case"middle":o-=n/2;break;case"bottom":o-=n}switch(_){case"center":a-=i/2;break;case"right":a-=i}f={left:a,top:o,width:i+t.width,height:n+t.height,color:e.backdropColor}}m.push({rotation:g,label:x,font:S,color:n,strokeColor:l,strokeWidth:u,textOffset:C,textAlign:h,textBaseline:M,translation:[w,k],backdrop:f})}return m}_getXAxisLabelAlignment(){const{position:e,ticks:t}=this.options;if(-(0,r.t)(this.labelRotation))return"top"===e?"left":"right";let n="center";return"start"===t.align?n="left":"end"===t.align?n="right":"inner"===t.align&&(n="inner"),n}_getYAxisLabelAlignment(e){const{position:t,ticks:{crossAlign:n,mirror:r,padding:i}}=this.options,o=e+i,a=this._getLabelSizes().widest.width;let s,l;return"left"===t?r?(l=this.right+i,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l+=a)):(l=this.right-o,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l=this.left)):"right"===t?r?(l=this.left+i,"near"===n?s="right":"center"===n?(s="center",l-=a/2):(s="left",l-=a)):(l=this.left+o,"near"===n?s="left":"center"===n?(s="center",l+=a/2):(s="right",l=this.right)):s="right",{textAlign:s,x:l}}_computeLabelArea(){if(this.options.ticks.mirror)return;const e=this.chart,t=this.options.position;return"left"===t||"right"===t?{top:0,left:this.left,bottom:e.height,right:this.right}:"top"===t||"bottom"===t?{top:this.top,left:0,bottom:this.bottom,right:e.width}:void 0}drawBackground(){const{ctx:e,options:{backgroundColor:t},left:n,top:r,width:i,height:o}=this;t&&(e.save(),e.fillStyle=t,e.fillRect(n,r,i,o),e.restore())}getLineWidthForValue(e){const t=this.options.grid;if(!this._isVisible()||!t.display)return 0;const n=this.ticks.findIndex((t=>t.value===e));return n>=0?t.setContext(this.getContext(n)).lineWidth:0}drawGrid(e){const t=this.options.grid,n=this.ctx,r=this._gridLineItems||(this._gridLineItems=this._computeGridLineItems(e));let i,o;const a=(e,t,r)=>{r.width&&r.color&&(n.save(),n.lineWidth=r.width,n.strokeStyle=r.color,n.setLineDash(r.borderDash||[]),n.lineDashOffset=r.borderDashOffset,n.beginPath(),n.moveTo(e.x,e.y),n.lineTo(t.x,t.y),n.stroke(),n.restore())};if(t.display)for(i=0,o=r.length;i<o;++i){const e=r[i];t.drawOnChartArea&&a({x:e.x1,y:e.y1},{x:e.x2,y:e.y2},e),t.drawTicks&&a({x:e.tx1,y:e.ty1},{x:e.tx2,y:e.ty2},{color:e.tickColor,width:e.tickWidth,borderDash:e.tickBorderDash,borderDashOffset:e.tickBorderDashOffset})}}drawBorder(){const{chart:e,ctx:t,options:{grid:n}}=this,i=n.setContext(this.getContext()),o=n.drawBorder?i.borderWidth:0;if(!o)return;const a=n.setContext(this.getContext(0)).lineWidth,s=this._borderValue;let l,c,u,d;this.isHorizontal()?(l=(0,r.J)(e,this.left,o)-o/2,c=(0,r.J)(e,this.right,a)+a/2,u=d=s):(u=(0,r.J)(e,this.top,o)-o/2,d=(0,r.J)(e,this.bottom,a)+a/2,l=c=s),t.save(),t.lineWidth=i.borderWidth,t.strokeStyle=i.borderColor,t.beginPath(),t.moveTo(l,u),t.lineTo(c,d),t.stroke(),t.restore()}drawLabels(e){if(!this.options.ticks.display)return;const t=this.ctx,n=this._computeLabelArea();n&&(0,r.L)(t,n);const i=this._labelItems||(this._labelItems=this._computeLabelItems(e));let o,a;for(o=0,a=i.length;o<a;++o){const e=i[o],n=e.font,a=e.label;e.backdrop&&(t.fillStyle=e.backdrop.color,t.fillRect(e.backdrop.left,e.backdrop.top,e.backdrop.width,e.backdrop.height));let s=e.textOffset;(0,r.M)(t,a,0,s,n,e)}n&&(0,r.N)(t)}drawTitle(){const{ctx:e,options:{position:t,title:n,reverse:i}}=this;if(!n.display)return;const o=(0,r.O)(n.font),a=(0,r.K)(n.padding),s=n.align;let l=o.lineHeight/2;"bottom"===t||"center"===t||(0,r.i)(t)?(l+=a.bottom,(0,r.b)(n.text)&&(l+=o.lineHeight*(n.text.length-1))):l+=a.top;const{titleX:c,titleY:u,maxWidth:d,rotation:f}=function(e,t,n,i){const{top:o,left:a,bottom:s,right:l,chart:c}=e,{chartArea:u,scales:d}=c;let f,h,p,g=0;const m=s-o,v=l-a;if(e.isHorizontal()){if(h=(0,r.S)(i,a,l),(0,r.i)(n)){const e=Object.keys(n)[0],r=n[e];p=d[e].getPixelForValue(r)+m-t}else p="center"===n?(u.bottom+u.top)/2+m-t:V(e,n,t);f=l-a}else{if((0,r.i)(n)){const e=Object.keys(n)[0],r=n[e];h=d[e].getPixelForValue(r)-v+t}else h="center"===n?(u.left+u.right)/2-v+t:V(e,n,t);p=(0,r.S)(i,s,o),g="left"===n?-r.H:r.H}return{titleX:h,titleY:p,maxWidth:f,rotation:g}}(this,l,t,s);(0,r.M)(e,n.text,0,0,o,{color:n.color,maxWidth:d,rotation:f,textAlign:K(s,t,i),textBaseline:"middle",translation:[c,u]})}draw(e){this._isVisible()&&(this.drawBackground(),this.drawGrid(e),this.drawBorder(),this.drawTitle(),this.drawLabels(e))}_layers(){const e=this.options,t=e.ticks&&e.ticks.z||0,n=(0,r.v)(e.grid&&e.grid.z,-1);return this._isVisible()&&this.draw===Y.prototype.draw?[{z:n,draw:e=>{this.drawBackground(),this.drawGrid(e),this.drawTitle()}},{z:n+1,draw:()=>{this.drawBorder()}},{z:t,draw:e=>{this.drawLabels(e)}}]:[{z:t,draw:e=>{this.draw(e)}}]}getMatchingVisibleMetas(e){const t=this.chart.getSortedVisibleDatasetMetas(),n=this.axis+"AxisID",r=[];let i,o;for(i=0,o=t.length;i<o;++i){const o=t[i];o[n]!==this.id||e&&o.type!==e||r.push(o)}return r}_resolveTickFontOptions(e){const t=this.options.ticks.setContext(this.getContext(e));return(0,r.O)(t.font)}_maxDigits(){const e=this._resolveTickFontOptions(0).lineHeight;return(this.isHorizontal()?this.width:this.height)/e}}class q{constructor(e,t,n){this.type=e,this.scope=t,this.override=n,this.items=Object.create(null)}isForType(e){return Object.prototype.isPrototypeOf.call(this.type.prototype,e.prototype)}register(e){const t=Object.getPrototypeOf(e);let n;(function(e){return"id"in e&&"defaults"in e})(t)&&(n=this.register(t));const i=this.items,o=e.id,a=this.scope+"."+o;if(!o)throw new Error("class does not have id: "+e);return o in i||(i[o]=e,function(e,t,n){const i=(0,r.V)(Object.create(null),[n?r.d.get(n):{},r.d.get(t),e.defaults]);r.d.set(t,i),e.defaultRoutes&&function(e,t){Object.keys(t).forEach((n=>{const i=n.split("."),o=i.pop(),a=[e].concat(i).join("."),s=t[n].split("."),l=s.pop(),c=s.join(".");r.d.route(a,o,c,l)}))}(t,e.defaultRoutes),e.descriptors&&r.d.describe(t,e.descriptors)}(e,a,n),this.override&&r.d.override(e.id,e.overrides)),a}get(e){return this.items[e]}unregister(e){const t=this.items,n=e.id,i=this.scope;n in t&&delete t[n],i&&n in r.d[i]&&(delete r.d[i][n],this.override&&delete r.U[n])}}var Q=new class{constructor(){this.controllers=new q(w,"datasets",!0),this.elements=new q(j,"elements"),this.plugins=new q(Object,"plugins"),this.scales=new q(Y,"scales"),this._typedRegistries=[this.controllers,this.scales,this.elements]}add(...e){this._each("register",e)}remove(...e){this._each("unregister",e)}addControllers(...e){this._each("register",e,this.controllers)}addElements(...e){this._each("register",e,this.elements)}addPlugins(...e){this._each("register",e,this.plugins)}addScales(...e){this._each("register",e,this.scales)}getController(e){return this._get(e,this.controllers,"controller")}getElement(e){return this._get(e,this.elements,"element")}getPlugin(e){return this._get(e,this.plugins,"plugin")}getScale(e){return this._get(e,this.scales,"scale")}removeControllers(...e){this._each("unregister",e,this.controllers)}removeElements(...e){this._each("unregister",e,this.elements)}removePlugins(...e){this._each("unregister",e,this.plugins)}removeScales(...e){this._each("unregister",e,this.scales)}_each(e,t,n){[...t].forEach((t=>{const i=n||this._getRegistryForType(t);n||i.isForType(t)||i===this.plugins&&t.id?this._exec(e,i,t):(0,r.Q)(t,(t=>{const r=n||this._getRegistryForType(t);this._exec(e,r,t)}))}))}_exec(e,t,n){const i=(0,r.W)(e);(0,r.C)(n["before"+i],[],n),t[e](n),(0,r.C)(n["after"+i],[],n)}_getRegistryForType(e){for(let t=0;t<this._typedRegistries.length;t++){const n=this._typedRegistries[t];if(n.isForType(e))return n}return this.plugins}_get(e,t,n){const r=t.get(e);if(void 0===r)throw new Error('"'+e+'" is not a registered '+n+".");return r}};class X extends w{update(e){const t=this._cachedMeta,{data:n=[]}=t,i=this.chart._animationsDisabled;let{start:o,count:a}=(0,r.q)(t,n,i);if(this._drawStart=o,this._drawCount=a,(0,r.w)(t)&&(o=0,a=n.length),this.options.showLine){const{dataset:r,_dataset:o}=t;r._chart=this.chart,r._datasetIndex=this.index,r._decimated=!!o._decimated,r.points=n;const a=this.resolveDatasetElementOptions(e);a.segment=this.options.segment,this.updateElement(r,void 0,{animated:!i,options:a},e)}this.updateElements(n,o,a,e)}addElements(){const{showLine:e}=this.options;!this.datasetElementType&&e&&(this.datasetElementType=Q.getElement("line")),super.addElements()}updateElements(e,t,n,i){const o="reset"===i,{iScale:a,vScale:s,_stacked:l,_dataset:c}=this._cachedMeta,u=this.resolveDataElementOptions(t,i),d=this.getSharedOptions(u),f=this.includeOptions(i,d),h=a.axis,p=s.axis,{spanGaps:g,segment:m}=this.options,v=(0,r.x)(g)?g:Number.POSITIVE_INFINITY,b=this.chart._animationsDisabled||o||"none"===i;let y=t>0&&this.getParsed(t-1);for(let u=t;u<t+n;++u){const t=e[u],n=this.getParsed(u),g=b?t:{},x=(0,r.k)(n[p]),w=g[h]=a.getPixelForValue(n[h],u),k=g[p]=o||x?s.getBasePixel():s.getPixelForValue(l?this.applyStack(s,n,l):n[p],u);g.skip=isNaN(w)||isNaN(k)||x,g.stop=u>0&&Math.abs(n[h]-y[h])>v,m&&(g.parsed=n,g.raw=c.data[u]),f&&(g.options=d||this.resolveDataElementOptions(u,t.active?"active":i)),b||this.updateElement(t,u,g,i),y=n}this.updateSharedOptions(d,i,u)}getMaxOverflow(){const e=this._cachedMeta,t=e.data||[];if(!this.options.showLine){let e=0;for(let n=t.length-1;n>=0;--n)e=Math.max(e,t[n].size(this.resolveDataElementOptions(n))/2);return e>0&&e}const n=e.dataset,r=n.options&&n.options.borderWidth||0;if(!t.length)return r;const i=t[0].size(this.resolveDataElementOptions(0)),o=t[t.length-1].size(this.resolveDataElementOptions(t.length-1));return Math.max(r,i,o)/2}}X.id="scatter",X.defaults={datasetElementType:!1,dataElementType:"point",showLine:!1,fill:!1},X.overrides={interaction:{mode:"point"},plugins:{tooltip:{callbacks:{title:()=>"",label:e=>"("+e.label+", "+e.formattedValue+")"}}},scales:{x:{type:"linear"},y:{type:"linear"}}};var G=Object.freeze({__proto__:null,BarController:T,BubbleController:N,DoughnutController:A,LineController:R,PolarAreaController:L,PieController:D,RadarController:I,ScatterController:X});function J(){throw new Error("This method is not implemented: Check that a complete date adapter is provided.")}class Z{constructor(e){this.options=e||{}}init(e){}formats(){return J()}parse(e,t){return J()}format(e,t){return J()}add(e,t,n){return J()}diff(e,t,n){return J()}startOf(e,t,n){return J()}endOf(e,t){return J()}}Z.override=function(e){Object.assign(Z.prototype,e)};var ee={_date:Z};function te(e,t,n,i){const{controller:o,data:a,_sorted:s}=e,l=o._cachedMeta.iScale;if(l&&t===l.axis&&"r"!==t&&s&&a.length){const e=l._reversePixels?r.Y:r.Z;if(!i)return e(a,t,n);if(o._sharedOptions){const r=a[0],i="function"==typeof r.getRange&&r.getRange(t);if(i){const r=e(a,t,n-i),o=e(a,t,n+i);return{lo:r.lo,hi:o.hi}}}}return{lo:0,hi:a.length-1}}function ne(e,t,n,r,i){const o=e.getSortedVisibleDatasetMetas(),a=n[t];for(let e=0,n=o.length;e<n;++e){const{index:n,data:s}=o[e],{lo:l,hi:c}=te(o[e],t,a,i);for(let e=l;e<=c;++e){const t=s[e];t.skip||r(t,n,e)}}}function re(e,t,n,i,o){const a=[];return o||e.isPointInArea(t)?(ne(e,n,t,(function(n,s,l){(o||(0,r.$)(n,e.chartArea,0))&&n.inRange(t.x,t.y,i)&&a.push({element:n,datasetIndex:s,index:l})}),!0),a):a}function ie(e,t,n,i,o,a){return a||e.isPointInArea(t)?"r"!==n||i?function(e,t,n,r,i,o){let a=[];const s=function(e){const t=-1!==e.indexOf("x"),n=-1!==e.indexOf("y");return function(e,r){const i=t?Math.abs(e.x-r.x):0,o=n?Math.abs(e.y-r.y):0;return Math.sqrt(Math.pow(i,2)+Math.pow(o,2))}}(n);let l=Number.POSITIVE_INFINITY;return ne(e,n,t,(function(n,c,u){const d=n.inRange(t.x,t.y,i);if(r&&!d)return;const f=n.getCenterPoint(i);if(!o&&!e.isPointInArea(f)&&!d)return;const h=s(t,f);h<l?(a=[{element:n,datasetIndex:c,index:u}],l=h):h===l&&a.push({element:n,datasetIndex:c,index:u})})),a}(e,t,n,i,o,a):function(e,t,n,i){let o=[];return ne(e,n,t,(function(e,n,a){const{startAngle:s,endAngle:l}=e.getProps(["startAngle","endAngle"],i),{angle:c}=(0,r.a0)(e,{x:t.x,y:t.y});(0,r.p)(c,s,l)&&o.push({element:e,datasetIndex:n,index:a})})),o}(e,t,n,o):[]}function oe(e,t,n,r,i){const o=[],a="x"===n?"inXRange":"inYRange";let s=!1;return ne(e,n,t,((e,r,l)=>{e[a](t[n],i)&&(o.push({element:e,datasetIndex:r,index:l}),s=s||e.inRange(t.x,t.y,i))})),r&&!s?[]:o}var ae={evaluateInteractionItems:ne,modes:{index(e,t,n,i){const o=(0,r.X)(t,e),a=n.axis||"x",s=n.includeInvisible||!1,l=n.intersect?re(e,o,a,i,s):ie(e,o,a,!1,i,s),c=[];return l.length?(e.getSortedVisibleDatasetMetas().forEach((e=>{const t=l[0].index,n=e.data[t];n&&!n.skip&&c.push({element:n,datasetIndex:e.index,index:t})})),c):[]},dataset(e,t,n,i){const o=(0,r.X)(t,e),a=n.axis||"xy",s=n.includeInvisible||!1;let l=n.intersect?re(e,o,a,i,s):ie(e,o,a,!1,i,s);if(l.length>0){const t=l[0].datasetIndex,n=e.getDatasetMeta(t).data;l=[];for(let e=0;e<n.length;++e)l.push({element:n[e],datasetIndex:t,index:e})}return l},point:(e,t,n,i)=>re(e,(0,r.X)(t,e),n.axis||"xy",i,n.includeInvisible||!1),nearest(e,t,n,i){const o=(0,r.X)(t,e),a=n.axis||"xy",s=n.includeInvisible||!1;return ie(e,o,a,n.intersect,i,s)},x:(e,t,n,i)=>oe(e,(0,r.X)(t,e),"x",n.intersect,i),y:(e,t,n,i)=>oe(e,(0,r.X)(t,e),"y",n.intersect,i)}};const se=["left","top","right","bottom"];function le(e,t){return e.filter((e=>e.pos===t))}function ce(e,t){return e.filter((e=>-1===se.indexOf(e.pos)&&e.box.axis===t))}function ue(e,t){return e.sort(((e,n)=>{const r=t?n:e,i=t?e:n;return r.weight===i.weight?r.index-i.index:r.weight-i.weight}))}function de(e,t,n,r){return Math.max(e[n],t[n])+Math.max(e[r],t[r])}function fe(e,t){e.top=Math.max(e.top,t.top),e.left=Math.max(e.left,t.left),e.bottom=Math.max(e.bottom,t.bottom),e.right=Math.max(e.right,t.right)}function he(e,t,n,i){const{pos:o,box:a}=n,s=e.maxPadding;if(!(0,r.i)(o)){n.size&&(e[o]-=n.size);const t=i[n.stack]||{size:0,count:1};t.size=Math.max(t.size,n.horizontal?a.height:a.width),n.size=t.size/t.count,e[o]+=n.size}a.getPadding&&fe(s,a.getPadding());const l=Math.max(0,t.outerWidth-de(s,e,"left","right")),c=Math.max(0,t.outerHeight-de(s,e,"top","bottom")),u=l!==e.w,d=c!==e.h;return e.w=l,e.h=c,n.horizontal?{same:u,other:d}:{same:d,other:u}}function pe(e,t){const n=t.maxPadding;return function(e){const r={left:0,top:0,right:0,bottom:0};return e.forEach((e=>{r[e]=Math.max(t[e],n[e])})),r}(e?["left","right"]:["top","bottom"])}function ge(e,t,n,r){const i=[];let o,a,s,l,c,u;for(o=0,a=e.length,c=0;o<a;++o){s=e[o],l=s.box,l.update(s.width||t.w,s.height||t.h,pe(s.horizontal,t));const{same:a,other:d}=he(t,n,s,r);c|=a&&i.length,u=u||d,l.fullSize||i.push(s)}return c&&ge(i,t,n,r)||u}function me(e,t,n,r,i){e.top=n,e.left=t,e.right=t+r,e.bottom=n+i,e.width=r,e.height=i}function ve(e,t,n,i){const o=n.padding;let{x:a,y:s}=t;for(const l of e){const e=l.box,c=i[l.stack]||{count:1,placed:0,weight:1},u=l.stackWeight/c.weight||1;if(l.horizontal){const i=t.w*u,a=c.size||e.height;(0,r.j)(c.start)&&(s=c.start),e.fullSize?me(e,o.left,s,n.outerWidth-o.right-o.left,a):me(e,t.left+c.placed,s,i,a),c.start=s,c.placed+=i,s=e.bottom}else{const i=t.h*u,s=c.size||e.width;(0,r.j)(c.start)&&(a=c.start),e.fullSize?me(e,a,o.top,s,n.outerHeight-o.bottom-o.top):me(e,a,t.top+c.placed,s,i),c.start=a,c.placed+=i,a=e.right}}t.x=a,t.y=s}r.d.set("layout",{autoPadding:!0,padding:{top:0,right:0,bottom:0,left:0}});var be={addBox(e,t){e.boxes||(e.boxes=[]),t.fullSize=t.fullSize||!1,t.position=t.position||"top",t.weight=t.weight||0,t._layers=t._layers||function(){return[{z:0,draw(e){t.draw(e)}}]},e.boxes.push(t)},removeBox(e,t){const n=e.boxes?e.boxes.indexOf(t):-1;-1!==n&&e.boxes.splice(n,1)},configure(e,t,n){t.fullSize=n.fullSize,t.position=n.position,t.weight=n.weight},update(e,t,n,i){if(!e)return;const o=(0,r.K)(e.options.layout.padding),a=Math.max(t-o.width,0),s=Math.max(n-o.height,0),l=function(e){const t=function(e){const t=[];let n,r,i,o,a,s;for(n=0,r=(e||[]).length;n<r;++n)i=e[n],({position:o,options:{stack:a,stackWeight:s=1}}=i),t.push({index:n,box:i,pos:o,horizontal:i.isHorizontal(),weight:i.weight,stack:a&&o+a,stackWeight:s});return t}(e),n=ue(t.filter((e=>e.box.fullSize)),!0),r=ue(le(t,"left"),!0),i=ue(le(t,"right")),o=ue(le(t,"top"),!0),a=ue(le(t,"bottom")),s=ce(t,"x"),l=ce(t,"y");return{fullSize:n,leftAndTop:r.concat(o),rightAndBottom:i.concat(l).concat(a).concat(s),chartArea:le(t,"chartArea"),vertical:r.concat(i).concat(l),horizontal:o.concat(a).concat(s)}}(e.boxes),c=l.vertical,u=l.horizontal;(0,r.Q)(e.boxes,(e=>{"function"==typeof e.beforeLayout&&e.beforeLayout()}));const d=c.reduce(((e,t)=>t.box.options&&!1===t.box.options.display?e:e+1),0)||1,f=Object.freeze({outerWidth:t,outerHeight:n,padding:o,availableWidth:a,availableHeight:s,vBoxMaxWidth:a/2/d,hBoxMaxHeight:s/2}),h=Object.assign({},o);fe(h,(0,r.K)(i));const p=Object.assign({maxPadding:h,w:a,h:s,x:o.left,y:o.top},o),g=function(e,t){const n=function(e){const t={};for(const n of e){const{stack:e,pos:r,stackWeight:i}=n;if(!e||!se.includes(r))continue;const o=t[e]||(t[e]={count:0,placed:0,weight:0,size:0});o.count++,o.weight+=i}return t}(e),{vBoxMaxWidth:r,hBoxMaxHeight:i}=t;let o,a,s;for(o=0,a=e.length;o<a;++o){s=e[o];const{fullSize:a}=s.box,l=n[s.stack],c=l&&s.stackWeight/l.weight;s.horizontal?(s.width=c?c*r:a&&t.availableWidth,s.height=i):(s.width=r,s.height=c?c*i:a&&t.availableHeight)}return n}(c.concat(u),f);ge(l.fullSize,p,f,g),ge(c,p,f,g),ge(u,p,f,g)&&ge(c,p,f,g),function(e){const t=e.maxPadding;function n(n){const r=Math.max(t[n]-e[n],0);return e[n]+=r,r}e.y+=n("top"),e.x+=n("left"),n("right"),n("bottom")}(p),ve(l.leftAndTop,p,f,g),p.x+=p.w,p.y+=p.h,ve(l.rightAndBottom,p,f,g),e.chartArea={left:p.left,top:p.top,right:p.left+p.w,bottom:p.top+p.h,height:p.h,width:p.w},(0,r.Q)(l.chartArea,(t=>{const n=t.box;Object.assign(n,e.chartArea),n.update(p.w,p.h,{left:0,top:0,right:0,bottom:0})}))}};class ye{acquireContext(e,t){}releaseContext(e){return!1}addEventListener(e,t,n){}removeEventListener(e,t,n){}getDevicePixelRatio(){return 1}getMaximumSize(e,t,n,r){return t=Math.max(0,t||e.width),n=n||e.height,{width:t,height:Math.max(0,r?Math.floor(t/r):n)}}isAttached(e){return!0}updateConfig(e){}}class xe extends ye{acquireContext(e){return e&&e.getContext&&e.getContext("2d")||null}updateConfig(e){e.options.animation=!1}}const we="$chartjs",ke={touchstart:"mousedown",touchmove:"mousemove",touchend:"mouseup",pointerenter:"mouseenter",pointerdown:"mousedown",pointermove:"mousemove",pointerup:"mouseup",pointerleave:"mouseout",pointerout:"mouseout"},_e=e=>null===e||""===e,Ee=!!r.a5&&{passive:!0};function Se(e,t,n){e.canvas.removeEventListener(t,n,Ee)}function Oe(e,t){for(const n of e)if(n===t||n.contains(t))return!0}function Pe(e,t,n){const r=e.canvas,i=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||Oe(n.addedNodes,r),t=t&&!Oe(n.removedNodes,r);t&&n()}));return i.observe(document,{childList:!0,subtree:!0}),i}function Ce(e,t,n){const r=e.canvas,i=new MutationObserver((e=>{let t=!1;for(const n of e)t=t||Oe(n.removedNodes,r),t=t&&!Oe(n.addedNodes,r);t&&n()}));return i.observe(document,{childList:!0,subtree:!0}),i}const Me=new Map;let Te=0;function Ne(){const e=window.devicePixelRatio;e!==Te&&(Te=e,Me.forEach(((t,n)=>{n.currentDevicePixelRatio!==e&&t()})))}function Ae(e,t,n){const i=e.canvas,o=i&&(0,r.a2)(i);if(!o)return;const a=(0,r.a4)(((e,t)=>{const r=o.clientWidth;n(e,t),r<o.clientWidth&&n()}),window),s=new ResizeObserver((e=>{const t=e[0],n=t.contentRect.width,r=t.contentRect.height;0===n&&0===r||a(n,r)}));return s.observe(o),function(e,t){Me.size||window.addEventListener("resize",Ne),Me.set(e,t)}(e,a),s}function Re(e,t,n){n&&n.disconnect(),"resize"===t&&function(e){Me.delete(e),Me.size||window.removeEventListener("resize",Ne)}(e)}function Le(e,t,n){const i=e.canvas,o=(0,r.a4)((t=>{null!==e.ctx&&n(function(e,t){const n=ke[e.type]||e.type,{x:i,y:o}=(0,r.X)(e,t);return{type:n,chart:t,native:e,x:void 0!==i?i:null,y:void 0!==o?o:null}}(t,e))}),e,(e=>{const t=e[0];return[t,t.offsetX,t.offsetY]}));return function(e,t,n){e.addEventListener(t,n,Ee)}(i,t,o),o}class De extends ye{acquireContext(e,t){const n=e&&e.getContext&&e.getContext("2d");return n&&n.canvas===e?(function(e,t){const n=e.style,i=e.getAttribute("height"),o=e.getAttribute("width");if(e[we]={initial:{height:i,width:o,style:{display:n.display,height:n.height,width:n.width}}},n.display=n.display||"block",n.boxSizing=n.boxSizing||"border-box",_e(o)){const t=(0,r.a3)(e,"width");void 0!==t&&(e.width=t)}if(_e(i))if(""===e.style.height)e.height=e.width/(t||2);else{const t=(0,r.a3)(e,"height");void 0!==t&&(e.height=t)}}(e,t),n):null}releaseContext(e){const t=e.canvas;if(!t[we])return!1;const n=t[we].initial;["height","width"].forEach((e=>{const i=n[e];(0,r.k)(i)?t.removeAttribute(e):t.setAttribute(e,i)}));const i=n.style||{};return Object.keys(i).forEach((e=>{t.style[e]=i[e]})),t.width=t.width,delete t[we],!0}addEventListener(e,t,n){this.removeEventListener(e,t);const r=e.$proxies||(e.$proxies={}),i={attach:Pe,detach:Ce,resize:Ae}[t]||Le;r[t]=i(e,t,n)}removeEventListener(e,t){const n=e.$proxies||(e.$proxies={}),r=n[t];r&&(({attach:Re,detach:Re,resize:Re}[t]||Se)(e,t,r),n[t]=void 0)}getDevicePixelRatio(){return window.devicePixelRatio}getMaximumSize(e,t,n,i){return(0,r.a1)(e,t,n,i)}isAttached(e){const t=(0,r.a2)(e);return!(!t||!t.isConnected)}}function Ie(e){return!(0,r.a6)()||"undefined"!=typeof OffscreenCanvas&&e instanceof OffscreenCanvas?xe:De}class je{constructor(){this._init=[]}notify(e,t,n,r){"beforeInit"===t&&(this._init=this._createDescriptors(e,!0),this._notify(this._init,e,"install"));const i=r?this._descriptors(e).filter(r):this._descriptors(e),o=this._notify(i,e,t,n);return"afterDestroy"===t&&(this._notify(i,e,"stop"),this._notify(this._init,e,"uninstall")),o}_notify(e,t,n,i){i=i||{};for(const o of e){const e=o.plugin,a=e[n],s=[t,i,o.options];if(!1===(0,r.C)(a,s,e)&&i.cancelable)return!1}return!0}invalidate(){(0,r.k)(this._cache)||(this._oldCache=this._cache,this._cache=void 0)}_descriptors(e){if(this._cache)return this._cache;const t=this._cache=this._createDescriptors(e);return this._notifyStateChanges(e),t}_createDescriptors(e,t){const n=e&&e.config,i=(0,r.v)(n.options&&n.options.plugins,{}),o=function(e){const t={},n=[],r=Object.keys(Q.plugins.items);for(let e=0;e<r.length;e++)n.push(Q.getPlugin(r[e]));const i=e.plugins||[];for(let e=0;e<i.length;e++){const r=i[e];-1===n.indexOf(r)&&(n.push(r),t[r.id]=!0)}return{plugins:n,localIds:t}}(n);return!1!==i||t?function(e,{plugins:t,localIds:n},r,i){const o=[],a=e.getContext();for(const s of t){const t=s.id,l=ze(r[t],i);null!==l&&o.push({plugin:s,options:Fe(e.config,{plugin:s,local:n[t]},l,a)})}return o}(e,o,i,t):[]}_notifyStateChanges(e){const t=this._oldCache||[],n=this._cache,r=(e,t)=>e.filter((e=>!t.some((t=>e.plugin.id===t.plugin.id))));this._notify(r(t,n),e,"stop"),this._notify(r(n,t),e,"start")}}function ze(e,t){return t||!1!==e?!0===e?{}:e:null}function Fe(e,{plugin:t,local:n},r,i){const o=e.pluginScopeKeys(t),a=e.getOptionScopes(r,o);return n&&t.defaults&&a.push(t.defaults),e.createResolver(a,i,[""],{scriptable:!1,indexable:!1,allKeys:!0})}function Be(e,t){const n=r.d.datasets[e]||{};return((t.datasets||{})[e]||{}).indexAxis||t.indexAxis||n.indexAxis||"x"}function Ve(e,t){return"x"===e||"y"===e?e:t.axis||("top"===(n=t.position)||"bottom"===n?"x":"left"===n||"right"===n?"y":void 0)||e.charAt(0).toLowerCase();var n}function We(e){const t=e.options||(e.options={});t.plugins=(0,r.v)(t.plugins,{}),t.scales=function(e,t){const n=r.U[e.type]||{scales:{}},i=t.scales||{},o=Be(e.type,t),a=Object.create(null),s=Object.create(null);return Object.keys(i).forEach((e=>{const t=i[e];if(!(0,r.i)(t))return console.error(`Invalid scale configuration for scale: ${e}`);if(t._proxy)return console.warn(`Ignoring resolver passed as options for scale: ${e}`);const l=Ve(e,t),c=function(e,t){return e===t?"_index_":"_value_"}(l,o),u=n.scales||{};a[l]=a[l]||e,s[e]=(0,r.ac)(Object.create(null),[{axis:l},t,u[l],u[c]])})),e.data.datasets.forEach((n=>{const o=n.type||e.type,l=n.indexAxis||Be(o,t),c=(r.U[o]||{}).scales||{};Object.keys(c).forEach((e=>{const t=function(e,t){let n=e;return"_index_"===e?n=t:"_value_"===e&&(n="x"===t?"y":"x"),n}(e,l),o=n[t+"AxisID"]||a[t]||t;s[o]=s[o]||Object.create(null),(0,r.ac)(s[o],[{axis:t},i[o],c[e]])}))})),Object.keys(s).forEach((e=>{const t=s[e];(0,r.ac)(t,[r.d.scales[t.type],r.d.scale])})),s}(e,t)}function He(e){return(e=e||{}).datasets=e.datasets||[],e.labels=e.labels||[],e}const $e=new Map,Ue=new Set;function Ke(e,t){let n=$e.get(e);return n||(n=t(),$e.set(e,n),Ue.add(n)),n}const Ye=(e,t,n)=>{const i=(0,r.f)(t,n);void 0!==i&&e.add(i)};class qe{constructor(e){this._config=function(e){return(e=e||{}).data=He(e.data),We(e),e}(e),this._scopeCache=new Map,this._resolverCache=new Map}get platform(){return this._config.platform}get type(){return this._config.type}set type(e){this._config.type=e}get data(){return this._config.data}set data(e){this._config.data=He(e)}get options(){return this._config.options}set options(e){this._config.options=e}get plugins(){return this._config.plugins}update(){const e=this._config;this.clearCache(),We(e)}clearCache(){this._scopeCache.clear(),this._resolverCache.clear()}datasetScopeKeys(e){return Ke(e,(()=>[[`datasets.${e}`,""]]))}datasetAnimationScopeKeys(e,t){return Ke(`${e}.transition.${t}`,(()=>[[`datasets.${e}.transitions.${t}`,`transitions.${t}`],[`datasets.${e}`,""]]))}datasetElementScopeKeys(e,t){return Ke(`${e}-${t}`,(()=>[[`datasets.${e}.elements.${t}`,`datasets.${e}`,`elements.${t}`,""]]))}pluginScopeKeys(e){const t=e.id;return Ke(`${this.type}-plugin-${t}`,(()=>[[`plugins.${t}`,...e.additionalOptionScopes||[]]]))}_cachedScopes(e,t){const n=this._scopeCache;let r=n.get(e);return r&&!t||(r=new Map,n.set(e,r)),r}getOptionScopes(e,t,n){const{options:i,type:o}=this,a=this._cachedScopes(e,n),s=a.get(t);if(s)return s;const l=new Set;t.forEach((t=>{e&&(l.add(e),t.forEach((t=>Ye(l,e,t)))),t.forEach((e=>Ye(l,i,e))),t.forEach((e=>Ye(l,r.U[o]||{},e))),t.forEach((e=>Ye(l,r.d,e))),t.forEach((e=>Ye(l,r.a7,e)))}));const c=Array.from(l);return 0===c.length&&c.push(Object.create(null)),Ue.has(t)&&a.set(t,c),c}chartOptionScopes(){const{options:e,type:t}=this;return[e,r.U[t]||{},r.d.datasets[t]||{},{type:t},r.d,r.a7]}resolveNamedOptions(e,t,n,i=[""]){const o={$shared:!0},{resolver:a,subPrefixes:s}=Qe(this._resolverCache,e,i);let l=a;if(function(e,t){const{isScriptable:n,isIndexable:i}=(0,r.ab)(e);for(const o of t){const t=n(o),a=i(o),s=(a||t)&&e[o];if(t&&((0,r.a8)(s)||Xe(s))||a&&(0,r.b)(s))return!0}return!1}(a,t)){o.$shared=!1,n=(0,r.a8)(n)?n():n;const t=this.createResolver(e,n,s);l=(0,r.a9)(a,n,t)}for(const e of t)o[e]=l[e];return o}createResolver(e,t,n=[""],i){const{resolver:o}=Qe(this._resolverCache,e,n);return(0,r.i)(t)?(0,r.a9)(o,t,void 0,i):o}}function Qe(e,t,n){let i=e.get(t);i||(i=new Map,e.set(t,i));const o=n.join();let a=i.get(o);return a||(a={resolver:(0,r.aa)(t,n),subPrefixes:n.filter((e=>!e.toLowerCase().includes("hover")))},i.set(o,a)),a}const Xe=e=>(0,r.i)(e)&&Object.getOwnPropertyNames(e).reduce(((t,n)=>t||(0,r.a8)(e[n])),!1),Ge=["top","bottom","left","right","chartArea"];function Je(e,t){return"top"===e||"bottom"===e||-1===Ge.indexOf(e)&&"x"===t}function Ze(e,t){return function(n,r){return n[e]===r[e]?n[t]-r[t]:n[e]-r[e]}}function et(e){const t=e.chart,n=t.options.animation;t.notifyPlugins("afterRender"),(0,r.C)(n&&n.onComplete,[e],t)}function tt(e){const t=e.chart,n=t.options.animation;(0,r.C)(n&&n.onProgress,[e],t)}function nt(e){return(0,r.a6)()&&"string"==typeof e?e=document.getElementById(e):e&&e.length&&(e=e[0]),e&&e.canvas&&(e=e.canvas),e}const rt={},it=e=>{const t=nt(e);return Object.values(rt).filter((e=>e.canvas===t)).pop()};function ot(e,t,n){const r=Object.keys(e);for(const i of r){const r=+i;if(r>=t){const o=e[i];delete e[i],(n>0||r>t)&&(e[r+n]=o)}}}class at{constructor(e,t){const n=this.config=new qe(t),o=nt(e),a=it(o);if(a)throw new Error("Canvas is already in use. Chart with ID '"+a.id+"' must be destroyed before the canvas with ID '"+a.canvas.id+"' can be reused.");const s=n.createResolver(n.chartOptionScopes(),this.getContext());this.platform=new(n.platform||Ie(o)),this.platform.updateConfig(n);const l=this.platform.acquireContext(o,s.aspectRatio),c=l&&l.canvas,u=c&&c.height,d=c&&c.width;this.id=(0,r.ad)(),this.ctx=l,this.canvas=c,this.width=d,this.height=u,this._options=s,this._aspectRatio=this.aspectRatio,this._layers=[],this._metasets=[],this._stacks=void 0,this.boxes=[],this.currentDevicePixelRatio=void 0,this.chartArea=void 0,this._active=[],this._lastEvent=void 0,this._listeners={},this._responsiveListeners=void 0,this._sortedMetasets=[],this.scales={},this._plugins=new je,this.$proxies={},this._hiddenIndices={},this.attached=!1,this._animationsDisabled=void 0,this.$context=void 0,this._doResize=(0,r.ae)((e=>this.update(e)),s.resizeDelay||0),this._dataChanges=[],rt[this.id]=this,l&&c?(i.listen(this,"complete",et),i.listen(this,"progress",tt),this._initialize(),this.attached&&this.update()):console.error("Failed to create chart: can't acquire context from the given item")}get aspectRatio(){const{options:{aspectRatio:e,maintainAspectRatio:t},width:n,height:i,_aspectRatio:o}=this;return(0,r.k)(e)?t&&o?o:i?n/i:null:e}get data(){return this.config.data}set data(e){this.config.data=e}get options(){return this._options}set options(e){this.config.options=e}_initialize(){return this.notifyPlugins("beforeInit"),this.options.responsive?this.resize():(0,r.af)(this,this.options.devicePixelRatio),this.bindEvents(),this.notifyPlugins("afterInit"),this}clear(){return(0,r.ag)(this.canvas,this.ctx),this}stop(){return i.stop(this),this}resize(e,t){i.running(this)?this._resizeBeforeDraw={width:e,height:t}:this._resize(e,t)}_resize(e,t){const n=this.options,i=this.canvas,o=n.maintainAspectRatio&&this.aspectRatio,a=this.platform.getMaximumSize(i,e,t,o),s=n.devicePixelRatio||this.platform.getDevicePixelRatio(),l=this.width?"resize":"attach";this.width=a.width,this.height=a.height,this._aspectRatio=this.aspectRatio,(0,r.af)(this,s,!0)&&(this.notifyPlugins("resize",{size:a}),(0,r.C)(n.onResize,[this,a],this),this.attached&&this._doResize(l)&&this.render())}ensureScalesHaveIDs(){const e=this.options.scales||{};(0,r.Q)(e,((e,t)=>{e.id=t}))}buildOrUpdateScales(){const e=this.options,t=e.scales,n=this.scales,i=Object.keys(n).reduce(((e,t)=>(e[t]=!1,e)),{});let o=[];t&&(o=o.concat(Object.keys(t).map((e=>{const n=t[e],r=Ve(e,n),i="r"===r,o="x"===r;return{options:n,dposition:i?"chartArea":o?"bottom":"left",dtype:i?"radialLinear":o?"category":"linear"}})))),(0,r.Q)(o,(t=>{const o=t.options,a=o.id,s=Ve(a,o),l=(0,r.v)(o.type,t.dtype);void 0!==o.position&&Je(o.position,s)===Je(t.dposition)||(o.position=t.dposition),i[a]=!0;let c=null;a in n&&n[a].type===l?c=n[a]:(c=new(Q.getScale(l))({id:a,type:l,ctx:this.ctx,chart:this}),n[c.id]=c),c.init(o,e)})),(0,r.Q)(i,((e,t)=>{e||delete n[t]})),(0,r.Q)(n,(e=>{be.configure(this,e,e.options),be.addBox(this,e)}))}_updateMetasets(){const e=this._metasets,t=this.data.datasets.length,n=e.length;if(e.sort(((e,t)=>e.index-t.index)),n>t){for(let e=t;e<n;++e)this._destroyDatasetMeta(e);e.splice(t,n-t)}this._sortedMetasets=e.slice(0).sort(Ze("order","index"))}_removeUnreferencedMetasets(){const{_metasets:e,data:{datasets:t}}=this;e.length>t.length&&delete this._stacks,e.forEach(((e,n)=>{0===t.filter((t=>t===e._dataset)).length&&this._destroyDatasetMeta(n)}))}buildOrUpdateControllers(){const e=[],t=this.data.datasets;let n,i;for(this._removeUnreferencedMetasets(),n=0,i=t.length;n<i;n++){const i=t[n];let o=this.getDatasetMeta(n);const a=i.type||this.config.type;if(o.type&&o.type!==a&&(this._destroyDatasetMeta(n),o=this.getDatasetMeta(n)),o.type=a,o.indexAxis=i.indexAxis||Be(a,this.options),o.order=i.order||0,o.index=n,o.label=""+i.label,o.visible=this.isDatasetVisible(n),o.controller)o.controller.updateIndex(n),o.controller.linkScales();else{const t=Q.getController(a),{datasetElementType:i,dataElementType:s}=r.d.datasets[a];Object.assign(t.prototype,{dataElementType:Q.getElement(s),datasetElementType:i&&Q.getElement(i)}),o.controller=new t(this,n),e.push(o.controller)}}return this._updateMetasets(),e}_resetElements(){(0,r.Q)(this.data.datasets,((e,t)=>{this.getDatasetMeta(t).controller.reset()}),this)}reset(){this._resetElements(),this.notifyPlugins("reset")}update(e){const t=this.config;t.update();const n=this._options=t.createResolver(t.chartOptionScopes(),this.getContext()),i=this._animationsDisabled=!n.animation;if(this._updateScales(),this._checkEventBindings(),this._updateHiddenIndices(),this._plugins.invalidate(),!1===this.notifyPlugins("beforeUpdate",{mode:e,cancelable:!0}))return;const o=this.buildOrUpdateControllers();this.notifyPlugins("beforeElementsUpdate");let a=0;for(let e=0,t=this.data.datasets.length;e<t;e++){const{controller:t}=this.getDatasetMeta(e),n=!i&&-1===o.indexOf(t);t.buildOrUpdateElements(n),a=Math.max(+t.getMaxOverflow(),a)}a=this._minPadding=n.layout.autoPadding?a:0,this._updateLayout(a),i||(0,r.Q)(o,(e=>{e.reset()})),this._updateDatasets(e),this.notifyPlugins("afterUpdate",{mode:e}),this._layers.sort(Ze("z","_idx"));const{_active:s,_lastEvent:l}=this;l?this._eventHandler(l,!0):s.length&&this._updateHoverStyles(s,s,!0),this.render()}_updateScales(){(0,r.Q)(this.scales,(e=>{be.removeBox(this,e)})),this.ensureScalesHaveIDs(),this.buildOrUpdateScales()}_checkEventBindings(){const e=this.options,t=new Set(Object.keys(this._listeners)),n=new Set(e.events);(0,r.ah)(t,n)&&!!this._responsiveListeners===e.responsive||(this.unbindEvents(),this.bindEvents())}_updateHiddenIndices(){const{_hiddenIndices:e}=this,t=this._getUniformDataChanges()||[];for(const{method:n,start:r,count:i}of t)ot(e,r,"_removeElements"===n?-i:i)}_getUniformDataChanges(){const e=this._dataChanges;if(!e||!e.length)return;this._dataChanges=[];const t=this.data.datasets.length,n=t=>new Set(e.filter((e=>e[0]===t)).map(((e,t)=>t+","+e.splice(1).join(",")))),i=n(0);for(let e=1;e<t;e++)if(!(0,r.ah)(i,n(e)))return;return Array.from(i).map((e=>e.split(","))).map((e=>({method:e[1],start:+e[2],count:+e[3]})))}_updateLayout(e){if(!1===this.notifyPlugins("beforeLayout",{cancelable:!0}))return;be.update(this,this.width,this.height,e);const t=this.chartArea,n=t.width<=0||t.height<=0;this._layers=[],(0,r.Q)(this.boxes,(e=>{n&&"chartArea"===e.position||(e.configure&&e.configure(),this._layers.push(...e._layers()))}),this),this._layers.forEach(((e,t)=>{e._idx=t})),this.notifyPlugins("afterLayout")}_updateDatasets(e){if(!1!==this.notifyPlugins("beforeDatasetsUpdate",{mode:e,cancelable:!0})){for(let e=0,t=this.data.datasets.length;e<t;++e)this.getDatasetMeta(e).controller.configure();for(let t=0,n=this.data.datasets.length;t<n;++t)this._updateDataset(t,(0,r.a8)(e)?e({datasetIndex:t}):e);this.notifyPlugins("afterDatasetsUpdate",{mode:e})}}_updateDataset(e,t){const n=this.getDatasetMeta(e),r={meta:n,index:e,mode:t,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetUpdate",r)&&(n.controller._update(t),r.cancelable=!1,this.notifyPlugins("afterDatasetUpdate",r))}render(){!1!==this.notifyPlugins("beforeRender",{cancelable:!0})&&(i.has(this)?this.attached&&!i.running(this)&&i.start(this):(this.draw(),et({chart:this})))}draw(){let e;if(this._resizeBeforeDraw){const{width:e,height:t}=this._resizeBeforeDraw;this._resize(e,t),this._resizeBeforeDraw=null}if(this.clear(),this.width<=0||this.height<=0)return;if(!1===this.notifyPlugins("beforeDraw",{cancelable:!0}))return;const t=this._layers;for(e=0;e<t.length&&t[e].z<=0;++e)t[e].draw(this.chartArea);for(this._drawDatasets();e<t.length;++e)t[e].draw(this.chartArea);this.notifyPlugins("afterDraw")}_getSortedDatasetMetas(e){const t=this._sortedMetasets,n=[];let r,i;for(r=0,i=t.length;r<i;++r){const i=t[r];e&&!i.visible||n.push(i)}return n}getSortedVisibleDatasetMetas(){return this._getSortedDatasetMetas(!0)}_drawDatasets(){if(!1===this.notifyPlugins("beforeDatasetsDraw",{cancelable:!0}))return;const e=this.getSortedVisibleDatasetMetas();for(let t=e.length-1;t>=0;--t)this._drawDataset(e[t]);this.notifyPlugins("afterDatasetsDraw")}_drawDataset(e){const t=this.ctx,n=e._clip,i=!n.disabled,o=this.chartArea,a={meta:e,index:e.index,cancelable:!0};!1!==this.notifyPlugins("beforeDatasetDraw",a)&&(i&&(0,r.L)(t,{left:!1===n.left?0:o.left-n.left,right:!1===n.right?this.width:o.right+n.right,top:!1===n.top?0:o.top-n.top,bottom:!1===n.bottom?this.height:o.bottom+n.bottom}),e.controller.draw(),i&&(0,r.N)(t),a.cancelable=!1,this.notifyPlugins("afterDatasetDraw",a))}isPointInArea(e){return(0,r.$)(e,this.chartArea,this._minPadding)}getElementsAtEventForMode(e,t,n,r){const i=ae.modes[t];return"function"==typeof i?i(this,e,n,r):[]}getDatasetMeta(e){const t=this.data.datasets[e],n=this._metasets;let r=n.filter((e=>e&&e._dataset===t)).pop();return r||(r={type:null,data:[],dataset:null,controller:null,hidden:null,xAxisID:null,yAxisID:null,order:t&&t.order||0,index:e,_dataset:t,_parsed:[],_sorted:!1},n.push(r)),r}getContext(){return this.$context||(this.$context=(0,r.h)(null,{chart:this,type:"chart"}))}getVisibleDatasetCount(){return this.getSortedVisibleDatasetMetas().length}isDatasetVisible(e){const t=this.data.datasets[e];if(!t)return!1;const n=this.getDatasetMeta(e);return"boolean"==typeof n.hidden?!n.hidden:!t.hidden}setDatasetVisibility(e,t){this.getDatasetMeta(e).hidden=!t}toggleDataVisibility(e){this._hiddenIndices[e]=!this._hiddenIndices[e]}getDataVisibility(e){return!this._hiddenIndices[e]}_updateVisibility(e,t,n){const i=n?"show":"hide",o=this.getDatasetMeta(e),a=o.controller._resolveAnimations(void 0,i);(0,r.j)(t)?(o.data[t].hidden=!n,this.update()):(this.setDatasetVisibility(e,n),a.update(o,{visible:n}),this.update((t=>t.datasetIndex===e?i:void 0)))}hide(e,t){this._updateVisibility(e,t,!1)}show(e,t){this._updateVisibility(e,t,!0)}_destroyDatasetMeta(e){const t=this._metasets[e];t&&t.controller&&t.controller._destroy(),delete this._metasets[e]}_stop(){let e,t;for(this.stop(),i.remove(this),e=0,t=this.data.datasets.length;e<t;++e)this._destroyDatasetMeta(e)}destroy(){this.notifyPlugins("beforeDestroy");const{canvas:e,ctx:t}=this;this._stop(),this.config.clearCache(),e&&(this.unbindEvents(),(0,r.ag)(e,t),this.platform.releaseContext(t),this.canvas=null,this.ctx=null),this.notifyPlugins("destroy"),delete rt[this.id],this.notifyPlugins("afterDestroy")}toBase64Image(...e){return this.canvas.toDataURL(...e)}bindEvents(){this.bindUserEvents(),this.options.responsive?this.bindResponsiveEvents():this.attached=!0}bindUserEvents(){const e=this._listeners,t=this.platform,n=(n,r)=>{t.addEventListener(this,n,r),e[n]=r},i=(e,t,n)=>{e.offsetX=t,e.offsetY=n,this._eventHandler(e)};(0,r.Q)(this.options.events,(e=>n(e,i)))}bindResponsiveEvents(){this._responsiveListeners||(this._responsiveListeners={});const e=this._responsiveListeners,t=this.platform,n=(n,r)=>{t.addEventListener(this,n,r),e[n]=r},r=(n,r)=>{e[n]&&(t.removeEventListener(this,n,r),delete e[n])},i=(e,t)=>{this.canvas&&this.resize(e,t)};let o;const a=()=>{r("attach",a),this.attached=!0,this.resize(),n("resize",i),n("detach",o)};o=()=>{this.attached=!1,r("resize",i),this._stop(),this._resize(0,0),n("attach",a)},t.isAttached(this.canvas)?a():o()}unbindEvents(){(0,r.Q)(this._listeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._listeners={},(0,r.Q)(this._responsiveListeners,((e,t)=>{this.platform.removeEventListener(this,t,e)})),this._responsiveListeners=void 0}updateHoverStyle(e,t,n){const r=n?"set":"remove";let i,o,a,s;for("dataset"===t&&(i=this.getDatasetMeta(e[0].datasetIndex),i.controller["_"+r+"DatasetHoverStyle"]()),a=0,s=e.length;a<s;++a){o=e[a];const t=o&&this.getDatasetMeta(o.datasetIndex).controller;t&&t[r+"HoverStyle"](o.element,o.datasetIndex,o.index)}}getActiveElements(){return this._active||[]}setActiveElements(e){const t=this._active||[],n=e.map((({datasetIndex:e,index:t})=>{const n=this.getDatasetMeta(e);if(!n)throw new Error("No dataset found at index "+e);return{datasetIndex:e,element:n.data[t],index:t}}));!(0,r.ai)(n,t)&&(this._active=n,this._lastEvent=null,this._updateHoverStyles(n,t))}notifyPlugins(e,t,n){return this._plugins.notify(this,e,t,n)}_updateHoverStyles(e,t,n){const r=this.options.hover,i=(e,t)=>e.filter((e=>!t.some((t=>e.datasetIndex===t.datasetIndex&&e.index===t.index)))),o=i(t,e),a=n?e:i(e,t);o.length&&this.updateHoverStyle(o,r.mode,!1),a.length&&r.mode&&this.updateHoverStyle(a,r.mode,!0)}_eventHandler(e,t){const n={event:e,replay:t,cancelable:!0,inChartArea:this.isPointInArea(e)},r=t=>(t.options.events||this.options.events).includes(e.native.type);if(!1===this.notifyPlugins("beforeEvent",n,r))return;const i=this._handleEvent(e,t,n.inChartArea);return n.cancelable=!1,this.notifyPlugins("afterEvent",n,r),(i||n.changed)&&this.render(),this}_handleEvent(e,t,n){const{_active:i=[],options:o}=this,a=t,s=this._getActiveElements(e,i,n,a),l=(0,r.aj)(e),c=function(e,t,n,r){return n&&"mouseout"!==e.type?r?t:e:null}(e,this._lastEvent,n,l);n&&(this._lastEvent=null,(0,r.C)(o.onHover,[e,s,this],this),l&&(0,r.C)(o.onClick,[e,s,this],this));const u=!(0,r.ai)(s,i);return(u||t)&&(this._active=s,this._updateHoverStyles(s,i,t)),this._lastEvent=c,u}_getActiveElements(e,t,n,r){if("mouseout"===e.type)return[];if(!n)return t;const i=this.options.hover;return this.getElementsAtEventForMode(e,i.mode,i,r)}}const st=()=>(0,r.Q)(at.instances,(e=>e._plugins.invalidate())),lt=!0;function ct(e,t,n){const{startAngle:i,pixelMargin:o,x:a,y:s,outerRadius:l,innerRadius:c}=t;let u=o/l;e.beginPath(),e.arc(a,s,l,i-u,n+u),c>o?(u=o/c,e.arc(a,s,c,n+u,i-u,!0)):e.arc(a,s,o,n+r.H,i-r.H),e.closePath(),e.clip()}function ut(e,t,n,r){return{x:n+e*Math.cos(t),y:r+e*Math.sin(t)}}function dt(e,t,n,i,o,a){const{x:s,y:l,startAngle:c,pixelMargin:u,innerRadius:d}=t,f=Math.max(t.outerRadius+i+n-u,0),h=d>0?d+i+n+u:0;let p=0;const g=o-c;if(i){const e=((d>0?d-i:0)+(f>0?f-i:0))/2;p=(g-(0!==e?g*e/(e+i):g))/2}const m=(g-Math.max(.001,g*f-n/r.P)/f)/2,v=c+m+p,b=o-m-p,{outerStart:y,outerEnd:x,innerStart:w,innerEnd:k}=function(e,t,n,i){const o=(a=e.options.borderRadius,(0,r.al)(a,["outerStart","outerEnd","innerStart","innerEnd"]));var a;const s=(n-t)/2,l=Math.min(s,i*t/2),c=e=>{const t=(n-Math.min(s,e))*i/2;return(0,r.E)(e,0,Math.min(s,t))};return{outerStart:c(o.outerStart),outerEnd:c(o.outerEnd),innerStart:(0,r.E)(o.innerStart,0,l),innerEnd:(0,r.E)(o.innerEnd,0,l)}}(t,h,f,b-v),_=f-y,E=f-x,S=v+y/_,O=b-x/E,P=h+w,C=h+k,M=v+w/P,T=b-k/C;if(e.beginPath(),a){if(e.arc(s,l,f,S,O),x>0){const t=ut(E,O,s,l);e.arc(t.x,t.y,x,O,b+r.H)}const t=ut(C,b,s,l);if(e.lineTo(t.x,t.y),k>0){const t=ut(C,T,s,l);e.arc(t.x,t.y,k,b+r.H,T+Math.PI)}if(e.arc(s,l,h,b-k/h,v+w/h,!0),w>0){const t=ut(P,M,s,l);e.arc(t.x,t.y,w,M+Math.PI,v-r.H)}const n=ut(_,v,s,l);if(e.lineTo(n.x,n.y),y>0){const t=ut(_,S,s,l);e.arc(t.x,t.y,y,v-r.H,S)}}else{e.moveTo(s,l);const t=Math.cos(S)*f+s,n=Math.sin(S)*f+l;e.lineTo(t,n);const r=Math.cos(O)*f+s,i=Math.sin(O)*f+l;e.lineTo(r,i)}e.closePath()}Object.defineProperties(at,{defaults:{enumerable:lt,value:r.d},instances:{enumerable:lt,value:rt},overrides:{enumerable:lt,value:r.U},registry:{enumerable:lt,value:Q},version:{enumerable:lt,value:"3.9.1"},getChart:{enumerable:lt,value:it},register:{enumerable:lt,value:(...e)=>{Q.add(...e),st()}},unregister:{enumerable:lt,value:(...e)=>{Q.remove(...e),st()}}});class ft extends j{constructor(e){super(),this.options=void 0,this.circumference=void 0,this.startAngle=void 0,this.endAngle=void 0,this.innerRadius=void 0,this.outerRadius=void 0,this.pixelMargin=0,this.fullCircles=0,e&&Object.assign(this,e)}inRange(e,t,n){const i=this.getProps(["x","y"],n),{angle:o,distance:a}=(0,r.a0)(i,{x:e,y:t}),{startAngle:s,endAngle:l,innerRadius:c,outerRadius:u,circumference:d}=this.getProps(["startAngle","endAngle","innerRadius","outerRadius","circumference"],n),f=this.options.spacing/2,h=(0,r.v)(d,l-s)>=r.T||(0,r.p)(o,s,l),p=(0,r.ak)(a,c+f,u+f);return h&&p}getCenterPoint(e){const{x:t,y:n,startAngle:r,endAngle:i,innerRadius:o,outerRadius:a}=this.getProps(["x","y","startAngle","endAngle","innerRadius","outerRadius","circumference"],e),{offset:s,spacing:l}=this.options,c=(r+i)/2,u=(o+a+l+s)/2;return{x:t+Math.cos(c)*u,y:n+Math.sin(c)*u}}tooltipPosition(e){return this.getCenterPoint(e)}draw(e){const{options:t,circumference:n}=this,i=(t.offset||0)/2,o=(t.spacing||0)/2,a=t.circular;if(this.pixelMargin="inner"===t.borderAlign?.33:0,this.fullCircles=n>r.T?Math.floor(n/r.T):0,0===n||this.innerRadius<0||this.outerRadius<0)return;e.save();let s=0;if(i){s=i/2;const t=(this.startAngle+this.endAngle)/2;e.translate(Math.cos(t)*s,Math.sin(t)*s),this.circumference>=r.P&&(s=i)}e.fillStyle=t.backgroundColor,e.strokeStyle=t.borderColor;const l=function(e,t,n,i,o){const{fullCircles:a,startAngle:s,circumference:l}=t;let c=t.endAngle;if(a){dt(e,t,n,i,s+r.T,o);for(let t=0;t<a;++t)e.fill();isNaN(l)||(c=s+l%r.T,l%r.T==0&&(c+=r.T))}return dt(e,t,n,i,c,o),e.fill(),c}(e,this,s,o,a);(function(e,t,n,i,o,a){const{options:s}=t,{borderWidth:l,borderJoinStyle:c}=s,u="inner"===s.borderAlign;l&&(u?(e.lineWidth=2*l,e.lineJoin=c||"round"):(e.lineWidth=l,e.lineJoin=c||"bevel"),t.fullCircles&&function(e,t,n){const{x:i,y:o,startAngle:a,pixelMargin:s,fullCircles:l}=t,c=Math.max(t.outerRadius-s,0),u=t.innerRadius+s;let d;for(n&&ct(e,t,a+r.T),e.beginPath(),e.arc(i,o,u,a+r.T,a,!0),d=0;d<l;++d)e.stroke();for(e.beginPath(),e.arc(i,o,c,a,a+r.T),d=0;d<l;++d)e.stroke()}(e,t,u),u&&ct(e,t,o),dt(e,t,n,i,o,a),e.stroke())})(e,this,s,o,l,a),e.restore()}}function ht(e,t,n=t){e.lineCap=(0,r.v)(n.borderCapStyle,t.borderCapStyle),e.setLineDash((0,r.v)(n.borderDash,t.borderDash)),e.lineDashOffset=(0,r.v)(n.borderDashOffset,t.borderDashOffset),e.lineJoin=(0,r.v)(n.borderJoinStyle,t.borderJoinStyle),e.lineWidth=(0,r.v)(n.borderWidth,t.borderWidth),e.strokeStyle=(0,r.v)(n.borderColor,t.borderColor)}function pt(e,t,n){e.lineTo(n.x,n.y)}function gt(e,t,n={}){const r=e.length,{start:i=0,end:o=r-1}=n,{start:a,end:s}=t,l=Math.max(i,a),c=Math.min(o,s),u=i<a&&o<a||i>s&&o>s;return{count:r,start:l,loop:t.loop,ilen:c<l&&!u?r+c-l:c-l}}function mt(e,t,n,i){const{points:o,options:a}=t,{count:s,start:l,loop:c,ilen:u}=gt(o,n,i),d=function(e){return e.stepped?r.as:e.tension||"monotone"===e.cubicInterpolationMode?r.at:pt}(a);let f,h,p,{move:g=!0,reverse:m}=i||{};for(f=0;f<=u;++f)h=o[(l+(m?u-f:f))%s],h.skip||(g?(e.moveTo(h.x,h.y),g=!1):d(e,p,h,m,a.stepped),p=h);return c&&(h=o[(l+(m?u:0))%s],d(e,p,h,m,a.stepped)),!!c}function vt(e,t,n,r){const i=t.points,{count:o,start:a,ilen:s}=gt(i,n,r),{move:l=!0,reverse:c}=r||{};let u,d,f,h,p,g,m=0,v=0;const b=e=>(a+(c?s-e:e))%o,y=()=>{h!==p&&(e.lineTo(m,p),e.lineTo(m,h),e.lineTo(m,g))};for(l&&(d=i[b(0)],e.moveTo(d.x,d.y)),u=0;u<=s;++u){if(d=i[b(u)],d.skip)continue;const t=d.x,n=d.y,r=0|t;r===f?(n<h?h=n:n>p&&(p=n),m=(v*m+t)/++v):(y(),e.lineTo(t,n),f=r,v=0,h=p=n),g=n}y()}function bt(e){const t=e.options,n=t.borderDash&&t.borderDash.length;return e._decimated||e._loop||t.tension||"monotone"===t.cubicInterpolationMode||t.stepped||n?mt:vt}ft.id="arc",ft.defaults={borderAlign:"center",borderColor:"#fff",borderJoinStyle:void 0,borderRadius:0,borderWidth:2,offset:0,spacing:0,angle:void 0,circular:!0},ft.defaultRoutes={backgroundColor:"backgroundColor"};const yt="function"==typeof Path2D;class xt extends j{constructor(e){super(),this.animated=!0,this.options=void 0,this._chart=void 0,this._loop=void 0,this._fullLoop=void 0,this._path=void 0,this._points=void 0,this._segments=void 0,this._decimated=!1,this._pointsUpdated=!1,this._datasetIndex=void 0,e&&Object.assign(this,e)}updateControlPoints(e,t){const n=this.options;if((n.tension||"monotone"===n.cubicInterpolationMode)&&!n.stepped&&!this._pointsUpdated){const i=n.spanGaps?this._loop:this._fullLoop;(0,r.am)(this._points,n,e,i,t),this._pointsUpdated=!0}}set points(e){this._points=e,delete this._segments,delete this._path,this._pointsUpdated=!1}get points(){return this._points}get segments(){return this._segments||(this._segments=(0,r.an)(this,this.options.segment))}first(){const e=this.segments,t=this.points;return e.length&&t[e[0].start]}last(){const e=this.segments,t=this.points,n=e.length;return n&&t[e[n-1].end]}interpolate(e,t){const n=this.options,i=e[t],o=this.points,a=(0,r.ao)(this,{property:t,start:i,end:i});if(!a.length)return;const s=[],l=function(e){return e.stepped?r.ap:e.tension||"monotone"===e.cubicInterpolationMode?r.aq:r.ar}(n);let c,u;for(c=0,u=a.length;c<u;++c){const{start:r,end:u}=a[c],d=o[r],f=o[u];if(d===f){s.push(d);continue}const h=l(d,f,Math.abs((i-d[t])/(f[t]-d[t])),n.stepped);h[t]=e[t],s.push(h)}return 1===s.length?s[0]:s}pathSegment(e,t,n){return bt(this)(e,this,t,n)}path(e,t,n){const r=this.segments,i=bt(this);let o=this._loop;t=t||0,n=n||this.points.length-t;for(const a of r)o&=i(e,this,a,{start:t,end:t+n-1});return!!o}draw(e,t,n,r){const i=this.options||{};(this.points||[]).length&&i.borderWidth&&(e.save(),function(e,t,n,r){yt&&!t.options.segment?function(e,t,n,r){let i=t._path;i||(i=t._path=new Path2D,t.path(i,n,r)&&i.closePath()),ht(e,t.options),e.stroke(i)}(e,t,n,r):function(e,t,n,r){const{segments:i,options:o}=t,a=bt(t);for(const s of i)ht(e,o,s.style),e.beginPath(),a(e,t,s,{start:n,end:n+r-1})&&e.closePath(),e.stroke()}(e,t,n,r)}(e,this,n,r),e.restore()),this.animated&&(this._pointsUpdated=!1,this._path=void 0)}}function wt(e,t,n,r){const i=e.options,{[n]:o}=e.getProps([n],r);return Math.abs(t-o)<i.radius+i.hitRadius}xt.id="line",xt.defaults={borderCapStyle:"butt",borderDash:[],borderDashOffset:0,borderJoinStyle:"miter",borderWidth:3,capBezierPoints:!0,cubicInterpolationMode:"default",fill:!1,spanGaps:!1,stepped:!1,tension:0},xt.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"},xt.descriptors={_scriptable:!0,_indexable:e=>"borderDash"!==e&&"fill"!==e};class kt extends j{constructor(e){super(),this.options=void 0,this.parsed=void 0,this.skip=void 0,this.stop=void 0,e&&Object.assign(this,e)}inRange(e,t,n){const r=this.options,{x:i,y:o}=this.getProps(["x","y"],n);return Math.pow(e-i,2)+Math.pow(t-o,2)<Math.pow(r.hitRadius+r.radius,2)}inXRange(e,t){return wt(this,e,"x",t)}inYRange(e,t){return wt(this,e,"y",t)}getCenterPoint(e){const{x:t,y:n}=this.getProps(["x","y"],e);return{x:t,y:n}}size(e){let t=(e=e||this.options||{}).radius||0;return t=Math.max(t,t&&e.hoverRadius||0),2*(t+(t&&e.borderWidth||0))}draw(e,t){const n=this.options;this.skip||n.radius<.1||!(0,r.$)(this,t,this.size(n)/2)||(e.strokeStyle=n.borderColor,e.lineWidth=n.borderWidth,e.fillStyle=n.backgroundColor,(0,r.au)(e,n,this.x,this.y))}getRange(){const e=this.options||{};return e.radius+e.hitRadius}}function _t(e,t){const{x:n,y:r,base:i,width:o,height:a}=e.getProps(["x","y","base","width","height"],t);let s,l,c,u,d;return e.horizontal?(d=a/2,s=Math.min(n,i),l=Math.max(n,i),c=r-d,u=r+d):(d=o/2,s=n-d,l=n+d,c=Math.min(r,i),u=Math.max(r,i)),{left:s,top:c,right:l,bottom:u}}function Et(e,t,n,i){return e?0:(0,r.E)(t,n,i)}function St(e,t,n,i){const o=null===t,a=null===n,s=e&&!(o&&a)&&_t(e,i);return s&&(o||(0,r.ak)(t,s.left,s.right))&&(a||(0,r.ak)(n,s.top,s.bottom))}function Ot(e,t){e.rect(t.x,t.y,t.w,t.h)}function Pt(e,t,n={}){const r=e.x!==n.x?-t:0,i=e.y!==n.y?-t:0,o=(e.x+e.w!==n.x+n.w?t:0)-r,a=(e.y+e.h!==n.y+n.h?t:0)-i;return{x:e.x+r,y:e.y+i,w:e.w+o,h:e.h+a,radius:e.radius}}kt.id="point",kt.defaults={borderWidth:1,hitRadius:1,hoverBorderWidth:1,hoverRadius:4,pointStyle:"circle",radius:3,rotation:0},kt.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};class Ct extends j{constructor(e){super(),this.options=void 0,this.horizontal=void 0,this.base=void 0,this.width=void 0,this.height=void 0,this.inflateAmount=void 0,e&&Object.assign(this,e)}draw(e){const{inflateAmount:t,options:{borderColor:n,backgroundColor:i}}=this,{inner:o,outer:a}=function(e){const t=_t(e),n=t.right-t.left,i=t.bottom-t.top,o=function(e,t,n){const i=e.options.borderWidth,o=e.borderSkipped,a=(0,r.aw)(i);return{t:Et(o.top,a.top,0,n),r:Et(o.right,a.right,0,t),b:Et(o.bottom,a.bottom,0,n),l:Et(o.left,a.left,0,t)}}(e,n/2,i/2),a=function(e,t,n){const{enableBorderRadius:i}=e.getProps(["enableBorderRadius"]),o=e.options.borderRadius,a=(0,r.ax)(o),s=Math.min(t,n),l=e.borderSkipped,c=i||(0,r.i)(o);return{topLeft:Et(!c||l.top||l.left,a.topLeft,0,s),topRight:Et(!c||l.top||l.right,a.topRight,0,s),bottomLeft:Et(!c||l.bottom||l.left,a.bottomLeft,0,s),bottomRight:Et(!c||l.bottom||l.right,a.bottomRight,0,s)}}(e,n/2,i/2);return{outer:{x:t.left,y:t.top,w:n,h:i,radius:a},inner:{x:t.left+o.l,y:t.top+o.t,w:n-o.l-o.r,h:i-o.t-o.b,radius:{topLeft:Math.max(0,a.topLeft-Math.max(o.t,o.l)),topRight:Math.max(0,a.topRight-Math.max(o.t,o.r)),bottomLeft:Math.max(0,a.bottomLeft-Math.max(o.b,o.l)),bottomRight:Math.max(0,a.bottomRight-Math.max(o.b,o.r))}}}}(this),s=(l=a.radius).topLeft||l.topRight||l.bottomLeft||l.bottomRight?r.av:Ot;var l;e.save(),a.w===o.w&&a.h===o.h||(e.beginPath(),s(e,Pt(a,t,o)),e.clip(),s(e,Pt(o,-t,a)),e.fillStyle=n,e.fill("evenodd")),e.beginPath(),s(e,Pt(o,t)),e.fillStyle=i,e.fill(),e.restore()}inRange(e,t,n){return St(this,e,t,n)}inXRange(e,t){return St(this,e,null,t)}inYRange(e,t){return St(this,null,e,t)}getCenterPoint(e){const{x:t,y:n,base:r,horizontal:i}=this.getProps(["x","y","base","horizontal"],e);return{x:i?(t+r)/2:t,y:i?n:(n+r)/2}}getRange(e){return"x"===e?this.width/2:this.height/2}}Ct.id="bar",Ct.defaults={borderSkipped:"start",borderWidth:0,borderRadius:0,inflateAmount:"auto",pointStyle:void 0},Ct.defaultRoutes={backgroundColor:"backgroundColor",borderColor:"borderColor"};var Mt=Object.freeze({__proto__:null,ArcElement:ft,LineElement:xt,PointElement:kt,BarElement:Ct});function Tt(e){if(e._decimated){const t=e._data;delete e._decimated,delete e._data,Object.defineProperty(e,"data",{value:t})}}function Nt(e){e.data.datasets.forEach((e=>{Tt(e)}))}var At={id:"decimation",defaults:{algorithm:"min-max",enabled:!1},beforeElementsUpdate:(e,t,n)=>{if(!n.enabled)return void Nt(e);const i=e.width;e.data.datasets.forEach(((t,o)=>{const{_data:a,indexAxis:s}=t,l=e.getDatasetMeta(o),c=a||t.data;if("y"===(0,r.a)([s,e.options.indexAxis]))return;if(!l.controller.supportsDecimation)return;const u=e.scales[l.xAxisID];if("linear"!==u.type&&"time"!==u.type)return;if(e.options.parsing)return;let d,{start:f,count:h}=function(e,t){const n=t.length;let i,o=0;const{iScale:a}=e,{min:s,max:l,minDefined:c,maxDefined:u}=a.getUserBounds();return c&&(o=(0,r.E)((0,r.Z)(t,a.axis,s).lo,0,n-1)),i=u?(0,r.E)((0,r.Z)(t,a.axis,l).hi+1,o,n)-o:n-o,{start:o,count:i}}(l,c);if(h<=(n.threshold||4*i))Tt(t);else{switch((0,r.k)(a)&&(t._data=c,delete t.data,Object.defineProperty(t,"data",{configurable:!0,enumerable:!0,get:function(){return this._decimated},set:function(e){this._data=e}})),n.algorithm){case"lttb":d=function(e,t,n,r,i){const o=i.samples||r;if(o>=n)return e.slice(t,t+n);const a=[],s=(n-2)/(o-2);let l=0;const c=t+n-1;let u,d,f,h,p,g=t;for(a[l++]=e[g],u=0;u<o-2;u++){let r,i=0,o=0;const c=Math.floor((u+1)*s)+1+t,m=Math.min(Math.floor((u+2)*s)+1,n)+t,v=m-c;for(r=c;r<m;r++)i+=e[r].x,o+=e[r].y;i/=v,o/=v;const b=Math.floor(u*s)+1+t,y=Math.min(Math.floor((u+1)*s)+1,n)+t,{x,y:w}=e[g];for(f=h=-1,r=b;r<y;r++)h=.5*Math.abs((x-i)*(e[r].y-w)-(x-e[r].x)*(o-w)),h>f&&(f=h,d=e[r],p=r);a[l++]=d,g=p}return a[l++]=e[c],a}(c,f,h,i,n);break;case"min-max":d=function(e,t,n,i){let o,a,s,l,c,u,d,f,h,p,g=0,m=0;const v=[],b=t+n-1,y=e[t].x,x=e[b].x-y;for(o=t;o<t+n;++o){a=e[o],s=(a.x-y)/x*i,l=a.y;const t=0|s;if(t===c)l<h?(h=l,u=o):l>p&&(p=l,d=o),g=(m*g+a.x)/++m;else{const n=o-1;if(!(0,r.k)(u)&&!(0,r.k)(d)){const t=Math.min(u,d),r=Math.max(u,d);t!==f&&t!==n&&v.push({...e[t],x:g}),r!==f&&r!==n&&v.push({...e[r],x:g})}o>0&&n!==f&&v.push(e[n]),v.push(a),c=t,m=0,h=p=l,u=d=f=o}}return v}(c,f,h,i);break;default:throw new Error(`Unsupported decimation algorithm '${n.algorithm}'`)}t._decimated=d}}))},destroy(e){Nt(e)}};function Rt(e,t,n,i){if(i)return;let o=t[e],a=n[e];return"angle"===e&&(o=(0,r.az)(o),a=(0,r.az)(a)),{property:e,start:o,end:a}}function Lt(e,t,n){for(;t>e;t--){const e=n[t];if(!isNaN(e.x)&&!isNaN(e.y))break}return t}function Dt(e,t,n,r){return e&&t?r(e[n],t[n]):e?e[n]:t?t[n]:0}function It(e,t){let n=[],i=!1;return(0,r.b)(e)?(i=!0,n=e):n=function(e,t){const{x:n=null,y:r=null}=e||{},i=t.points,o=[];return t.segments.forEach((({start:e,end:t})=>{t=Lt(e,t,i);const a=i[e],s=i[t];null!==r?(o.push({x:a.x,y:r}),o.push({x:s.x,y:r})):null!==n&&(o.push({x:n,y:a.y}),o.push({x:n,y:s.y}))})),o}(e,t),n.length?new xt({points:n,options:{tension:0},_loop:i,_fullLoop:i}):null}function jt(e){return e&&!1!==e.fill}function zt(e,t,n){let i=e[t].fill;const o=[t];let a;if(!n)return i;for(;!1!==i&&-1===o.indexOf(i);){if(!(0,r.g)(i))return i;if(a=e[i],!a)return!1;if(a.visible)return i;o.push(i),i=a.fill}return!1}function Ft(e,t,n){const i=function(e){const t=e.options,n=t.fill;let i=(0,r.v)(n&&n.target,n);return void 0===i&&(i=!!t.backgroundColor),!1!==i&&null!==i&&(!0===i?"origin":i)}(e);if((0,r.i)(i))return!isNaN(i.value)&&i;let o=parseFloat(i);return(0,r.g)(o)&&Math.floor(o)===o?function(e,t,n,r){return"-"!==e&&"+"!==e||(n=t+n),!(n===t||n<0||n>=r)&&n}(i[0],t,o,n):["origin","start","end","stack","shape"].indexOf(i)>=0&&i}function Bt(e,t,n){const r=[];for(let i=0;i<n.length;i++){const o=n[i],{first:a,last:s,point:l}=Vt(o,t,"x");if(!(!l||a&&s))if(a)r.unshift(l);else if(e.push(l),!s)break}e.push(...r)}function Vt(e,t,n){const i=e.interpolate(t,n);if(!i)return{};const o=i[n],a=e.segments,s=e.points;let l=!1,c=!1;for(let e=0;e<a.length;e++){const t=a[e],i=s[t.start][n],u=s[t.end][n];if((0,r.ak)(o,i,u)){l=o===i,c=o===u;break}}return{first:l,last:c,point:i}}class Wt{constructor(e){this.x=e.x,this.y=e.y,this.radius=e.radius}pathSegment(e,t,n){const{x:i,y:o,radius:a}=this;return t=t||{start:0,end:r.T},e.arc(i,o,a,t.end,t.start,!0),!n.bounds}interpolate(e){const{x:t,y:n,radius:r}=this,i=e.angle;return{x:t+Math.cos(i)*r,y:n+Math.sin(i)*r,angle:i}}}function Ht(e,t,n){const i=function(e){const{chart:t,fill:n,line:i}=e;if((0,r.g)(n))return function(e,t){const n=e.getDatasetMeta(t);return n&&e.isDatasetVisible(t)?n.dataset:null}(t,n);if("stack"===n)return function(e){const{scale:t,index:n,line:r}=e,i=[],o=r.segments,a=r.points,s=function(e,t){const n=[],r=e.getMatchingVisibleMetas("line");for(let e=0;e<r.length;e++){const i=r[e];if(i.index===t)break;i.hidden||n.unshift(i.dataset)}return n}(t,n);s.push(It({x:null,y:t.bottom},r));for(let e=0;e<o.length;e++){const t=o[e];for(let e=t.start;e<=t.end;e++)Bt(i,a[e],s)}return new xt({points:i,options:{}})}(e);if("shape"===n)return!0;const o=function(e){return(e.scale||{}).getPointPositionForValue?function(e){const{scale:t,fill:n}=e,i=t.options,o=t.getLabels().length,a=i.reverse?t.max:t.min,s=function(e,t,n){let i;return i="start"===e?n:"end"===e?t.options.reverse?t.min:t.max:(0,r.i)(e)?e.value:t.getBaseValue(),i}(n,t,a),l=[];if(i.grid.circular){const e=t.getPointPositionForValue(0,a);return new Wt({x:e.x,y:e.y,radius:t.getDistanceFromCenterForValue(s)})}for(let e=0;e<o;++e)l.push(t.getPointPositionForValue(e,s));return l}(e):function(e){const{scale:t={},fill:n}=e,i=function(e,t){let n=null;return"start"===e?n=t.bottom:"end"===e?n=t.top:(0,r.i)(e)?n=t.getPixelForValue(e.value):t.getBasePixel&&(n=t.getBasePixel()),n}(n,t);if((0,r.g)(i)){const e=t.isHorizontal();return{x:e?i:null,y:e?null:i}}return null}(e)}(e);return o instanceof Wt?o:It(o,i)}(t),{line:o,scale:a,axis:s}=t,l=o.options,c=l.fill,u=l.backgroundColor,{above:d=u,below:f=u}=c||{};i&&o.points.length&&((0,r.L)(e,n),function(e,t){const{line:n,target:r,above:i,below:o,area:a,scale:s}=t,l=n._loop?"angle":t.axis;e.save(),"x"===l&&o!==i&&($t(e,r,a.top),Ut(e,{line:n,target:r,color:i,scale:s,property:l}),e.restore(),e.save(),$t(e,r,a.bottom)),Ut(e,{line:n,target:r,color:o,scale:s,property:l}),e.restore()}(e,{line:o,target:i,above:d,below:f,area:n,scale:a,axis:s}),(0,r.N)(e))}function $t(e,t,n){const{segments:r,points:i}=t;let o=!0,a=!1;e.beginPath();for(const s of r){const{start:r,end:l}=s,c=i[r],u=i[Lt(r,l,i)];o?(e.moveTo(c.x,c.y),o=!1):(e.lineTo(c.x,n),e.lineTo(c.x,c.y)),a=!!t.pathSegment(e,s,{move:a}),a?e.closePath():e.lineTo(u.x,n)}e.lineTo(t.first().x,n),e.closePath(),e.clip()}function Ut(e,t){const{line:n,target:i,property:o,color:a,scale:s}=t,l=function(e,t,n){const i=e.segments,o=e.points,a=t.points,s=[];for(const e of i){let{start:i,end:l}=e;l=Lt(i,l,o);const c=Rt(n,o[i],o[l],e.loop);if(!t.segments){s.push({source:e,target:c,start:o[i],end:o[l]});continue}const u=(0,r.ao)(t,c);for(const t of u){const i=Rt(n,a[t.start],a[t.end],t.loop),l=(0,r.ay)(e,o,i);for(const e of l)s.push({source:e,target:t,start:{[n]:Dt(c,i,"start",Math.max)},end:{[n]:Dt(c,i,"end",Math.min)}})}}return s}(n,i,o);for(const{source:t,target:r,start:c,end:u}of l){const{style:{backgroundColor:l=a}={}}=t,d=!0!==i;e.save(),e.fillStyle=l,Kt(e,s,d&&Rt(o,c,u)),e.beginPath();const f=!!n.pathSegment(e,t);let h;if(d){f?e.closePath():Yt(e,i,u,o);const t=!!i.pathSegment(e,r,{move:f,reverse:!0});h=f&&t,h||Yt(e,i,c,o)}e.closePath(),e.fill(h?"evenodd":"nonzero"),e.restore()}}function Kt(e,t,n){const{top:r,bottom:i}=t.chart.chartArea,{property:o,start:a,end:s}=n||{};"x"===o&&(e.beginPath(),e.rect(a,r,s-a,i-r),e.clip())}function Yt(e,t,n,r){const i=t.interpolate(n,r);i&&e.lineTo(i.x,i.y)}var qt={id:"filler",afterDatasetsUpdate(e,t,n){const r=(e.data.datasets||[]).length,i=[];let o,a,s,l;for(a=0;a<r;++a)o=e.getDatasetMeta(a),s=o.dataset,l=null,s&&s.options&&s instanceof xt&&(l={visible:e.isDatasetVisible(a),index:a,fill:Ft(s,a,r),chart:e,axis:o.controller.options.indexAxis,scale:o.vScale,line:s}),o.$filler=l,i.push(l);for(a=0;a<r;++a)l=i[a],l&&!1!==l.fill&&(l.fill=zt(i,a,n.propagate))},beforeDraw(e,t,n){const r="beforeDraw"===n.drawTime,i=e.getSortedVisibleDatasetMetas(),o=e.chartArea;for(let t=i.length-1;t>=0;--t){const n=i[t].$filler;n&&(n.line.updateControlPoints(o,n.axis),r&&n.fill&&Ht(e.ctx,n,o))}},beforeDatasetsDraw(e,t,n){if("beforeDatasetsDraw"!==n.drawTime)return;const r=e.getSortedVisibleDatasetMetas();for(let t=r.length-1;t>=0;--t){const n=r[t].$filler;jt(n)&&Ht(e.ctx,n,e.chartArea)}},beforeDatasetDraw(e,t,n){const r=t.meta.$filler;jt(r)&&"beforeDatasetDraw"===n.drawTime&&Ht(e.ctx,r,e.chartArea)},defaults:{propagate:!0,drawTime:"beforeDatasetDraw"}};const Qt=(e,t)=>{let{boxHeight:n=t,boxWidth:r=t}=e;return e.usePointStyle&&(n=Math.min(n,t),r=e.pointStyleWidth||Math.min(r,t)),{boxWidth:r,boxHeight:n,itemHeight:Math.max(t,n)}};class Xt extends j{constructor(e){super(),this._added=!1,this.legendHitBoxes=[],this._hoveredItem=null,this.doughnutMode=!1,this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this.legendItems=void 0,this.columnSizes=void 0,this.lineWidths=void 0,this.maxHeight=void 0,this.maxWidth=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.height=void 0,this.width=void 0,this._margins=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t,n){this.maxWidth=e,this.maxHeight=t,this._margins=n,this.setDimensions(),this.buildLabels(),this.fit()}setDimensions(){this.isHorizontal()?(this.width=this.maxWidth,this.left=this._margins.left,this.right=this.width):(this.height=this.maxHeight,this.top=this._margins.top,this.bottom=this.height)}buildLabels(){const e=this.options.labels||{};let t=(0,r.C)(e.generateLabels,[this.chart],this)||[];e.filter&&(t=t.filter((t=>e.filter(t,this.chart.data)))),e.sort&&(t=t.sort(((t,n)=>e.sort(t,n,this.chart.data)))),this.options.reverse&&t.reverse(),this.legendItems=t}fit(){const{options:e,ctx:t}=this;if(!e.display)return void(this.width=this.height=0);const n=e.labels,i=(0,r.O)(n.font),o=i.size,a=this._computeTitleHeight(),{boxWidth:s,itemHeight:l}=Qt(n,o);let c,u;t.font=i.string,this.isHorizontal()?(c=this.maxWidth,u=this._fitRows(a,o,s,l)+10):(u=this.maxHeight,c=this._fitCols(a,o,s,l)+10),this.width=Math.min(c,e.maxWidth||this.maxWidth),this.height=Math.min(u,e.maxHeight||this.maxHeight)}_fitRows(e,t,n,r){const{ctx:i,maxWidth:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.lineWidths=[0],c=r+a;let u=e;i.textAlign="left",i.textBaseline="middle";let d=-1,f=-c;return this.legendItems.forEach(((e,h)=>{const p=n+t/2+i.measureText(e.text).width;(0===h||l[l.length-1]+p+2*a>o)&&(u+=c,l[l.length-(h>0?0:1)]=0,f+=c,d++),s[h]={left:0,top:f,row:d,width:p,height:r},l[l.length-1]+=p+a})),u}_fitCols(e,t,n,r){const{ctx:i,maxHeight:o,options:{labels:{padding:a}}}=this,s=this.legendHitBoxes=[],l=this.columnSizes=[],c=o-e;let u=a,d=0,f=0,h=0,p=0;return this.legendItems.forEach(((e,o)=>{const g=n+t/2+i.measureText(e.text).width;o>0&&f+r+2*a>c&&(u+=d+a,l.push({width:d,height:f}),h+=d+a,p++,d=f=0),s[o]={left:h,top:f,col:p,width:g,height:r},d=Math.max(d,g),f+=r+a})),u+=d,l.push({width:d,height:f}),u}adjustHitBoxes(){if(!this.options.display)return;const e=this._computeTitleHeight(),{legendHitBoxes:t,options:{align:n,labels:{padding:i},rtl:o}}=this,a=(0,r.aA)(o,this.left,this.width);if(this.isHorizontal()){let o=0,s=(0,r.S)(n,this.left+i,this.right-this.lineWidths[o]);for(const l of t)o!==l.row&&(o=l.row,s=(0,r.S)(n,this.left+i,this.right-this.lineWidths[o])),l.top+=this.top+e+i,l.left=a.leftForLtr(a.x(s),l.width),s+=l.width+i}else{let o=0,s=(0,r.S)(n,this.top+e+i,this.bottom-this.columnSizes[o].height);for(const l of t)l.col!==o&&(o=l.col,s=(0,r.S)(n,this.top+e+i,this.bottom-this.columnSizes[o].height)),l.top=s,l.left+=this.left+i,l.left=a.leftForLtr(a.x(l.left),l.width),s+=l.height+i}}isHorizontal(){return"top"===this.options.position||"bottom"===this.options.position}draw(){if(this.options.display){const e=this.ctx;(0,r.L)(e,this),this._draw(),(0,r.N)(e)}}_draw(){const{options:e,columnSizes:t,lineWidths:n,ctx:i}=this,{align:o,labels:a}=e,s=r.d.color,l=(0,r.aA)(e.rtl,this.left,this.width),c=(0,r.O)(a.font),{color:u,padding:d}=a,f=c.size,h=f/2;let p;this.drawTitle(),i.textAlign=l.textAlign("left"),i.textBaseline="middle",i.lineWidth=.5,i.font=c.string;const{boxWidth:g,boxHeight:m,itemHeight:v}=Qt(a,f),b=this.isHorizontal(),y=this._computeTitleHeight();p=b?{x:(0,r.S)(o,this.left+d,this.right-n[0]),y:this.top+d+y,line:0}:{x:this.left+d,y:(0,r.S)(o,this.top+y+d,this.bottom-t[0].height),line:0},(0,r.aB)(this.ctx,e.textDirection);const x=v+d;this.legendItems.forEach(((w,k)=>{i.strokeStyle=w.fontColor||u,i.fillStyle=w.fontColor||u;const _=i.measureText(w.text).width,E=l.textAlign(w.textAlign||(w.textAlign=a.textAlign)),S=g+h+_;let O=p.x,P=p.y;l.setWidth(this.width),b?k>0&&O+S+d>this.right&&(P=p.y+=x,p.line++,O=p.x=(0,r.S)(o,this.left+d,this.right-n[p.line])):k>0&&P+x>this.bottom&&(O=p.x=O+t[p.line].width+d,p.line++,P=p.y=(0,r.S)(o,this.top+y+d,this.bottom-t[p.line].height)),function(e,t,n){if(isNaN(g)||g<=0||isNaN(m)||m<0)return;i.save();const o=(0,r.v)(n.lineWidth,1);if(i.fillStyle=(0,r.v)(n.fillStyle,s),i.lineCap=(0,r.v)(n.lineCap,"butt"),i.lineDashOffset=(0,r.v)(n.lineDashOffset,0),i.lineJoin=(0,r.v)(n.lineJoin,"miter"),i.lineWidth=o,i.strokeStyle=(0,r.v)(n.strokeStyle,s),i.setLineDash((0,r.v)(n.lineDash,[])),a.usePointStyle){const s={radius:m*Math.SQRT2/2,pointStyle:n.pointStyle,rotation:n.rotation,borderWidth:o},c=l.xPlus(e,g/2),u=t+h;(0,r.aE)(i,s,c,u,a.pointStyleWidth&&g)}else{const a=t+Math.max((f-m)/2,0),s=l.leftForLtr(e,g),c=(0,r.ax)(n.borderRadius);i.beginPath(),Object.values(c).some((e=>0!==e))?(0,r.av)(i,{x:s,y:a,w:g,h:m,radius:c}):i.rect(s,a,g,m),i.fill(),0!==o&&i.stroke()}i.restore()}(l.x(O),P,w),O=(0,r.aC)(E,O+g+h,b?O+S:this.right,e.rtl),function(e,t,n){(0,r.M)(i,n.text,e,t+v/2,c,{strikethrough:n.hidden,textAlign:l.textAlign(n.textAlign)})}(l.x(O),P,w),b?p.x+=S+d:p.y+=x})),(0,r.aD)(this.ctx,e.textDirection)}drawTitle(){const e=this.options,t=e.title,n=(0,r.O)(t.font),i=(0,r.K)(t.padding);if(!t.display)return;const o=(0,r.aA)(e.rtl,this.left,this.width),a=this.ctx,s=t.position,l=n.size/2,c=i.top+l;let u,d=this.left,f=this.width;if(this.isHorizontal())f=Math.max(...this.lineWidths),u=this.top+c,d=(0,r.S)(e.align,d,this.right-f);else{const t=this.columnSizes.reduce(((e,t)=>Math.max(e,t.height)),0);u=c+(0,r.S)(e.align,this.top,this.bottom-t-e.labels.padding-this._computeTitleHeight())}const h=(0,r.S)(s,d,d+f);a.textAlign=o.textAlign((0,r.R)(s)),a.textBaseline="middle",a.strokeStyle=t.color,a.fillStyle=t.color,a.font=n.string,(0,r.M)(a,t.text,h,u,n)}_computeTitleHeight(){const e=this.options.title,t=(0,r.O)(e.font),n=(0,r.K)(e.padding);return e.display?t.lineHeight+n.height:0}_getLegendItemAt(e,t){let n,i,o;if((0,r.ak)(e,this.left,this.right)&&(0,r.ak)(t,this.top,this.bottom))for(o=this.legendHitBoxes,n=0;n<o.length;++n)if(i=o[n],(0,r.ak)(e,i.left,i.left+i.width)&&(0,r.ak)(t,i.top,i.top+i.height))return this.legendItems[n];return null}handleEvent(e){const t=this.options;if(!function(e,t){return!("mousemove"!==e&&"mouseout"!==e||!t.onHover&&!t.onLeave)||!(!t.onClick||"click"!==e&&"mouseup"!==e)}(e.type,t))return;const n=this._getLegendItemAt(e.x,e.y);if("mousemove"===e.type||"mouseout"===e.type){const a=this._hoveredItem,s=(o=n,null!==(i=a)&&null!==o&&i.datasetIndex===o.datasetIndex&&i.index===o.index);a&&!s&&(0,r.C)(t.onLeave,[e,a,this],this),this._hoveredItem=n,n&&!s&&(0,r.C)(t.onHover,[e,n,this],this)}else n&&(0,r.C)(t.onClick,[e,n,this],this);var i,o}}var Gt={id:"legend",_element:Xt,start(e,t,n){const r=e.legend=new Xt({ctx:e.ctx,options:n,chart:e});be.configure(e,r,n),be.addBox(e,r)},stop(e){be.removeBox(e,e.legend),delete e.legend},beforeUpdate(e,t,n){const r=e.legend;be.configure(e,r,n),r.options=n},afterUpdate(e){const t=e.legend;t.buildLabels(),t.adjustHitBoxes()},afterEvent(e,t){t.replay||e.legend.handleEvent(t.event)},defaults:{display:!0,position:"top",align:"center",fullSize:!0,reverse:!1,weight:1e3,onClick(e,t,n){const r=t.datasetIndex,i=n.chart;i.isDatasetVisible(r)?(i.hide(r),t.hidden=!0):(i.show(r),t.hidden=!1)},onHover:null,onLeave:null,labels:{color:e=>e.chart.options.color,boxWidth:40,padding:10,generateLabels(e){const t=e.data.datasets,{labels:{usePointStyle:n,pointStyle:i,textAlign:o,color:a}}=e.legend.options;return e._getSortedDatasetMetas().map((e=>{const s=e.controller.getStyle(n?0:void 0),l=(0,r.K)(s.borderWidth);return{text:t[e.index].label,fillStyle:s.backgroundColor,fontColor:a,hidden:!e.visible,lineCap:s.borderCapStyle,lineDash:s.borderDash,lineDashOffset:s.borderDashOffset,lineJoin:s.borderJoinStyle,lineWidth:(l.width+l.height)/4,strokeStyle:s.borderColor,pointStyle:i||s.pointStyle,rotation:s.rotation,textAlign:o||s.textAlign,borderRadius:0,datasetIndex:e.index}}),this)}},title:{color:e=>e.chart.options.color,display:!1,position:"center",text:""}},descriptors:{_scriptable:e=>!e.startsWith("on"),labels:{_scriptable:e=>!["generateLabels","filter","sort"].includes(e)}}};class Jt extends j{constructor(e){super(),this.chart=e.chart,this.options=e.options,this.ctx=e.ctx,this._padding=void 0,this.top=void 0,this.bottom=void 0,this.left=void 0,this.right=void 0,this.width=void 0,this.height=void 0,this.position=void 0,this.weight=void 0,this.fullSize=void 0}update(e,t){const n=this.options;if(this.left=0,this.top=0,!n.display)return void(this.width=this.height=this.right=this.bottom=0);this.width=this.right=e,this.height=this.bottom=t;const i=(0,r.b)(n.text)?n.text.length:1;this._padding=(0,r.K)(n.padding);const o=i*(0,r.O)(n.font).lineHeight+this._padding.height;this.isHorizontal()?this.height=o:this.width=o}isHorizontal(){const e=this.options.position;return"top"===e||"bottom"===e}_drawArgs(e){const{top:t,left:n,bottom:i,right:o,options:a}=this,s=a.align;let l,c,u,d=0;return this.isHorizontal()?(c=(0,r.S)(s,n,o),u=t+e,l=o-n):("left"===a.position?(c=n+e,u=(0,r.S)(s,i,t),d=-.5*r.P):(c=o-e,u=(0,r.S)(s,t,i),d=.5*r.P),l=i-t),{titleX:c,titleY:u,maxWidth:l,rotation:d}}draw(){const e=this.ctx,t=this.options;if(!t.display)return;const n=(0,r.O)(t.font),i=n.lineHeight/2+this._padding.top,{titleX:o,titleY:a,maxWidth:s,rotation:l}=this._drawArgs(i);(0,r.M)(e,t.text,0,0,n,{color:t.color,maxWidth:s,rotation:l,textAlign:(0,r.R)(t.align),textBaseline:"middle",translation:[o,a]})}}var Zt={id:"title",_element:Jt,start(e,t,n){!function(e,t){const n=new Jt({ctx:e.ctx,options:t,chart:e});be.configure(e,n,t),be.addBox(e,n),e.titleBlock=n}(e,n)},stop(e){const t=e.titleBlock;be.removeBox(e,t),delete e.titleBlock},beforeUpdate(e,t,n){const r=e.titleBlock;be.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"bold"},fullSize:!0,padding:10,position:"top",text:"",weight:2e3},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const en=new WeakMap;var tn={id:"subtitle",start(e,t,n){const r=new Jt({ctx:e.ctx,options:n,chart:e});be.configure(e,r,n),be.addBox(e,r),en.set(e,r)},stop(e){be.removeBox(e,en.get(e)),en.delete(e)},beforeUpdate(e,t,n){const r=en.get(e);be.configure(e,r,n),r.options=n},defaults:{align:"center",display:!1,font:{weight:"normal"},fullSize:!0,padding:0,position:"top",text:"",weight:1500},defaultRoutes:{color:"color"},descriptors:{_scriptable:!0,_indexable:!1}};const nn={average(e){if(!e.length)return!1;let t,n,r=0,i=0,o=0;for(t=0,n=e.length;t<n;++t){const n=e[t].element;if(n&&n.hasValue()){const e=n.tooltipPosition();r+=e.x,i+=e.y,++o}}return{x:r/o,y:i/o}},nearest(e,t){if(!e.length)return!1;let n,i,o,a=t.x,s=t.y,l=Number.POSITIVE_INFINITY;for(n=0,i=e.length;n<i;++n){const i=e[n].element;if(i&&i.hasValue()){const e=i.getCenterPoint(),n=(0,r.aG)(t,e);n<l&&(l=n,o=i)}}if(o){const e=o.tooltipPosition();a=e.x,s=e.y}return{x:a,y:s}}};function rn(e,t){return t&&((0,r.b)(t)?Array.prototype.push.apply(e,t):e.push(t)),e}function on(e){return("string"==typeof e||e instanceof String)&&e.indexOf("\n")>-1?e.split("\n"):e}function an(e,t){const{element:n,datasetIndex:r,index:i}=t,o=e.getDatasetMeta(r).controller,{label:a,value:s}=o.getLabelAndValue(i);return{chart:e,label:a,parsed:o.getParsed(i),raw:e.data.datasets[r].data[i],formattedValue:s,dataset:o.getDataset(),dataIndex:i,datasetIndex:r,element:n}}function sn(e,t){const n=e.chart.ctx,{body:i,footer:o,title:a}=e,{boxWidth:s,boxHeight:l}=t,c=(0,r.O)(t.bodyFont),u=(0,r.O)(t.titleFont),d=(0,r.O)(t.footerFont),f=a.length,h=o.length,p=i.length,g=(0,r.K)(t.padding);let m=g.height,v=0,b=i.reduce(((e,t)=>e+t.before.length+t.lines.length+t.after.length),0);b+=e.beforeBody.length+e.afterBody.length,f&&(m+=f*u.lineHeight+(f-1)*t.titleSpacing+t.titleMarginBottom),b&&(m+=p*(t.displayColors?Math.max(l,c.lineHeight):c.lineHeight)+(b-p)*c.lineHeight+(b-1)*t.bodySpacing),h&&(m+=t.footerMarginTop+h*d.lineHeight+(h-1)*t.footerSpacing);let y=0;const x=function(e){v=Math.max(v,n.measureText(e).width+y)};return n.save(),n.font=u.string,(0,r.Q)(e.title,x),n.font=c.string,(0,r.Q)(e.beforeBody.concat(e.afterBody),x),y=t.displayColors?s+2+t.boxPadding:0,(0,r.Q)(i,(e=>{(0,r.Q)(e.before,x),(0,r.Q)(e.lines,x),(0,r.Q)(e.after,x)})),y=0,n.font=d.string,(0,r.Q)(e.footer,x),n.restore(),v+=g.width,{width:v,height:m}}function ln(e,t,n,r){const{x:i,width:o}=n,{width:a,chartArea:{left:s,right:l}}=e;let c="center";return"center"===r?c=i<=(s+l)/2?"left":"right":i<=o/2?c="left":i>=a-o/2&&(c="right"),function(e,t,n,r){const{x:i,width:o}=r,a=n.caretSize+n.caretPadding;return"left"===e&&i+o+a>t.width||"right"===e&&i-o-a<0||void 0}(c,e,t,n)&&(c="center"),c}function cn(e,t,n){const r=n.yAlign||t.yAlign||function(e,t){const{y:n,height:r}=t;return n<r/2?"top":n>e.height-r/2?"bottom":"center"}(e,n);return{xAlign:n.xAlign||t.xAlign||ln(e,t,n,r),yAlign:r}}function un(e,t,n,i){const{caretSize:o,caretPadding:a,cornerRadius:s}=e,{xAlign:l,yAlign:c}=n,u=o+a,{topLeft:d,topRight:f,bottomLeft:h,bottomRight:p}=(0,r.ax)(s);let g=function(e,t){let{x:n,width:r}=e;return"right"===t?n-=r:"center"===t&&(n-=r/2),n}(t,l);const m=function(e,t,n){let{y:r,height:i}=e;return"top"===t?r+=n:r-="bottom"===t?i+n:i/2,r}(t,c,u);return"center"===c?"left"===l?g+=u:"right"===l&&(g-=u):"left"===l?g-=Math.max(d,h)+o:"right"===l&&(g+=Math.max(f,p)+o),{x:(0,r.E)(g,0,i.width-t.width),y:(0,r.E)(m,0,i.height-t.height)}}function dn(e,t,n){const i=(0,r.K)(n.padding);return"center"===t?e.x+e.width/2:"right"===t?e.x+e.width-i.right:e.x+i.left}function fn(e){return rn([],on(e))}function hn(e,t){const n=t&&t.dataset&&t.dataset.tooltip&&t.dataset.tooltip.callbacks;return n?e.override(n):e}class pn extends j{constructor(e){super(),this.opacity=0,this._active=[],this._eventPosition=void 0,this._size=void 0,this._cachedAnimations=void 0,this._tooltipItems=[],this.$animations=void 0,this.$context=void 0,this.chart=e.chart||e._chart,this._chart=this.chart,this.options=e.options,this.dataPoints=void 0,this.title=void 0,this.beforeBody=void 0,this.body=void 0,this.afterBody=void 0,this.footer=void 0,this.xAlign=void 0,this.yAlign=void 0,this.x=void 0,this.y=void 0,this.height=void 0,this.width=void 0,this.caretX=void 0,this.caretY=void 0,this.labelColors=void 0,this.labelPointStyles=void 0,this.labelTextColors=void 0}initialize(e){this.options=e,this._cachedAnimations=void 0,this.$context=void 0}_resolveAnimations(){const e=this._cachedAnimations;if(e)return e;const t=this.chart,n=this.options.setContext(this.getContext()),r=n.enabled&&t.options.animation&&n.animations,i=new c(this.chart,r);return r._cacheable&&(this._cachedAnimations=Object.freeze(i)),i}getContext(){return this.$context||(this.$context=(e=this.chart.getContext(),t=this._tooltipItems,(0,r.h)(e,{tooltip:this,tooltipItems:t,type:"tooltip"})));var e,t}getTitle(e,t){const{callbacks:n}=t,r=n.beforeTitle.apply(this,[e]),i=n.title.apply(this,[e]),o=n.afterTitle.apply(this,[e]);let a=[];return a=rn(a,on(r)),a=rn(a,on(i)),a=rn(a,on(o)),a}getBeforeBody(e,t){return fn(t.callbacks.beforeBody.apply(this,[e]))}getBody(e,t){const{callbacks:n}=t,i=[];return(0,r.Q)(e,(e=>{const t={before:[],lines:[],after:[]},r=hn(n,e);rn(t.before,on(r.beforeLabel.call(this,e))),rn(t.lines,r.label.call(this,e)),rn(t.after,on(r.afterLabel.call(this,e))),i.push(t)})),i}getAfterBody(e,t){return fn(t.callbacks.afterBody.apply(this,[e]))}getFooter(e,t){const{callbacks:n}=t,r=n.beforeFooter.apply(this,[e]),i=n.footer.apply(this,[e]),o=n.afterFooter.apply(this,[e]);let a=[];return a=rn(a,on(r)),a=rn(a,on(i)),a=rn(a,on(o)),a}_createItems(e){const t=this._active,n=this.chart.data,i=[],o=[],a=[];let s,l,c=[];for(s=0,l=t.length;s<l;++s)c.push(an(this.chart,t[s]));return e.filter&&(c=c.filter(((t,r,i)=>e.filter(t,r,i,n)))),e.itemSort&&(c=c.sort(((t,r)=>e.itemSort(t,r,n)))),(0,r.Q)(c,(t=>{const n=hn(e.callbacks,t);i.push(n.labelColor.call(this,t)),o.push(n.labelPointStyle.call(this,t)),a.push(n.labelTextColor.call(this,t))})),this.labelColors=i,this.labelPointStyles=o,this.labelTextColors=a,this.dataPoints=c,c}update(e,t){const n=this.options.setContext(this.getContext()),r=this._active;let i,o=[];if(r.length){const e=nn[n.position].call(this,r,this._eventPosition);o=this._createItems(n),this.title=this.getTitle(o,n),this.beforeBody=this.getBeforeBody(o,n),this.body=this.getBody(o,n),this.afterBody=this.getAfterBody(o,n),this.footer=this.getFooter(o,n);const t=this._size=sn(this,n),a=Object.assign({},e,t),s=cn(this.chart,n,a),l=un(n,a,s,this.chart);this.xAlign=s.xAlign,this.yAlign=s.yAlign,i={opacity:1,x:l.x,y:l.y,width:t.width,height:t.height,caretX:e.x,caretY:e.y}}else 0!==this.opacity&&(i={opacity:0});this._tooltipItems=o,this.$context=void 0,i&&this._resolveAnimations().update(this,i),e&&n.external&&n.external.call(this,{chart:this.chart,tooltip:this,replay:t})}drawCaret(e,t,n,r){const i=this.getCaretPosition(e,n,r);t.lineTo(i.x1,i.y1),t.lineTo(i.x2,i.y2),t.lineTo(i.x3,i.y3)}getCaretPosition(e,t,n){const{xAlign:i,yAlign:o}=this,{caretSize:a,cornerRadius:s}=n,{topLeft:l,topRight:c,bottomLeft:u,bottomRight:d}=(0,r.ax)(s),{x:f,y:h}=e,{width:p,height:g}=t;let m,v,b,y,x,w;return"center"===o?(x=h+g/2,"left"===i?(m=f,v=m-a,y=x+a,w=x-a):(m=f+p,v=m+a,y=x-a,w=x+a),b=m):(v="left"===i?f+Math.max(l,u)+a:"right"===i?f+p-Math.max(c,d)-a:this.caretX,"top"===o?(y=h,x=y-a,m=v-a,b=v+a):(y=h+g,x=y+a,m=v+a,b=v-a),w=y),{x1:m,x2:v,x3:b,y1:y,y2:x,y3:w}}drawTitle(e,t,n){const i=this.title,o=i.length;let a,s,l;if(o){const c=(0,r.aA)(n.rtl,this.x,this.width);for(e.x=dn(this,n.titleAlign,n),t.textAlign=c.textAlign(n.titleAlign),t.textBaseline="middle",a=(0,r.O)(n.titleFont),s=n.titleSpacing,t.fillStyle=n.titleColor,t.font=a.string,l=0;l<o;++l)t.fillText(i[l],c.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+s,l+1===o&&(e.y+=n.titleMarginBottom-s)}}_drawColorBox(e,t,n,i,o){const a=this.labelColors[n],s=this.labelPointStyles[n],{boxHeight:l,boxWidth:c,boxPadding:u}=o,d=(0,r.O)(o.bodyFont),f=dn(this,"left",o),h=i.x(f),p=l<d.lineHeight?(d.lineHeight-l)/2:0,g=t.y+p;if(o.usePointStyle){const t={radius:Math.min(c,l)/2,pointStyle:s.pointStyle,rotation:s.rotation,borderWidth:1},n=i.leftForLtr(h,c)+c/2,u=g+l/2;e.strokeStyle=o.multiKeyBackground,e.fillStyle=o.multiKeyBackground,(0,r.au)(e,t,n,u),e.strokeStyle=a.borderColor,e.fillStyle=a.backgroundColor,(0,r.au)(e,t,n,u)}else{e.lineWidth=(0,r.i)(a.borderWidth)?Math.max(...Object.values(a.borderWidth)):a.borderWidth||1,e.strokeStyle=a.borderColor,e.setLineDash(a.borderDash||[]),e.lineDashOffset=a.borderDashOffset||0;const t=i.leftForLtr(h,c-u),n=i.leftForLtr(i.xPlus(h,1),c-u-2),s=(0,r.ax)(a.borderRadius);Object.values(s).some((e=>0!==e))?(e.beginPath(),e.fillStyle=o.multiKeyBackground,(0,r.av)(e,{x:t,y:g,w:c,h:l,radius:s}),e.fill(),e.stroke(),e.fillStyle=a.backgroundColor,e.beginPath(),(0,r.av)(e,{x:n,y:g+1,w:c-2,h:l-2,radius:s}),e.fill()):(e.fillStyle=o.multiKeyBackground,e.fillRect(t,g,c,l),e.strokeRect(t,g,c,l),e.fillStyle=a.backgroundColor,e.fillRect(n,g+1,c-2,l-2))}e.fillStyle=this.labelTextColors[n]}drawBody(e,t,n){const{body:i}=this,{bodySpacing:o,bodyAlign:a,displayColors:s,boxHeight:l,boxWidth:c,boxPadding:u}=n,d=(0,r.O)(n.bodyFont);let f=d.lineHeight,h=0;const p=(0,r.aA)(n.rtl,this.x,this.width),g=function(n){t.fillText(n,p.x(e.x+h),e.y+f/2),e.y+=f+o},m=p.textAlign(a);let v,b,y,x,w,k,_;for(t.textAlign=a,t.textBaseline="middle",t.font=d.string,e.x=dn(this,m,n),t.fillStyle=n.bodyColor,(0,r.Q)(this.beforeBody,g),h=s&&"right"!==m?"center"===a?c/2+u:c+2+u:0,x=0,k=i.length;x<k;++x){for(v=i[x],b=this.labelTextColors[x],t.fillStyle=b,(0,r.Q)(v.before,g),y=v.lines,s&&y.length&&(this._drawColorBox(t,e,x,p,n),f=Math.max(d.lineHeight,l)),w=0,_=y.length;w<_;++w)g(y[w]),f=d.lineHeight;(0,r.Q)(v.after,g)}h=0,f=d.lineHeight,(0,r.Q)(this.afterBody,g),e.y-=o}drawFooter(e,t,n){const i=this.footer,o=i.length;let a,s;if(o){const l=(0,r.aA)(n.rtl,this.x,this.width);for(e.x=dn(this,n.footerAlign,n),e.y+=n.footerMarginTop,t.textAlign=l.textAlign(n.footerAlign),t.textBaseline="middle",a=(0,r.O)(n.footerFont),t.fillStyle=n.footerColor,t.font=a.string,s=0;s<o;++s)t.fillText(i[s],l.x(e.x),e.y+a.lineHeight/2),e.y+=a.lineHeight+n.footerSpacing}}drawBackground(e,t,n,i){const{xAlign:o,yAlign:a}=this,{x:s,y:l}=e,{width:c,height:u}=n,{topLeft:d,topRight:f,bottomLeft:h,bottomRight:p}=(0,r.ax)(i.cornerRadius);t.fillStyle=i.backgroundColor,t.strokeStyle=i.borderColor,t.lineWidth=i.borderWidth,t.beginPath(),t.moveTo(s+d,l),"top"===a&&this.drawCaret(e,t,n,i),t.lineTo(s+c-f,l),t.quadraticCurveTo(s+c,l,s+c,l+f),"center"===a&&"right"===o&&this.drawCaret(e,t,n,i),t.lineTo(s+c,l+u-p),t.quadraticCurveTo(s+c,l+u,s+c-p,l+u),"bottom"===a&&this.drawCaret(e,t,n,i),t.lineTo(s+h,l+u),t.quadraticCurveTo(s,l+u,s,l+u-h),"center"===a&&"left"===o&&this.drawCaret(e,t,n,i),t.lineTo(s,l+d),t.quadraticCurveTo(s,l,s+d,l),t.closePath(),t.fill(),i.borderWidth>0&&t.stroke()}_updateAnimationTarget(e){const t=this.chart,n=this.$animations,r=n&&n.x,i=n&&n.y;if(r||i){const n=nn[e.position].call(this,this._active,this._eventPosition);if(!n)return;const o=this._size=sn(this,e),a=Object.assign({},n,this._size),s=cn(t,e,a),l=un(e,a,s,t);r._to===l.x&&i._to===l.y||(this.xAlign=s.xAlign,this.yAlign=s.yAlign,this.width=o.width,this.height=o.height,this.caretX=n.x,this.caretY=n.y,this._resolveAnimations().update(this,l))}}_willRender(){return!!this.opacity}draw(e){const t=this.options.setContext(this.getContext());let n=this.opacity;if(!n)return;this._updateAnimationTarget(t);const i={width:this.width,height:this.height},o={x:this.x,y:this.y};n=Math.abs(n)<.001?0:n;const a=(0,r.K)(t.padding),s=this.title.length||this.beforeBody.length||this.body.length||this.afterBody.length||this.footer.length;t.enabled&&s&&(e.save(),e.globalAlpha=n,this.drawBackground(o,e,i,t),(0,r.aB)(e,t.textDirection),o.y+=a.top,this.drawTitle(o,e,t),this.drawBody(o,e,t),this.drawFooter(o,e,t),(0,r.aD)(e,t.textDirection),e.restore())}getActiveElements(){return this._active||[]}setActiveElements(e,t){const n=this._active,i=e.map((({datasetIndex:e,index:t})=>{const n=this.chart.getDatasetMeta(e);if(!n)throw new Error("Cannot find a dataset at index "+e);return{datasetIndex:e,element:n.data[t],index:t}})),o=!(0,r.ai)(n,i),a=this._positionChanged(i,t);(o||a)&&(this._active=i,this._eventPosition=t,this._ignoreReplayEvents=!0,this.update(!0))}handleEvent(e,t,n=!0){if(t&&this._ignoreReplayEvents)return!1;this._ignoreReplayEvents=!1;const i=this.options,o=this._active||[],a=this._getActiveElements(e,o,t,n),s=this._positionChanged(a,e),l=t||!(0,r.ai)(a,o)||s;return l&&(this._active=a,(i.enabled||i.external)&&(this._eventPosition={x:e.x,y:e.y},this.update(!0,t))),l}_getActiveElements(e,t,n,r){const i=this.options;if("mouseout"===e.type)return[];if(!r)return t;const o=this.chart.getElementsAtEventForMode(e,i.mode,i,n);return i.reverse&&o.reverse(),o}_positionChanged(e,t){const{caretX:n,caretY:r,options:i}=this,o=nn[i.position].call(this,e,t);return!1!==o&&(n!==o.x||r!==o.y)}}pn.positioners=nn;var gn={id:"tooltip",_element:pn,positioners:nn,afterInit(e,t,n){n&&(e.tooltip=new pn({chart:e,options:n}))},beforeUpdate(e,t,n){e.tooltip&&e.tooltip.initialize(n)},reset(e,t,n){e.tooltip&&e.tooltip.initialize(n)},afterDraw(e){const t=e.tooltip;if(t&&t._willRender()){const n={tooltip:t};if(!1===e.notifyPlugins("beforeTooltipDraw",n))return;t.draw(e.ctx),e.notifyPlugins("afterTooltipDraw",n)}},afterEvent(e,t){if(e.tooltip){const n=t.replay;e.tooltip.handleEvent(t.event,n,t.inChartArea)&&(t.changed=!0)}},defaults:{enabled:!0,external:null,position:"average",backgroundColor:"rgba(0,0,0,0.8)",titleColor:"#fff",titleFont:{weight:"bold"},titleSpacing:2,titleMarginBottom:6,titleAlign:"left",bodyColor:"#fff",bodySpacing:2,bodyFont:{},bodyAlign:"left",footerColor:"#fff",footerSpacing:2,footerMarginTop:6,footerFont:{weight:"bold"},footerAlign:"left",padding:6,caretPadding:2,caretSize:5,cornerRadius:6,boxHeight:(e,t)=>t.bodyFont.size,boxWidth:(e,t)=>t.bodyFont.size,multiKeyBackground:"#fff",displayColors:!0,boxPadding:0,borderColor:"rgba(0,0,0,0)",borderWidth:0,animation:{duration:400,easing:"easeOutQuart"},animations:{numbers:{type:"number",properties:["x","y","width","height","caretX","caretY"]},opacity:{easing:"linear",duration:200}},callbacks:{beforeTitle:r.aF,title(e){if(e.length>0){const t=e[0],n=t.chart.data.labels,r=n?n.length:0;if(this&&this.options&&"dataset"===this.options.mode)return t.dataset.label||"";if(t.label)return t.label;if(r>0&&t.dataIndex<r)return n[t.dataIndex]}return""},afterTitle:r.aF,beforeBody:r.aF,beforeLabel:r.aF,label(e){if(this&&this.options&&"dataset"===this.options.mode)return e.label+": "+e.formattedValue||e.formattedValue;let t=e.dataset.label||"";t&&(t+=": ");const n=e.formattedValue;return(0,r.k)(n)||(t+=n),t},labelColor(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{borderColor:t.borderColor,backgroundColor:t.backgroundColor,borderWidth:t.borderWidth,borderDash:t.borderDash,borderDashOffset:t.borderDashOffset,borderRadius:0}},labelTextColor(){return this.options.bodyColor},labelPointStyle(e){const t=e.chart.getDatasetMeta(e.datasetIndex).controller.getStyle(e.dataIndex);return{pointStyle:t.pointStyle,rotation:t.rotation}},afterLabel:r.aF,afterBody:r.aF,beforeFooter:r.aF,footer:r.aF,afterFooter:r.aF}},defaultRoutes:{bodyFont:"font",footerFont:"font",titleFont:"font"},descriptors:{_scriptable:e=>"filter"!==e&&"itemSort"!==e&&"external"!==e,_indexable:!1,callbacks:{_scriptable:!1,_indexable:!1},animation:{_fallback:!1},animations:{_fallback:"animation"}},additionalOptionScopes:["interaction"]},mn=Object.freeze({__proto__:null,Decimation:At,Filler:qt,Legend:Gt,SubTitle:tn,Title:Zt,Tooltip:gn});class vn extends Y{constructor(e){super(e),this._startValue=void 0,this._valueRange=0,this._addedLabels=[]}init(e){const t=this._addedLabels;if(t.length){const e=this.getLabels();for(const{index:n,label:r}of t)e[n]===r&&e.splice(n,1);this._addedLabels=[]}super.init(e)}parse(e,t){if((0,r.k)(e))return null;const n=this.getLabels();return((e,t)=>null===e?null:(0,r.E)(Math.round(e),0,t))(t=isFinite(t)&&n[t]===e?t:function(e,t,n,r){const i=e.indexOf(t);return-1===i?((e,t,n,r)=>("string"==typeof t?(n=e.push(t)-1,r.unshift({index:n,label:t})):isNaN(t)&&(n=null),n))(e,t,n,r):i!==e.lastIndexOf(t)?n:i}(n,e,(0,r.v)(t,e),this._addedLabels),n.length-1)}determineDataLimits(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let{min:n,max:r}=this.getMinMax(!0);"ticks"===this.options.bounds&&(e||(n=0),t||(r=this.getLabels().length-1)),this.min=n,this.max=r}buildTicks(){const e=this.min,t=this.max,n=this.options.offset,r=[];let i=this.getLabels();i=0===e&&t===i.length-1?i:i.slice(e,t+1),this._valueRange=Math.max(i.length-(n?0:1),1),this._startValue=this.min-(n?.5:0);for(let n=e;n<=t;n++)r.push({value:n});return r}getLabelForValue(e){const t=this.getLabels();return e>=0&&e<t.length?t[e]:e}configure(){super.configure(),this.isHorizontal()||(this._reversePixels=!this._reversePixels)}getPixelForValue(e){return"number"!=typeof e&&(e=this.parse(e)),null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getPixelForTick(e){const t=this.ticks;return e<0||e>t.length-1?null:this.getPixelForValue(t[e].value)}getValueForPixel(e){return Math.round(this._startValue+this.getDecimalForPixel(e)*this._valueRange)}getBasePixel(){return this.bottom}}function bn(e,t,{horizontal:n,minRotation:i}){const o=(0,r.t)(i),a=(n?Math.sin(o):Math.cos(o))||.001,s=.75*t*(""+e).length;return Math.min(t/a,s)}vn.id="category",vn.defaults={ticks:{callback:vn.prototype.getLabelForValue}};class yn extends Y{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._endValue=void 0,this._valueRange=0}parse(e,t){return(0,r.k)(e)||("number"==typeof e||e instanceof Number)&&!isFinite(+e)?null:+e}handleTickRangeOptions(){const{beginAtZero:e}=this.options,{minDefined:t,maxDefined:n}=this.getUserBounds();let{min:i,max:o}=this;const a=e=>i=t?i:e,s=e=>o=n?o:e;if(e){const e=(0,r.s)(i),t=(0,r.s)(o);e<0&&t<0?s(0):e>0&&t>0&&a(0)}if(i===o){let t=1;(o>=Number.MAX_SAFE_INTEGER||i<=Number.MIN_SAFE_INTEGER)&&(t=Math.abs(.05*o)),s(o+t),e||a(i-t)}this.min=i,this.max=o}getTickLimit(){const e=this.options.ticks;let t,{maxTicksLimit:n,stepSize:r}=e;return r?(t=Math.ceil(this.max/r)-Math.floor(this.min/r)+1,t>1e3&&(console.warn(`scales.${this.id}.ticks.stepSize: ${r} would result generating up to ${t} ticks. Limiting to 1000.`),t=1e3)):(t=this.computeTickLimit(),n=n||11),n&&(t=Math.min(n,t)),t}computeTickLimit(){return Number.POSITIVE_INFINITY}buildTicks(){const e=this.options,t=e.ticks;let n=this.getTickLimit();n=Math.max(2,n);const i=function(e,t){const n=[],{bounds:i,step:o,min:a,max:s,precision:l,count:c,maxTicks:u,maxDigits:d,includeBounds:f}=e,h=o||1,p=u-1,{min:g,max:m}=t,v=!(0,r.k)(a),b=!(0,r.k)(s),y=!(0,r.k)(c),x=(m-g)/(d+1);let w,k,_,E,S=(0,r.aI)((m-g)/p/h)*h;if(S<1e-14&&!v&&!b)return[{value:g},{value:m}];E=Math.ceil(m/S)-Math.floor(g/S),E>p&&(S=(0,r.aI)(E*S/p/h)*h),(0,r.k)(l)||(w=Math.pow(10,l),S=Math.ceil(S*w)/w),"ticks"===i?(k=Math.floor(g/S)*S,_=Math.ceil(m/S)*S):(k=g,_=m),v&&b&&o&&(0,r.aJ)((s-a)/o,S/1e3)?(E=Math.round(Math.min((s-a)/S,u)),S=(s-a)/E,k=a,_=s):y?(k=v?a:k,_=b?s:_,E=c-1,S=(_-k)/E):(E=(_-k)/S,E=(0,r.aK)(E,Math.round(E),S/1e3)?Math.round(E):Math.ceil(E));const O=Math.max((0,r.aL)(S),(0,r.aL)(k));w=Math.pow(10,(0,r.k)(l)?O:l),k=Math.round(k*w)/w,_=Math.round(_*w)/w;let P=0;for(v&&(f&&k!==a?(n.push({value:a}),k<a&&P++,(0,r.aK)(Math.round((k+P*S)*w)/w,a,bn(a,x,e))&&P++):k<a&&P++);P<E;++P)n.push({value:Math.round((k+P*S)*w)/w});return b&&f&&_!==s?n.length&&(0,r.aK)(n[n.length-1].value,s,bn(s,x,e))?n[n.length-1].value=s:n.push({value:s}):b&&_!==s||n.push({value:_}),n}({maxTicks:n,bounds:e.bounds,min:e.min,max:e.max,precision:t.precision,step:t.stepSize,count:t.count,maxDigits:this._maxDigits(),horizontal:this.isHorizontal(),minRotation:t.minRotation||0,includeBounds:!1!==t.includeBounds},this._range||this);return"ticks"===e.bounds&&(0,r.aH)(i,this,"value"),e.reverse?(i.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),i}configure(){const e=this.ticks;let t=this.min,n=this.max;if(super.configure(),this.options.offset&&e.length){const r=(n-t)/Math.max(e.length-1,1)/2;t-=r,n+=r}this._startValue=t,this._endValue=n,this._valueRange=n-t}getLabelForValue(e){return(0,r.o)(e,this.chart.options.locale,this.options.ticks.format)}}class xn extends yn{determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,r.g)(e)?e:0,this.max=(0,r.g)(t)?t:1,this.handleTickRangeOptions()}computeTickLimit(){const e=this.isHorizontal(),t=e?this.width:this.height,n=(0,r.t)(this.options.ticks.minRotation),i=(e?Math.sin(n):Math.cos(n))||.001,o=this._resolveTickFontOptions(0);return Math.ceil(t/Math.min(40,o.lineHeight/i))}getPixelForValue(e){return null===e?NaN:this.getPixelForDecimal((e-this._startValue)/this._valueRange)}getValueForPixel(e){return this._startValue+this.getDecimalForPixel(e)*this._valueRange}}function wn(e){return 1==e/Math.pow(10,Math.floor((0,r.z)(e)))}xn.id="linear",xn.defaults={ticks:{callback:F.formatters.numeric}};class kn extends Y{constructor(e){super(e),this.start=void 0,this.end=void 0,this._startValue=void 0,this._valueRange=0}parse(e,t){const n=yn.prototype.parse.apply(this,[e,t]);if(0!==n)return(0,r.g)(n)&&n>0?n:null;this._zero=!0}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!0);this.min=(0,r.g)(e)?Math.max(0,e):null,this.max=(0,r.g)(t)?Math.max(0,t):null,this.options.beginAtZero&&(this._zero=!0),this.handleTickRangeOptions()}handleTickRangeOptions(){const{minDefined:e,maxDefined:t}=this.getUserBounds();let n=this.min,i=this.max;const o=t=>n=e?n:t,a=e=>i=t?i:e,s=(e,t)=>Math.pow(10,Math.floor((0,r.z)(e))+t);n===i&&(n<=0?(o(1),a(10)):(o(s(n,-1)),a(s(i,1)))),n<=0&&o(s(i,-1)),i<=0&&a(s(n,1)),this._zero&&this.min!==this._suggestedMin&&n===s(this.min,0)&&o(s(n,-1)),this.min=n,this.max=i}buildTicks(){const e=this.options,t=function(e,t){const n=Math.floor((0,r.z)(t.max)),i=Math.ceil(t.max/Math.pow(10,n)),o=[];let a=(0,r.B)(e.min,Math.pow(10,Math.floor((0,r.z)(t.min)))),s=Math.floor((0,r.z)(a)),l=Math.floor(a/Math.pow(10,s)),c=s<0?Math.pow(10,Math.abs(s)):1;do{o.push({value:a,major:wn(a)}),++l,10===l&&(l=1,++s,c=s>=0?1:c),a=Math.round(l*Math.pow(10,s)*c)/c}while(s<n||s===n&&l<i);const u=(0,r.B)(e.max,a);return o.push({value:u,major:wn(a)}),o}({min:this._userMin,max:this._userMax},this);return"ticks"===e.bounds&&(0,r.aH)(t,this,"value"),e.reverse?(t.reverse(),this.start=this.max,this.end=this.min):(this.start=this.min,this.end=this.max),t}getLabelForValue(e){return void 0===e?"0":(0,r.o)(e,this.chart.options.locale,this.options.ticks.format)}configure(){const e=this.min;super.configure(),this._startValue=(0,r.z)(e),this._valueRange=(0,r.z)(this.max)-(0,r.z)(e)}getPixelForValue(e){return void 0!==e&&0!==e||(e=this.min),null===e||isNaN(e)?NaN:this.getPixelForDecimal(e===this.min?0:((0,r.z)(e)-this._startValue)/this._valueRange)}getValueForPixel(e){const t=this.getDecimalForPixel(e);return Math.pow(10,this._startValue+t*this._valueRange)}}function _n(e){const t=e.ticks;if(t.display&&e.display){const e=(0,r.K)(t.backdropPadding);return(0,r.v)(t.font&&t.font.size,r.d.font.size)+e.height}return 0}function En(e,t,n,r,i){return e===r||e===i?{start:t-n/2,end:t+n/2}:e<r||e>i?{start:t-n,end:t}:{start:t,end:t+n}}function Sn(e,t,n,r,i){const o=Math.abs(Math.sin(n)),a=Math.abs(Math.cos(n));let s=0,l=0;r.start<t.l?(s=(t.l-r.start)/o,e.l=Math.min(e.l,t.l-s)):r.end>t.r&&(s=(r.end-t.r)/o,e.r=Math.max(e.r,t.r+s)),i.start<t.t?(l=(t.t-i.start)/a,e.t=Math.min(e.t,t.t-l)):i.end>t.b&&(l=(i.end-t.b)/a,e.b=Math.max(e.b,t.b+l))}function On(e){return 0===e||180===e?"center":e<180?"left":"right"}function Pn(e,t,n){return 90===n||270===n?e-=t/2:(n>270||n<90)&&(e-=t),e}function Cn(e,t,n,i){const{ctx:o}=e;if(n)o.arc(e.xCenter,e.yCenter,t,0,r.T);else{let n=e.getPointPosition(0,t);o.moveTo(n.x,n.y);for(let r=1;r<i;r++)n=e.getPointPosition(r,t),o.lineTo(n.x,n.y)}}kn.id="logarithmic",kn.defaults={ticks:{callback:F.formatters.logarithmic,major:{enabled:!0}}};class Mn extends yn{constructor(e){super(e),this.xCenter=void 0,this.yCenter=void 0,this.drawingArea=void 0,this._pointLabels=[],this._pointLabelItems=[]}setDimensions(){const e=this._padding=(0,r.K)(_n(this.options)/2),t=this.width=this.maxWidth-e.width,n=this.height=this.maxHeight-e.height;this.xCenter=Math.floor(this.left+t/2+e.left),this.yCenter=Math.floor(this.top+n/2+e.top),this.drawingArea=Math.floor(Math.min(t,n)/2)}determineDataLimits(){const{min:e,max:t}=this.getMinMax(!1);this.min=(0,r.g)(e)&&!isNaN(e)?e:0,this.max=(0,r.g)(t)&&!isNaN(t)?t:0,this.handleTickRangeOptions()}computeTickLimit(){return Math.ceil(this.drawingArea/_n(this.options))}generateTickLabels(e){yn.prototype.generateTickLabels.call(this,e),this._pointLabels=this.getLabels().map(((e,t)=>{const n=(0,r.C)(this.options.pointLabels.callback,[e,t],this);return n||0===n?n:""})).filter(((e,t)=>this.chart.getDataVisibility(t)))}fit(){const e=this.options;e.display&&e.pointLabels.display?function(e){const t={l:e.left+e._padding.left,r:e.right-e._padding.right,t:e.top+e._padding.top,b:e.bottom-e._padding.bottom},n=Object.assign({},t),i=[],o=[],a=e._pointLabels.length,s=e.options.pointLabels,l=s.centerPointLabels?r.P/a:0;for(let f=0;f<a;f++){const a=s.setContext(e.getPointLabelContext(f));o[f]=a.padding;const h=e.getPointPosition(f,e.drawingArea+o[f],l),p=(0,r.O)(a.font),g=(c=e.ctx,u=p,d=e._pointLabels[f],d=(0,r.b)(d)?d:[d],{w:(0,r.aM)(c,u.string,d),h:d.length*u.lineHeight});i[f]=g;const m=(0,r.az)(e.getIndexAngle(f)+l),v=Math.round((0,r.F)(m));Sn(n,t,m,En(v,h.x,g.w,0,180),En(v,h.y,g.h,90,270))}var c,u,d;e.setCenterPoint(t.l-n.l,n.r-t.r,t.t-n.t,n.b-t.b),e._pointLabelItems=function(e,t,n){const i=[],o=e._pointLabels.length,a=e.options,s=_n(a)/2,l=e.drawingArea,c=a.pointLabels.centerPointLabels?r.P/o:0;for(let a=0;a<o;a++){const o=e.getPointPosition(a,l+s+n[a],c),h=Math.round((0,r.F)((0,r.az)(o.angle+r.H))),p=t[a],g=Pn(o.y,p.h,h),m=On(h),v=(u=o.x,d=p.w,"right"===(f=m)?u-=d:"center"===f&&(u-=d/2),u);i.push({x:o.x,y:g,textAlign:m,left:v,top:g,right:v+p.w,bottom:g+p.h})}var u,d,f;return i}(e,i,o)}(this):this.setCenterPoint(0,0,0,0)}setCenterPoint(e,t,n,r){this.xCenter+=Math.floor((e-t)/2),this.yCenter+=Math.floor((n-r)/2),this.drawingArea-=Math.min(this.drawingArea/2,Math.max(e,t,n,r))}getIndexAngle(e){const t=r.T/(this._pointLabels.length||1),n=this.options.startAngle||0;return(0,r.az)(e*t+(0,r.t)(n))}getDistanceFromCenterForValue(e){if((0,r.k)(e))return NaN;const t=this.drawingArea/(this.max-this.min);return this.options.reverse?(this.max-e)*t:(e-this.min)*t}getValueForDistanceFromCenter(e){if((0,r.k)(e))return NaN;const t=e/(this.drawingArea/(this.max-this.min));return this.options.reverse?this.max-t:this.min+t}getPointLabelContext(e){const t=this._pointLabels||[];if(e>=0&&e<t.length){const n=t[e];return function(e,t,n){return(0,r.h)(e,{label:n,index:t,type:"pointLabel"})}(this.getContext(),e,n)}}getPointPosition(e,t,n=0){const i=this.getIndexAngle(e)-r.H+n;return{x:Math.cos(i)*t+this.xCenter,y:Math.sin(i)*t+this.yCenter,angle:i}}getPointPositionForValue(e,t){return this.getPointPosition(e,this.getDistanceFromCenterForValue(t))}getBasePosition(e){return this.getPointPositionForValue(e||0,this.getBaseValue())}getPointLabelPosition(e){const{left:t,top:n,right:r,bottom:i}=this._pointLabelItems[e];return{left:t,top:n,right:r,bottom:i}}drawBackground(){const{backgroundColor:e,grid:{circular:t}}=this.options;if(e){const n=this.ctx;n.save(),n.beginPath(),Cn(this,this.getDistanceFromCenterForValue(this._endValue),t,this._pointLabels.length),n.closePath(),n.fillStyle=e,n.fill(),n.restore()}}drawGrid(){const e=this.ctx,t=this.options,{angleLines:n,grid:i}=t,o=this._pointLabels.length;let a,s,l;if(t.pointLabels.display&&function(e,t){const{ctx:n,options:{pointLabels:i}}=e;for(let o=t-1;o>=0;o--){const t=i.setContext(e.getPointLabelContext(o)),a=(0,r.O)(t.font),{x:s,y:l,textAlign:c,left:u,top:d,right:f,bottom:h}=e._pointLabelItems[o],{backdropColor:p}=t;if(!(0,r.k)(p)){const e=(0,r.ax)(t.borderRadius),i=(0,r.K)(t.backdropPadding);n.fillStyle=p;const o=u-i.left,a=d-i.top,s=f-u+i.width,l=h-d+i.height;Object.values(e).some((e=>0!==e))?(n.beginPath(),(0,r.av)(n,{x:o,y:a,w:s,h:l,radius:e}),n.fill()):n.fillRect(o,a,s,l)}(0,r.M)(n,e._pointLabels[o],s,l+a.lineHeight/2,a,{color:t.color,textAlign:c,textBaseline:"middle"})}}(this,o),i.display&&this.ticks.forEach(((e,t)=>{0!==t&&(s=this.getDistanceFromCenterForValue(e.value),function(e,t,n,r){const i=e.ctx,o=t.circular,{color:a,lineWidth:s}=t;!o&&!r||!a||!s||n<0||(i.save(),i.strokeStyle=a,i.lineWidth=s,i.setLineDash(t.borderDash),i.lineDashOffset=t.borderDashOffset,i.beginPath(),Cn(e,n,o,r),i.closePath(),i.stroke(),i.restore())}(this,i.setContext(this.getContext(t-1)),s,o))})),n.display){for(e.save(),a=o-1;a>=0;a--){const r=n.setContext(this.getPointLabelContext(a)),{color:i,lineWidth:o}=r;o&&i&&(e.lineWidth=o,e.strokeStyle=i,e.setLineDash(r.borderDash),e.lineDashOffset=r.borderDashOffset,s=this.getDistanceFromCenterForValue(t.ticks.reverse?this.min:this.max),l=this.getPointPosition(a,s),e.beginPath(),e.moveTo(this.xCenter,this.yCenter),e.lineTo(l.x,l.y),e.stroke())}e.restore()}}drawBorder(){}drawLabels(){const e=this.ctx,t=this.options,n=t.ticks;if(!n.display)return;const i=this.getIndexAngle(0);let o,a;e.save(),e.translate(this.xCenter,this.yCenter),e.rotate(i),e.textAlign="center",e.textBaseline="middle",this.ticks.forEach(((i,s)=>{if(0===s&&!t.reverse)return;const l=n.setContext(this.getContext(s)),c=(0,r.O)(l.font);if(o=this.getDistanceFromCenterForValue(this.ticks[s].value),l.showLabelBackdrop){e.font=c.string,a=e.measureText(i.label).width,e.fillStyle=l.backdropColor;const t=(0,r.K)(l.backdropPadding);e.fillRect(-a/2-t.left,-o-c.size/2-t.top,a+t.width,c.size+t.height)}(0,r.M)(e,i.label,0,-o,c,{color:l.color})})),e.restore()}drawTitle(){}}Mn.id="radialLinear",Mn.defaults={display:!0,animate:!0,position:"chartArea",angleLines:{display:!0,lineWidth:1,borderDash:[],borderDashOffset:0},grid:{circular:!1},startAngle:0,ticks:{showLabelBackdrop:!0,callback:F.formatters.numeric},pointLabels:{backdropColor:void 0,backdropPadding:2,display:!0,font:{size:10},callback:e=>e,padding:5,centerPointLabels:!1}},Mn.defaultRoutes={"angleLines.color":"borderColor","pointLabels.color":"color","ticks.color":"color"},Mn.descriptors={angleLines:{_fallback:"grid"}};const Tn={millisecond:{common:!0,size:1,steps:1e3},second:{common:!0,size:1e3,steps:60},minute:{common:!0,size:6e4,steps:60},hour:{common:!0,size:36e5,steps:24},day:{common:!0,size:864e5,steps:30},week:{common:!1,size:6048e5,steps:4},month:{common:!0,size:2628e6,steps:12},quarter:{common:!1,size:7884e6,steps:4},year:{common:!0,size:3154e7}},Nn=Object.keys(Tn);function An(e,t){return e-t}function Rn(e,t){if((0,r.k)(t))return null;const n=e._adapter,{parser:i,round:o,isoWeekday:a}=e._parseOpts;let s=t;return"function"==typeof i&&(s=i(s)),(0,r.g)(s)||(s="string"==typeof i?n.parse(s,i):n.parse(s)),null===s?null:(o&&(s="week"!==o||!(0,r.x)(a)&&!0!==a?n.startOf(s,o):n.startOf(s,"isoWeek",a)),+s)}function Ln(e,t,n,r){const i=Nn.length;for(let o=Nn.indexOf(e);o<i-1;++o){const e=Tn[Nn[o]],i=e.steps?e.steps:Number.MAX_SAFE_INTEGER;if(e.common&&Math.ceil((n-t)/(i*e.size))<=r)return Nn[o]}return Nn[i-1]}function Dn(e,t,n){if(n){if(n.length){const{lo:i,hi:o}=(0,r.aO)(n,t);e[n[i]>=t?n[i]:n[o]]=!0}}else e[t]=!0}function In(e,t,n){const r=[],i={},o=t.length;let a,s;for(a=0;a<o;++a)s=t[a],i[s]=a,r.push({value:s,major:!1});return 0!==o&&n?function(e,t,n,r){const i=e._adapter,o=+i.startOf(t[0].value,r),a=t[t.length-1].value;let s,l;for(s=o;s<=a;s=+i.add(s,1,r))l=n[s],l>=0&&(t[l].major=!0);return t}(e,r,i,n):r}class jn extends Y{constructor(e){super(e),this._cache={data:[],labels:[],all:[]},this._unit="day",this._majorUnit=void 0,this._offsets={},this._normalized=!1,this._parseOpts=void 0}init(e,t){const n=e.time||(e.time={}),i=this._adapter=new ee._date(e.adapters.date);i.init(t),(0,r.ac)(n.displayFormats,i.formats()),this._parseOpts={parser:n.parser,round:n.round,isoWeekday:n.isoWeekday},super.init(e),this._normalized=t.normalized}parse(e,t){return void 0===e?null:Rn(this,e)}beforeLayout(){super.beforeLayout(),this._cache={data:[],labels:[],all:[]}}determineDataLimits(){const e=this.options,t=this._adapter,n=e.time.unit||"day";let{min:i,max:o,minDefined:a,maxDefined:s}=this.getUserBounds();function l(e){a||isNaN(e.min)||(i=Math.min(i,e.min)),s||isNaN(e.max)||(o=Math.max(o,e.max))}a&&s||(l(this._getLabelBounds()),"ticks"===e.bounds&&"labels"===e.ticks.source||l(this.getMinMax(!1))),i=(0,r.g)(i)&&!isNaN(i)?i:+t.startOf(Date.now(),n),o=(0,r.g)(o)&&!isNaN(o)?o:+t.endOf(Date.now(),n)+1,this.min=Math.min(i,o-1),this.max=Math.max(i+1,o)}_getLabelBounds(){const e=this.getLabelTimestamps();let t=Number.POSITIVE_INFINITY,n=Number.NEGATIVE_INFINITY;return e.length&&(t=e[0],n=e[e.length-1]),{min:t,max:n}}buildTicks(){const e=this.options,t=e.time,n=e.ticks,i="labels"===n.source?this.getLabelTimestamps():this._generate();"ticks"===e.bounds&&i.length&&(this.min=this._userMin||i[0],this.max=this._userMax||i[i.length-1]);const o=this.min,a=this.max,s=(0,r.aN)(i,o,a);return this._unit=t.unit||(n.autoSkip?Ln(t.minUnit,this.min,this.max,this._getLabelCapacity(o)):function(e,t,n,r,i){for(let o=Nn.length-1;o>=Nn.indexOf(n);o--){const n=Nn[o];if(Tn[n].common&&e._adapter.diff(i,r,n)>=t-1)return n}return Nn[n?Nn.indexOf(n):0]}(this,s.length,t.minUnit,this.min,this.max)),this._majorUnit=n.major.enabled&&"year"!==this._unit?function(e){for(let t=Nn.indexOf(e)+1,n=Nn.length;t<n;++t)if(Tn[Nn[t]].common)return Nn[t]}(this._unit):void 0,this.initOffsets(i),e.reverse&&s.reverse(),In(this,s,this._majorUnit)}afterAutoSkip(){this.options.offsetAfterAutoskip&&this.initOffsets(this.ticks.map((e=>+e.value)))}initOffsets(e){let t,n,i=0,o=0;this.options.offset&&e.length&&(t=this.getDecimalForValue(e[0]),i=1===e.length?1-t:(this.getDecimalForValue(e[1])-t)/2,n=this.getDecimalForValue(e[e.length-1]),o=1===e.length?n:(n-this.getDecimalForValue(e[e.length-2]))/2);const a=e.length<3?.5:.25;i=(0,r.E)(i,0,a),o=(0,r.E)(o,0,a),this._offsets={start:i,end:o,factor:1/(i+1+o)}}_generate(){const e=this._adapter,t=this.min,n=this.max,i=this.options,o=i.time,a=o.unit||Ln(o.minUnit,t,n,this._getLabelCapacity(t)),s=(0,r.v)(o.stepSize,1),l="week"===a&&o.isoWeekday,c=(0,r.x)(l)||!0===l,u={};let d,f,h=t;if(c&&(h=+e.startOf(h,"isoWeek",l)),h=+e.startOf(h,c?"day":a),e.diff(n,t,a)>1e5*s)throw new Error(t+" and "+n+" are too far apart with stepSize of "+s+" "+a);const p="data"===i.ticks.source&&this.getDataTimestamps();for(d=h,f=0;d<n;d=+e.add(d,s,a),f++)Dn(u,d,p);return d!==n&&"ticks"!==i.bounds&&1!==f||Dn(u,d,p),Object.keys(u).sort(((e,t)=>e-t)).map((e=>+e))}getLabelForValue(e){const t=this._adapter,n=this.options.time;return n.tooltipFormat?t.format(e,n.tooltipFormat):t.format(e,n.displayFormats.datetime)}_tickFormatFunction(e,t,n,i){const o=this.options,a=o.time.displayFormats,s=this._unit,l=this._majorUnit,c=s&&a[s],u=l&&a[l],d=n[t],f=l&&u&&d&&d.major,h=this._adapter.format(e,i||(f?u:c)),p=o.ticks.callback;return p?(0,r.C)(p,[h,t,n],this):h}generateTickLabels(e){let t,n,r;for(t=0,n=e.length;t<n;++t)r=e[t],r.label=this._tickFormatFunction(r.value,t,e)}getDecimalForValue(e){return null===e?NaN:(e-this.min)/(this.max-this.min)}getPixelForValue(e){const t=this._offsets,n=this.getDecimalForValue(e);return this.getPixelForDecimal((t.start+n)*t.factor)}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return this.min+n*(this.max-this.min)}_getLabelSize(e){const t=this.options.ticks,n=this.ctx.measureText(e).width,i=(0,r.t)(this.isHorizontal()?t.maxRotation:t.minRotation),o=Math.cos(i),a=Math.sin(i),s=this._resolveTickFontOptions(0).size;return{w:n*o+s*a,h:n*a+s*o}}_getLabelCapacity(e){const t=this.options.time,n=t.displayFormats,r=n[t.unit]||n.millisecond,i=this._tickFormatFunction(e,0,In(this,[e],this._majorUnit),r),o=this._getLabelSize(i),a=Math.floor(this.isHorizontal()?this.width/o.w:this.height/o.h)-1;return a>0?a:1}getDataTimestamps(){let e,t,n=this._cache.data||[];if(n.length)return n;const r=this.getMatchingVisibleMetas();if(this._normalized&&r.length)return this._cache.data=r[0].controller.getAllParsedValues(this);for(e=0,t=r.length;e<t;++e)n=n.concat(r[e].controller.getAllParsedValues(this));return this._cache.data=this.normalize(n)}getLabelTimestamps(){const e=this._cache.labels||[];let t,n;if(e.length)return e;const r=this.getLabels();for(t=0,n=r.length;t<n;++t)e.push(Rn(this,r[t]));return this._cache.labels=this._normalized?e:this.normalize(e)}normalize(e){return(0,r._)(e.sort(An))}}function zn(e,t,n){let i,o,a,s,l=0,c=e.length-1;n?(t>=e[l].pos&&t<=e[c].pos&&({lo:l,hi:c}=(0,r.Z)(e,"pos",t)),({pos:i,time:a}=e[l]),({pos:o,time:s}=e[c])):(t>=e[l].time&&t<=e[c].time&&({lo:l,hi:c}=(0,r.Z)(e,"time",t)),({time:i,pos:a}=e[l]),({time:o,pos:s}=e[c]));const u=o-i;return u?a+(s-a)*(t-i)/u:a}jn.id="time",jn.defaults={bounds:"data",adapters:{},time:{parser:!1,unit:!1,round:!1,isoWeekday:!1,minUnit:"millisecond",displayFormats:{}},ticks:{source:"auto",major:{enabled:!1}}};class Fn extends jn{constructor(e){super(e),this._table=[],this._minPos=void 0,this._tableRange=void 0}initOffsets(){const e=this._getTimestampsForTable(),t=this._table=this.buildLookupTable(e);this._minPos=zn(t,this.min),this._tableRange=zn(t,this.max)-this._minPos,super.initOffsets(e)}buildLookupTable(e){const{min:t,max:n}=this,r=[],i=[];let o,a,s,l,c;for(o=0,a=e.length;o<a;++o)l=e[o],l>=t&&l<=n&&r.push(l);if(r.length<2)return[{time:t,pos:0},{time:n,pos:1}];for(o=0,a=r.length;o<a;++o)c=r[o+1],s=r[o-1],l=r[o],Math.round((c+s)/2)!==l&&i.push({time:l,pos:o/(a-1)});return i}_getTimestampsForTable(){let e=this._cache.all||[];if(e.length)return e;const t=this.getDataTimestamps(),n=this.getLabelTimestamps();return e=t.length&&n.length?this.normalize(t.concat(n)):t.length?t:n,e=this._cache.all=e,e}getDecimalForValue(e){return(zn(this._table,e)-this._minPos)/this._tableRange}getValueForPixel(e){const t=this._offsets,n=this.getDecimalForPixel(e)/t.factor-t.end;return zn(this._table,n*this._tableRange+this._minPos,!0)}}Fn.id="timeseries",Fn.defaults=jn.defaults;var Bn=Object.freeze({__proto__:null,CategoryScale:vn,LinearScale:xn,LogarithmicScale:kn,RadialLinearScale:Mn,TimeScale:jn,TimeSeriesScale:Fn});const Vn=[G,Mt,mn,Bn]},2998:(e,t,n)=>{"use strict";function r(){}n.d(t,{$:()=>ht,A:()=>B,B:()=>c,C:()=>h,D:()=>Nt,E:()=>Z,F:()=>K,G:()=>st,H:()=>L,I:()=>ee,J:()=>ct,K:()=>Ct,L:()=>pt,M:()=>bt,N:()=>gt,O:()=>Mt,P:()=>M,Q:()=>p,R:()=>he,S:()=>pe,T:()=>T,U:()=>nt,V:()=>y,W:()=>E,X:()=>sn,Y:()=>ie,Z:()=>re,_:()=>ce,a:()=>Tt,a0:()=>q,a1:()=>cn,a2:()=>en,a3:()=>fn,a4:()=>de,a5:()=>dn,a6:()=>Zt,a7:()=>rt,a8:()=>O,a9:()=>Lt,aA:()=>xn,aB:()=>wn,aC:()=>ge,aD:()=>kn,aE:()=>ft,aF:()=>r,aG:()=>Q,aH:()=>$,aI:()=>F,aJ:()=>H,aK:()=>W,aL:()=>Y,aM:()=>lt,aN:()=>oe,aO:()=>ne,aa:()=>Rt,ab:()=>Dt,ac:()=>x,ad:()=>i,ae:()=>fe,af:()=>un,ag:()=>ut,ah:()=>P,ai:()=>g,aj:()=>C,ak:()=>te,al:()=>St,am:()=>Jt,an:()=>Pn,ao:()=>On,ap:()=>pn,aq:()=>gn,ar:()=>hn,as:()=>mt,at:()=>vt,au:()=>dt,av:()=>xt,aw:()=>Ot,ax:()=>Pt,ay:()=>Sn,az:()=>G,b:()=>a,c:()=>et,d:()=>at,e:()=>we,f:()=>_,g:()=>l,h:()=>At,i:()=>s,j:()=>S,k:()=>o,l:()=>se,m:()=>d,n:()=>f,o:()=>vn,p:()=>J,q:()=>me,r:()=>ue,s:()=>z,t:()=>U,u:()=>le,v:()=>u,w:()=>ve,x:()=>V,y:()=>Kt,z:()=>j});const i=function(){let e=0;return function(){return e++}}();function o(e){return null==e}function a(e){if(Array.isArray&&Array.isArray(e))return!0;const t=Object.prototype.toString.call(e);return"[object"===t.slice(0,7)&&"Array]"===t.slice(-6)}function s(e){return null!==e&&"[object Object]"===Object.prototype.toString.call(e)}const l=e=>("number"==typeof e||e instanceof Number)&&isFinite(+e);function c(e,t){return l(e)?e:t}function u(e,t){return void 0===e?t:e}const d=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100:e/t,f=(e,t)=>"string"==typeof e&&e.endsWith("%")?parseFloat(e)/100*t:+e;function h(e,t,n){if(e&&"function"==typeof e.call)return e.apply(n,t)}function p(e,t,n,r){let i,o,l;if(a(e))if(o=e.length,r)for(i=o-1;i>=0;i--)t.call(n,e[i],i);else for(i=0;i<o;i++)t.call(n,e[i],i);else if(s(e))for(l=Object.keys(e),o=l.length,i=0;i<o;i++)t.call(n,e[l[i]],l[i])}function g(e,t){let n,r,i,o;if(!e||!t||e.length!==t.length)return!1;for(n=0,r=e.length;n<r;++n)if(i=e[n],o=t[n],i.datasetIndex!==o.datasetIndex||i.index!==o.index)return!1;return!0}function m(e){if(a(e))return e.map(m);if(s(e)){const t=Object.create(null),n=Object.keys(e),r=n.length;let i=0;for(;i<r;++i)t[n[i]]=m(e[n[i]]);return t}return e}function v(e){return-1===["__proto__","prototype","constructor"].indexOf(e)}function b(e,t,n,r){if(!v(e))return;const i=t[e],o=n[e];s(i)&&s(o)?y(i,o,r):t[e]=m(o)}function y(e,t,n){const r=a(t)?t:[t],i=r.length;if(!s(e))return e;const o=(n=n||{}).merger||b;for(let a=0;a<i;++a){if(!s(t=r[a]))continue;const i=Object.keys(t);for(let r=0,a=i.length;r<a;++r)o(i[r],e,t,n)}return e}function x(e,t){return y(e,t,{merger:w})}function w(e,t,n){if(!v(e))return;const r=t[e],i=n[e];s(r)&&s(i)?x(r,i):Object.prototype.hasOwnProperty.call(t,e)||(t[e]=m(i))}const k={"":e=>e,x:e=>e.x,y:e=>e.y};function _(e,t){const n=k[t]||(k[t]=function(e){const t=function(e){const t=e.split("."),n=[];let r="";for(const e of t)r+=e,r.endsWith("\\")?r=r.slice(0,-1)+".":(n.push(r),r="");return n}(e);return e=>{for(const n of t){if(""===n)break;e=e&&e[n]}return e}}(t));return n(e)}function E(e){return e.charAt(0).toUpperCase()+e.slice(1)}const S=e=>void 0!==e,O=e=>"function"==typeof e,P=(e,t)=>{if(e.size!==t.size)return!1;for(const n of e)if(!t.has(n))return!1;return!0};function C(e){return"mouseup"===e.type||"click"===e.type||"contextmenu"===e.type}const M=Math.PI,T=2*M,N=T+M,A=Number.POSITIVE_INFINITY,R=M/180,L=M/2,D=M/4,I=2*M/3,j=Math.log10,z=Math.sign;function F(e){const t=Math.round(e);e=W(e,t,e/1e3)?t:e;const n=Math.pow(10,Math.floor(j(e))),r=e/n;return(r<=1?1:r<=2?2:r<=5?5:10)*n}function B(e){const t=[],n=Math.sqrt(e);let r;for(r=1;r<n;r++)e%r==0&&(t.push(r),t.push(e/r));return n===(0|n)&&t.push(n),t.sort(((e,t)=>e-t)).pop(),t}function V(e){return!isNaN(parseFloat(e))&&isFinite(e)}function W(e,t,n){return Math.abs(e-t)<n}function H(e,t){const n=Math.round(e);return n-t<=e&&n+t>=e}function $(e,t,n){let r,i,o;for(r=0,i=e.length;r<i;r++)o=e[r][n],isNaN(o)||(t.min=Math.min(t.min,o),t.max=Math.max(t.max,o))}function U(e){return e*(M/180)}function K(e){return e*(180/M)}function Y(e){if(!l(e))return;let t=1,n=0;for(;Math.round(e*t)/t!==e;)t*=10,n++;return n}function q(e,t){const n=t.x-e.x,r=t.y-e.y,i=Math.sqrt(n*n+r*r);let o=Math.atan2(r,n);return o<-.5*M&&(o+=T),{angle:o,distance:i}}function Q(e,t){return Math.sqrt(Math.pow(t.x-e.x,2)+Math.pow(t.y-e.y,2))}function X(e,t){return(e-t+N)%T-M}function G(e){return(e%T+T)%T}function J(e,t,n,r){const i=G(e),o=G(t),a=G(n),s=G(o-i),l=G(a-i),c=G(i-o),u=G(i-a);return i===o||i===a||r&&o===a||s>l&&c<u}function Z(e,t,n){return Math.max(t,Math.min(n,e))}function ee(e){return Z(e,-32768,32767)}function te(e,t,n,r=1e-6){return e>=Math.min(t,n)-r&&e<=Math.max(t,n)+r}function ne(e,t,n){n=n||(n=>e[n]<t);let r,i=e.length-1,o=0;for(;i-o>1;)r=o+i>>1,n(r)?o=r:i=r;return{lo:o,hi:i}}const re=(e,t,n,r)=>ne(e,n,r?r=>e[r][t]<=n:r=>e[r][t]<n),ie=(e,t,n)=>ne(e,n,(r=>e[r][t]>=n));function oe(e,t,n){let r=0,i=e.length;for(;r<i&&e[r]<t;)r++;for(;i>r&&e[i-1]>n;)i--;return r>0||i<e.length?e.slice(r,i):e}const ae=["push","pop","shift","splice","unshift"];function se(e,t){e._chartjs?e._chartjs.listeners.push(t):(Object.defineProperty(e,"_chartjs",{configurable:!0,enumerable:!1,value:{listeners:[t]}}),ae.forEach((t=>{const n="_onData"+E(t),r=e[t];Object.defineProperty(e,t,{configurable:!0,enumerable:!1,value(...t){const i=r.apply(this,t);return e._chartjs.listeners.forEach((e=>{"function"==typeof e[n]&&e[n](...t)})),i}})})))}function le(e,t){const n=e._chartjs;if(!n)return;const r=n.listeners,i=r.indexOf(t);-1!==i&&r.splice(i,1),r.length>0||(ae.forEach((t=>{delete e[t]})),delete e._chartjs)}function ce(e){const t=new Set;let n,r;for(n=0,r=e.length;n<r;++n)t.add(e[n]);return t.size===r?e:Array.from(t)}const ue="undefined"==typeof window?function(e){return e()}:window.requestAnimationFrame;function de(e,t,n){const r=n||(e=>Array.prototype.slice.call(e));let i=!1,o=[];return function(...n){o=r(n),i||(i=!0,ue.call(window,(()=>{i=!1,e.apply(t,o)})))}}function fe(e,t){let n;return function(...r){return t?(clearTimeout(n),n=setTimeout(e,t,r)):e.apply(this,r),t}}const he=e=>"start"===e?"left":"end"===e?"right":"center",pe=(e,t,n)=>"start"===e?t:"end"===e?n:(t+n)/2,ge=(e,t,n,r)=>e===(r?"left":"right")?n:"center"===e?(t+n)/2:t;function me(e,t,n){const r=t.length;let i=0,o=r;if(e._sorted){const{iScale:a,_parsed:s}=e,l=a.axis,{min:c,max:u,minDefined:d,maxDefined:f}=a.getUserBounds();d&&(i=Z(Math.min(re(s,a.axis,c).lo,n?r:re(t,l,a.getPixelForValue(c)).lo),0,r-1)),o=f?Z(Math.max(re(s,a.axis,u,!0).hi+1,n?0:re(t,l,a.getPixelForValue(u),!0).hi+1),i,r)-i:r-i}return{start:i,count:o}}function ve(e){const{xScale:t,yScale:n,_scaleRanges:r}=e,i={xmin:t.min,xmax:t.max,ymin:n.min,ymax:n.max};if(!r)return e._scaleRanges=i,!0;const o=r.xmin!==t.min||r.xmax!==t.max||r.ymin!==n.min||r.ymax!==n.max;return Object.assign(r,i),o}const be=e=>0===e||1===e,ye=(e,t,n)=>-Math.pow(2,10*(e-=1))*Math.sin((e-t)*T/n),xe=(e,t,n)=>Math.pow(2,-10*e)*Math.sin((e-t)*T/n)+1,we={linear:e=>e,easeInQuad:e=>e*e,easeOutQuad:e=>-e*(e-2),easeInOutQuad:e=>(e/=.5)<1?.5*e*e:-.5*(--e*(e-2)-1),easeInCubic:e=>e*e*e,easeOutCubic:e=>(e-=1)*e*e+1,easeInOutCubic:e=>(e/=.5)<1?.5*e*e*e:.5*((e-=2)*e*e+2),easeInQuart:e=>e*e*e*e,easeOutQuart:e=>-((e-=1)*e*e*e-1),easeInOutQuart:e=>(e/=.5)<1?.5*e*e*e*e:-.5*((e-=2)*e*e*e-2),easeInQuint:e=>e*e*e*e*e,easeOutQuint:e=>(e-=1)*e*e*e*e+1,easeInOutQuint:e=>(e/=.5)<1?.5*e*e*e*e*e:.5*((e-=2)*e*e*e*e+2),easeInSine:e=>1-Math.cos(e*L),easeOutSine:e=>Math.sin(e*L),easeInOutSine:e=>-.5*(Math.cos(M*e)-1),easeInExpo:e=>0===e?0:Math.pow(2,10*(e-1)),easeOutExpo:e=>1===e?1:1-Math.pow(2,-10*e),easeInOutExpo:e=>be(e)?e:e<.5?.5*Math.pow(2,10*(2*e-1)):.5*(2-Math.pow(2,-10*(2*e-1))),easeInCirc:e=>e>=1?e:-(Math.sqrt(1-e*e)-1),easeOutCirc:e=>Math.sqrt(1-(e-=1)*e),easeInOutCirc:e=>(e/=.5)<1?-.5*(Math.sqrt(1-e*e)-1):.5*(Math.sqrt(1-(e-=2)*e)+1),easeInElastic:e=>be(e)?e:ye(e,.075,.3),easeOutElastic:e=>be(e)?e:xe(e,.075,.3),easeInOutElastic(e){const t=.1125;return be(e)?e:e<.5?.5*ye(2*e,t,.45):.5+.5*xe(2*e-1,t,.45)},easeInBack(e){const t=1.70158;return e*e*((t+1)*e-t)},easeOutBack(e){const t=1.70158;return(e-=1)*e*((t+1)*e+t)+1},easeInOutBack(e){let t=1.70158;return(e/=.5)<1?e*e*((1+(t*=1.525))*e-t)*.5:.5*((e-=2)*e*((1+(t*=1.525))*e+t)+2)},easeInBounce:e=>1-we.easeOutBounce(1-e),easeOutBounce(e){const t=7.5625,n=2.75;return e<1/n?t*e*e:e<2/n?t*(e-=1.5/n)*e+.75:e<2.5/n?t*(e-=2.25/n)*e+.9375:t*(e-=2.625/n)*e+.984375},easeInOutBounce:e=>e<.5?.5*we.easeInBounce(2*e):.5*we.easeOutBounce(2*e-1)+.5};function ke(e){return e+.5|0}const _e=(e,t,n)=>Math.max(Math.min(e,n),t);function Ee(e){return _e(ke(2.55*e),0,255)}function Se(e){return _e(ke(255*e),0,255)}function Oe(e){return _e(ke(e/2.55)/100,0,1)}function Pe(e){return _e(ke(100*e),0,100)}const Ce={0:0,1:1,2:2,3:3,4:4,5:5,6:6,7:7,8:8,9:9,A:10,B:11,C:12,D:13,E:14,F:15,a:10,b:11,c:12,d:13,e:14,f:15},Me=[..."0123456789ABCDEF"],Te=e=>Me[15&e],Ne=e=>Me[(240&e)>>4]+Me[15&e],Ae=e=>(240&e)>>4==(15&e);const Re=/^(hsla?|hwb|hsv)\(\s*([-+.e\d]+)(?:deg)?[\s,]+([-+.e\d]+)%[\s,]+([-+.e\d]+)%(?:[\s,]+([-+.e\d]+)(%)?)?\s*\)$/;function Le(e,t,n){const r=t*Math.min(n,1-n),i=(t,i=(t+e/30)%12)=>n-r*Math.max(Math.min(i-3,9-i,1),-1);return[i(0),i(8),i(4)]}function De(e,t,n){const r=(r,i=(r+e/60)%6)=>n-n*t*Math.max(Math.min(i,4-i,1),0);return[r(5),r(3),r(1)]}function Ie(e,t,n){const r=Le(e,1,.5);let i;for(t+n>1&&(i=1/(t+n),t*=i,n*=i),i=0;i<3;i++)r[i]*=1-t-n,r[i]+=t;return r}function je(e){const t=e.r/255,n=e.g/255,r=e.b/255,i=Math.max(t,n,r),o=Math.min(t,n,r),a=(i+o)/2;let s,l,c;return i!==o&&(c=i-o,l=a>.5?c/(2-i-o):c/(i+o),s=function(e,t,n,r,i){return e===i?(t-n)/r+(t<n?6:0):t===i?(n-e)/r+2:(e-t)/r+4}(t,n,r,c,i),s=60*s+.5),[0|s,l||0,a]}function ze(e,t,n,r){return(Array.isArray(t)?e(t[0],t[1],t[2]):e(t,n,r)).map(Se)}function Fe(e,t,n){return ze(Le,e,t,n)}function Be(e){return(e%360+360)%360}const Ve={x:"dark",Z:"light",Y:"re",X:"blu",W:"gr",V:"medium",U:"slate",A:"ee",T:"ol",S:"or",B:"ra",C:"lateg",D:"ights",R:"in",Q:"turquois",E:"hi",P:"ro",O:"al",N:"le",M:"de",L:"yello",F:"en",K:"ch",G:"arks",H:"ea",I:"ightg",J:"wh"},We={OiceXe:"f0f8ff",antiquewEte:"faebd7",aqua:"ffff",aquamarRe:"7fffd4",azuY:"f0ffff",beige:"f5f5dc",bisque:"ffe4c4",black:"0",blanKedOmond:"ffebcd",Xe:"ff",XeviTet:"8a2be2",bPwn:"a52a2a",burlywood:"deb887",caMtXe:"5f9ea0",KartYuse:"7fff00",KocTate:"d2691e",cSO:"ff7f50",cSnflowerXe:"6495ed",cSnsilk:"fff8dc",crimson:"dc143c",cyan:"ffff",xXe:"8b",xcyan:"8b8b",xgTMnPd:"b8860b",xWay:"a9a9a9",xgYF:"6400",xgYy:"a9a9a9",xkhaki:"bdb76b",xmagFta:"8b008b",xTivegYF:"556b2f",xSange:"ff8c00",xScEd:"9932cc",xYd:"8b0000",xsOmon:"e9967a",xsHgYF:"8fbc8f",xUXe:"483d8b",xUWay:"2f4f4f",xUgYy:"2f4f4f",xQe:"ced1",xviTet:"9400d3",dAppRk:"ff1493",dApskyXe:"bfff",dimWay:"696969",dimgYy:"696969",dodgerXe:"1e90ff",fiYbrick:"b22222",flSOwEte:"fffaf0",foYstWAn:"228b22",fuKsia:"ff00ff",gaRsbSo:"dcdcdc",ghostwEte:"f8f8ff",gTd:"ffd700",gTMnPd:"daa520",Way:"808080",gYF:"8000",gYFLw:"adff2f",gYy:"808080",honeyMw:"f0fff0",hotpRk:"ff69b4",RdianYd:"cd5c5c",Rdigo:"4b0082",ivSy:"fffff0",khaki:"f0e68c",lavFMr:"e6e6fa",lavFMrXsh:"fff0f5",lawngYF:"7cfc00",NmoncEffon:"fffacd",ZXe:"add8e6",ZcSO:"f08080",Zcyan:"e0ffff",ZgTMnPdLw:"fafad2",ZWay:"d3d3d3",ZgYF:"90ee90",ZgYy:"d3d3d3",ZpRk:"ffb6c1",ZsOmon:"ffa07a",ZsHgYF:"20b2aa",ZskyXe:"87cefa",ZUWay:"778899",ZUgYy:"778899",ZstAlXe:"b0c4de",ZLw:"ffffe0",lime:"ff00",limegYF:"32cd32",lRF:"faf0e6",magFta:"ff00ff",maPon:"800000",VaquamarRe:"66cdaa",VXe:"cd",VScEd:"ba55d3",VpurpN:"9370db",VsHgYF:"3cb371",VUXe:"7b68ee",VsprRggYF:"fa9a",VQe:"48d1cc",VviTetYd:"c71585",midnightXe:"191970",mRtcYam:"f5fffa",mistyPse:"ffe4e1",moccasR:"ffe4b5",navajowEte:"ffdead",navy:"80",Tdlace:"fdf5e6",Tive:"808000",TivedBb:"6b8e23",Sange:"ffa500",SangeYd:"ff4500",ScEd:"da70d6",pOegTMnPd:"eee8aa",pOegYF:"98fb98",pOeQe:"afeeee",pOeviTetYd:"db7093",papayawEp:"ffefd5",pHKpuff:"ffdab9",peru:"cd853f",pRk:"ffc0cb",plum:"dda0dd",powMrXe:"b0e0e6",purpN:"800080",YbeccapurpN:"663399",Yd:"ff0000",Psybrown:"bc8f8f",PyOXe:"4169e1",saddNbPwn:"8b4513",sOmon:"fa8072",sandybPwn:"f4a460",sHgYF:"2e8b57",sHshell:"fff5ee",siFna:"a0522d",silver:"c0c0c0",skyXe:"87ceeb",UXe:"6a5acd",UWay:"708090",UgYy:"708090",snow:"fffafa",sprRggYF:"ff7f",stAlXe:"4682b4",tan:"d2b48c",teO:"8080",tEstN:"d8bfd8",tomato:"ff6347",Qe:"40e0d0",viTet:"ee82ee",JHt:"f5deb3",wEte:"ffffff",wEtesmoke:"f5f5f5",Lw:"ffff00",LwgYF:"9acd32"};let He;const $e=/^rgba?\(\s*([-+.\d]+)(%)?[\s,]+([-+.e\d]+)(%)?[\s,]+([-+.e\d]+)(%)?(?:[\s,/]+([-+.e\d]+)(%)?)?\s*\)$/,Ue=e=>e<=.0031308?12.92*e:1.055*Math.pow(e,1/2.4)-.055,Ke=e=>e<=.04045?e/12.92:Math.pow((e+.055)/1.055,2.4);function Ye(e,t,n){if(e){let r=je(e);r[t]=Math.max(0,Math.min(r[t]+r[t]*n,0===t?360:1)),r=Fe(r),e.r=r[0],e.g=r[1],e.b=r[2]}}function qe(e,t){return e?Object.assign(t||{},e):e}function Qe(e){var t={r:0,g:0,b:0,a:255};return Array.isArray(e)?e.length>=3&&(t={r:e[0],g:e[1],b:e[2],a:255},e.length>3&&(t.a=Se(e[3]))):(t=qe(e,{r:0,g:0,b:0,a:1})).a=Se(t.a),t}function Xe(e){return"r"===e.charAt(0)?function(e){const t=$e.exec(e);let n,r,i,o=255;if(t){if(t[7]!==n){const e=+t[7];o=t[8]?Ee(e):_e(255*e,0,255)}return n=+t[1],r=+t[3],i=+t[5],n=255&(t[2]?Ee(n):_e(n,0,255)),r=255&(t[4]?Ee(r):_e(r,0,255)),i=255&(t[6]?Ee(i):_e(i,0,255)),{r:n,g:r,b:i,a:o}}}(e):function(e){const t=Re.exec(e);let n,r=255;if(!t)return;t[5]!==n&&(r=t[6]?Ee(+t[5]):Se(+t[5]));const i=Be(+t[2]),o=+t[3]/100,a=+t[4]/100;return n="hwb"===t[1]?function(e,t,n){return ze(Ie,e,t,n)}(i,o,a):"hsv"===t[1]?function(e,t,n){return ze(De,e,t,n)}(i,o,a):Fe(i,o,a),{r:n[0],g:n[1],b:n[2],a:r}}(e)}class Ge{constructor(e){if(e instanceof Ge)return e;const t=typeof e;let n;var r,i,o;"object"===t?n=Qe(e):"string"===t&&(o=(r=e).length,"#"===r[0]&&(4===o||5===o?i={r:255&17*Ce[r[1]],g:255&17*Ce[r[2]],b:255&17*Ce[r[3]],a:5===o?17*Ce[r[4]]:255}:7!==o&&9!==o||(i={r:Ce[r[1]]<<4|Ce[r[2]],g:Ce[r[3]]<<4|Ce[r[4]],b:Ce[r[5]]<<4|Ce[r[6]],a:9===o?Ce[r[7]]<<4|Ce[r[8]]:255})),n=i||function(e){He||(He=function(){const e={},t=Object.keys(We),n=Object.keys(Ve);let r,i,o,a,s;for(r=0;r<t.length;r++){for(a=s=t[r],i=0;i<n.length;i++)o=n[i],s=s.replace(o,Ve[o]);o=parseInt(We[a],16),e[s]=[o>>16&255,o>>8&255,255&o]}return e}(),He.transparent=[0,0,0,0]);const t=He[e.toLowerCase()];return t&&{r:t[0],g:t[1],b:t[2],a:4===t.length?t[3]:255}}(e)||Xe(e)),this._rgb=n,this._valid=!!n}get valid(){return this._valid}get rgb(){var e=qe(this._rgb);return e&&(e.a=Oe(e.a)),e}set rgb(e){this._rgb=Qe(e)}rgbString(){return this._valid?(e=this._rgb)&&(e.a<255?`rgba(${e.r}, ${e.g}, ${e.b}, ${Oe(e.a)})`:`rgb(${e.r}, ${e.g}, ${e.b})`):void 0;var e}hexString(){return this._valid?(e=this._rgb,t=(e=>Ae(e.r)&&Ae(e.g)&&Ae(e.b)&&Ae(e.a))(e)?Te:Ne,e?"#"+t(e.r)+t(e.g)+t(e.b)+((e,t)=>e<255?t(e):"")(e.a,t):void 0):void 0;var e,t}hslString(){return this._valid?function(e){if(!e)return;const t=je(e),n=t[0],r=Pe(t[1]),i=Pe(t[2]);return e.a<255?`hsla(${n}, ${r}%, ${i}%, ${Oe(e.a)})`:`hsl(${n}, ${r}%, ${i}%)`}(this._rgb):void 0}mix(e,t){if(e){const n=this.rgb,r=e.rgb;let i;const o=t===i?.5:t,a=2*o-1,s=n.a-r.a,l=((a*s==-1?a:(a+s)/(1+a*s))+1)/2;i=1-l,n.r=255&l*n.r+i*r.r+.5,n.g=255&l*n.g+i*r.g+.5,n.b=255&l*n.b+i*r.b+.5,n.a=o*n.a+(1-o)*r.a,this.rgb=n}return this}interpolate(e,t){return e&&(this._rgb=function(e,t,n){const r=Ke(Oe(e.r)),i=Ke(Oe(e.g)),o=Ke(Oe(e.b));return{r:Se(Ue(r+n*(Ke(Oe(t.r))-r))),g:Se(Ue(i+n*(Ke(Oe(t.g))-i))),b:Se(Ue(o+n*(Ke(Oe(t.b))-o))),a:e.a+n*(t.a-e.a)}}(this._rgb,e._rgb,t)),this}clone(){return new Ge(this.rgb)}alpha(e){return this._rgb.a=Se(e),this}clearer(e){return this._rgb.a*=1-e,this}greyscale(){const e=this._rgb,t=ke(.3*e.r+.59*e.g+.11*e.b);return e.r=e.g=e.b=t,this}opaquer(e){return this._rgb.a*=1+e,this}negate(){const e=this._rgb;return e.r=255-e.r,e.g=255-e.g,e.b=255-e.b,this}lighten(e){return Ye(this._rgb,2,e),this}darken(e){return Ye(this._rgb,2,-e),this}saturate(e){return Ye(this._rgb,1,e),this}desaturate(e){return Ye(this._rgb,1,-e),this}rotate(e){return function(e,t){var n=je(e);n[0]=Be(n[0]+t),n=Fe(n),e.r=n[0],e.g=n[1],e.b=n[2]}(this._rgb,e),this}}function Je(e){return new Ge(e)}function Ze(e){if(e&&"object"==typeof e){const t=e.toString();return"[object CanvasPattern]"===t||"[object CanvasGradient]"===t}return!1}function et(e){return Ze(e)?e:Je(e)}function tt(e){return Ze(e)?e:Je(e).saturate(.5).darken(.1).hexString()}const nt=Object.create(null),rt=Object.create(null);function it(e,t){if(!t)return e;const n=t.split(".");for(let t=0,r=n.length;t<r;++t){const r=n[t];e=e[r]||(e[r]=Object.create(null))}return e}function ot(e,t,n){return"string"==typeof t?y(it(e,t),n):y(it(e,""),t)}var at=new class{constructor(e){this.animation=void 0,this.backgroundColor="rgba(0,0,0,0.1)",this.borderColor="rgba(0,0,0,0.1)",this.color="#666",this.datasets={},this.devicePixelRatio=e=>e.chart.platform.getDevicePixelRatio(),this.elements={},this.events=["mousemove","mouseout","click","touchstart","touchmove"],this.font={family:"'Helvetica Neue', 'Helvetica', 'Arial', sans-serif",size:12,style:"normal",lineHeight:1.2,weight:null},this.hover={},this.hoverBackgroundColor=(e,t)=>tt(t.backgroundColor),this.hoverBorderColor=(e,t)=>tt(t.borderColor),this.hoverColor=(e,t)=>tt(t.color),this.indexAxis="x",this.interaction={mode:"nearest",intersect:!0,includeInvisible:!1},this.maintainAspectRatio=!0,this.onHover=null,this.onClick=null,this.parsing=!0,this.plugins={},this.responsive=!0,this.scale=void 0,this.scales={},this.showLine=!0,this.drawActiveElementsOnTop=!0,this.describe(e)}set(e,t){return ot(this,e,t)}get(e){return it(this,e)}describe(e,t){return ot(rt,e,t)}override(e,t){return ot(nt,e,t)}route(e,t,n,r){const i=it(this,e),o=it(this,n),a="_"+t;Object.defineProperties(i,{[a]:{value:i[t],writable:!0},[t]:{enumerable:!0,get(){const e=this[a],t=o[r];return s(e)?Object.assign({},t,e):u(e,t)},set(e){this[a]=e}}})}}({_scriptable:e=>!e.startsWith("on"),_indexable:e=>"events"!==e,hover:{_fallback:"interaction"},interaction:{_scriptable:!1,_indexable:!1}});function st(e,t,n,r,i){let o=t[i];return o||(o=t[i]=e.measureText(i).width,n.push(i)),o>r&&(r=o),r}function lt(e,t,n,r){let i=(r=r||{}).data=r.data||{},o=r.garbageCollect=r.garbageCollect||[];r.font!==t&&(i=r.data={},o=r.garbageCollect=[],r.font=t),e.save(),e.font=t;let s=0;const l=n.length;let c,u,d,f,h;for(c=0;c<l;c++)if(f=n[c],null!=f&&!0!==a(f))s=st(e,i,o,s,f);else if(a(f))for(u=0,d=f.length;u<d;u++)h=f[u],null==h||a(h)||(s=st(e,i,o,s,h));e.restore();const p=o.length/2;if(p>n.length){for(c=0;c<p;c++)delete i[o[c]];o.splice(0,p)}return s}function ct(e,t,n){const r=e.currentDevicePixelRatio,i=0!==n?Math.max(n/2,.5):0;return Math.round((t-i)*r)/r+i}function ut(e,t){(t=t||e.getContext("2d")).save(),t.resetTransform(),t.clearRect(0,0,e.width,e.height),t.restore()}function dt(e,t,n,r){ft(e,t,n,r,null)}function ft(e,t,n,r,i){let o,a,s,l,c,u;const d=t.pointStyle,f=t.rotation,h=t.radius;let p=(f||0)*R;if(d&&"object"==typeof d&&(o=d.toString(),"[object HTMLImageElement]"===o||"[object HTMLCanvasElement]"===o))return e.save(),e.translate(n,r),e.rotate(p),e.drawImage(d,-d.width/2,-d.height/2,d.width,d.height),void e.restore();if(!(isNaN(h)||h<=0)){switch(e.beginPath(),d){default:i?e.ellipse(n,r,i/2,h,0,0,T):e.arc(n,r,h,0,T),e.closePath();break;case"triangle":e.moveTo(n+Math.sin(p)*h,r-Math.cos(p)*h),p+=I,e.lineTo(n+Math.sin(p)*h,r-Math.cos(p)*h),p+=I,e.lineTo(n+Math.sin(p)*h,r-Math.cos(p)*h),e.closePath();break;case"rectRounded":c=.516*h,l=h-c,a=Math.cos(p+D)*l,s=Math.sin(p+D)*l,e.arc(n-a,r-s,c,p-M,p-L),e.arc(n+s,r-a,c,p-L,p),e.arc(n+a,r+s,c,p,p+L),e.arc(n-s,r+a,c,p+L,p+M),e.closePath();break;case"rect":if(!f){l=Math.SQRT1_2*h,u=i?i/2:l,e.rect(n-u,r-l,2*u,2*l);break}p+=D;case"rectRot":a=Math.cos(p)*h,s=Math.sin(p)*h,e.moveTo(n-a,r-s),e.lineTo(n+s,r-a),e.lineTo(n+a,r+s),e.lineTo(n-s,r+a),e.closePath();break;case"crossRot":p+=D;case"cross":a=Math.cos(p)*h,s=Math.sin(p)*h,e.moveTo(n-a,r-s),e.lineTo(n+a,r+s),e.moveTo(n+s,r-a),e.lineTo(n-s,r+a);break;case"star":a=Math.cos(p)*h,s=Math.sin(p)*h,e.moveTo(n-a,r-s),e.lineTo(n+a,r+s),e.moveTo(n+s,r-a),e.lineTo(n-s,r+a),p+=D,a=Math.cos(p)*h,s=Math.sin(p)*h,e.moveTo(n-a,r-s),e.lineTo(n+a,r+s),e.moveTo(n+s,r-a),e.lineTo(n-s,r+a);break;case"line":a=i?i/2:Math.cos(p)*h,s=Math.sin(p)*h,e.moveTo(n-a,r-s),e.lineTo(n+a,r+s);break;case"dash":e.moveTo(n,r),e.lineTo(n+Math.cos(p)*h,r+Math.sin(p)*h)}e.fill(),t.borderWidth>0&&e.stroke()}}function ht(e,t,n){return n=n||.5,!t||e&&e.x>t.left-n&&e.x<t.right+n&&e.y>t.top-n&&e.y<t.bottom+n}function pt(e,t){e.save(),e.beginPath(),e.rect(t.left,t.top,t.right-t.left,t.bottom-t.top),e.clip()}function gt(e){e.restore()}function mt(e,t,n,r,i){if(!t)return e.lineTo(n.x,n.y);if("middle"===i){const r=(t.x+n.x)/2;e.lineTo(r,t.y),e.lineTo(r,n.y)}else"after"===i!=!!r?e.lineTo(t.x,n.y):e.lineTo(n.x,t.y);e.lineTo(n.x,n.y)}function vt(e,t,n,r){if(!t)return e.lineTo(n.x,n.y);e.bezierCurveTo(r?t.cp1x:t.cp2x,r?t.cp1y:t.cp2y,r?n.cp2x:n.cp1x,r?n.cp2y:n.cp1y,n.x,n.y)}function bt(e,t,n,r,i,s={}){const l=a(t)?t:[t],c=s.strokeWidth>0&&""!==s.strokeColor;let u,d;for(e.save(),e.font=i.string,function(e,t){t.translation&&e.translate(t.translation[0],t.translation[1]),o(t.rotation)||e.rotate(t.rotation),t.color&&(e.fillStyle=t.color),t.textAlign&&(e.textAlign=t.textAlign),t.textBaseline&&(e.textBaseline=t.textBaseline)}(e,s),u=0;u<l.length;++u)d=l[u],c&&(s.strokeColor&&(e.strokeStyle=s.strokeColor),o(s.strokeWidth)||(e.lineWidth=s.strokeWidth),e.strokeText(d,n,r,s.maxWidth)),e.fillText(d,n,r,s.maxWidth),yt(e,n,r,d,s),r+=i.lineHeight;e.restore()}function yt(e,t,n,r,i){if(i.strikethrough||i.underline){const o=e.measureText(r),a=t-o.actualBoundingBoxLeft,s=t+o.actualBoundingBoxRight,l=n-o.actualBoundingBoxAscent,c=n+o.actualBoundingBoxDescent,u=i.strikethrough?(l+c)/2:c;e.strokeStyle=e.fillStyle,e.beginPath(),e.lineWidth=i.decorationWidth||2,e.moveTo(a,u),e.lineTo(s,u),e.stroke()}}function xt(e,t){const{x:n,y:r,w:i,h:o,radius:a}=t;e.arc(n+a.topLeft,r+a.topLeft,a.topLeft,-L,M,!0),e.lineTo(n,r+o-a.bottomLeft),e.arc(n+a.bottomLeft,r+o-a.bottomLeft,a.bottomLeft,M,L,!0),e.lineTo(n+i-a.bottomRight,r+o),e.arc(n+i-a.bottomRight,r+o-a.bottomRight,a.bottomRight,L,0,!0),e.lineTo(n+i,r+a.topRight),e.arc(n+i-a.topRight,r+a.topRight,a.topRight,0,-L,!0),e.lineTo(n+a.topLeft,r)}const wt=new RegExp(/^(normal|(\d+(?:\.\d+)?)(px|em|%)?)$/),kt=new RegExp(/^(normal|italic|initial|inherit|unset|(oblique( -?[0-9]?[0-9]deg)?))$/);function _t(e,t){const n=(""+e).match(wt);if(!n||"normal"===n[1])return 1.2*t;switch(e=+n[2],n[3]){case"px":return e;case"%":e/=100}return t*e}const Et=e=>+e||0;function St(e,t){const n={},r=s(t),i=r?Object.keys(t):t,o=s(e)?r?n=>u(e[n],e[t[n]]):t=>e[t]:()=>e;for(const e of i)n[e]=Et(o(e));return n}function Ot(e){return St(e,{top:"y",right:"x",bottom:"y",left:"x"})}function Pt(e){return St(e,["topLeft","topRight","bottomLeft","bottomRight"])}function Ct(e){const t=Ot(e);return t.width=t.left+t.right,t.height=t.top+t.bottom,t}function Mt(e,t){e=e||{},t=t||at.font;let n=u(e.size,t.size);"string"==typeof n&&(n=parseInt(n,10));let r=u(e.style,t.style);r&&!(""+r).match(kt)&&(console.warn('Invalid font style specified: "'+r+'"'),r="");const i={family:u(e.family,t.family),lineHeight:_t(u(e.lineHeight,t.lineHeight),n),size:n,style:r,weight:u(e.weight,t.weight),string:""};return i.string=function(e){return!e||o(e.size)||o(e.family)?null:(e.style?e.style+" ":"")+(e.weight?e.weight+" ":"")+e.size+"px "+e.family}(i),i}function Tt(e,t,n,r){let i,o,s,l=!0;for(i=0,o=e.length;i<o;++i)if(s=e[i],void 0!==s&&(void 0!==t&&"function"==typeof s&&(s=s(t),l=!1),void 0!==n&&a(s)&&(s=s[n%s.length],l=!1),void 0!==s))return r&&!l&&(r.cacheable=!1),s}function Nt(e,t,n){const{min:r,max:i}=e,o=f(t,(i-r)/2),a=(e,t)=>n&&0===e?0:e+t;return{min:a(r,-Math.abs(o)),max:a(i,o)}}function At(e,t){return Object.assign(Object.create(e),t)}function Rt(e,t=[""],n=e,r,i=()=>e[0]){S(r)||(r=$t("_fallback",e));const o={[Symbol.toStringTag]:"Object",_cacheable:!0,_scopes:e,_rootScopes:n,_fallback:r,_getTarget:i,override:i=>Rt([i,...e],t,n,r)};return new Proxy(o,{deleteProperty:(t,n)=>(delete t[n],delete t._keys,delete e[0][n],!0),get:(n,r)=>zt(n,r,(()=>function(e,t,n,r){let i;for(const o of t)if(i=$t(It(o,e),n),S(i))return jt(e,i)?Wt(n,r,e,i):i}(r,t,e,n))),getOwnPropertyDescriptor:(e,t)=>Reflect.getOwnPropertyDescriptor(e._scopes[0],t),getPrototypeOf:()=>Reflect.getPrototypeOf(e[0]),has:(e,t)=>Ut(e).includes(t),ownKeys:e=>Ut(e),set(e,t,n){const r=e._storage||(e._storage=i());return e[t]=r[t]=n,delete e._keys,!0}})}function Lt(e,t,n,r){const i={_cacheable:!1,_proxy:e,_context:t,_subProxy:n,_stack:new Set,_descriptors:Dt(e,r),setContext:t=>Lt(e,t,n,r),override:i=>Lt(e.override(i),t,n,r)};return new Proxy(i,{deleteProperty:(t,n)=>(delete t[n],delete e[n],!0),get:(e,t,n)=>zt(e,t,(()=>function(e,t,n){const{_proxy:r,_context:i,_subProxy:o,_descriptors:l}=e;let c=r[t];return O(c)&&l.isScriptable(t)&&(c=function(e,t,n,r){const{_proxy:i,_context:o,_subProxy:a,_stack:s}=n;if(s.has(e))throw new Error("Recursion detected: "+Array.from(s).join("->")+"->"+e);return s.add(e),t=t(o,a||r),s.delete(e),jt(e,t)&&(t=Wt(i._scopes,i,e,t)),t}(t,c,e,n)),a(c)&&c.length&&(c=function(e,t,n,r){const{_proxy:i,_context:o,_subProxy:a,_descriptors:l}=n;if(S(o.index)&&r(e))t=t[o.index%t.length];else if(s(t[0])){const n=t,r=i._scopes.filter((e=>e!==n));t=[];for(const s of n){const n=Wt(r,i,e,s);t.push(Lt(n,o,a&&a[e],l))}}return t}(t,c,e,l.isIndexable)),jt(t,c)&&(c=Lt(c,i,o&&o[t],l)),c}(e,t,n))),getOwnPropertyDescriptor:(t,n)=>t._descriptors.allKeys?Reflect.has(e,n)?{enumerable:!0,configurable:!0}:void 0:Reflect.getOwnPropertyDescriptor(e,n),getPrototypeOf:()=>Reflect.getPrototypeOf(e),has:(t,n)=>Reflect.has(e,n),ownKeys:()=>Reflect.ownKeys(e),set:(t,n,r)=>(e[n]=r,delete t[n],!0)})}function Dt(e,t={scriptable:!0,indexable:!0}){const{_scriptable:n=t.scriptable,_indexable:r=t.indexable,_allKeys:i=t.allKeys}=e;return{allKeys:i,scriptable:n,indexable:r,isScriptable:O(n)?n:()=>n,isIndexable:O(r)?r:()=>r}}const It=(e,t)=>e?e+E(t):t,jt=(e,t)=>s(t)&&"adapters"!==e&&(null===Object.getPrototypeOf(t)||t.constructor===Object);function zt(e,t,n){if(Object.prototype.hasOwnProperty.call(e,t))return e[t];const r=n();return e[t]=r,r}function Ft(e,t,n){return O(e)?e(t,n):e}const Bt=(e,t)=>!0===e?t:"string"==typeof e?_(t,e):void 0;function Vt(e,t,n,r,i){for(const o of t){const t=Bt(n,o);if(t){e.add(t);const o=Ft(t._fallback,n,i);if(S(o)&&o!==n&&o!==r)return o}else if(!1===t&&S(r)&&n!==r)return null}return!1}function Wt(e,t,n,r){const i=t._rootScopes,o=Ft(t._fallback,n,r),l=[...e,...i],c=new Set;c.add(r);let u=Ht(c,l,n,o||n,r);return null!==u&&(!S(o)||o===n||(u=Ht(c,l,o,u,r),null!==u))&&Rt(Array.from(c),[""],i,o,(()=>function(e,t,n){const r=e._getTarget();t in r||(r[t]={});const i=r[t];return a(i)&&s(n)?n:i}(t,n,r)))}function Ht(e,t,n,r,i){for(;n;)n=Vt(e,t,n,r,i);return n}function $t(e,t){for(const n of t){if(!n)continue;const t=n[e];if(S(t))return t}}function Ut(e){let t=e._keys;return t||(t=e._keys=function(e){const t=new Set;for(const n of e)for(const e of Object.keys(n).filter((e=>!e.startsWith("_"))))t.add(e);return Array.from(t)}(e._scopes)),t}function Kt(e,t,n,r){const{iScale:i}=e,{key:o="r"}=this._parsing,a=new Array(r);let s,l,c,u;for(s=0,l=r;s<l;++s)c=s+n,u=t[c],a[s]={r:i.parse(_(u,o),c)};return a}const Yt=Number.EPSILON||1e-14,qt=(e,t)=>t<e.length&&!e[t].skip&&e[t],Qt=e=>"x"===e?"y":"x";function Xt(e,t,n,r){const i=e.skip?t:e,o=t,a=n.skip?t:n,s=Q(o,i),l=Q(a,o);let c=s/(s+l),u=l/(s+l);c=isNaN(c)?0:c,u=isNaN(u)?0:u;const d=r*c,f=r*u;return{previous:{x:o.x-d*(a.x-i.x),y:o.y-d*(a.y-i.y)},next:{x:o.x+f*(a.x-i.x),y:o.y+f*(a.y-i.y)}}}function Gt(e,t,n){return Math.max(Math.min(e,n),t)}function Jt(e,t,n,r,i){let o,a,s,l;if(t.spanGaps&&(e=e.filter((e=>!e.skip))),"monotone"===t.cubicInterpolationMode)!function(e,t="x"){const n=Qt(t),r=e.length,i=Array(r).fill(0),o=Array(r);let a,s,l,c=qt(e,0);for(a=0;a<r;++a)if(s=l,l=c,c=qt(e,a+1),l){if(c){const e=c[t]-l[t];i[a]=0!==e?(c[n]-l[n])/e:0}o[a]=s?c?z(i[a-1])!==z(i[a])?0:(i[a-1]+i[a])/2:i[a-1]:i[a]}!function(e,t,n){const r=e.length;let i,o,a,s,l,c=qt(e,0);for(let u=0;u<r-1;++u)l=c,c=qt(e,u+1),l&&c&&(W(t[u],0,Yt)?n[u]=n[u+1]=0:(i=n[u]/t[u],o=n[u+1]/t[u],s=Math.pow(i,2)+Math.pow(o,2),s<=9||(a=3/Math.sqrt(s),n[u]=i*a*t[u],n[u+1]=o*a*t[u])))}(e,i,o),function(e,t,n="x"){const r=Qt(n),i=e.length;let o,a,s,l=qt(e,0);for(let c=0;c<i;++c){if(a=s,s=l,l=qt(e,c+1),!s)continue;const i=s[n],u=s[r];a&&(o=(i-a[n])/3,s[`cp1${n}`]=i-o,s[`cp1${r}`]=u-o*t[c]),l&&(o=(l[n]-i)/3,s[`cp2${n}`]=i+o,s[`cp2${r}`]=u+o*t[c])}}(e,o,t)}(e,i);else{let n=r?e[e.length-1]:e[0];for(o=0,a=e.length;o<a;++o)s=e[o],l=Xt(n,s,e[Math.min(o+1,a-(r?0:1))%a],t.tension),s.cp1x=l.previous.x,s.cp1y=l.previous.y,s.cp2x=l.next.x,s.cp2y=l.next.y,n=s}t.capBezierPoints&&function(e,t){let n,r,i,o,a,s=ht(e[0],t);for(n=0,r=e.length;n<r;++n)a=o,o=s,s=n<r-1&&ht(e[n+1],t),o&&(i=e[n],a&&(i.cp1x=Gt(i.cp1x,t.left,t.right),i.cp1y=Gt(i.cp1y,t.top,t.bottom)),s&&(i.cp2x=Gt(i.cp2x,t.left,t.right),i.cp2y=Gt(i.cp2y,t.top,t.bottom)))}(e,n)}function Zt(){return"undefined"!=typeof window&&"undefined"!=typeof document}function en(e){let t=e.parentNode;return t&&"[object ShadowRoot]"===t.toString()&&(t=t.host),t}function tn(e,t,n){let r;return"string"==typeof e?(r=parseInt(e,10),-1!==e.indexOf("%")&&(r=r/100*t.parentNode[n])):r=e,r}const nn=e=>window.getComputedStyle(e,null),rn=["top","right","bottom","left"];function on(e,t,n){const r={};n=n?"-"+n:"";for(let i=0;i<4;i++){const o=rn[i];r[o]=parseFloat(e[t+"-"+o+n])||0}return r.width=r.left+r.right,r.height=r.top+r.bottom,r}const an=(e,t,n)=>(e>0||t>0)&&(!n||!n.shadowRoot);function sn(e,t){if("native"in e)return e;const{canvas:n,currentDevicePixelRatio:r}=t,i=nn(n),o="border-box"===i.boxSizing,a=on(i,"padding"),s=on(i,"border","width"),{x:l,y:c,box:u}=function(e,t){const n=e.touches,r=n&&n.length?n[0]:e,{offsetX:i,offsetY:o}=r;let a,s,l=!1;if(an(i,o,e.target))a=i,s=o;else{const e=t.getBoundingClientRect();a=r.clientX-e.left,s=r.clientY-e.top,l=!0}return{x:a,y:s,box:l}}(e,n),d=a.left+(u&&s.left),f=a.top+(u&&s.top);let{width:h,height:p}=t;return o&&(h-=a.width+s.width,p-=a.height+s.height),{x:Math.round((l-d)/h*n.width/r),y:Math.round((c-f)/p*n.height/r)}}const ln=e=>Math.round(10*e)/10;function cn(e,t,n,r){const i=nn(e),o=on(i,"margin"),a=tn(i.maxWidth,e,"clientWidth")||A,s=tn(i.maxHeight,e,"clientHeight")||A,l=function(e,t,n){let r,i;if(void 0===t||void 0===n){const o=en(e);if(o){const e=o.getBoundingClientRect(),a=nn(o),s=on(a,"border","width"),l=on(a,"padding");t=e.width-l.width-s.width,n=e.height-l.height-s.height,r=tn(a.maxWidth,o,"clientWidth"),i=tn(a.maxHeight,o,"clientHeight")}else t=e.clientWidth,n=e.clientHeight}return{width:t,height:n,maxWidth:r||A,maxHeight:i||A}}(e,t,n);let{width:c,height:u}=l;if("content-box"===i.boxSizing){const e=on(i,"border","width"),t=on(i,"padding");c-=t.width+e.width,u-=t.height+e.height}return c=Math.max(0,c-o.width),u=Math.max(0,r?Math.floor(c/r):u-o.height),c=ln(Math.min(c,a,l.maxWidth)),u=ln(Math.min(u,s,l.maxHeight)),c&&!u&&(u=ln(c/2)),{width:c,height:u}}function un(e,t,n){const r=t||1,i=Math.floor(e.height*r),o=Math.floor(e.width*r);e.height=i/r,e.width=o/r;const a=e.canvas;return a.style&&(n||!a.style.height&&!a.style.width)&&(a.style.height=`${e.height}px`,a.style.width=`${e.width}px`),(e.currentDevicePixelRatio!==r||a.height!==i||a.width!==o)&&(e.currentDevicePixelRatio=r,a.height=i,a.width=o,e.ctx.setTransform(r,0,0,r,0,0),!0)}const dn=function(){let e=!1;try{const t={get passive(){return e=!0,!1}};window.addEventListener("test",null,t),window.removeEventListener("test",null,t)}catch(e){}return e}();function fn(e,t){const n=function(e,t){return nn(e).getPropertyValue(t)}(e,t),r=n&&n.match(/^(\d+)(\.\d+)?px$/);return r?+r[1]:void 0}function hn(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:e.y+n*(t.y-e.y)}}function pn(e,t,n,r){return{x:e.x+n*(t.x-e.x),y:"middle"===r?n<.5?e.y:t.y:"after"===r?n<1?e.y:t.y:n>0?t.y:e.y}}function gn(e,t,n,r){const i={x:e.cp2x,y:e.cp2y},o={x:t.cp1x,y:t.cp1y},a=hn(e,i,n),s=hn(i,o,n),l=hn(o,t,n),c=hn(a,s,n),u=hn(s,l,n);return hn(c,u,n)}const mn=new Map;function vn(e,t,n){return function(e,t){t=t||{};const n=e+JSON.stringify(t);let r=mn.get(n);return r||(r=new Intl.NumberFormat(e,t),mn.set(n,r)),r}(t,n).format(e)}const bn=function(e,t){return{x:n=>e+e+t-n,setWidth(e){t=e},textAlign:e=>"center"===e?e:"right"===e?"left":"right",xPlus:(e,t)=>e-t,leftForLtr:(e,t)=>e-t}},yn=function(){return{x:e=>e,setWidth(e){},textAlign:e=>e,xPlus:(e,t)=>e+t,leftForLtr:(e,t)=>e}};function xn(e,t,n){return e?bn(t,n):yn()}function wn(e,t){let n,r;"ltr"!==t&&"rtl"!==t||(n=e.canvas.style,r=[n.getPropertyValue("direction"),n.getPropertyPriority("direction")],n.setProperty("direction",t,"important"),e.prevTextDirection=r)}function kn(e,t){void 0!==t&&(delete e.prevTextDirection,e.canvas.style.setProperty("direction",t[0],t[1]))}function _n(e){return"angle"===e?{between:J,compare:X,normalize:G}:{between:te,compare:(e,t)=>e-t,normalize:e=>e}}function En({start:e,end:t,count:n,loop:r,style:i}){return{start:e%n,end:t%n,loop:r&&(t-e+1)%n==0,style:i}}function Sn(e,t,n){if(!n)return[e];const{property:r,start:i,end:o}=n,a=t.length,{compare:s,between:l,normalize:c}=_n(r),{start:u,end:d,loop:f,style:h}=function(e,t,n){const{property:r,start:i,end:o}=n,{between:a,normalize:s}=_n(r),l=t.length;let c,u,{start:d,end:f,loop:h}=e;if(h){for(d+=l,f+=l,c=0,u=l;c<u&&a(s(t[d%l][r]),i,o);++c)d--,f--;d%=l,f%=l}return f<d&&(f+=l),{start:d,end:f,loop:h,style:e.style}}(e,t,n),p=[];let g,m,v,b=!1,y=null;for(let e=u,n=u;e<=d;++e)m=t[e%a],m.skip||(g=c(m[r]),g!==v&&(b=l(g,i,o),null===y&&(b||l(i,v,g)&&0!==s(i,v))&&(y=0===s(g,i)?e:n),null!==y&&(!b||0===s(o,g)||l(o,v,g))&&(p.push(En({start:y,end:e,loop:f,count:a,style:h})),y=null),n=e,v=g));return null!==y&&p.push(En({start:y,end:d,loop:f,count:a,style:h})),p}function On(e,t){const n=[],r=e.segments;for(let i=0;i<r.length;i++){const o=Sn(r[i],e.points,t);o.length&&n.push(...o)}return n}function Pn(e,t){const n=e.points,r=e.options.spanGaps,i=n.length;if(!i)return[];const o=!!e._loop,{start:a,end:s}=function(e,t,n,r){let i=0,o=t-1;if(n&&!r)for(;i<t&&!e[i].skip;)i++;for(;i<t&&e[i].skip;)i++;for(i%=t,n&&(o+=i);o>i&&e[o%t].skip;)o--;return o%=t,{start:i,end:o}}(n,i,o,r);return Cn(e,!0===r?[{start:a,end:s,loop:o}]:function(e,t,n,r){const i=e.length,o=[];let a,s=t,l=e[t];for(a=t+1;a<=n;++a){const n=e[a%i];n.skip||n.stop?l.skip||(r=!1,o.push({start:t%i,end:(a-1)%i,loop:r}),t=s=n.stop?a:null):(s=a,l.skip&&(t=a)),l=n}return null!==s&&o.push({start:t%i,end:s%i,loop:r}),o}(n,a,s<a?s+i:s,!!e._fullLoop&&0===a&&s===i-1),n,t)}function Cn(e,t,n,r){return r&&r.setContext&&n?function(e,t,n,r){const i=e._chart.getContext(),o=Mn(e.options),{_datasetIndex:a,options:{spanGaps:s}}=e,l=n.length,c=[];let u=o,d=t[0].start,f=d;function h(e,t,r,i){const o=s?-1:1;if(e!==t){for(e+=l;n[e%l].skip;)e-=o;for(;n[t%l].skip;)t+=o;e%l!=t%l&&(c.push({start:e%l,end:t%l,loop:r,style:i}),u=i,d=t%l)}}for(const e of t){d=s?d:e.start;let t,o=n[d%l];for(f=d+1;f<=e.end;f++){const s=n[f%l];t=Mn(r.setContext(At(i,{type:"segment",p0:o,p1:s,p0DataIndex:(f-1)%l,p1DataIndex:f%l,datasetIndex:a}))),Tn(t,u)&&h(d,f-1,e.loop,u),o=s,u=t}d<f-1&&h(d,f-1,e.loop,u)}return c}(e,t,n,r):t}function Mn(e){return{backgroundColor:e.backgroundColor,borderCapStyle:e.borderCapStyle,borderDash:e.borderDash,borderDashOffset:e.borderDashOffset,borderJoinStyle:e.borderJoinStyle,borderWidth:e.borderWidth,borderColor:e.borderColor}}function Tn(e,t){return t&&JSON.stringify(e)!==JSON.stringify(t)}},3981:(e,t,n)=>{"use strict";n.r(t),n.d(t,{I18nContext:()=>X,I18nextProvider:()=>ve,Trans:()=>ne,TransWithoutContext:()=>$,Translation:()=>me,composeInitialProps:()=>J,date:()=>ke,getDefaults:()=>R,getI18n:()=>D,getInitialProps:()=>Z,initReactI18next:()=>Y,number:()=>Ee,plural:()=>Oe,select:()=>Se,selectOrdinal:()=>Pe,setDefaults:()=>A,setI18n:()=>L,time:()=>_e,useSSR:()=>be,useTranslation:()=>ue,withSSR:()=>we,withTranslation:()=>pe});var r=n(4467),i=n(8587);function o(e,t){if(null==e)return{};var n,r,o=(0,i.A)(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)n=a[r],t.includes(n)||{}.propertyIsEnumerable.call(e,n)&&(o[n]=e[n])}return o}var a=n(6540),s=n(2284),l=n(4915),c=n.n(l),u=/\s([^'"/\s><]+?)[\s/>]|([^\s=]+)=\s?(".*?"|'.*?')/g;function d(e){var t={type:"tag",name:"",voidElement:!1,attrs:{},children:[]},n=e.match(/<\/?([^\s]+?)[/\s>]/);if(n&&(t.name=n[1],(c()[n[1]]||"/"===e.charAt(e.length-2))&&(t.voidElement=!0),t.name.startsWith("!--"))){var r=e.indexOf("--\x3e");return{type:"comment",comment:-1!==r?e.slice(4,r):""}}for(var i=new RegExp(u),o=null;null!==(o=i.exec(e));)if(o[0].trim())if(o[1]){var a=o[1].trim(),s=[a,""];a.indexOf("=")>-1&&(s=a.split("=")),t.attrs[s[0]]=s[1],i.lastIndex--}else o[2]&&(t.attrs[o[2]]=o[3].trim().substring(1,o[3].length-1));return t}var f=/<[a-zA-Z0-9\-\!\/](?:"[^"]*"|'[^']*'|[^'">])*>/g,h=/^\s*$/,p=Object.create(null);function g(e,t){switch(t.type){case"text":return e+t.content;case"tag":return e+="<"+t.name+(t.attrs?function(e){var t=[];for(var n in e)t.push(n+'="'+e[n]+'"');return t.length?" "+t.join(" "):""}(t.attrs):"")+(t.voidElement?"/>":">"),t.voidElement?e:e+t.children.reduce(g,"")+"</"+t.name+">";case"comment":return e+"\x3c!--"+t.comment+"--\x3e"}}var m={parse:function(e,t){t||(t={}),t.components||(t.components=p);var n,r=[],i=[],o=-1,a=!1;if(0!==e.indexOf("<")){var s=e.indexOf("<");r.push({type:"text",content:-1===s?e:e.substring(0,s)})}return e.replace(f,(function(s,l){if(a){if(s!=="</"+n.name+">")return;a=!1}var c,u="/"!==s.charAt(1),f=s.startsWith("\x3c!--"),p=l+s.length,g=e.charAt(p);if(f){var m=d(s);return o<0?(r.push(m),r):((c=i[o]).children.push(m),r)}if(u&&(o++,"tag"===(n=d(s)).type&&t.components[n.name]&&(n.type="component",a=!0),n.voidElement||a||!g||"<"===g||n.children.push({type:"text",content:e.slice(p,e.indexOf("<",p))}),0===o&&r.push(n),(c=i[o-1])&&c.children.push(n),i[o]=n),(!u||n.voidElement)&&(o>-1&&(n.voidElement||n.name===s.slice(2,-1))&&(o--,n=-1===o?r:i[o]),!a&&"<"!==g&&g)){c=-1===o?r:i[o].children;var v=e.indexOf("<",p),b=e.slice(p,-1===v?void 0:v);h.test(b)&&(b=" "),(v>-1&&o+c.length>=0||" "!==b)&&c.push({type:"text",content:b})}})),r},stringify:function(e){return e.reduce((function(e,t){return e+g("",t)}),"")}};const v=m;function b(){if(console&&console.warn){for(var e,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];"string"==typeof n[0]&&(n[0]="react-i18next:: ".concat(n[0])),(e=console).warn.apply(e,n)}}var y={};function x(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];"string"==typeof t[0]&&y[t[0]]||("string"==typeof t[0]&&(y[t[0]]=new Date),b.apply(void 0,t))}var w=function(e,t){return function(){e.isInitialized?t():e.on("initialized",(function n(){setTimeout((function(){e.off("initialized",n)}),0),t()}))}};function k(e,t,n){e.loadNamespaces(t,w(e,n))}function _(e,t,n,r){"string"==typeof n&&(n=[n]),n.forEach((function(t){e.options.ns.indexOf(t)<0&&e.options.ns.push(t)})),e.loadLanguages(t,w(e,r))}function E(e){return e.displayName||e.name||("string"==typeof e&&e.length>0?e:"Unknown")}var S=/&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g,O={"&amp;":"&","&#38;":"&","&lt;":"<","&#60;":"<","&gt;":">","&#62;":">","&apos;":"'","&#39;":"'","&quot;":'"',"&#34;":'"',"&nbsp;":" ","&#160;":" ","&copy;":"©","&#169;":"©","&reg;":"®","&#174;":"®","&hellip;":"…","&#8230;":"…","&#x2F;":"/","&#47;":"/"},P=function(e){return O[e]};function C(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function M(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?C(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):C(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var T,N={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transWrapTextNodes:"",transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0,unescape:function(e){return e.replace(S,P)}};function A(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};N=M(M({},N),e)}function R(){return N}function L(e){T=e}function D(){return T}var I=["format"],j=["children","count","parent","i18nKey","context","tOptions","values","defaults","components","ns","i18n","t","shouldUnescape"];function z(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?z(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):z(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function B(e,t){if(!e)return!1;var n=e.props?e.props.children:e.children;return t?n.length>0:!!n}function V(e){return e?e.props?e.props.children:e.children:[]}function W(e){return Array.isArray(e)?e:[e]}function H(e,t){if(!e)return"";var n="",r=W(e),i=t.transSupportBasicHtmlNodes&&t.transKeepBasicHtmlNodesFor?t.transKeepBasicHtmlNodesFor:[];return r.forEach((function(e,r){if("string"==typeof e)n+="".concat(e);else if((0,a.isValidElement)(e)){var l=Object.keys(e.props).length,c=i.indexOf(e.type)>-1,u=e.props.children;if(!u&&c&&0===l)n+="<".concat(e.type,"/>");else if(u||c&&0===l)if(e.props.i18nIsDynamicList)n+="<".concat(r,"></").concat(r,">");else if(c&&1===l&&"string"==typeof u)n+="<".concat(e.type,">").concat(u,"</").concat(e.type,">");else{var d=H(u,t);n+="<".concat(r,">").concat(d,"</").concat(r,">")}else n+="<".concat(r,"></").concat(r,">")}else if(null===e)b("Trans: the passed in value is invalid - seems you passed in a null child.");else if("object"===(0,s.A)(e)){var f=e.format,h=o(e,I),p=Object.keys(h);if(1===p.length){var g=f?"".concat(p[0],", ").concat(f):p[0];n+="{{".concat(g,"}}")}else b("react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.",e)}else b("Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.",e)})),n}function $(e){var t=e.children,n=e.count,r=e.parent,i=e.i18nKey,l=e.context,c=e.tOptions,u=void 0===c?{}:c,d=e.values,f=e.defaults,h=e.components,p=e.ns,g=e.i18n,m=e.t,b=e.shouldUnescape,y=o(e,j),w=g||D();if(!w)return x("You will need to pass in an i18next instance by using i18nextReactModule"),t;var k=m||w.t.bind(w)||function(e){return e};l&&(u.context=l);var _=F(F({},R()),w.options&&w.options.react),E=p||k.ns||w.options&&w.options.defaultNS;E="string"==typeof E?[E]:E||["translation"];var S=f||H(t,_)||_.transEmptyNodeValue||i,O=_.hashTransKey,P=i||(O?O(S):S),C=d?u.interpolation:{interpolation:F(F({},u.interpolation),{},{prefix:"#$?",suffix:"?$#"})},M=F(F(F(F({},u),{},{count:n},d),C),{},{defaultValue:S,ns:E}),T=function(e,t,n,r,i,o){if(""===t)return[];var l=r.transKeepBasicHtmlNodesFor||[],c=t&&new RegExp(l.join("|")).test(t);if(!e&&!c)return[t];var u={};!function e(t){W(t).forEach((function(t){"string"!=typeof t&&(B(t)?e(V(t)):"object"!==(0,s.A)(t)||(0,a.isValidElement)(t)||Object.assign(u,t))}))}(e);var d=v.parse("<0>".concat(t,"</0>")),f=F(F({},u),i);function h(e,t,n){var r=V(e),i=g(r,t.children,n);return function(e){return"[object Array]"===Object.prototype.toString.call(e)&&e.every((function(e){return(0,a.isValidElement)(e)}))}(r)&&0===i.length?r:i}function p(e,t,n,r,i){e.dummy&&(e.children=t),n.push((0,a.cloneElement)(e,F(F({},e.props),{},{key:r}),i?void 0:t))}function g(t,i,u){var d=W(t);return W(i).reduce((function(t,i,m){var v,b,y,x=i.children&&i.children[0]&&i.children[0].content&&n.services.interpolator.interpolate(i.children[0].content,f,n.language);if("tag"===i.type){var w=d[parseInt(i.name,10)];!w&&1===u.length&&u[0][i.name]&&(w=u[0][i.name]),w||(w={});var k=0!==Object.keys(i.attrs).length?(v={props:i.attrs},(y=F({},b=w)).props=Object.assign(v.props,b.props),y):w,_=(0,a.isValidElement)(k),E=_&&B(i,!0)&&!i.voidElement,S=c&&"object"===(0,s.A)(k)&&k.dummy&&!_,O="object"===(0,s.A)(e)&&null!==e&&Object.hasOwnProperty.call(e,i.name);if("string"==typeof k){var P=n.services.interpolator.interpolate(k,f,n.language);t.push(P)}else if(B(k)||E)p(k,h(k,i,u),t,m);else if(S){var C=g(d,i.children,u);t.push((0,a.cloneElement)(k,F(F({},k.props),{},{key:m}),C))}else if(Number.isNaN(parseFloat(i.name)))if(O)p(k,h(k,i,u),t,m,i.voidElement);else if(r.transSupportBasicHtmlNodes&&l.indexOf(i.name)>-1)if(i.voidElement)t.push((0,a.createElement)(i.name,{key:"".concat(i.name,"-").concat(m)}));else{var M=g(d,i.children,u);t.push((0,a.createElement)(i.name,{key:"".concat(i.name,"-").concat(m)},M))}else if(i.voidElement)t.push("<".concat(i.name," />"));else{var T=g(d,i.children,u);t.push("<".concat(i.name,">").concat(T,"</").concat(i.name,">"))}else if("object"!==(0,s.A)(k)||_)1===i.children.length&&x?t.push((0,a.cloneElement)(k,F(F({},k.props),{},{key:m}),x)):t.push((0,a.cloneElement)(k,F(F({},k.props),{},{key:m})));else{var N=i.children[0]?x:null;N&&t.push(N)}}else if("text"===i.type){var A=r.transWrapTextNodes,R=o?r.unescape(n.services.interpolator.interpolate(i.content,f,n.language)):n.services.interpolator.interpolate(i.content,f,n.language);A?t.push((0,a.createElement)(A,{key:"".concat(i.name,"-").concat(m)},R)):t.push(R)}return t}),[])}return V(g([{dummy:!0,children:e||[]}],d,W(e||[]))[0])}(h||t,P?k(P,M):S,w,_,M,b),N=void 0!==r?r:_.defaultTransParent;return N?(0,a.createElement)(N,y,T):T}var U=n(3029),K=n(2901),Y={type:"3rdParty",init:function(e){A(e.options.react),L(e)}};function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var X=(0,a.createContext)(),G=function(){function e(){(0,U.A)(this,e),this.usedNamespaces={}}return(0,K.A)(e,[{key:"addUsedNamespaces",value:function(e){var t=this;e.forEach((function(e){t.usedNamespaces[e]||(t.usedNamespaces[e]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),e}();function J(e){return function(t){return new Promise((function(n){var r=Z();e.getInitialProps?e.getInitialProps(t).then((function(e){n(Q(Q({},e),r))})):n(r)}))}}function Z(){var e=D(),t=e.reportNamespaces?e.reportNamespaces.getUsedNamespaces():[],n={},r={};return e.languages.forEach((function(n){r[n]={},t.forEach((function(t){r[n][t]=e.getResourceBundle(n,t)||{}}))})),n.initialI18nStore=r,n.initialLanguage=e.language,n}var ee=["children","count","parent","i18nKey","context","tOptions","values","defaults","components","ns","i18n","t","shouldUnescape"];function te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ne(e){var t=e.children,n=e.count,i=e.parent,s=e.i18nKey,l=e.context,c=e.tOptions,u=void 0===c?{}:c,d=e.values,f=e.defaults,h=e.components,p=e.ns,g=e.i18n,m=e.t,v=e.shouldUnescape,b=o(e,ee),y=(0,a.useContext)(X)||{},x=y.i18n,w=y.defaultNS,k=g||x||D(),_=m||k&&k.t.bind(k);return $(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?te(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({children:t,count:n,parent:i,i18nKey:s,context:l,tOptions:u,values:d,defaults:f,components:h,ns:p||_&&_.ns||w||k&&k.options&&k.options.defaultNS,i18n:k,t:m,shouldUnescape:v},b))}var re=n(6369),ie=n(8394),oe=n(6562);function ae(e,t){return(0,re.A)(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,i,o,a,s=[],l=!0,c=!1;try{if(o=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;l=!1}else for(;!(l=(r=o.call(n)).done)&&(s.push(r.value),s.length!==t);l=!0);}catch(e){c=!0,i=e}finally{try{if(!l&&null!=n.return&&(a=n.return(),Object(a)!==a))return}finally{if(c)throw i}}return s}}(e,t)||(0,ie.A)(e,t)||(0,oe.A)()}function se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?se(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):se(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ce=function(e,t){var n=(0,a.useRef)();return(0,a.useEffect)((function(){n.current=t?n.current:e}),[e,t]),n.current};function ue(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.i18n,r=(0,a.useContext)(X)||{},i=r.i18n,o=r.defaultNS,l=n||i||D();if(l&&!l.reportNamespaces&&(l.reportNamespaces=new G),!l){x("You will need to pass in an i18next instance by using initReactI18next");var c=function(e,t){return"string"==typeof t?t:t&&"object"===(0,s.A)(t)&&"string"==typeof t.defaultValue?t.defaultValue:Array.isArray(e)?e[e.length-1]:e},u=[c,{},!1];return u.t=c,u.i18n={},u.ready=!1,u}l.options.react&&void 0!==l.options.react.wait&&x("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");var d=le(le(le({},R()),l.options.react),t),f=d.useSuspense,h=d.keyPrefix,p=e||o||l.options&&l.options.defaultNS;p="string"==typeof p?[p]:p||["translation"],l.reportNamespaces.addUsedNamespaces&&l.reportNamespaces.addUsedNamespaces(p);var g=(l.isInitialized||l.initializedStoreOnce)&&p.every((function(e){return function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.languages&&t.languages.length?void 0!==t.options.ignoreJSONStructure?t.hasLoadedNamespace(e,{lng:n.lng,precheck:function(t,r){if(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&t.services.backendConnector.backend&&t.isLanguageChangingTo&&!r(t.isLanguageChangingTo,e))return!1}}):function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=t.languages[0],i=!!t.options&&t.options.fallbackLng,o=t.languages[t.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};return!(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&t.services.backendConnector.backend&&t.isLanguageChangingTo&&!a(t.isLanguageChangingTo,e)||!t.hasResourceBundle(r,e)&&t.services.backendConnector.backend&&(!t.options.resources||t.options.partialBundledLanguages)&&(!a(r,e)||i&&!a(o,e)))}(e,t,n):(x("i18n.languages were undefined or empty",t.languages),!0)}(e,l,d)}));function m(){return l.getFixedT(t.lng||null,"fallback"===d.nsMode?p:p[0],h)}var v=ae((0,a.useState)(m),2),b=v[0],y=v[1],w=p.join();t.lng&&(w="".concat(t.lng).concat(w));var E=ce(w),S=(0,a.useRef)(!0);(0,a.useEffect)((function(){var e=d.bindI18n,n=d.bindI18nStore;function r(){S.current&&y(m)}return S.current=!0,g||f||(t.lng?_(l,t.lng,p,(function(){S.current&&y(m)})):k(l,p,(function(){S.current&&y(m)}))),g&&E&&E!==w&&S.current&&y(m),e&&l&&l.on(e,r),n&&l&&l.store.on(n,r),function(){S.current=!1,e&&l&&e.split(" ").forEach((function(e){return l.off(e,r)})),n&&l&&n.split(" ").forEach((function(e){return l.store.off(e,r)}))}}),[l,w]);var O=(0,a.useRef)(!0);(0,a.useEffect)((function(){S.current&&!O.current&&y(m),O.current=!1}),[l,h]);var P=[b,l,g];if(P.t=b,P.i18n=l,P.ready=g,g)return P;if(!g&&!f)return P;throw new Promise((function(e){t.lng?_(l,t.lng,p,(function(){return e()})):k(l,p,(function(){return e()}))}))}var de=["forwardedRef"];function fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function he(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fe(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function pe(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){function r(r){var i=r.forwardedRef,s=o(r,de),l=ae(ue(e,he(he({},s),{},{keyPrefix:t.keyPrefix})),3),c=l[0],u=l[1],d=l[2],f=he(he({},s),{},{t:c,i18n:u,tReady:d});return t.withRef&&i?f.ref=i:!t.withRef&&i&&(f.forwardedRef=i),(0,a.createElement)(n,f)}return r.displayName="withI18nextTranslation(".concat(E(n),")"),r.WrappedComponent=n,t.withRef?(0,a.forwardRef)((function(e,t){return(0,a.createElement)(r,Object.assign({},e,{forwardedRef:t}))})):r}}var ge=["ns","children"];function me(e){var t=e.ns,n=e.children,r=ae(ue(t,o(e,ge)),3),i=r[0],a=r[1],s=r[2];return n(i,{i18n:a,lng:a.language},s)}function ve(e){var t=e.i18n,n=e.defaultNS,r=e.children,i=(0,a.useMemo)((function(){return{i18n:t,defaultNS:n}}),[t,n]);return(0,a.createElement)(X.Provider,{value:i},r)}function be(e,t){var n=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).i18n,r=((0,a.useContext)(X)||{}).i18n,i=n||r||D();i.options&&i.options.isClone||(e&&!i.initializedStoreOnce&&(i.services.resourceStore.data=e,i.options.ns=Object.values(e).reduce((function(e,t){return Object.keys(t).forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}),i.options.ns),i.initializedStoreOnce=!0,i.isInitialized=!0),t&&!i.initializedLanguageOnce&&(i.changeLanguage(t),i.initializedLanguageOnce=!0))}var ye=["initialI18nStore","initialLanguage"];function xe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function we(){return function(e){function t(t){var n=t.initialI18nStore,i=t.initialLanguage,s=o(t,ye);return be(n,i),(0,a.createElement)(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?xe(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):xe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},s))}return t.getInitialProps=J(e),t.displayName="withI18nextSSR(".concat(E(e),")"),t.WrappedComponent=e,t}}var ke=function(){return""},_e=function(){return""},Ee=function(){return""},Se=function(){return""},Oe=function(){return""},Pe=function(){return""}}},r={};function i(e){var t=r[e];if(void 0!==t)return t.exports;var o=r[e]={exports:{}};return n[e].call(o.exports,o,o.exports,i),o.exports}i.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return i.d(t,{a:t}),t},t=Object.getPrototypeOf?e=>Object.getPrototypeOf(e):e=>e.__proto__,i.t=function(n,r){if(1&r&&(n=this(n)),8&r)return n;if("object"==typeof n&&n){if(4&r&&n.__esModule)return n;if(16&r&&"function"==typeof n.then)return n}var o=Object.create(null);i.r(o);var a={};e=e||[null,t({}),t([]),t(t)];for(var s=2&r&&n;"object"==typeof s&&!~e.indexOf(s);s=t(s))Object.getOwnPropertyNames(s).forEach((e=>a[e]=()=>n[e]));return a.default=()=>n,i.d(o,a),o},i.d=(e,t)=>{for(var n in t)i.o(t,n)&&!i.o(e,n)&&Object.defineProperty(e,n,{enumerable:!0,get:t[n]})},i.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),i.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},(()=>{"use strict";var e=i(6540),t=i(961),n=i(7828),r=i(2284),o=i(3029),a=i(2901);function s(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}var l=i(3662);function c(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&(0,l.A)(e,t)}function u(e,t){if(t&&("object"==(0,r.A)(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return s(e)}function d(e){return d=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},d(e)}var f=i(4467),h=i(6369),p=i(8394),g=i(6562);function m(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function v(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?m(Object(n),!0).forEach((function(t){(0,f.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):m(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var b={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){console&&console[e]&&console[e].apply(console,t)}},y=new(function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,o.A)(this,e),this.init(t,n)}return(0,a.A)(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||b,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,r){return r&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,v(v({},{prefix:"".concat(this.prefix,":").concat(t,":")}),this.options))}},{key:"clone",value:function(t){return(t=t||this.options).prefix=t.prefix||this.prefix,new e(this.logger,t)}}]),e}()),x=function(){function e(){(0,o.A)(this,e),this.observers={}}return(0,a.A)(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this.observers[e]&&[].concat(this.observers[e]).forEach((function(e){e.apply(void 0,n)})),this.observers["*"]&&[].concat(this.observers["*"]).forEach((function(t){t.apply(t,[e].concat(n))}))}}]),e}();function w(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n}function k(e){return null==e?"":""+e}function _(e,t,n){function r(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function i(){return!e||"string"==typeof e}for(var o="string"!=typeof t?[].concat(t):t.split(".");o.length>1;){if(i())return{};var a=r(o.shift());!e[a]&&n&&(e[a]=new n),e=Object.prototype.hasOwnProperty.call(e,a)?e[a]:{}}return i()?{}:{obj:e,k:r(o.shift())}}function E(e,t,n){var r=_(e,t,Object);r.obj[r.k]=n}function S(e,t){var n=_(e,t),r=n.obj,i=n.k;if(r)return r[i]}function O(e,t,n){for(var r in t)"__proto__"!==r&&"constructor"!==r&&(r in e?"string"==typeof e[r]||e[r]instanceof String||"string"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):O(e[r],t[r],n):e[r]=t[r]);return e}function P(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var C={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function M(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return C[e]})):e}var T="undefined"!=typeof window&&window.navigator&&void 0===window.navigator.userAgentData&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,N=[" ",",","?","!",";"];function A(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(e){if(e[t])return e[t];for(var r=t.split(n),i=e,o=0;o<r.length;++o){if(!i)return;if("string"==typeof i[r[o]]&&o+1<r.length)return;if(void 0===i[r[o]]){for(var a=2,s=r.slice(o,o+a).join(n),l=i[s];void 0===l&&r.length>o+a;)a++,l=i[s=r.slice(o,o+a).join(n)];if(void 0===l)return;if(null===l)return null;if(t.endsWith(s)){if("string"==typeof l)return l;if(s&&"string"==typeof l[s])return l[s]}var c=r.slice(o+a).join(n);return c?A(l,c,n):void 0}i=i[r[o]]}return i}}function R(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function L(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?R(Object(n),!0).forEach((function(t){(0,f.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):R(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var D=function(e){c(i,e);var t,n,r=(t=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=d(t);if(n){var i=d(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return u(this,e)});function i(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return(0,o.A)(this,i),t=r.call(this),T&&x.call(s(t)),t.data=e||{},t.options=n,void 0===t.options.keySeparator&&(t.options.keySeparator="."),void 0===t.options.ignoreJSONStructure&&(t.options.ignoreJSONStructure=!0),t}return(0,a.A)(i,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},i=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,o=void 0!==r.ignoreJSONStructure?r.ignoreJSONStructure:this.options.ignoreJSONStructure,a=[e,t];n&&"string"!=typeof n&&(a=a.concat(n)),n&&"string"==typeof n&&(a=a.concat(i?n.split(i):n)),e.indexOf(".")>-1&&(a=e.split("."));var s=S(this.data,a);return s||!o||"string"!=typeof n?s:A(this.data&&this.data[e]&&this.data[e][t],n,i)}},{key:"addResource",value:function(e,t,n,r){var i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},o=void 0!==i.keySeparator?i.keySeparator:this.options.keySeparator,a=[e,t];n&&(a=a.concat(o?n.split(o):n)),e.indexOf(".")>-1&&(r=t,t=(a=e.split("."))[1]),this.addNamespaces(t),E(this.data,a,r),i.silent||this.emit("added",e,t,n,r)}},{key:"addResources",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var i in n)"string"!=typeof n[i]&&"[object Array]"!==Object.prototype.toString.apply(n[i])||this.addResource(e,t,i,n[i],{silent:!0});r.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},a=[e,t];e.indexOf(".")>-1&&(r=n,n=t,t=(a=e.split("."))[1]),this.addNamespaces(t);var s=S(this.data,a)||{};r?O(s,n,i):s=L(L({},s),n),E(this.data,a,s),o.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?L(L({},{}),this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"hasLanguageSomeTranslations",value:function(e){var t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((function(e){return t[e]&&Object.keys(t[e]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),i}(x),I={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,r,i){var o=this;return e.forEach((function(e){o.processors[e]&&(t=o.processors[e].process(t,n,r,i))})),t}};function j(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function z(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?j(Object(n),!0).forEach((function(t){(0,f.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):j(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var F={},B=function(e){c(l,e);var t,n,i=(t=l,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=d(t);if(n){var i=d(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return u(this,e)});function l(e){var t,n,r,a,c=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,o.A)(this,l),t=i.call(this),T&&x.call(s(t)),n=["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"],r=e,a=s(t),n.forEach((function(e){r[e]&&(a[e]=r[e])})),t.options=c,void 0===t.options.keySeparator&&(t.options.keySeparator="."),t.logger=y.create("translator"),t}return(0,a.A)(l,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;var n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,i=t.ns||this.options.defaultNS||[],o=n&&e.indexOf(n)>-1,a=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,n){t=t||"",n=n||"";var r=N.filter((function(e){return t.indexOf(e)<0&&n.indexOf(e)<0}));if(0===r.length)return!0;var i=new RegExp("(".concat(r.map((function(e){return"?"===e?"\\?":e})).join("|"),")")),o=!i.test(e);if(!o){var a=e.indexOf(n);a>0&&!i.test(e.substring(0,a))&&(o=!0)}return o}(e,n,r));if(o&&!a){var s=e.match(this.interpolator.nestingRegexp);if(s&&s.length>0)return{key:e,namespaces:i};var l=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(l[0])>-1)&&(i=l.shift()),e=l.join(r)}return"string"==typeof i&&(i=[i]),{key:e,namespaces:i}}},{key:"translate",value:function(e,t,n){var i=this;if("object"!==(0,r.A)(t)&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),"object"===(0,r.A)(t)&&(t=z({},t)),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var o=void 0!==t.returnDetails?t.returnDetails:this.options.returnDetails,a=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,s=this.extractFromKey(e[e.length-1],t),c=s.key,u=s.namespaces,d=u[u.length-1],f=t.lng||this.language,h=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(f&&"cimode"===f.toLowerCase()){if(h){var p=t.nsSeparator||this.options.nsSeparator;return o?{res:"".concat(d).concat(p).concat(c),usedKey:c,exactUsedKey:c,usedLng:f,usedNS:d}:"".concat(d).concat(p).concat(c)}return o?{res:c,usedKey:c,exactUsedKey:c,usedLng:f,usedNS:d}:c}var g=this.resolve(e,t),m=g&&g.res,v=g&&g.usedKey||c,b=g&&g.exactUsedKey||c,y=Object.prototype.toString.apply(m),x=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,w=!this.i18nFormat||this.i18nFormat.handleAsObject;if(w&&m&&"string"!=typeof m&&"boolean"!=typeof m&&"number"!=typeof m&&["[object Number]","[object Function]","[object RegExp]"].indexOf(y)<0&&("string"!=typeof x||"[object Array]"!==y)){if(!t.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");var k=this.options.returnedObjectHandler?this.options.returnedObjectHandler(v,m,z(z({},t),{},{ns:u})):"key '".concat(c," (").concat(this.language,")' returned an object instead of string.");return o?(g.res=k,g):k}if(a){var _="[object Array]"===y,E=_?[]:{},S=_?b:v;for(var O in m)if(Object.prototype.hasOwnProperty.call(m,O)){var P="".concat(S).concat(a).concat(O);E[O]=this.translate(P,z(z({},t),{joinArrays:!1,ns:u})),E[O]===P&&(E[O]=m[O])}m=E}}else if(w&&"string"==typeof x&&"[object Array]"===y)(m=m.join(x))&&(m=this.extendTranslation(m,e,t,n));else{var C=!1,M=!1,T=void 0!==t.count&&"string"!=typeof t.count,N=l.hasDefaultValue(t),A=T?this.pluralResolver.getSuffix(f,t.count,t):"",R=t["defaultValue".concat(A)]||t.defaultValue;!this.isValidLookup(m)&&N&&(C=!0,m=R),this.isValidLookup(m)||(M=!0,m=c);var L=(t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&M?void 0:m,D=N&&R!==m&&this.options.updateMissing;if(M||C||D){if(this.logger.log(D?"updateKey":"missingKey",f,d,c,D?R:m),a){var I=this.resolve(c,z(z({},t),{},{keySeparator:!1}));I&&I.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var j=[],F=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&F&&F[0])for(var B=0;B<F.length;B++)j.push(F[B]);else"all"===this.options.saveMissingTo?j=this.languageUtils.toResolveHierarchy(t.lng||this.language):j.push(t.lng||this.language);var V=function(e,n,r){var o=N&&r!==m?r:L;i.options.missingKeyHandler?i.options.missingKeyHandler(e,d,n,o,D,t):i.backendConnector&&i.backendConnector.saveMissing&&i.backendConnector.saveMissing(e,d,n,o,D,t),i.emit("missingKey",e,d,n,m)};this.options.saveMissing&&(this.options.saveMissingPlurals&&T?j.forEach((function(e){i.pluralResolver.getSuffixes(e,t).forEach((function(n){V([e],c+n,t["defaultValue".concat(n)]||R)}))})):V(j,c,R))}m=this.extendTranslation(m,e,t,g,n),M&&m===c&&this.options.appendNamespaceToMissingKey&&(m="".concat(d,":").concat(c)),(M||C)&&this.options.parseMissingKeyHandler&&(m="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?"".concat(d,":").concat(c):c,C?m:void 0):this.options.parseMissingKeyHandler(m))}return o?(g.res=m,g):m}},{key:"extendTranslation",value:function(e,t,n,r,i){var o=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,z(z({},this.options.interpolation.defaultVariables),n),r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(z(z({},n),{interpolation:z(z({},this.options.interpolation),n.interpolation)}));var a,s="string"==typeof e&&(n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(s){var l=e.match(this.interpolator.nestingRegexp);a=l&&l.length}var c=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(c=z(z({},this.options.interpolation.defaultVariables),c)),e=this.interpolator.interpolate(e,c,n.lng||this.language,n),s){var u=e.match(this.interpolator.nestingRegexp);a<(u&&u.length)&&(n.nest=!1)}!n.lng&&"v1"!==this.options.compatibilityAPI&&r&&r.res&&(n.lng=r.usedLng),!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),a=0;a<e;a++)r[a]=arguments[a];return i&&i[0]===r[0]&&!n.context?(o.logger.warn("It seems you are nesting recursively key: ".concat(r[0]," in key: ").concat(t[0])),null):o.translate.apply(o,r.concat([t]))}),n)),n.interpolation&&this.interpolator.reset()}var d=n.postProcess||this.options.postProcess,f="string"==typeof d?[d]:d;return null!=e&&f&&f.length&&!1!==n.applyPostProcessor&&(e=I.handle(f,e,t,this.options&&this.options.postProcessPassResolved?z({i18nResolved:r},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,r,i,o,a=this,s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!a.isValidLookup(t)){var l=a.extractFromKey(e,s),c=l.key;n=c;var u=l.namespaces;a.options.fallbackNS&&(u=u.concat(a.options.fallbackNS));var d=void 0!==s.count&&"string"!=typeof s.count,f=d&&!s.ordinal&&0===s.count&&a.pluralResolver.shouldUseIntlApi(),h=void 0!==s.context&&("string"==typeof s.context||"number"==typeof s.context)&&""!==s.context,p=s.lngs?s.lngs:a.languageUtils.toResolveHierarchy(s.lng||a.language,s.fallbackLng);u.forEach((function(e){a.isValidLookup(t)||(o=e,!F["".concat(p[0],"-").concat(e)]&&a.utils&&a.utils.hasLoadedNamespace&&!a.utils.hasLoadedNamespace(o)&&(F["".concat(p[0],"-").concat(e)]=!0,a.logger.warn('key "'.concat(n,'" for languages "').concat(p.join(", "),'" won\'t get resolved as namespace "').concat(o,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),p.forEach((function(n){if(!a.isValidLookup(t)){i=n;var o,l=[c];if(a.i18nFormat&&a.i18nFormat.addLookupKeys)a.i18nFormat.addLookupKeys(l,c,n,e,s);else{var u;d&&(u=a.pluralResolver.getSuffix(n,s.count,s));var p="".concat(a.options.pluralSeparator,"zero");if(d&&(l.push(c+u),f&&l.push(c+p)),h){var g="".concat(c).concat(a.options.contextSeparator).concat(s.context);l.push(g),d&&(l.push(g+u),f&&l.push(g+p))}}for(;o=l.pop();)a.isValidLookup(t)||(r=o,t=a.getResource(n,e,o,s))}})))}))}})),{res:t,usedKey:n,exactUsedKey:r,usedLng:i,usedNS:o}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}}],[{key:"hasDefaultValue",value:function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&"defaultValue"===t.substring(0,12)&&void 0!==e[t])return!0;return!1}}]),l}(x);function V(e){return e.charAt(0).toUpperCase()+e.slice(1)}var W=function(){function e(t){(0,o.A)(this,e),this.options=t,this.supportedLngs=this.options.supportedLngs||!1,this.logger=y.create("languageUtils")}return(0,a.A)(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=V(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=V(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=V(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isSupportedCode",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:"getBestMatchFromCodes",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var r=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(r)||(t=r)}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var r=n.getLanguagePartFromCode(e);if(n.isSupportedCode(r))return t=r;t=n.options.supportedLngs.find((function(e){return e===r?e:e.indexOf("-")<0&&r.indexOf("-")<0?void 0:0===e.indexOf(r)?e:void 0}))}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),i=[],o=function(e){e&&(n.isSupportedCode(e)?i.push(e):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&o(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&o(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&o(this.getLanguagePartFromCode(e))):"string"==typeof e&&o(this.formatLanguageCode(e)),r.forEach((function(e){i.indexOf(e)<0&&o(n.formatLanguageCode(e))})),i}}]),e}(),H=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],$={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}},U=["v1","v2","v3"],K={zero:0,one:1,two:2,few:3,many:4,other:5},Y=function(){function e(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,o.A)(this,e),this.languageUtils=t,this.options=r,this.logger=y.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=(n={},H.forEach((function(e){e.lngs.forEach((function(t){n[t]={numbers:e.nr,plurals:$[e.fc]}}))})),n)}return(0,a.A)(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(e,{type:t.ordinal?"ordinal":"cardinal"})}catch(e){return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(e,t);return this.shouldUseIntlApi()?n&&n.resolvedOptions().pluralCategories.length>1:n&&n.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,n).map((function(e){return"".concat(t).concat(e)}))}},{key:"getSuffixes",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=this.getRule(e,n);return r?this.shouldUseIntlApi()?r.resolvedOptions().pluralCategories.sort((function(e,t){return K[e]-K[t]})).map((function(e){return"".concat(t.options.prepend).concat(e)})):r.numbers.map((function(r){return t.getSuffix(e,r,n)})):[]}},{key:"getSuffix",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=this.getRule(e,n);return r?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(r.select(t)):this.getSuffixRetroCompatible(r,t):(this.logger.warn("no plural rule found for: ".concat(e)),"")}},{key:"getSuffixRetroCompatible",value:function(e,t){var n=this,r=e.noAbs?e.plurals(t):e.plurals(Math.abs(t)),i=e.numbers[r];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===i?i="plural":1===i&&(i=""));var o=function(){return n.options.prepend&&i.toString()?n.options.prepend+i.toString():i.toString()};return"v1"===this.options.compatibilityJSON?1===i?"":"number"==typeof i?"_plural_".concat(i.toString()):o():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?o():this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString()}},{key:"shouldUseIntlApi",value:function(){return!U.includes(this.options.compatibilityJSON)}}]),e}();function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Q(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){(0,f.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function X(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",i=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],o=function(e,t,n){var r=S(e,n);return void 0!==r?r:S(t,n)}(e,t,n);return!o&&i&&"string"==typeof n&&void 0===(o=A(e,n,r))&&(o=A(t,n,r)),o}var G=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.A)(this,e),this.logger=y.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return(0,a.A)(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:M,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?P(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?P(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?P(t.nestingPrefix):t.nestingPrefixEscaped||P("$t("),this.nestingSuffix=t.nestingSuffix?P(t.nestingSuffix):t.nestingSuffixEscaped||P(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,r){var i,o,a,s=this,l=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function c(e){return e.replace(/\$/g,"$$$$")}var u=function(e){if(e.indexOf(s.formatSeparator)<0){var i=X(t,l,e,s.options.keySeparator,s.options.ignoreJSONStructure);return s.alwaysFormat?s.format(i,void 0,n,Q(Q(Q({},r),t),{},{interpolationkey:e})):i}var o=e.split(s.formatSeparator),a=o.shift().trim(),c=o.join(s.formatSeparator).trim();return s.format(X(t,l,a,s.options.keySeparator,s.options.ignoreJSONStructure),c,n,Q(Q(Q({},r),t),{},{interpolationkey:a}))};this.resetRegExp();var d=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,f=r&&r.interpolation&&void 0!==r.interpolation.skipOnVariables?r.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(e){return c(e)}},{regex:this.regexp,safeValue:function(e){return s.escapeValue?c(s.escape(e)):c(e)}}].forEach((function(t){for(a=0;i=t.regex.exec(e);){var n=i[1].trim();if(void 0===(o=u(n)))if("function"==typeof d){var l=d(e,i,r);o="string"==typeof l?l:""}else if(r&&Object.prototype.hasOwnProperty.call(r,n))o="";else{if(f){o=i[0];continue}s.logger.warn("missed to pass in variable ".concat(n," for interpolating ").concat(e)),o=""}else"string"==typeof o||s.useRawValueToEscape||(o=k(o));var c=t.safeValue(o);if(e=e.replace(i[0],c),f?(t.regex.lastIndex+=o.length,t.regex.lastIndex-=i[0].length):t.regex.lastIndex=0,++a>=s.maxReplaces)break}})),e}},{key:"nest",value:function(e,t){var n,r,i,o=this,a=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function s(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var r=e.split(new RegExp("".concat(n,"[ ]*{"))),o="{".concat(r[1]);e=r[0];var a=(o=this.interpolate(o,i)).match(/'/g),s=o.match(/"/g);(a&&a.length%2==0&&!s||s.length%2!=0)&&(o=o.replace(/'/g,'"'));try{i=JSON.parse(o),t&&(i=Q(Q({},t),i))}catch(t){return this.logger.warn("failed parsing options string in nesting for key ".concat(e),t),"".concat(e).concat(n).concat(o)}return delete i.defaultValue,e}for(;n=this.nestingRegexp.exec(e);){var l=[];(i=(i=Q({},a)).replace&&"string"!=typeof i.replace?i.replace:i).applyPostProcessor=!1,delete i.defaultValue;var c=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var u=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=u.shift(),l=u,c=!0}if((r=t(s.call(this,n[1].trim(),i),i))&&n[0]===e&&"string"!=typeof r)return r;"string"!=typeof r&&(r=k(r)),r||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),r=""),c&&(r=l.reduce((function(e,t){return o.format(e,t,a.lng,Q(Q({},a),{},{interpolationkey:n[1].trim()}))}),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0}return e}}]),e}();function J(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Z(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?J(Object(n),!0).forEach((function(t){(0,f.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):J(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ee(e){var t={};return function(n,r,i){var o=r+JSON.stringify(i),a=t[o];return a||(a=e(r,i),t[o]=a),a(n)}}var te=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,o.A)(this,e),this.logger=y.create("formatter"),this.options=t,this.formats={number:ee((function(e,t){var n=new Intl.NumberFormat(e,Z({},t));return function(e){return n.format(e)}})),currency:ee((function(e,t){var n=new Intl.NumberFormat(e,Z(Z({},t),{},{style:"currency"}));return function(e){return n.format(e)}})),datetime:ee((function(e,t){var n=new Intl.DateTimeFormat(e,Z({},t));return function(e){return n.format(e)}})),relativetime:ee((function(e,t){var n=new Intl.RelativeTimeFormat(e,Z({},t));return function(e){return n.format(e,t.range||"day")}})),list:ee((function(e,t){var n=new Intl.ListFormat(e,Z({},t));return function(e){return n.format(e)}}))},this.init(t)}return(0,a.A)(e,[{key:"init",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||","}},{key:"add",value:function(e,t){this.formats[e.toLowerCase().trim()]=t}},{key:"addCached",value:function(e,t){this.formats[e.toLowerCase().trim()]=ee(t)}},{key:"format",value:function(e,t,n){var r=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return t.split(this.formatSeparator).reduce((function(e,t){var o=function(e){var t=e.toLowerCase().trim(),n={};if(e.indexOf("(")>-1){var r=e.split("(");t=r[0].toLowerCase().trim();var i=r[1].substring(0,r[1].length-1);"currency"===t&&i.indexOf(":")<0?n.currency||(n.currency=i.trim()):"relativetime"===t&&i.indexOf(":")<0?n.range||(n.range=i.trim()):i.split(";").forEach((function(e){if(e){var t=(o=e.split(":"),(0,h.A)(o)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(o)||(0,p.A)(o)||(0,g.A)()),r=t[0],i=t.slice(1).join(":").trim().replace(/^'+|'+$/g,"");n[r.trim()]||(n[r.trim()]=i),"false"===i&&(n[r.trim()]=!1),"true"===i&&(n[r.trim()]=!0),isNaN(i)||(n[r.trim()]=parseInt(i,10))}var o}))}return{formatName:t,formatOptions:n}}(t),a=o.formatName,s=o.formatOptions;if(r.formats[a]){var l=e;try{var c=i&&i.formatParams&&i.formatParams[i.interpolationkey]||{},u=c.locale||c.lng||i.locale||i.lng||n;l=r.formats[a](e,u,Z(Z(Z({},s),i),c))}catch(e){r.logger.warn(e)}return l}return r.logger.warn("there was no format function for ".concat(a)),e}),e)}}]),e}();function ne(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function re(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ne(Object(n),!0).forEach((function(t){(0,f.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ne(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ie=function(e){c(i,e);var t,n,r=(t=i,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=d(t);if(n){var i=d(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return u(this,e)});function i(e,t,n){var a,l=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return(0,o.A)(this,i),a=r.call(this),T&&x.call(s(a)),a.backend=e,a.store=t,a.services=n,a.languageUtils=n.languageUtils,a.options=l,a.logger=y.create("backendConnector"),a.waitingReads=[],a.maxParallelReads=l.maxParallelReads||10,a.readingCalls=0,a.maxRetries=l.maxRetries>=0?l.maxRetries:5,a.retryTimeout=l.retryTimeout>=1?l.retryTimeout:350,a.state={},a.queue=[],a.backend&&a.backend.init&&a.backend.init(n,l.backend,l),a}return(0,a.A)(i,[{key:"queueLoad",value:function(e,t,n,r){var i=this,o={},a={},s={},l={};return e.forEach((function(e){var r=!0;t.forEach((function(t){var s="".concat(e,"|").concat(t);!n.reload&&i.store.hasResourceBundle(e,t)?i.state[s]=2:i.state[s]<0||(1===i.state[s]?void 0===a[s]&&(a[s]=!0):(i.state[s]=1,r=!1,void 0===a[s]&&(a[s]=!0),void 0===o[s]&&(o[s]=!0),void 0===l[t]&&(l[t]=!0)))})),r||(s[e]=!0)})),(Object.keys(o).length||Object.keys(a).length)&&this.queue.push({pending:a,pendingCount:Object.keys(a).length,loaded:{},errors:[],callback:r}),{toLoad:Object.keys(o),pending:Object.keys(a),toLoadLanguages:Object.keys(s),toLoadNamespaces:Object.keys(l)}}},{key:"loaded",value:function(e,t,n){var r=e.split("|"),i=r[0],o=r[1];t&&this.emit("failedLoading",i,o,t),n&&this.store.addResourceBundle(i,o,n),this.state[e]=t?-1:2;var a={};this.queue.forEach((function(n){var r,s,l,c,u;r=n.loaded,s=o,(c=(l=_(r,[i],Object)).obj)[u=l.k]=c[u]||[],c[u].push(s),function(e,t){void 0!==e.pending[t]&&(delete e.pending[t],e.pendingCount--)}(n,e),t&&n.errors.push(t),0!==n.pendingCount||n.done||(Object.keys(n.loaded).forEach((function(e){a[e]||(a[e]={});var t=n.loaded[e];t.length&&t.forEach((function(t){void 0===a[e][t]&&(a[e][t]=!0)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",a),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var r=this,i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,o=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,a=arguments.length>5?arguments[5]:void 0;if(!e.length)return a(null,{});if(this.readingCalls>=this.maxParallelReads)this.waitingReads.push({lng:e,ns:t,fcName:n,tried:i,wait:o,callback:a});else{this.readingCalls++;var s=function(s,l){if(r.readingCalls--,r.waitingReads.length>0){var c=r.waitingReads.shift();r.read(c.lng,c.ns,c.fcName,c.tried,c.wait,c.callback)}s&&l&&i<r.maxRetries?setTimeout((function(){r.read.call(r,e,t,n,i+1,2*o,a)}),o):a(s,l)},l=this.backend[n].bind(this.backend);if(2!==l.length)return l(e,t,s);try{var c=l(e,t);c&&"function"==typeof c.then?c.then((function(e){return s(null,e)})).catch(s):s(null,c)}catch(e){s(e)}}}},{key:"prepareLoading",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},i=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),i&&i();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var o=this.queueLoad(e,t,r,i);if(!o.toLoad.length)return o.pending.length||i(),null;o.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=e.split("|"),i=r[0],o=r[1];this.read(i,o,"read",void 0,void 0,(function(r,a){r&&t.logger.warn("".concat(n,"loading namespace ").concat(o," for language ").concat(i," failed"),r),!r&&a&&t.logger.log("".concat(n,"loaded namespace ").concat(o," for language ").concat(i),a),t.loaded(e,r,a)}))}},{key:"saveMissing",value:function(e,t,n,r,i){var o=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},a=arguments.length>6&&void 0!==arguments[6]?arguments[6]:function(){};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t))this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(t,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=n&&""!==n){if(this.backend&&this.backend.create){var s=re(re({},o),{},{isUpdate:i}),l=this.backend.create.bind(this.backend);if(l.length<6)try{var c;(c=5===l.length?l(e,t,n,r,s):l(e,t,n,r))&&"function"==typeof c.then?c.then((function(e){return a(null,e)})).catch(a):a(null,c)}catch(e){a(e)}else l(e,t,n,r,a,s)}e&&e[0]&&this.store.addResource(e[0],t,n,r)}}}]),i}(x);function oe(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===(0,r.A)(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===(0,r.A)(e[2])||"object"===(0,r.A)(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n,r){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function ae(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function se(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?se(Object(n),!0).forEach((function(t){(0,f.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):se(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function ce(){}var ue=function(e){c(l,e);var t,n,i=(t=l,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=d(t);if(n){var i=d(this).constructor;e=Reflect.construct(r,arguments,i)}else e=r.apply(this,arguments);return u(this,e)});function l(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},r=arguments.length>1?arguments[1]:void 0;if((0,o.A)(this,l),e=i.call(this),T&&x.call(s(e)),e.options=ae(n),e.services={},e.logger=y,e.modules={external:[]},t=s(e),Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((function(e){"function"==typeof t[e]&&(t[e]=t[e].bind(t))})),r&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,r),u(e,s(e));setTimeout((function(){e.init(n,r)}),0)}return e}return(0,a.A)(l,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(n=t,t={}),!t.defaultNS&&!1!==t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));var r=oe();function i(e){return e?"function"==typeof e?new e:e:null}if(this.options=le(le(le({},r),this.options),ae(t)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=le(le({},r.interpolation),this.options.interpolation)),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){var o;this.modules.logger?y.init(i(this.modules.logger),this.options):y.init(null,this.options),this.modules.formatter?o=this.modules.formatter:"undefined"!=typeof Intl&&(o=te);var a=new W(this.options);this.store=new D(this.options.resources,this.options);var s=this.services;s.logger=y,s.resourceStore=this.store,s.languageUtils=a,s.pluralResolver=new Y(a,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!o||this.options.interpolation.format&&this.options.interpolation.format!==r.interpolation.format||(s.formatter=i(o),s.formatter.init(s,this.options),this.options.interpolation.format=s.formatter.format.bind(s.formatter)),s.interpolator=new G(this.options),s.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},s.backendConnector=new ie(i(this.modules.backend),s.resourceStore,s,this.options),s.backendConnector.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e.emit.apply(e,[t].concat(r))})),this.modules.languageDetector&&(s.languageDetector=i(this.modules.languageDetector),s.languageDetector.init&&s.languageDetector.init(s,this.options.detection,this.options)),this.modules.i18nFormat&&(s.i18nFormat=i(this.modules.i18nFormat),s.i18nFormat.init&&s.i18nFormat.init(this)),this.translator=new B(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),i=1;i<n;i++)r[i-1]=arguments[i];e.emit.apply(e,[t].concat(r))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}if(this.format=this.options.interpolation.format,n||(n=ce),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var l=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);l.length>0&&"dev"!==l[0]&&(this.options.lng=l[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined"),["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}})),["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments),e}}));var c=w(),u=function(){var t=function(t,r){e.isInitialized&&!e.initializedStoreOnce&&e.logger.warn("init: i18next is already initialized. You should call init just once!"),e.isInitialized=!0,e.options.isClone||e.logger.log("initialized",e.options),e.emit("initialized",e.options),c.resolve(r),n(t,r)};if(e.languages&&"v1"!==e.options.compatibilityAPI&&!e.isInitialized)return t(null,e.t.bind(e));e.changeLanguage(e.options.lng,t)};return this.options.resources||!this.options.initImmediate?u():setTimeout(u,0),c}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ce,r="string"==typeof e?e:this.language;if("function"==typeof e&&(n=e),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return n();var i=[],o=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){i.indexOf(e)<0&&i.push(e)}))};r?o(r):this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((function(e){return o(e)})),this.options.preload&&this.options.preload.forEach((function(e){return o(e)})),this.services.backendConnector.load(i,this.options.ns,(function(e){e||t.resolvedLanguage||!t.language||t.setResolvedLanguage(t.language),n(e)}))}else n(null)}},{key:"reloadResources",value:function(e,t,n){var r=w();return e||(e=this.languages),t||(t=this.options.ns),n||(n=ce),this.services.backendConnector.reload(e,t,(function(e){r.resolve(),n(e)})),r}},{key:"use",value:function(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&I.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"setResolvedLanguage",value:function(e){if(e&&this.languages&&!(["cimode","dev"].indexOf(e)>-1))for(var t=0;t<this.languages.length;t++){var n=this.languages[t];if(!(["cimode","dev"].indexOf(n)>-1)&&this.store.hasLanguageSomeTranslations(n)){this.resolvedLanguage=n;break}}}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var r=w();this.emit("languageChanging",e);var i=function(e){n.language=e,n.languages=n.services.languageUtils.toResolveHierarchy(e),n.resolvedLanguage=void 0,n.setResolvedLanguage(e)},o=function(o){e||o||!n.services.languageDetector||(o=[]);var a="string"==typeof o?o:n.services.languageUtils.getBestMatchFromCodes(o);a&&(n.language||i(a),n.translator.language||n.translator.changeLanguage(a),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage&&n.services.languageDetector.cacheUserLanguage(a)),n.loadResources(a,(function(e){!function(e,o){o?(i(o),n.translator.changeLanguage(o),n.isLanguageChangingTo=void 0,n.emit("languageChanged",o),n.logger.log("languageChanged",o)):n.isLanguageChangingTo=void 0,r.resolve((function(){return n.t.apply(n,arguments)})),t&&t(e,(function(){return n.t.apply(n,arguments)}))}(e,a)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(o):this.services.languageDetector.detect(o):o(e):o(this.services.languageDetector.detect()),r}},{key:"getFixedT",value:function(e,t,n){var i=this,o=function e(t,o){var a;if("object"!==(0,r.A)(o)){for(var s=arguments.length,l=new Array(s>2?s-2:0),c=2;c<s;c++)l[c-2]=arguments[c];a=i.options.overloadTranslationOptionHandler([t,o].concat(l))}else a=le({},o);a.lng=a.lng||e.lng,a.lngs=a.lngs||e.lngs,a.ns=a.ns||e.ns,a.keyPrefix=a.keyPrefix||n||e.keyPrefix;var u,d=i.options.keySeparator||".";return u=a.keyPrefix&&Array.isArray(t)?t.map((function(e){return"".concat(a.keyPrefix).concat(d).concat(e)})):a.keyPrefix?"".concat(a.keyPrefix).concat(d).concat(t):t,i.t(u,a)};return"string"==typeof e?o.lng=e:o.lngs=e,o.ns=t,o.keyPrefix=n,o}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var r=n.lng||this.resolvedLanguage||this.languages[0],i=!!this.options&&this.options.fallbackLng,o=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;var a=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};if(n.precheck){var s=n.precheck(this,a);if(void 0!==s)return s}return!(!this.hasResourceBundle(r,e)&&this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages)&&(!a(r,e)||i&&!a(o,e)))}},{key:"loadNamespaces",value:function(e,t){var n=this,r=w();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=w();"string"==typeof e&&(e=[e]);var r=this.options.preload||[],i=e.filter((function(e){return r.indexOf(e)<0}));return i.length?(this.options.preload=r.concat(i),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){if(e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!e)return"rtl";var t=this.services&&this.services.languageUtils||new W(oe());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(t.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}},{key:"cloneInstance",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:ce,r=le(le(le({},this.options),t),{isClone:!0}),i=new l(r);return void 0===t.debug&&void 0===t.prefix||(i.logger=i.logger.clone(t)),["store","services","language"].forEach((function(t){i[t]=e[t]})),i.services=le({},this.services),i.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i.translator=new B(i.services,i.options),i.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];i.emit.apply(i,[e].concat(n))})),i.init(r,n),i.translator.options=i.options,i.translator.backendConnector.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),l}(x);(0,f.A)(ue,"createInstance",(function(){return new ue(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}));var de=ue.createInstance();de.createInstance=ue.createInstance,de.createInstance,de.dir,de.init,de.loadResources,de.reloadResources,de.use,de.changeLanguage,de.getFixedT,de.t,de.exists,de.setDefaultNamespace,de.hasLoadedNamespace,de.loadNamespaces,de.loadLanguages;var fe=i(3981);const he={returnNull:!1,en:{translation:JSON.parse('{"臺灣最具指標性且全面的":"THE MOST COMPLETE, AUTHORITATIVE","物種名錄資料庫":"LIST OF TAIWAN’S SPECIES","The most complete, authoritative list of Taiwan’s species":"","請輸入關鍵字":"Enter keywords","收錄物種數":"SPECIES AND <1 /> INFRASPECIES","收錄學名數":"SCIENTIFIC NAMES","收錄文獻數":"REFERENCES","全部":"ALL","網站公告":"NOTICES","名錄增修":"UPDATES","資料下載":"DOWNLOAD","DOWNLOAD":"","首頁":"HOME","資料工具":"TOOL","說明文件":"README","名錄檔案 (學名)":"CHECKLIST (NAME)","名錄檔案 (物種)":"CHECKLIST (TAXON)","API說明文件":"API DOCUMENTATION","API DOCUMENTATION":"","更新日期":"Updated","最新消息":"NEWS","更多資訊":"MORE","主題文章":"ARTICLES","分類系統":"TAXONOMY","保育指標":"CONSERVATION","資料統計":"STATISTICS","STATISTICS":"","上一頁":"Previous","下一頁":"Next","上一則":"Previous","下一則":"Next","回列表":"Back to List","各界物種數統計":"Statistics of Species of Each Kingdom","臺灣各類生物種數與特有比例":"Endemic Ratio of Biological Groups in Taiwan","昆蟲":"Insects","魚類":"Fishes","爬蟲類":"Reptiles","真菌":"Fungi","植物":"Plants","鳥類":"Birds","哺乳類":"Mammals","其他":"Other","特有種":"Endemic species / infraspecies","各階層數量統計":"Statistics of Each Rank","物種來源":"Species Origin","臺灣與全球物種數比較":"Taiwan and Global Species Comparison","全球物種數更新時間":"Global species updated at","全球現有種數":"Global Species","臺灣現有種數":"Taiwan Species","查看比較總表":"Comparison Summary","臺灣保育類統計":"Protected Category in Taiwan","棲地環境統計":"Habitat","臺灣紅皮書評估統計":"Red List of Taiwan in Category","IUCN評估統計":"IUCN Category","CITES附錄統計":"CITES Appendix","SPECIES AND":"","INFRASPECIES":"","SCIENTIFIC NAMES":"","REFERENCES":"","NEWS":"","ARTICLES":"","各界比較":"Compare Kingdoms","植物界比較":"Compare Plantae","動物界比較":"Compare Animalia","節肢動物門比較":"Compare Arthropoda","脊索動物門比較":"Compare Chordata","臺灣名錄主要提供者":"Main Provider of TaiCOL","界":"Kingdom","門":"Phylum","綱":"Class","總綱/綱":"Superclass/Class","原生":"Native","歸化":"Naturalized","入侵":"Invasive","栽培豢養":"Cultured","物種數":"Species","排除有種下分類群的種階層":"Exclude the species with infraspecies","包含種上階層學名":"Include higher taxon rank names","請至少輸入一個搜尋項目，若有輸入日期必須填入完整年月日":"Please fill at least one searching item. Date must include year, month and day.","錯誤描述":"Your feedback","來源文獻/參考資料":"Reference","更新通知與否":"Update notification","聯絡姓名":"Your name","請輸入主旨":"Please enter a subject","主旨":"Subject","病毒":"Viruses","細菌界":"Bacteria","古菌界":"Archaea","原生生物界":"Protozoa","原藻界":"Chromista","真菌界":"Fungi","植物界":"Plantae","動物界":"Animalia","藻類植物":"Charophyta, Chlorophyta, Rhodophyta","苔蘚植物":"Anthocerotophyta, Bryophyta, Marchantiophyta","蕨類植物":"Lycopodiopsida, Polypodiopsida","裸子植物":"Cycadopsida, Ginkgoopsida, Pinopsida","顯花植物":"Magnoliopsida","海綿動物門":"Porifera","刺胞動物門":"Cnidaria","扁形動物門":"Platyhelminthes","圓形動物門":"Nematoda","線形動物門":"Nematomorpha","鉤頭動物門":"Acanthocephala","輪蟲動物門":"Rotifera","節肢動物門":"Arthropoda","紐形動物門":"Nemertea","環節動物門":"Annelida","星蟲動物門":"Sipuncula","軟體動物門":"Mollusca","腕足動物門":"Brachiopoda","緩步動物門":"Tardigrada","苔蘚動物門":"Bryozoa","毛顎動物門":"Chaetognatha","棘皮動物門":"Echinodermata","脊索動物門":"Chordata","介形蟲綱":"Ostracoda","海蜘蛛綱":"Pycnogonida","軟甲綱":"Malacostraca","橈足綱":"Copepoda","鞘甲綱":"Thecostraca","蛛形綱":"Arachnida","倍足綱":"Diplopoda","唇足綱":"Chilopoda","內口綱":"Entognatha","彈尾綱":"Collembola","昆蟲綱":"Insecta","鰓足綱":"Branchiopoda","肢口綱":"Merostomata","狹心綱":"Leptocardii","海樽綱":"Thaliacea","海鞘綱":"Ascidiacea","盲鰻綱":"Myxini","軟骨魚總綱":"Chondrichthyes","條鰭魚總綱":"Actinopterygii","爬蟲綱":"Reptilia","兩生綱":"Amphibia","鳥綱":"Aves","哺乳綱":"Mammalia","合計":"Total","陸生":"Terrestrial","淡水":"Freshwater","半鹹水":"Brackish","海洋":"Marine","第 I 級 瀕臨絕種野生動物":"Endangered","第 II 級 珍貴稀有野生動物":"Precious and Rare","第 III 級 其他應予保育之野生動物":"Other Conserved","文資法珍貴稀有植物":"Rare and Valuable Plants","單位：種":"Unit: species","單位：種 / 種下":"Unit: species / infraspecies","特有種 / 種下":"Endemic species / infraspecies","附錄一":"Appendix I","附錄二":"Appendix II","附錄三":"Appendix III","無資料":"No data"}')}};function pe(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}de.use(fe.initReactI18next).init({returnNull:!1,resources:he,fallbackLng:"zh-hant",lng:"zh-hant",interpolation:{escapeValue:!1}});let ge=function e(t,n){function r(e,r,i){if("undefined"!=typeof document){"number"==typeof(i=pe({},n,i)).expires&&(i.expires=new Date(Date.now()+864e5*i.expires)),i.expires&&(i.expires=i.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var o="";for(var a in i)i[a]&&(o+="; "+a,!0!==i[a]&&(o+="="+i[a].split(";")[0]));return document.cookie=e+"="+t.write(r,e)+o}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],r={},i=0;i<n.length;i++){var o=n[i].split("="),a=o.slice(1).join("=");try{var s=decodeURIComponent(o[0]);if(r[s]=t.read(a,s),e===s)break}catch(e){}}return e?r[e]:r}},remove:function(e,t){r(e,"",pe({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,pe({},this.attributes,t))},withConverter:function(t){return e(pe({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"}).get("django_language");window.location.pathname.includes("zh-hant")?ge="zh-hant":window.location.pathname.includes("en-us")&&(ge="en-us"),de.changeLanguage(ge);const me=document.querySelector("#statistics-container");me&&t.render(e.createElement(n.A),me)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,