/*! For license information please see index.bundle.js.LICENSE.txt */
(()=>{var e={2192:function(e,t){!function(e){"use strict";function t(e,t){for(var n=0;n<t.length;n++){var r=t[n];r.enumerable=r.enumerable||!1,r.configurable=!0,"value"in r&&(r.writable=!0),Object.defineProperty(e,r.key,r)}}var n,r,a,i,s,o,u,l,d,c,f,m,_=function(){return n||"undefined"!=typeof window&&(n=window.gsap)&&n.registerPlugin&&n},h=1,p=[],y=[],g=[],v=Date.now,M=function(e,t){return t},L=function(e,t){return~g.indexOf(e)&&g[g.indexOf(e)+1][t]},k=function(e){return!!~c.indexOf(e)},b=function(e,t,n,r,a){return e.addEventListener(t,n,{passive:!r,capture:!!a})},Y=function(e,t,n,r){return e.removeEventListener(t,n,!!r)},w="scrollLeft",D="scrollTop",T=function(){return f&&f.isPressed||y.cache++},S=function(e,t){var n=function n(r){if(r||0===r){h&&(a.history.scrollRestoration="manual");var i=f&&f.isPressed;r=n.v=Math.round(r)||(f&&f.iOS?1:0),e(r),n.cacheID=y.cache,i&&M("ss",r)}else(t||y.cache!==n.cacheID||M("ref"))&&(n.cacheID=y.cache,n.v=e());return n.v+n.offset};return n.offset=0,e&&n},x={s:w,p:"left",p2:"Left",os:"right",os2:"Right",d:"width",d2:"Width",a:"x",sc:S((function(e){return arguments.length?a.scrollTo(e,O.sc()):a.pageXOffset||i[w]||s[w]||o[w]||0}))},O={s:D,p:"top",p2:"Top",os:"bottom",os2:"Bottom",d:"height",d2:"Height",a:"y",op:x,sc:S((function(e){return arguments.length?a.scrollTo(x.sc(),e):a.pageYOffset||i[D]||s[D]||o[D]||0}))},E=function(e){return n.utils.toArray(e)[0]||("string"==typeof e&&!1!==n.config().nullTargetWarn?console.warn("Element not found:",e):null)},j=function(e,t){var r=t.s,a=t.sc;k(e)&&(e=i.scrollingElement||s);var o=y.indexOf(e),u=a===O.sc?1:2;!~o&&(o=y.push(e)-1),y[o+u]||e.addEventListener("scroll",T);var l=y[o+u],d=l||(y[o+u]=S(L(e,r),!0)||(k(e)?a:S((function(t){return arguments.length?e[r]=t:e[r]}))));return d.target=e,l||(d.smooth="smooth"===n.getProperty(e,"scrollBehavior")),d},P=function(e,t,n){var r=e,a=e,i=v(),s=i,o=t||50,u=Math.max(500,3*o),l=function(e,t){var u=v();t||u-i>o?(a=r,r=e,s=i,i=u):n?r+=e:r=a+(e-a)/(u-s)*(i-s)};return{update:l,reset:function(){a=r=n?0:r,s=i=0},getVelocity:function(e){var t=s,o=a,d=v();return(e||0===e)&&e!==r&&l(e),i===s||d-s>u?0:(r+(n?o:-o))/((n?d:i)-t)*1e3}}},H=function(e,t){return t&&!e._gsapAllow&&e.preventDefault(),e.changedTouches?e.changedTouches[0]:e},C=function(e){var t=Math.max.apply(Math,e),n=Math.min.apply(Math,e);return Math.abs(t)>=Math.abs(n)?t:n},A=function(){var e,t,r,a;(d=n.core.globals().ScrollTrigger)&&d.core&&(e=d.core,t=e.bridge||{},r=e._scrollers,a=e._proxies,r.push.apply(r,y),a.push.apply(a,g),y=r,g=a,M=function(e,n){return t[e](n)})},N=function(e){return(n=e||_())&&"undefined"!=typeof document&&document.body&&(a=window,i=document,s=i.documentElement,o=i.body,c=[a,i,s,o],n.utils.clamp,l="onpointerenter"in o?"pointer":"mouse",u=R.isTouch=a.matchMedia&&a.matchMedia("(hover: none), (pointer: coarse)").matches?1:"ontouchstart"in a||navigator.maxTouchPoints>0||navigator.msMaxTouchPoints>0?2:0,m=R.eventTypes=("ontouchstart"in s?"touchstart,touchmove,touchcancel,touchend":"onpointerdown"in s?"pointerdown,pointermove,pointercancel,pointerup":"mousedown,mousemove,mouseup,mouseup").split(","),setTimeout((function(){return h=0}),500),A(),r=1),r};x.op=O,y.cache=0;var R=function(){function e(e){this.init(e)}return e.prototype.init=function(e){r||N(n)||console.warn("Please gsap.registerPlugin(Observer)"),d||A();var t=e.tolerance,c=e.dragMinimum,_=e.type,h=e.target,y=e.lineHeight,g=e.debounce,M=e.preventDefault,L=e.onStop,w=e.onStopDelay,D=e.ignore,S=e.wheelSpeed,R=e.event,F=e.onDragStart,z=e.onDragEnd,W=e.onDrag,I=e.onPress,U=e.onRelease,B=e.onRight,V=e.onLeft,J=e.onUp,G=e.onDown,q=e.onChangeX,$=e.onChangeY,K=e.onChange,Q=e.onToggleX,X=e.onToggleY,Z=e.onHover,ee=e.onHoverEnd,te=e.onMove,ne=e.ignoreCheck,re=e.isNormalizer,ae=e.onGestureStart,ie=e.onGestureEnd,se=e.onWheel,oe=e.onEnable,ue=e.onDisable,le=e.onClick,de=e.scrollSpeed,ce=e.capture,fe=e.allowClicks,me=e.lockAxis,_e=e.onLockAxis;this.target=h=E(h)||s,this.vars=e,D&&(D=n.utils.toArray(D)),t=t||1e-9,c=c||0,S=S||1,de=de||1,_=_||"wheel,touch,pointer",g=!1!==g,y||(y=parseFloat(a.getComputedStyle(o).lineHeight)||22);var he,pe,ye,ge,ve,Me,Le,ke=this,be=0,Ye=0,we=j(h,x),De=j(h,O),Te=we(),Se=De(),xe=~_.indexOf("touch")&&!~_.indexOf("pointer")&&"pointerdown"===m[0],Oe=k(h),Ee=h.ownerDocument||i,je=[0,0,0],Pe=[0,0,0],He=0,Ce=function(){return He=v()},Ae=function(e,t){return(ke.event=e)&&D&&~D.indexOf(e.target)||t&&xe&&"touch"!==e.pointerType||ne&&ne(e,t)},Ne=function(){var e=ke.deltaX=C(je),n=ke.deltaY=C(Pe),r=Math.abs(e)>=t,a=Math.abs(n)>=t;K&&(r||a)&&K(ke,e,n,je,Pe),r&&(B&&ke.deltaX>0&&B(ke),V&&ke.deltaX<0&&V(ke),q&&q(ke),Q&&ke.deltaX<0!=be<0&&Q(ke),be=ke.deltaX,je[0]=je[1]=je[2]=0),a&&(G&&ke.deltaY>0&&G(ke),J&&ke.deltaY<0&&J(ke),$&&$(ke),X&&ke.deltaY<0!=Ye<0&&X(ke),Ye=ke.deltaY,Pe[0]=Pe[1]=Pe[2]=0),(ge||ye)&&(te&&te(ke),ye&&(W(ke),ye=!1),ge=!1),Me&&!(Me=!1)&&_e&&_e(ke),ve&&(se(ke),ve=!1),he=0},Re=function(e,t,n){je[n]+=e,Pe[n]+=t,ke._vx.update(e),ke._vy.update(t),g?he||(he=requestAnimationFrame(Ne)):Ne()},Fe=function(e,t){me&&!Le&&(ke.axis=Le=Math.abs(e)>Math.abs(t)?"x":"y",Me=!0),"y"!==Le&&(je[2]+=e,ke._vx.update(e,!0)),"x"!==Le&&(Pe[2]+=t,ke._vy.update(t,!0)),g?he||(he=requestAnimationFrame(Ne)):Ne()},ze=function(e){if(!Ae(e,1)){var t=(e=H(e,M)).clientX,n=e.clientY,r=t-ke.x,a=n-ke.y,i=ke.isDragging;ke.x=t,ke.y=n,(i||Math.abs(ke.startX-t)>=c||Math.abs(ke.startY-n)>=c)&&(W&&(ye=!0),i||(ke.isDragging=!0),Fe(r,a),i||F&&F(ke))}},We=ke.onPress=function(e){Ae(e,1)||(ke.axis=Le=null,pe.pause(),ke.isPressed=!0,e=H(e),be=Ye=0,ke.startX=ke.x=e.clientX,ke.startY=ke.y=e.clientY,ke._vx.reset(),ke._vy.reset(),b(re?h:Ee,m[1],ze,M,!0),ke.deltaX=ke.deltaY=0,I&&I(ke))},Ie=function(e){if(!Ae(e,1)){Y(re?h:Ee,m[1],ze,!0);var t=ke.isDragging&&(Math.abs(ke.x-ke.startX)>3||Math.abs(ke.y-ke.startY)>3),r=H(e);t||(ke._vx.reset(),ke._vy.reset(),M&&fe&&n.delayedCall(.08,(function(){if(v()-He>300&&!e.defaultPrevented)if(e.target.click)e.target.click();else if(Ee.createEvent){var t=Ee.createEvent("MouseEvents");t.initMouseEvent("click",!0,!0,a,1,r.screenX,r.screenY,r.clientX,r.clientY,!1,!1,!1,!1,0,null),e.target.dispatchEvent(t)}}))),ke.isDragging=ke.isGesturing=ke.isPressed=!1,L&&!re&&pe.restart(!0),z&&t&&z(ke),U&&U(ke,t)}},Ue=function(e){return e.touches&&e.touches.length>1&&(ke.isGesturing=!0)&&ae(e,ke.isDragging)},Be=function(){return(ke.isGesturing=!1)||ie(ke)},Ve=function(e){if(!Ae(e)){var t=we(),n=De();Re((t-Te)*de,(n-Se)*de,1),Te=t,Se=n,L&&pe.restart(!0)}},Je=function(e){if(!Ae(e)){e=H(e,M),se&&(ve=!0);var t=(1===e.deltaMode?y:2===e.deltaMode?a.innerHeight:1)*S;Re(e.deltaX*t,e.deltaY*t,0),L&&!re&&pe.restart(!0)}},Ge=function(e){if(!Ae(e)){var t=e.clientX,n=e.clientY,r=t-ke.x,a=n-ke.y;ke.x=t,ke.y=n,ge=!0,(r||a)&&Fe(r,a)}},qe=function(e){ke.event=e,Z(ke)},$e=function(e){ke.event=e,ee(ke)},Ke=function(e){return Ae(e)||H(e,M)&&le(ke)};pe=ke._dc=n.delayedCall(w||.25,(function(){ke._vx.reset(),ke._vy.reset(),pe.pause(),L&&L(ke)})).pause(),ke.deltaX=ke.deltaY=0,ke._vx=P(0,50,!0),ke._vy=P(0,50,!0),ke.scrollX=we,ke.scrollY=De,ke.isDragging=ke.isGesturing=ke.isPressed=!1,ke.enable=function(e){return ke.isEnabled||(b(Oe?Ee:h,"scroll",T),_.indexOf("scroll")>=0&&b(Oe?Ee:h,"scroll",Ve,M,ce),_.indexOf("wheel")>=0&&b(h,"wheel",Je,M,ce),(_.indexOf("touch")>=0&&u||_.indexOf("pointer")>=0)&&(b(h,m[0],We,M,ce),b(Ee,m[2],Ie),b(Ee,m[3],Ie),fe&&b(h,"click",Ce,!1,!0),le&&b(h,"click",Ke),ae&&b(Ee,"gesturestart",Ue),ie&&b(Ee,"gestureend",Be),Z&&b(h,l+"enter",qe),ee&&b(h,l+"leave",$e),te&&b(h,l+"move",Ge)),ke.isEnabled=!0,e&&e.type&&We(e),oe&&oe(ke)),ke},ke.disable=function(){ke.isEnabled&&(p.filter((function(e){return e!==ke&&k(e.target)})).length||Y(Oe?Ee:h,"scroll",T),ke.isPressed&&(ke._vx.reset(),ke._vy.reset(),Y(re?h:Ee,m[1],ze,!0)),Y(Oe?Ee:h,"scroll",Ve,ce),Y(h,"wheel",Je,ce),Y(h,m[0],We,ce),Y(Ee,m[2],Ie),Y(Ee,m[3],Ie),Y(h,"click",Ce,!0),Y(h,"click",Ke),Y(Ee,"gesturestart",Ue),Y(Ee,"gestureend",Be),Y(h,l+"enter",qe),Y(h,l+"leave",$e),Y(h,l+"move",Ge),ke.isEnabled=ke.isPressed=ke.isDragging=!1,ue&&ue(ke))},ke.kill=function(){ke.disable();var e=p.indexOf(ke);e>=0&&p.splice(e,1),f===ke&&(f=0)},p.push(ke),re&&k(h)&&(f=ke),ke.enable(R)},c=e,(_=[{key:"velocityX",get:function(){return this._vx.getVelocity()}},{key:"velocityY",get:function(){return this._vy.getVelocity()}}])&&t(c.prototype,_),h&&t(c,h),e;var c,_,h}();R.version="3.11.3",R.create=function(e){return new R(e)},R.register=N,R.getAll=function(){return p.slice()},R.getById=function(e){return p.filter((function(t){return t.vars.id===e}))[0]},_()&&n.registerPlugin(R);var F,z,W,I,U,B,V,J,G,q,$,K,Q,X,Z,ee,te,ne,re,ae,ie,se,oe,ue,le,de,ce,fe,me,_e,he,pe,ye,ge,ve=1,Me=Date.now,Le=Me(),ke=0,be=0,Ye=function(){return X=1},we=function(){return X=0},De=function(e){return e},Te=function(e){return Math.round(1e5*e)/1e5||0},Se=function(){return"undefined"!=typeof window},xe=function(){return F||Se()&&(F=window.gsap)&&F.registerPlugin&&F},Oe=function(e){return!!~V.indexOf(e)},Ee=function(e){return L(e,"getBoundingClientRect")||(Oe(e)?function(){return It.width=W.innerWidth,It.height=W.innerHeight,It}:function(){return rt(e)})},je=function(e,t){var n=t.s,r=t.d2,a=t.d,i=t.a;return(n="scroll"+r)&&(i=L(e,n))?i()-Ee(e)()[a]:Oe(e)?(U[n]||B[n])-(W["inner"+r]||U["client"+r]||B["client"+r]):e[n]-e["offset"+r]},Pe=function(e,t){for(var n=0;n<re.length;n+=3)(!t||~t.indexOf(re[n+1]))&&e(re[n],re[n+1],re[n+2])},He=function(e){return"string"==typeof e},Ce=function(e){return"function"==typeof e},Ae=function(e){return"number"==typeof e},Ne=function(e){return"object"==typeof e},Re=function(e,t,n){return e&&e.progress(t?0:1)&&n&&e.pause()},Fe=function(e,t){if(e.enabled){var n=t(e);n&&n.totalTime&&(e.callbackAnimation=n)}},ze=Math.abs,We="left",Ie="right",Ue="bottom",Be="width",Ve="height",Je="Right",Ge="Left",qe="Top",$e="Bottom",Ke="padding",Qe="margin",Xe="Width",Ze="Height",et="px",tt=function(e){return W.getComputedStyle(e)},nt=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},rt=function(e,t){var n=t&&"matrix(1, 0, 0, 1, 0, 0)"!==tt(e)[Z]&&F.to(e,{x:0,y:0,xPercent:0,yPercent:0,rotation:0,rotationX:0,rotationY:0,scale:1,skewX:0,skewY:0}).progress(1),r=e.getBoundingClientRect();return n&&n.progress(0).kill(),r},at=function(e,t){var n=t.d2;return e["offset"+n]||e["client"+n]||0},it=function(e){var t,n=[],r=e.labels,a=e.duration();for(t in r)n.push(r[t]/a);return n},st=function(e){var t=F.utils.snap(e),n=Array.isArray(e)&&e.slice(0).sort((function(e,t){return e-t}));return n?function(e,r,a){var i;if(void 0===a&&(a=.001),!r)return t(e);if(r>0){for(e-=a,i=0;i<n.length;i++)if(n[i]>=e)return n[i];return n[i-1]}for(i=n.length,e+=a;i--;)if(n[i]<=e)return n[i];return n[0]}:function(n,r,a){void 0===a&&(a=.001);var i=t(n);return!r||Math.abs(i-n)<a||i-n<0==r<0?i:t(r<0?n-e:n+e)}},ot=function(e,t,n,r){return n.split(",").forEach((function(n){return e(t,n,r)}))},ut=function(e,t,n,r,a){return e.addEventListener(t,n,{passive:!r,capture:!!a})},lt=function(e,t,n,r){return e.removeEventListener(t,n,!!r)},dt=function(e,t,n){return n&&n.wheelHandler&&e(t,"wheel",n)},ct={startColor:"green",endColor:"red",indent:0,fontSize:"16px",fontWeight:"normal"},ft={toggleActions:"play",anticipatePin:0},mt={top:0,left:0,center:.5,bottom:1,right:1},_t=function(e,t){if(He(e)){var n=e.indexOf("="),r=~n?+(e.charAt(n-1)+1)*parseFloat(e.substr(n+1)):0;~n&&(e.indexOf("%")>n&&(r*=t/100),e=e.substr(0,n-1)),e=r+(e in mt?mt[e]*t:~e.indexOf("%")?parseFloat(e)*t/100:parseFloat(e)||0)}return e},ht=function(e,t,n,r,a,i,s,o){var u=a.startColor,l=a.endColor,d=a.fontSize,c=a.indent,f=a.fontWeight,m=I.createElement("div"),_=Oe(n)||"fixed"===L(n,"pinType"),h=-1!==e.indexOf("scroller"),p=_?B:n,y=-1!==e.indexOf("start"),g=y?u:l,v="border-color:"+g+";font-size:"+d+";color:"+g+";font-weight:"+f+";pointer-events:none;white-space:nowrap;font-family:sans-serif,Arial;z-index:1000;padding:4px 8px;border-width:0;border-style:solid;";return v+="position:"+((h||o)&&_?"fixed;":"absolute;"),(h||o||!_)&&(v+=(r===O?Ie:Ue)+":"+(i+parseFloat(c))+"px;"),s&&(v+="box-sizing:border-box;text-align:left;width:"+s.offsetWidth+"px;"),m._isStart=y,m.setAttribute("class","gsap-marker-"+e+(t?" marker-"+t:"")),m.style.cssText=v,m.innerText=t||0===t?e+"-"+t:e,p.children[0]?p.insertBefore(m,p.children[0]):p.appendChild(m),m._offset=m["offset"+r.op.d2],pt(m,0,r,y),m},pt=function(e,t,n,r){var a={display:"block"},i=n[r?"os2":"p2"],s=n[r?"p2":"os2"];e._isFlipped=r,a[n.a+"Percent"]=r?-100:0,a[n.a]=r?"1px":0,a["border"+i+Xe]=1,a["border"+s+Xe]=0,a[n.p]=t+"px",F.set(e,a)},yt=[],gt={},vt=function(){return Me()-ke>34&&(he||(he=requestAnimationFrame(Ct)))},Mt=function(){(!oe||!oe.isPressed||oe.startX>B.clientWidth)&&(y.cache++,oe?he||(he=requestAnimationFrame(Ct)):Ct(),ke||Dt("scrollStart"),ke=Me())},Lt=function(){de=W.innerWidth,le=W.innerHeight},kt=function(){y.cache++,!Q&&!se&&!I.fullscreenElement&&!I.webkitFullscreenElement&&(!ue||de!==W.innerWidth||Math.abs(W.innerHeight-le)>.25*W.innerHeight)&&J.restart(!0)},bt={},Yt=[],wt=function e(){return lt(Gt,"scrollEnd",e)||jt(!0)},Dt=function(e){return bt[e]&&bt[e].map((function(e){return e()}))||Yt},Tt=[],St=function(e){for(var t=0;t<Tt.length;t+=5)(!e||Tt[t+4]&&Tt[t+4].query===e)&&(Tt[t].style.cssText=Tt[t+1],Tt[t].getBBox&&Tt[t].setAttribute("transform",Tt[t+2]||""),Tt[t+3].uncache=1)},xt=function(e,t){var n;for(ee=0;ee<yt.length;ee++)!(n=yt[ee])||t&&n._ctx!==t||(e?n.kill(1):n.revert(!0,!0));t&&St(t),t||Dt("revert")},Ot=function(e,t){y.cache++,(t||!pe)&&y.forEach((function(e){return Ce(e)&&e.cacheID++&&(e.rec=0)})),He(e)&&(W.history.scrollRestoration=me=e)},Et=0,jt=function(e,t){if(!ke||e){pe=Gt.isRefreshing=!0,y.forEach((function(e){return Ce(e)&&e.cacheID++&&(e.rec=e())}));var n=Dt("refreshInit");ae&&Gt.sort(),t||xt(),y.forEach((function(e){Ce(e)&&(e.smooth&&(e.target.style.scrollBehavior="auto"),e(0))})),yt.slice(0).forEach((function(e){return e.refresh()})),yt.forEach((function(e,t){if(e._subPinOffset&&e.pin){var n=e.vars.horizontal?"offsetWidth":"offsetHeight",r=e.pin[n];e.revert(!0,1),e.adjustPinSpacing(e.pin[n]-r),e.revert(!1,1)}})),yt.forEach((function(e){return"max"===e.vars.end&&e.setPositions(e.start,Math.max(e.start+1,je(e.scroller,e._dir)))})),n.forEach((function(e){return e&&e.render&&e.render(-1)})),y.forEach((function(e){Ce(e)&&(e.smooth&&requestAnimationFrame((function(){return e.target.style.scrollBehavior="smooth"})),e.rec&&e(e.rec))})),Ot(me,1),J.pause(),Et++,Ct(2),yt.forEach((function(e){return Ce(e.vars.onRefresh)&&e.vars.onRefresh(e)})),pe=Gt.isRefreshing=!1,Dt("refresh")}else ut(Gt,"scrollEnd",wt)},Pt=0,Ht=1,Ct=function(e){if(!pe||2===e){Gt.isUpdating=!0,ge&&ge.update(0);var t=yt.length,n=Me(),r=n-Le>=50,a=t&&yt[0].scroll();if(Ht=Pt>a?-1:1,Pt=a,r&&(ke&&!X&&n-ke>200&&(ke=0,Dt("scrollEnd")),$=Le,Le=n),Ht<0){for(ee=t;ee-- >0;)yt[ee]&&yt[ee].update(0,r);Ht=1}else for(ee=0;ee<t;ee++)yt[ee]&&yt[ee].update(0,r);Gt.isUpdating=!1}he=0},At=[We,"top",Ue,Ie,Qe+$e,Qe+Je,Qe+qe,Qe+Ge,"display","flexShrink","float","zIndex","gridColumnStart","gridColumnEnd","gridRowStart","gridRowEnd","gridArea","justifySelf","alignSelf","placeSelf","order"],Nt=At.concat([Be,Ve,"boxSizing","max"+Xe,"max"+Ze,"position",Qe,Ke,Ke+qe,Ke+Je,Ke+$e,Ke+Ge]),Rt=function(e,t,n,r){if(!e._gsap.swappedIn){for(var a,i=At.length,s=t.style,o=e.style;i--;)s[a=At[i]]=n[a];s.position="absolute"===n.position?"absolute":"relative","inline"===n.display&&(s.display="inline-block"),o[Ue]=o[Ie]="auto",s.flexBasis=n.flexBasis||"auto",s.overflow="visible",s.boxSizing="border-box",s[Be]=at(e,x)+et,s[Ve]=at(e,O)+et,s[Ke]=o[Qe]=o.top=o[We]="0",zt(r),o[Be]=o["max"+Xe]=n[Be],o[Ve]=o["max"+Ze]=n[Ve],o[Ke]=n[Ke],e.parentNode!==t&&(e.parentNode.insertBefore(t,e),t.appendChild(e)),e._gsap.swappedIn=!0}},Ft=/([A-Z])/g,zt=function(e){if(e){var t,n,r=e.t.style,a=e.length,i=0;for((e.t._gsap||F.core.getCache(e.t)).uncache=1;i<a;i+=2)n=e[i+1],t=e[i],n?r[t]=n:r[t]&&r.removeProperty(t.replace(Ft,"-$1").toLowerCase())}},Wt=function(e){for(var t=Nt.length,n=e.style,r=[],a=0;a<t;a++)r.push(Nt[a],n[Nt[a]]);return r.t=e,r},It={left:0,top:0},Ut=function(e,t,n,r,a,i,s,o,u,l,d,c,f){Ce(e)&&(e=e(o)),He(e)&&"max"===e.substr(0,3)&&(e=c+("="===e.charAt(4)?_t("0"+e.substr(3),n):0));var m,_,h,p=f?f.time():0;if(f&&f.seek(0),Ae(e))s&&pt(s,n,r,!0);else{Ce(t)&&(t=t(o));var y,g,v,M,L=(e||"0").split(" ");h=E(t)||B,(y=rt(h)||{})&&(y.left||y.top)||"none"!==tt(h).display||(M=h.style.display,h.style.display="block",y=rt(h),M?h.style.display=M:h.style.removeProperty("display")),g=_t(L[0],y[r.d]),v=_t(L[1]||"0",n),e=y[r.p]-u[r.p]-l+g+a-v,s&&pt(s,v,r,n-v<20||s._isStart&&v>20),n-=n-v}if(i){var k=e+n,b=i._isStart;m="scroll"+r.d2,pt(i,k,r,b&&k>20||!b&&(d?Math.max(B[m],U[m]):i.parentNode[m])<=k+1),d&&(u=rt(s),d&&(i.style[r.op.p]=u[r.op.p]-r.op.m-i._offset+et))}return f&&h&&(m=rt(h),f.seek(c),_=rt(h),f._caScrollDist=m[r.p]-_[r.p],e=e/f._caScrollDist*c),f&&f.seek(p),f?e:Math.round(e)},Bt=/(webkit|moz|length|cssText|inset)/i,Vt=function(e,t,n,r){if(e.parentNode!==t){var a,i,s=e.style;if(t===B){for(a in e._stOrig=s.cssText,i=tt(e))+a||Bt.test(a)||!i[a]||"string"!=typeof s[a]||"0"===a||(s[a]=i[a]);s.top=n,s.left=r}else s.cssText=e._stOrig;F.core.getCache(e).uncache=1,t.appendChild(e)}},Jt=function(e,t){var n,r,a=j(e,t),i="_scroll"+t.p2,s=function t(s,o,u,l,d){var c=t.tween,f=o.onComplete,m={};return u=u||a(),d=l&&d||0,l=l||s-u,c&&c.kill(),n=Math.round(u),o[i]=s,o.modifiers=m,m[i]=function(e){return(e=Math.round(a()))!==n&&e!==r&&Math.abs(e-n)>3&&Math.abs(e-r)>3?(c.kill(),t.tween=0):e=u+l*c.ratio+d*c.ratio*c.ratio,r=n,n=Math.round(e)},o.onComplete=function(){t.tween=0,f&&f.call(c)},c=t.tween=F.to(e,o)};return e[i]=a,a.wheelHandler=function(){return s.tween&&s.tween.kill()&&(s.tween=0)},ut(e,"wheel",a.wheelHandler),s},Gt=function(){function e(t,n){z||e.register(F)||console.warn("Please gsap.registerPlugin(ScrollTrigger)"),this.init(t,n)}return e.prototype.init=function(t,n){if(this.progress=this.start=0,this.vars&&this.kill(!0,!0),be){var r,a,i,s,o,u,l,d,c,f,m,_,h,p,v,M,k,b,Y,w,D,T,S,P,H,C,A,N,R,z,V,J,K,Z,te,ne,re,se,oe=t=nt(He(t)||Ae(t)||t.nodeType?{trigger:t}:t,ft),ue=oe.onUpdate,le=oe.toggleClass,de=oe.id,ce=oe.onToggle,me=oe.onRefresh,he=oe.scrub,Le=oe.trigger,Ye=oe.pin,we=oe.pinSpacing,Se=oe.invalidateOnRefresh,xe=oe.anticipatePin,Pe=oe.onScrubComplete,We=oe.onSnapComplete,Ie=oe.once,Ue=oe.snap,ot=oe.pinReparent,dt=oe.pinSpacer,mt=oe.containerAnimation,pt=oe.fastScrollEnd,vt=oe.preventOverlaps,Lt=t.horizontal||t.containerAnimation&&!1!==t.horizontal?x:O,bt=!he&&0!==he,Yt=E(t.scroller||W),Dt=F.core.getCache(Yt),Tt=Oe(Yt),St="fixed"===("pinType"in t?t.pinType:L(Yt,"pinType")||Tt&&"fixed"),xt=[t.onEnter,t.onLeave,t.onEnterBack,t.onLeaveBack],Ot=bt&&t.toggleActions.split(" "),Pt="markers"in t?t.markers:ft.markers,Ct=Tt?0:parseFloat(tt(Yt)["border"+Lt.p2+Xe])||0,At=this,Nt=t.onRefreshInit&&function(){return t.onRefreshInit(At)},Ft=function(e,t,n){var r=n.d,a=n.d2,i=n.a;return(i=L(e,"getBoundingClientRect"))?function(){return i()[r]}:function(){return(t?W["inner"+a]:e["client"+a])||0}}(Yt,Tt,Lt),Bt=function(e,t){return!t||~g.indexOf(e)?Ee(e):function(){return It}}(Yt,Tt),Gt=0,qt=0,$t=j(Yt,Lt);if(fe(At),At._dir=Lt,xe*=45,At.scroller=Yt,At.scroll=mt?mt.time.bind(mt):$t,s=$t(),At.vars=t,n=n||t.animation,"refreshPriority"in t&&(ae=1,-9999===t.refreshPriority&&(ge=At)),Dt.tweenScroll=Dt.tweenScroll||{top:Jt(Yt,O),left:Jt(Yt,x)},At.tweenTo=r=Dt.tweenScroll[Lt.p],At.scrubDuration=function(e){(V=Ae(e)&&e)?z?z.duration(e):z=F.to(n,{ease:"expo",totalProgress:"+=0.001",duration:V,paused:!0,onComplete:function(){return Pe&&Pe(At)}}):(z&&z.progress(1).kill(),z=0)},n&&(n.vars.lazy=!1,n._initted||!1!==n.vars.immediateRender&&!1!==t.immediateRender&&n.duration()&&n.render(0,!0,!0),At.animation=n.pause(),n.scrollTrigger=At,At.scrubDuration(he),N=0,de||(de=n.vars.id)),yt.push(At),Ue&&(Ne(Ue)&&!Ue.push||(Ue={snapTo:Ue}),"scrollBehavior"in B.style&&F.set(Tt?[B,U]:Yt,{scrollBehavior:"auto"}),y.forEach((function(e){return Ce(e)&&e.target===(Tt?I.scrollingElement||U:Yt)&&(e.smooth=!1)})),i=Ce(Ue.snapTo)?Ue.snapTo:"labels"===Ue.snapTo?function(e){return function(t){return F.utils.snap(it(e),t)}}(n):"labelsDirectional"===Ue.snapTo?(tn=n,function(e,t){return st(it(tn))(e,t.direction)}):!1!==Ue.directional?function(e,t){return st(Ue.snapTo)(e,Me()-qt<500?0:t.direction)}:F.utils.snap(Ue.snapTo),J=Ue.duration||{min:.1,max:2},J=Ne(J)?q(J.min,J.max):q(J,J),K=F.delayedCall(Ue.delay||V/2||.1,(function(){var e=$t(),t=Me()-qt<500,a=r.tween;if(!(t||Math.abs(At.getVelocity())<10)||a||X||Gt===e)At.isActive&&Gt!==e&&K.restart(!0);else{var s=(e-u)/h,o=n&&!bt?n.totalProgress():s,d=t?0:(o-R)/(Me()-$)*1e3||0,c=F.utils.clamp(-s,1-s,ze(d/2)*d/.185),f=s+(!1===Ue.inertia?0:c),m=q(0,1,i(f,At)),_=Math.round(u+m*h),p=Ue,y=p.onStart,g=p.onInterrupt,v=p.onComplete;if(e<=l&&e>=u&&_!==e){if(a&&!a._initted&&a.data<=ze(_-e))return;!1===Ue.inertia&&(c=m-s),r(_,{duration:J(ze(.185*Math.max(ze(f-o),ze(m-o))/d/.05||0)),ease:Ue.ease||"power3",data:ze(_-e),onInterrupt:function(){return K.restart(!0)&&g&&g(At)},onComplete:function(){At.update(),Gt=$t(),N=R=n&&!bt?n.totalProgress():At.progress,We&&We(At),v&&v(At)}},e,c*h,_-e-c*h),y&&y(At,r.tween)}}})).pause()),de&&(gt[de]=At),(se=(Le=At.trigger=E(Le||Ye))&&Le._gsap&&Le._gsap.stRevert)&&(se=se(At)),Ye=!0===Ye?Le:E(Ye),He(le)&&(le={targets:Le,className:le}),Ye&&(!1===we||we===Qe||(we=!(!we&&Ye.parentNode&&Ye.parentNode.style&&"flex"===tt(Ye.parentNode).display)&&Ke),At.pin=Ye,(a=F.core.getCache(Ye)).spacer?p=a.pinState:(dt&&((dt=E(dt))&&!dt.nodeType&&(dt=dt.current||dt.nativeElement),a.spacerIsNative=!!dt,dt&&(a.spacerState=Wt(dt))),a.spacer=k=dt||I.createElement("div"),k.classList.add("pin-spacer"),de&&k.classList.add("pin-spacer-"+de),a.pinState=p=Wt(Ye)),!1!==t.force3D&&F.set(Ye,{force3D:!0}),At.spacer=k=a.spacer,A=tt(Ye),S=A[we+Lt.os2],Y=F.getProperty(Ye),w=F.quickSetter(Ye,Lt.a,et),Rt(Ye,k,A),M=Wt(Ye)),Pt){_=Ne(Pt)?nt(Pt,ct):ct,f=ht("scroller-start",de,Yt,Lt,_,0),m=ht("scroller-end",de,Yt,Lt,_,0,f),b=f["offset"+Lt.op.d2];var Kt=E(L(Yt,"content")||Yt);d=this.markerStart=ht("start",de,Kt,Lt,_,b,0,mt),c=this.markerEnd=ht("end",de,Kt,Lt,_,b,0,mt),mt&&(re=F.quickSetter([d,c],Lt.a,et)),St||g.length&&!0===L(Yt,"fixedMarkers")||(en=tt(Zt=Tt?B:Yt).position,Zt.style.position="absolute"===en||"fixed"===en?en:"relative",F.set([f,m],{force3D:!0}),H=F.quickSetter(f,Lt.a,et),C=F.quickSetter(m,Lt.a,et))}if(mt){var Qt=mt.vars.onUpdate,Xt=mt.vars.onUpdateParams;mt.eventCallback("onUpdate",(function(){At.update(0,0,1),Qt&&Qt.apply(Xt||[])}))}At.previous=function(){return yt[yt.indexOf(At)-1]},At.next=function(){return yt[yt.indexOf(At)+1]},At.revert=function(e,t){if(!t)return At.kill(!0);var r=!1!==e||!At.enabled,a=Q;r!==At.isReverted&&(r&&(te=Math.max($t(),At.scroll.rec||0),Z=At.progress,ne=n&&n.progress()),d&&[d,c,f,m].forEach((function(e){return e.style.display=r?"none":"block"})),r&&(Q=1,At.update(r)),Ye&&(r?function(e,t,n){zt(n);var r=e._gsap;if(r.spacerIsNative)zt(r.spacerState);else if(e._gsap.swappedIn){var a=t.parentNode;a&&(a.insertBefore(e,t),a.removeChild(t))}e._gsap.swappedIn=!1}(Ye,k,p):(!ot||!At.isActive)&&Rt(Ye,k,tt(Ye),P)),r||At.update(r),Q=a,At.isReverted=r)},At.refresh=function(a,i){if(!Q&&At.enabled||i)if(Ye&&a&&ke)ut(e,"scrollEnd",wt);else{!pe&&Nt&&Nt(At),Q=1,qt=Me(),r.tween&&(r.tween.kill(),r.tween=0),z&&z.pause(),Se&&n&&n.revert({kill:!1}).invalidate(),At.isReverted||At.revert(!0,!0),At._subPinOffset=!1;for(var _,y,g,L,b,w,S,H,C,A,N=Ft(),R=Bt(),W=mt?mt.duration():je(Yt,Lt),I=0,U=0,V=t.end,J=t.endTrigger||Le,G=t.start||(0!==t.start&&Le?Ye?"0 0":"0 100%":0),q=At.pinnedContainer=t.pinnedContainer&&E(t.pinnedContainer),$=Le&&Math.max(0,yt.indexOf(At))||0,X=$;X--;)(w=yt[X]).end||w.refresh(0,1)||(Q=1),!(S=w.pin)||S!==Le&&S!==Ye||w.isReverted||(A||(A=[]),A.unshift(w),w.revert(!0,!0)),w!==yt[X]&&($--,X--);for(Ce(G)&&(G=G(At)),u=Ut(G,Le,N,Lt,$t(),d,f,At,R,Ct,St,W,mt)||(Ye?-.001:0),Ce(V)&&(V=V(At)),He(V)&&!V.indexOf("+=")&&(~V.indexOf(" ")?V=(He(G)?G.split(" ")[0]:"")+V:(I=_t(V.substr(2),N),V=He(G)?G:u+I,J=Le)),l=Math.max(u,Ut(V||(J?"100% 0":W),J,N,Lt,$t()+I,c,m,At,R,Ct,St,W,mt))||-.001,h=l-u||(u-=.01)&&.001,I=0,X=$;X--;)(S=(w=yt[X]).pin)&&w.start-w._pinPush<=u&&!mt&&w.end>0&&(_=w.end-w.start,(S===Le&&w.start-w._pinPush<u||S===q)&&!Ae(G)&&(I+=_*(1-w.progress)),S===Ye&&(U+=_));if(u+=I,l+=I,At._pinPush=U,d&&I&&((_={})[Lt.a]="+="+I,q&&(_[Lt.p]="-="+$t()),F.set([d,c],_)),Ye)_=tt(Ye),L=Lt===O,g=$t(),D=parseFloat(Y(Lt.a))+U,!W&&l>1&&((Tt?B:Yt).style["overflow-"+Lt.a]="scroll"),Rt(Ye,k,_),M=Wt(Ye),y=rt(Ye,!0),H=St&&j(Yt,L?x:O)(),we&&((P=[we+Lt.os2,h+U+et]).t=k,(X=we===Ke?at(Ye,Lt)+h+U:0)&&P.push(Lt.d,X+et),zt(P),q&&yt.forEach((function(e){e.pin===q&&!1!==e.vars.pinSpacing&&(e._subPinOffset=!0)})),St&&$t(te)),St&&((b={top:y.top+(L?g-u:H)+et,left:y.left+(L?H:g-u)+et,boxSizing:"border-box",position:"fixed"})[Be]=b["max"+Xe]=Math.ceil(y.width)+et,b[Ve]=b["max"+Ze]=Math.ceil(y.height)+et,b[Qe]=b[Qe+qe]=b[Qe+Je]=b[Qe+$e]=b[Qe+Ge]="0",b[Ke]=_[Ke],b[Ke+qe]=_[Ke+qe],b[Ke+Je]=_[Ke+Je],b[Ke+$e]=_[Ke+$e],b[Ke+Ge]=_[Ke+Ge],v=function(e,t,n){for(var r,a=[],i=e.length,s=n?8:0;s<i;s+=2)r=e[s],a.push(r,r in t?t[r]:e[s+1]);return a.t=e.t,a}(p,b,ot),pe&&$t(0)),n?(C=n._initted,ie(1),n.render(n.duration(),!0,!0),T=Y(Lt.a)-D+h+U,h!==T&&St&&v.splice(v.length-2,2),n.render(0,!0,!0),C||n.invalidate(!0),n.parent||n.totalTime(n.totalTime()),ie(0)):T=h;else if(Le&&$t()&&!mt)for(y=Le.parentNode;y&&y!==B;)y._pinOffset&&(u-=y._pinOffset,l-=y._pinOffset),y=y.parentNode;A&&A.forEach((function(e){return e.revert(!1,!0)})),At.start=u,At.end=l,s=o=pe?te:$t(),mt||pe||(s<te&&$t(te),At.scroll.rec=0),At.revert(!1,!0),K&&(Gt=-1,At.isActive&&$t(u+h*Z),K.restart(!0)),Q=0,n&&bt&&(n._initted||ne)&&n.progress()!==ne&&n.progress(ne,!0).render(n.time(),!0,!0),(Z!==At.progress||mt)&&(n&&!bt&&n.totalProgress(Z,!0),At.progress=(s-u)/h===Z?0:Z),Ye&&we&&(k._pinOffset=Math.round(At.progress*T)),me&&!pe&&me(At)}},At.getVelocity=function(){return($t()-o)/(Me()-$)*1e3||0},At.endAnimation=function(){Re(At.callbackAnimation),n&&(z?z.progress(1):n.paused()?bt||Re(n,At.direction<0,1):Re(n,n.reversed()))},At.labelToScroll=function(e){return n&&n.labels&&(u||At.refresh()||u)+n.labels[e]/n.duration()*h||0},At.getTrailing=function(e){var t=yt.indexOf(At),n=At.direction>0?yt.slice(0,t).reverse():yt.slice(t+1);return(He(e)?n.filter((function(t){return t.vars.preventOverlaps===e})):n).filter((function(e){return At.direction>0?e.end<=u:e.start>=l}))},At.update=function(e,t,a){if(!mt||a||e){var i,d,c,m,_,p,y,g=pe?te:At.scroll(),L=e?0:(g-u)/h,b=L<0?0:L>1?1:L||0,Y=At.progress;if(t&&(o=s,s=mt?$t():g,Ue&&(R=N,N=n&&!bt?n.totalProgress():b)),xe&&!b&&Ye&&!Q&&!ve&&ke&&u<g+(g-o)/(Me()-$)*xe&&(b=1e-4),b!==Y&&At.enabled){if(m=(_=(i=At.isActive=!!b&&b<1)!=(!!Y&&Y<1))||!!b!=!!Y,At.direction=b>Y?1:-1,At.progress=b,m&&!Q&&(d=b&&!Y?0:1===b?1:1===Y?2:3,bt&&(c=!_&&"none"!==Ot[d+1]&&Ot[d+1]||Ot[d],y=n&&("complete"===c||"reset"===c||c in n))),vt&&(_||y)&&(y||he||!n)&&(Ce(vt)?vt(At):At.getTrailing(vt).forEach((function(e){return e.endAnimation()}))),bt||(!z||Q||ve?n&&n.totalProgress(b,!!Q):((mt||ge&&ge!==At)&&z.render(z._dp._time-z._start),z.resetTo?z.resetTo("totalProgress",b,n._tTime/n._tDur):(z.vars.totalProgress=b,z.invalidate().restart()))),Ye)if(e&&we&&(k.style[we+Lt.os2]=S),St){if(m){if(p=!e&&b>Y&&l+1>g&&g+1>=je(Yt,Lt),ot)if(e||!i&&!p)Vt(Ye,k);else{var x=rt(Ye,!0),E=g-u;Vt(Ye,B,x.top+(Lt===O?E:0)+et,x.left+(Lt===O?0:E)+et)}zt(i||p?v:M),T!==h&&b<1&&i||w(D+(1!==b||p?0:T))}}else w(Te(D+T*b));Ue&&!r.tween&&!Q&&!ve&&K.restart(!0),le&&(_||Ie&&b&&(b<1||!_e))&&G(le.targets).forEach((function(e){return e.classList[i||Ie?"add":"remove"](le.className)})),ue&&!bt&&!e&&ue(At),m&&!Q?(bt&&(y&&("complete"===c?n.pause().totalProgress(1):"reset"===c?n.restart(!0).pause():"restart"===c?n.restart(!0):n[c]()),ue&&ue(At)),!_&&_e||(ce&&_&&Fe(At,ce),xt[d]&&Fe(At,xt[d]),Ie&&(1===b?At.kill(!1,1):xt[d]=0),_||xt[d=1===b?1:3]&&Fe(At,xt[d])),pt&&!i&&Math.abs(At.getVelocity())>(Ae(pt)?pt:2500)&&(Re(At.callbackAnimation),z?z.progress(1):Re(n,"reverse"===c?1:!b,1))):bt&&ue&&!Q&&ue(At)}if(C){var j=mt?g/mt.duration()*(mt._caScrollDist||0):g;H(j+(f._isFlipped?1:0)),C(j)}re&&re(-g/mt.duration()*(mt._caScrollDist||0))}},At.enable=function(t,n){At.enabled||(At.enabled=!0,ut(Yt,"resize",kt),ut(Tt?I:Yt,"scroll",Mt),Nt&&ut(e,"refreshInit",Nt),!1!==t&&(At.progress=Z=0,s=o=Gt=$t()),!1!==n&&At.refresh())},At.getTween=function(e){return e&&r?r.tween:z},At.setPositions=function(e,t){Ye&&(D+=e-u,T+=t-e-h,we===Ke&&At.adjustPinSpacing(t-e-h)),At.start=u=e,At.end=l=t,h=t-e,At.update()},At.adjustPinSpacing=function(e){if(P){var t=P.indexOf(Lt.d)+1;P[t]=parseFloat(P[t])+e+et,P[1]=parseFloat(P[1])+e+et,zt(P)}},At.disable=function(t,n){if(At.enabled&&(!1!==t&&At.revert(!0,!0),At.enabled=At.isActive=!1,n||z&&z.pause(),te=0,a&&(a.uncache=1),Nt&&lt(e,"refreshInit",Nt),K&&(K.pause(),r.tween&&r.tween.kill()&&(r.tween=0)),!Tt)){for(var i=yt.length;i--;)if(yt[i].scroller===Yt&&yt[i]!==At)return;lt(Yt,"resize",kt),lt(Yt,"scroll",Mt)}},At.kill=function(e,r){At.disable(e,r),z&&!r&&z.kill(),de&&delete gt[de];var i=yt.indexOf(At);i>=0&&yt.splice(i,1),i===ee&&Ht>0&&ee--,i=0,yt.forEach((function(e){return e.scroller===At.scroller&&(i=1)})),i||pe||(At.scroll.rec=0),n&&(n.scrollTrigger=null,e&&n.revert({kill:!1}),r||n.kill()),d&&[d,c,f,m].forEach((function(e){return e.parentNode&&e.parentNode.removeChild(e)})),ge===At&&(ge=0),Ye&&(a&&(a.uncache=1),i=0,yt.forEach((function(e){return e.pin===Ye&&i++})),i||(a.spacer=0)),t.onKill&&t.onKill(At)},At.enable(!1,!1),se&&se(At),n&&n.add&&!h?F.delayedCall(.01,(function(){return u||l||At.refresh()}))&&(h=.01)&&(u=l=0):At.refresh(),Ye&&function(){if(ye!==Et){var e=ye=Et;requestAnimationFrame((function(){return e===Et&&jt(!0)}))}}()}else this.update=this.refresh=this.kill=De;var Zt,en,tn},e.register=function(t){return z||(F=t||xe(),Se()&&window.document&&e.enable(),z=be),z},e.defaults=function(e){if(e)for(var t in e)ft[t]=e[t];return ft},e.disable=function(e,t){be=0,yt.forEach((function(n){return n[t?"kill":"disable"](e)})),lt(W,"wheel",Mt),lt(I,"scroll",Mt),clearInterval(K),lt(I,"touchcancel",De),lt(B,"touchstart",De),ot(lt,I,"pointerdown,touchstart,mousedown",Ye),ot(lt,I,"pointerup,touchend,mouseup",we),J.kill(),Pe(lt);for(var n=0;n<y.length;n+=3)dt(lt,y[n],y[n+1]),dt(lt,y[n],y[n+2])},e.enable=function(){if(W=window,I=document,U=I.documentElement,B=I.body,F&&(G=F.utils.toArray,q=F.utils.clamp,fe=F.core.context||De,ie=F.core.suppressOverwrites||De,me=W.history.scrollRestoration||"auto",F.core.globals("ScrollTrigger",e),B)){be=1,R.register(F),e.isTouch=R.isTouch,ce=R.isTouch&&/(iPad|iPhone|iPod|Mac)/g.test(navigator.userAgent),ut(W,"wheel",Mt),V=[W,I,U,B],F.matchMedia?(e.matchMedia=function(e){var t,n=F.matchMedia();for(t in e)n.add(t,e[t]);return n},F.addEventListener("matchMediaInit",(function(){return xt()})),F.addEventListener("matchMediaRevert",(function(){return St()})),F.addEventListener("matchMedia",(function(){jt(0,1),Dt("matchMedia")})),F.matchMedia("(orientation: portrait)",(function(){return Lt(),Lt}))):console.warn("Requires GSAP 3.11.0 or later"),Lt(),ut(I,"scroll",Mt);var t,n,r=B.style,a=r.borderTopStyle,i=F.core.Animation.prototype;for(i.revert||Object.defineProperty(i,"revert",{value:function(){return this.time(-.01,!0)}}),r.borderTopStyle="solid",t=rt(B),O.m=Math.round(t.top+O.sc())||0,x.m=Math.round(t.left+x.sc())||0,a?r.borderTopStyle=a:r.removeProperty("border-top-style"),K=setInterval(vt,250),F.delayedCall(.5,(function(){return ve=0})),ut(I,"touchcancel",De),ut(B,"touchstart",De),ot(ut,I,"pointerdown,touchstart,mousedown",Ye),ot(ut,I,"pointerup,touchend,mouseup",we),Z=F.utils.checkPrefix("transform"),Nt.push(Z),z=Me(),J=F.delayedCall(.2,jt).pause(),re=[I,"visibilitychange",function(){var e=W.innerWidth,t=W.innerHeight;I.hidden?(te=e,ne=t):te===e&&ne===t||kt()},I,"DOMContentLoaded",jt,W,"load",jt,W,"resize",kt],Pe(ut),yt.forEach((function(e){return e.enable(0,1)})),n=0;n<y.length;n+=3)dt(lt,y[n],y[n+1]),dt(lt,y[n],y[n+2])}},e.config=function(t){"limitCallbacks"in t&&(_e=!!t.limitCallbacks);var n=t.syncInterval;n&&clearInterval(K)||(K=n)&&setInterval(vt,n),"ignoreMobileResize"in t&&(ue=1===e.isTouch&&t.ignoreMobileResize),"autoRefreshEvents"in t&&(Pe(lt)||Pe(ut,t.autoRefreshEvents||"none"),se=-1===(t.autoRefreshEvents+"").indexOf("resize"))},e.scrollerProxy=function(e,t){var n=E(e),r=y.indexOf(n),a=Oe(n);~r&&y.splice(r,a?6:2),t&&(a?g.unshift(W,t,B,t,U,t):g.unshift(n,t))},e.clearMatchMedia=function(e){yt.forEach((function(t){return t._ctx&&t._ctx.query===e&&t._ctx.kill(!0,!0)}))},e.isInViewport=function(e,t,n){var r=(He(e)?E(e):e).getBoundingClientRect(),a=r[n?Be:Ve]*t||0;return n?r.right-a>0&&r.left+a<W.innerWidth:r.bottom-a>0&&r.top+a<W.innerHeight},e.positionInViewport=function(e,t,n){He(e)&&(e=E(e));var r=e.getBoundingClientRect(),a=r[n?Be:Ve],i=null==t?a/2:t in mt?mt[t]*a:~t.indexOf("%")?parseFloat(t)*a/100:parseFloat(t)||0;return n?(r.left+i)/W.innerWidth:(r.top+i)/W.innerHeight},e.killAll=function(e){if(yt.forEach((function(e){return"ScrollSmoother"!==e.vars.id&&e.kill()})),!0!==e){var t=bt.killAll||[];bt={},t.forEach((function(e){return e()}))}},e}();Gt.version="3.11.3",Gt.saveStyles=function(e){return e?G(e).forEach((function(e){if(e&&e.style){var t=Tt.indexOf(e);t>=0&&Tt.splice(t,5),Tt.push(e,e.style.cssText,e.getBBox&&e.getAttribute("transform"),F.core.getCache(e),fe())}})):Tt},Gt.revert=function(e,t){return xt(!e,t)},Gt.create=function(e,t){return new Gt(e,t)},Gt.refresh=function(e){return e?kt():(z||Gt.register())&&jt(!0)},Gt.update=Ct,Gt.clearScrollMemory=Ot,Gt.maxScroll=function(e,t){return je(e,t?x:O)},Gt.getScrollFunc=function(e,t){return j(E(e),t?x:O)},Gt.getById=function(e){return gt[e]},Gt.getAll=function(){return yt.filter((function(e){return"ScrollSmoother"!==e.vars.id}))},Gt.isScrolling=function(){return!!ke},Gt.snapDirectional=st,Gt.addEventListener=function(e,t){var n=bt[e]||(bt[e]=[]);~n.indexOf(t)||n.push(t)},Gt.removeEventListener=function(e,t){var n=bt[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},Gt.batch=function(e,t){var n,r=[],a={},i=t.interval||.016,s=t.batchMax||1e9,o=function(e,t){var n=[],r=[],a=F.delayedCall(i,(function(){t(n,r),n=[],r=[]})).pause();return function(e){n.length||a.restart(!0),n.push(e.trigger),r.push(e),s<=n.length&&a.progress(1)}};for(n in t)a[n]="on"===n.substr(0,2)&&Ce(t[n])&&"onRefreshInit"!==n?o(0,t[n]):t[n];return Ce(s)&&(s=s(),ut(Gt,"refresh",(function(){return s=t.batchMax()}))),G(e).forEach((function(e){var t={};for(n in a)t[n]=a[n];t.trigger=e,r.push(Gt.create(t))})),r};var qt,$t=function(e,t,n,r){return t>r?e(r):t<0&&e(0),n>r?(r-t)/(n-t):n<0?t/(t-n):1},Kt=function e(t,n){!0===n?t.style.removeProperty("touch-action"):t.style.touchAction=!0===n?"auto":n?"pan-"+n+(R.isTouch?" pinch-zoom":""):"none",t===U&&e(B,n)},Qt={auto:1,scroll:1},Xt=function(e){var t,n=e.event,r=e.target,a=e.axis,i=(n.changedTouches?n.changedTouches[0]:n).target,s=i._gsap||F.core.getCache(i),o=Me();if(!s._isScrollT||o-s._isScrollT>2e3){for(;i&&i.scrollHeight<=i.clientHeight;)i=i.parentNode;s._isScroll=i&&!Oe(i)&&i!==r&&(Qt[(t=tt(i)).overflowY]||Qt[t.overflowX]),s._isScrollT=o}(s._isScroll||"x"===a)&&(n.stopPropagation(),n._gsapAllow=!0)},Zt=function(e,t,n,r){return R.create({target:e,capture:!0,debounce:!1,lockAxis:!0,type:t,onWheel:r=r&&Xt,onPress:r,onDrag:r,onScroll:r,onEnable:function(){return n&&ut(I,R.eventTypes[0],tn,!1,!0)},onDisable:function(){return lt(I,R.eventTypes[0],tn,!0)}})},en=/(input|label|select|textarea)/i,tn=function(e){var t=en.test(e.target.tagName);(t||qt)&&(e._gsapAllow=!0,qt=t)},nn=function(e){Ne(e)||(e={}),e.preventDefault=e.isNormalizer=e.allowClicks=!0,e.type||(e.type="wheel,touch"),e.debounce=!!e.debounce,e.id=e.id||"normalizer";var t,n,r,a,i,s,o,u,l=e,d=l.normalizeScrollX,c=l.momentum,f=l.allowNestedScroll,m=E(e.target)||U,_=F.core.globals().ScrollSmoother,h=_&&_.get(),p=ce&&(e.content&&E(e.content)||h&&!1!==e.content&&!h.smooth()&&h.content()),g=j(m,O),v=j(m,x),M=1,L=(R.isTouch&&W.visualViewport?W.visualViewport.scale*W.visualViewport.width:W.outerWidth)/W.innerWidth,k=0,b=Ce(c)?function(){return c(t)}:function(){return c||2.8},Y=Zt(m,e.type,!0,f),w=function(){return a=!1},D=De,T=De,S=function(){n=je(m,O),T=q(ce?1:0,n),d&&(D=q(0,je(m,x))),r=Et},P=function(){p._gsap.y=Te(parseFloat(p._gsap.y)+g.offset)+"px",p.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+parseFloat(p._gsap.y)+", 0, 1)",g.offset=g.cacheID=0},H=function(){S(),i.isActive()&&i.vars.scrollY>n&&(g()>n?i.progress(1)&&g(n):i.resetTo("scrollY",n))};return p&&F.set(p,{y:"+=0"}),e.ignoreCheck=function(e){return ce&&"touchmove"===e.type&&function(){if(a){requestAnimationFrame(w);var e=Te(t.deltaY/2),n=T(g.v-e);if(p&&n!==g.v+g.offset){g.offset=n-g.v;var r=Te((parseFloat(p&&p._gsap.y)||0)-g.offset);p.style.transform="matrix3d(1, 0, 0, 0, 0, 1, 0, 0, 0, 0, 1, 0, 0, "+r+", 0, 1)",p._gsap.y=r+"px",g.cacheID=y.cache,Ct()}return!0}g.offset&&P(),a=!0}()||M>1.05&&"touchstart"!==e.type||t.isGesturing||e.touches&&e.touches.length>1},e.onPress=function(){var e=M;M=Te((W.visualViewport&&W.visualViewport.scale||1)/L),i.pause(),e!==M&&Kt(m,M>1.01||!d&&"x"),s=v(),o=g(),S(),r=Et},e.onRelease=e.onGestureStart=function(e,t){if(g.offset&&P(),t){y.cache++;var r,a,s=b();d&&(a=(r=v())+.05*s*-e.velocityX/.227,s*=$t(v,r,a,je(m,x)),i.vars.scrollX=D(a)),a=(r=g())+.05*s*-e.velocityY/.227,s*=$t(g,r,a,je(m,O)),i.vars.scrollY=T(a),i.invalidate().duration(s).play(.01),(ce&&i.vars.scrollY>=n||r>=n-1)&&F.to({},{onUpdate:H,duration:s})}else u.restart(!0)},e.onWheel=function(){i._ts&&i.pause(),Me()-k>1e3&&(r=0,k=Me())},e.onChange=function(e,t,n,a,i){if(Et!==r&&S(),t&&d&&v(D(a[2]===t?s+(e.startX-e.x):v()+t-a[1])),n){g.offset&&P();var u=i[2]===n,l=u?o+e.startY-e.y:g()+n-i[1],c=T(l);u&&l!==c&&(o+=c-l),g(c)}(n||t)&&Ct()},e.onEnable=function(){Kt(m,!d&&"x"),Gt.addEventListener("refresh",H),ut(W,"resize",H),g.smooth&&(g.target.style.scrollBehavior="auto",g.smooth=v.smooth=!1),Y.enable()},e.onDisable=function(){Kt(m,!0),lt(W,"resize",H),Gt.removeEventListener("refresh",H),Y.kill()},e.lockAxis=!1!==e.lockAxis,(t=new R(e)).iOS=ce,ce&&!g()&&g(1),ce&&F.ticker.add(De),u=t._dc,i=F.to(t,{ease:"power4",paused:!0,scrollX:d?"+=0.1":"+=0",scrollY:"+=0.1",onComplete:u.vars.onComplete}),t};Gt.sort=function(e){return yt.sort(e||function(e,t){return-1e6*(e.vars.refreshPriority||0)+e.start-(t.start+-1e6*(t.vars.refreshPriority||0))})},Gt.observe=function(e){return new R(e)},Gt.normalizeScroll=function(e){if(void 0===e)return oe;if(!0===e&&oe)return oe.enable();if(!1===e)return oe&&oe.kill();var t=e instanceof R?e:nn(e);return oe&&oe.target===t.target&&oe.kill(),Oe(t.target)&&(oe=t),t},Gt.core={_getVelocityProp:P,_inputObserver:Zt,_scrollers:y,_proxies:g,bridge:{ss:function(){ke||Dt("scrollStart"),ke=Me()},ref:function(){return Q}}},xe()&&F.registerPlugin(Gt),e.ScrollTrigger=Gt,e.default=Gt,"undefined"==typeof window||window!==e?Object.defineProperty(e,"__esModule",{value:!0}):delete window.default}(t)},5880:(e,t,n)=>{"use strict";function r(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function a(e,t){e.prototype=Object.create(t.prototype),e.prototype.constructor=e,e.__proto__=t}n.r(t),n.d(t,{Back:()=>Vn,Bounce:()=>Gn,CSSPlugin:()=>ua,Circ:()=>Kn,Cubic:()=>zn,Elastic:()=>Bn,Expo:()=>$n,Linear:()=>Rn,Power0:()=>Pn,Power1:()=>Hn,Power2:()=>Cn,Power3:()=>An,Power4:()=>Nn,Quad:()=>Fn,Quart:()=>Wn,Quint:()=>In,Sine:()=>qn,SteppedEase:()=>Jn,Strong:()=>Un,TimelineLite:()=>zt,TimelineMax:()=>zt,TweenLite:()=>Qt,TweenMax:()=>da,default:()=>la,gsap:()=>la});var i,s,o,u,l,d,c,f,m,_,h,p,y,g,v,M,L,k={autoSleep:120,force3D:"auto",nullTargetWarn:1,units:{lineHeight:""}},b={duration:.5,overwrite:!1,delay:0},Y=1e8,w=1e-8,D=2*Math.PI,T=D/4,S=0,x=Math.sqrt,O=Math.cos,E=Math.sin,j=function(e){return"string"==typeof e},P=function(e){return"function"==typeof e},H=function(e){return"number"==typeof e},C=function(e){return void 0===e},A=function(e){return"object"==typeof e},N=function(e){return!1!==e},R=function(){return"undefined"!=typeof window},F=function(e){return P(e)||j(e)},z="function"==typeof ArrayBuffer&&ArrayBuffer.isView||function(){},W=Array.isArray,I=/(?:-?\.?\d|\.)+/gi,U=/[-+=.]*\d+[.e\-+]*\d*[e\-+]*\d*/g,B=/[-+=.]*\d+[.e-]*\d*[a-z%]*/g,V=/[-+=.]*\d+\.?\d*(?:e-|e\+)?\d*/gi,J=/[+-]=-?[.\d]+/,G=/[^,'"\[\]\s]+/gi,q=/^[+\-=e\s\d]*\d+[.\d]*([a-z]*|%)\s*$/i,$={},K={},Q=function(e){return(K=De(e,$))&&Yn},X=function(e,t){return console.warn("Invalid property",e,"set to",t,"Missing plugin? gsap.registerPlugin()")},Z=function(e,t){return!t&&console.warn(e)},ee=function(e,t){return e&&($[e]=t)&&K&&(K[e]=t)||$},te=function(){return 0},ne={suppressEvents:!0,isStart:!0,kill:!1},re={suppressEvents:!0,kill:!1},ae={suppressEvents:!0},ie={},se=[],oe={},ue={},le={},de=30,ce=[],fe="",me=function(e){var t,n,r=e[0];if(A(r)||P(r)||(e=[e]),!(t=(r._gsap||{}).harness)){for(n=ce.length;n--&&!ce[n].targetTest(r););t=ce[n]}for(n=e.length;n--;)e[n]&&(e[n]._gsap||(e[n]._gsap=new Rt(e[n],t)))||e.splice(n,1);return e},_e=function(e){return e._gsap||me(rt(e))[0]._gsap},he=function(e,t,n){return(n=e[t])&&P(n)?e[t]():C(n)&&e.getAttribute&&e.getAttribute(t)||n},pe=function(e,t){return(e=e.split(",")).forEach(t)||e},ye=function(e){return Math.round(1e5*e)/1e5||0},ge=function(e){return Math.round(1e7*e)/1e7||0},ve=function(e,t){var n=t.charAt(0),r=parseFloat(t.substr(2));return e=parseFloat(e),"+"===n?e+r:"-"===n?e-r:"*"===n?e*r:e/r},Me=function(e,t){for(var n=t.length,r=0;e.indexOf(t[r])<0&&++r<n;);return r<n},Le=function(){var e,t,n=se.length,r=se.slice(0);for(oe={},se.length=0,e=0;e<n;e++)(t=r[e])&&t._lazy&&(t.render(t._lazy[0],t._lazy[1],!0)._lazy=0)},ke=function(e,t,n,r){se.length&&Le(),e.render(t,n,r||s&&t<0&&(e._initted||e._startAt)),se.length&&Le()},be=function(e){var t=parseFloat(e);return(t||0===t)&&(e+"").match(G).length<2?t:j(e)?e.trim():e},Ye=function(e){return e},we=function(e,t){for(var n in t)n in e||(e[n]=t[n]);return e},De=function(e,t){for(var n in t)e[n]=t[n];return e},Te=function e(t,n){for(var r in n)"__proto__"!==r&&"constructor"!==r&&"prototype"!==r&&(t[r]=A(n[r])?e(t[r]||(t[r]={}),n[r]):n[r]);return t},Se=function(e,t){var n,r={};for(n in e)n in t||(r[n]=e[n]);return r},xe=function(e){var t,n=e.parent||u,r=e.keyframes?(t=W(e.keyframes),function(e,n){for(var r in n)r in e||"duration"===r&&t||"ease"===r||(e[r]=n[r])}):we;if(N(e.inherit))for(;n;)r(e,n.vars.defaults),n=n.parent||n._dp;return e},Oe=function(e,t,n,r,a){void 0===n&&(n="_first"),void 0===r&&(r="_last");var i,s=e[r];if(a)for(i=t[a];s&&s[a]>i;)s=s._prev;return s?(t._next=s._next,s._next=t):(t._next=e[n],e[n]=t),t._next?t._next._prev=t:e[r]=t,t._prev=s,t.parent=t._dp=e,t},Ee=function(e,t,n,r){void 0===n&&(n="_first"),void 0===r&&(r="_last");var a=t._prev,i=t._next;a?a._next=i:e[n]===t&&(e[n]=i),i?i._prev=a:e[r]===t&&(e[r]=a),t._next=t._prev=t.parent=null},je=function(e,t){e.parent&&(!t||e.parent.autoRemoveChildren)&&e.parent.remove(e),e._act=0},Pe=function(e,t){if(e&&(!t||t._end>e._dur||t._start<0))for(var n=e;n;)n._dirty=1,n=n.parent;return e},He=function(e,t,n,r){return e._startAt&&(s?e._startAt.revert(re):e.vars.immediateRender&&!e.vars.autoRevert||e._startAt.render(t,!0,r))},Ce=function e(t){return!t||t._ts&&e(t.parent)},Ae=function(e){return e._repeat?Ne(e._tTime,e=e.duration()+e._rDelay)*e:0},Ne=function(e,t){var n=Math.floor(e/=t);return e&&n===e?n-1:n},Re=function(e,t){return(e-t._start)*t._ts+(t._ts>=0?0:t._dirty?t.totalDuration():t._tDur)},Fe=function(e){return e._end=ge(e._start+(e._tDur/Math.abs(e._ts||e._rts||w)||0))},ze=function(e,t){var n=e._dp;return n&&n.smoothChildTiming&&e._ts&&(e._start=ge(n._time-(e._ts>0?t/e._ts:((e._dirty?e.totalDuration():e._tDur)-t)/-e._ts)),Fe(e),n._dirty||Pe(n,e)),e},We=function(e,t){var n;if((t._time||t._initted&&!t._dur)&&(n=Re(e.rawTime(),t),(!t._dur||Ze(0,t.totalDuration(),n)-t._tTime>w)&&t.render(n,!0)),Pe(e,t)._dp&&e._initted&&e._time>=e._dur&&e._ts){if(e._dur<e.duration())for(n=e;n._dp;)n.rawTime()>=0&&n.totalTime(n._tTime),n=n._dp;e._zTime=-1e-8}},Ie=function(e,t,n,r){return t.parent&&je(t),t._start=ge((H(n)?n:n||e!==u?Ke(e,n,t):e._time)+t._delay),t._end=ge(t._start+(t.totalDuration()/Math.abs(t.timeScale())||0)),Oe(e,t,"_first","_last",e._sort?"_start":0),Je(t)||(e._recent=t),r||We(e,t),e._ts<0&&ze(e,e._tTime),e},Ue=function(e,t){return($.ScrollTrigger||X("scrollTrigger",t))&&$.ScrollTrigger.create(t,e)},Be=function(e,t,n,r,a){return Jt(e,t,a),e._initted?!n&&e._pt&&!s&&(e._dur&&!1!==e.vars.lazy||!e._dur&&e.vars.lazy)&&m!==wt.frame?(se.push(e),e._lazy=[a,r],1):void 0:1},Ve=function e(t){var n=t.parent;return n&&n._ts&&n._initted&&!n._lock&&(n.rawTime()<0||e(n))},Je=function(e){var t=e.data;return"isFromStart"===t||"isStart"===t},Ge=function(e,t,n,r){var a=e._repeat,i=ge(t)||0,s=e._tTime/e._tDur;return s&&!r&&(e._time*=i/e._dur),e._dur=i,e._tDur=a?a<0?1e10:ge(i*(a+1)+e._rDelay*a):i,s>0&&!r&&ze(e,e._tTime=e._tDur*s),e.parent&&Fe(e),n||Pe(e.parent,e),e},qe=function(e){return e instanceof zt?Pe(e):Ge(e,e._dur)},$e={_start:0,endTime:te,totalDuration:te},Ke=function e(t,n,r){var a,i,s,o=t.labels,u=t._recent||$e,l=t.duration()>=Y?u.endTime(!1):t._dur;return j(n)&&(isNaN(n)||n in o)?(i=n.charAt(0),s="%"===n.substr(-1),a=n.indexOf("="),"<"===i||">"===i?(a>=0&&(n=n.replace(/=/,"")),("<"===i?u._start:u.endTime(u._repeat>=0))+(parseFloat(n.substr(1))||0)*(s?(a<0?u:r).totalDuration()/100:1)):a<0?(n in o||(o[n]=l),o[n]):(i=parseFloat(n.charAt(a-1)+n.substr(a+1)),s&&r&&(i=i/100*(W(r)?r[0]:r).totalDuration()),a>1?e(t,n.substr(0,a-1),r)+i:l+i)):null==n?l:+n},Qe=function(e,t,n){var r,a,i=H(t[1]),s=(i?2:1)+(e<2?0:1),o=t[s];if(i&&(o.duration=t[1]),o.parent=n,e){for(r=o,a=n;a&&!("immediateRender"in r);)r=a.vars.defaults||{},a=N(a.vars.inherit)&&a.parent;o.immediateRender=N(r.immediateRender),e<2?o.runBackwards=1:o.startAt=t[s-1]}return new Qt(t[0],o,t[s+1])},Xe=function(e,t){return e||0===e?t(e):t},Ze=function(e,t,n){return n<e?e:n>t?t:n},et=function(e,t){return j(e)&&(t=q.exec(e))?t[1]:""},tt=[].slice,nt=function(e,t){return e&&A(e)&&"length"in e&&(!t&&!e.length||e.length-1 in e&&A(e[0]))&&!e.nodeType&&e!==l},rt=function(e,t,n){return o&&!t&&o.selector?o.selector(e):!j(e)||n||!d&&Dt()?W(e)?function(e,t,n){return void 0===n&&(n=[]),e.forEach((function(e){var r;return j(e)&&!t||nt(e,1)?(r=n).push.apply(r,rt(e)):n.push(e)}))||n}(e,n):nt(e)?tt.call(e,0):e?[e]:[]:tt.call((t||c).querySelectorAll(e),0)},at=function(e){return e=rt(e)[0]||Z("Invalid scope")||{},function(t){var n=e.current||e.nativeElement||e;return rt(t,n.querySelectorAll?n:n===e?Z("Invalid scope")||c.createElement("div"):e)}},it=function(e){return e.sort((function(){return.5-Math.random()}))},st=function(e){if(P(e))return e;var t=A(e)?e:{each:e},n=Pt(t.ease),r=t.from||0,a=parseFloat(t.base)||0,i={},s=r>0&&r<1,o=isNaN(r)||s,u=t.axis,l=r,d=r;return j(r)?l=d={center:.5,edges:.5,end:1}[r]||0:!s&&o&&(l=r[0],d=r[1]),function(e,s,c){var f,m,_,h,p,y,g,v,M,L=(c||t).length,k=i[L];if(!k){if(!(M="auto"===t.grid?0:(t.grid||[1,Y])[1])){for(g=-Y;g<(g=c[M++].getBoundingClientRect().left)&&M<L;);M--}for(k=i[L]=[],f=o?Math.min(M,L)*l-.5:r%M,m=M===Y?0:o?L*d/M-.5:r/M|0,g=0,v=Y,y=0;y<L;y++)_=y%M-f,h=m-(y/M|0),k[y]=p=u?Math.abs("y"===u?h:_):x(_*_+h*h),p>g&&(g=p),p<v&&(v=p);"random"===r&&it(k),k.max=g-v,k.min=v,k.v=L=(parseFloat(t.amount)||parseFloat(t.each)*(M>L?L-1:u?"y"===u?L/M:M:Math.max(M,L/M))||0)*("edges"===r?-1:1),k.b=L<0?a-L:a,k.u=et(t.amount||t.each)||0,n=n&&L<0?Et(n):n}return L=(k[e]-k.min)/k.max||0,ge(k.b+(n?n(L):L)*k.v)+k.u}},ot=function(e){var t=Math.pow(10,((e+"").split(".")[1]||"").length);return function(n){var r=ge(Math.round(parseFloat(n)/e)*e*t);return(r-r%1)/t+(H(n)?0:et(n))}},ut=function(e,t){var n,r,a=W(e);return!a&&A(e)&&(n=a=e.radius||Y,e.values?(e=rt(e.values),(r=!H(e[0]))&&(n*=n)):e=ot(e.increment)),Xe(t,a?P(e)?function(t){return r=e(t),Math.abs(r-t)<=n?r:t}:function(t){for(var a,i,s=parseFloat(r?t.x:t),o=parseFloat(r?t.y:0),u=Y,l=0,d=e.length;d--;)(a=r?(a=e[d].x-s)*a+(i=e[d].y-o)*i:Math.abs(e[d]-s))<u&&(u=a,l=d);return l=!n||u<=n?e[l]:t,r||l===t||H(t)?l:l+et(t)}:ot(e))},lt=function(e,t,n,r){return Xe(W(e)?!t:!0===n?!!(n=0):!r,(function(){return W(e)?e[~~(Math.random()*e.length)]:(n=n||1e-5)&&(r=n<1?Math.pow(10,(n+"").length-2):1)&&Math.floor(Math.round((e-n/2+Math.random()*(t-e+.99*n))/n)*n*r)/r}))},dt=function(e,t,n){return Xe(n,(function(n){return e[~~t(n)]}))},ct=function(e){for(var t,n,r,a,i=0,s="";~(t=e.indexOf("random(",i));)r=e.indexOf(")",t),a="["===e.charAt(t+7),n=e.substr(t+7,r-t-7).match(a?G:I),s+=e.substr(i,t-i)+lt(a?n:+n[0],a?0:+n[1],+n[2]||1e-5),i=r+1;return s+e.substr(i,e.length-i)},ft=function(e,t,n,r,a){var i=t-e,s=r-n;return Xe(a,(function(t){return n+((t-e)/i*s||0)}))},mt=function(e,t,n){var r,a,i,s=e.labels,o=Y;for(r in s)(a=s[r]-t)<0==!!n&&a&&o>(a=Math.abs(a))&&(i=r,o=a);return i},_t=function(e,t,n){var r,a,i,s=e.vars,u=s[t],l=o,d=e._ctx;if(u)return r=s[t+"Params"],a=s.callbackScope||e,n&&se.length&&Le(),d&&(o=d),i=r?u.apply(a,r):u.call(a),o=l,i},ht=function(e){return je(e),e.scrollTrigger&&e.scrollTrigger.kill(!!s),e.progress()<1&&_t(e,"onInterrupt"),e},pt=255,yt={aqua:[0,pt,pt],lime:[0,pt,0],silver:[192,192,192],black:[0,0,0],maroon:[128,0,0],teal:[0,128,128],blue:[0,0,pt],navy:[0,0,128],white:[pt,pt,pt],olive:[128,128,0],yellow:[pt,pt,0],orange:[pt,165,0],gray:[128,128,128],purple:[128,0,128],green:[0,128,0],red:[pt,0,0],pink:[pt,192,203],cyan:[0,pt,pt],transparent:[pt,pt,pt,0]},gt=function(e,t,n){return(6*(e+=e<0?1:e>1?-1:0)<1?t+(n-t)*e*6:e<.5?n:3*e<2?t+(n-t)*(2/3-e)*6:t)*pt+.5|0},vt=function(e,t,n){var r,a,i,s,o,u,l,d,c,f,m=e?H(e)?[e>>16,e>>8&pt,e&pt]:0:yt.black;if(!m){if(","===e.substr(-1)&&(e=e.substr(0,e.length-1)),yt[e])m=yt[e];else if("#"===e.charAt(0)){if(e.length<6&&(r=e.charAt(1),a=e.charAt(2),i=e.charAt(3),e="#"+r+r+a+a+i+i+(5===e.length?e.charAt(4)+e.charAt(4):"")),9===e.length)return[(m=parseInt(e.substr(1,6),16))>>16,m>>8&pt,m&pt,parseInt(e.substr(7),16)/255];m=[(e=parseInt(e.substr(1),16))>>16,e>>8&pt,e&pt]}else if("hsl"===e.substr(0,3))if(m=f=e.match(I),t){if(~e.indexOf("="))return m=e.match(U),n&&m.length<4&&(m[3]=1),m}else s=+m[0]%360/360,o=+m[1]/100,r=2*(u=+m[2]/100)-(a=u<=.5?u*(o+1):u+o-u*o),m.length>3&&(m[3]*=1),m[0]=gt(s+1/3,r,a),m[1]=gt(s,r,a),m[2]=gt(s-1/3,r,a);else m=e.match(I)||yt.transparent;m=m.map(Number)}return t&&!f&&(r=m[0]/pt,a=m[1]/pt,i=m[2]/pt,u=((l=Math.max(r,a,i))+(d=Math.min(r,a,i)))/2,l===d?s=o=0:(c=l-d,o=u>.5?c/(2-l-d):c/(l+d),s=l===r?(a-i)/c+(a<i?6:0):l===a?(i-r)/c+2:(r-a)/c+4,s*=60),m[0]=~~(s+.5),m[1]=~~(100*o+.5),m[2]=~~(100*u+.5)),n&&m.length<4&&(m[3]=1),m},Mt=function(e){var t=[],n=[],r=-1;return e.split(kt).forEach((function(e){var a=e.match(B)||[];t.push.apply(t,a),n.push(r+=a.length+1)})),t.c=n,t},Lt=function(e,t,n){var r,a,i,s,o="",u=(e+o).match(kt),l=t?"hsla(":"rgba(",d=0;if(!u)return e;if(u=u.map((function(e){return(e=vt(e,t,1))&&l+(t?e[0]+","+e[1]+"%,"+e[2]+"%,"+e[3]:e.join(","))+")"})),n&&(i=Mt(e),(r=n.c).join(o)!==i.c.join(o)))for(s=(a=e.replace(kt,"1").split(B)).length-1;d<s;d++)o+=a[d]+(~r.indexOf(d)?u.shift()||l+"0,0,0,0)":(i.length?i:u.length?u:n).shift());if(!a)for(s=(a=e.split(kt)).length-1;d<s;d++)o+=a[d]+u[d];return o+a[s]},kt=function(){var e,t="(?:\\b(?:(?:rgb|rgba|hsl|hsla)\\(.+?\\))|\\B#(?:[0-9a-f]{3,4}){1,2}\\b";for(e in yt)t+="|"+e+"\\b";return new RegExp(t+")","gi")}(),bt=/hsl[a]?\(/,Yt=function(e){var t,n=e.join(" ");if(kt.lastIndex=0,kt.test(n))return t=bt.test(n),e[1]=Lt(e[1],t),e[0]=Lt(e[0],t,Mt(e[1])),!0},wt=function(){var e,t,n,r,a,i,s=Date.now,o=500,u=33,m=s(),_=m,p=1e3/240,y=p,g=[],v=function n(l){var d,c,f,h,v=s()-_,M=!0===l;if(v>o&&(m+=v-u),((d=(f=(_+=v)-m)-y)>0||M)&&(h=++r.frame,a=f-1e3*r.time,r.time=f/=1e3,y+=d+(d>=p?4:p-d),c=1),M||(e=t(n)),c)for(i=0;i<g.length;i++)g[i](f,a,h,l)};return r={time:0,frame:0,tick:function(){v(!0)},deltaRatio:function(e){return a/(1e3/(e||60))},wake:function(){f&&(!d&&R()&&(l=d=window,c=l.document||{},$.gsap=Yn,(l.gsapVersions||(l.gsapVersions=[])).push(Yn.version),Q(K||l.GreenSockGlobals||!l.gsap&&l||{}),n=l.requestAnimationFrame),e&&r.sleep(),t=n||function(e){return setTimeout(e,y-1e3*r.time+1|0)},h=1,v(2))},sleep:function(){(n?l.cancelAnimationFrame:clearTimeout)(e),h=0,t=te},lagSmoothing:function(e,t){o=e||1e8,u=Math.min(t,o,0)},fps:function(e){p=1e3/(e||240),y=1e3*r.time+p},add:function(e,t,n){var a=t?function(t,n,i,s){e(t,n,i,s),r.remove(a)}:e;return r.remove(e),g[n?"unshift":"push"](a),Dt(),a},remove:function(e,t){~(t=g.indexOf(e))&&g.splice(t,1)&&i>=t&&i--},_listeners:g}}(),Dt=function(){return!h&&wt.wake()},Tt={},St=/^[\d.\-M][\d.\-,\s]/,xt=/["']/g,Ot=function(e){for(var t,n,r,a={},i=e.substr(1,e.length-3).split(":"),s=i[0],o=1,u=i.length;o<u;o++)n=i[o],t=o!==u-1?n.lastIndexOf(","):n.length,r=n.substr(0,t),a[s]=isNaN(r)?r.replace(xt,"").trim():+r,s=n.substr(t+1).trim();return a},Et=function(e){return function(t){return 1-e(1-t)}},jt=function e(t,n){for(var r,a=t._first;a;)a instanceof zt?e(a,n):!a.vars.yoyoEase||a._yoyo&&a._repeat||a._yoyo===n||(a.timeline?e(a.timeline,n):(r=a._ease,a._ease=a._yEase,a._yEase=r,a._yoyo=n)),a=a._next},Pt=function(e,t){return e&&(P(e)?e:Tt[e]||function(e){var t,n,r,a,i=(e+"").split("("),s=Tt[i[0]];return s&&i.length>1&&s.config?s.config.apply(null,~e.indexOf("{")?[Ot(i[1])]:(t=e,n=t.indexOf("(")+1,r=t.indexOf(")"),a=t.indexOf("(",n),t.substring(n,~a&&a<r?t.indexOf(")",r+1):r)).split(",").map(be)):Tt._CE&&St.test(e)?Tt._CE("",e):s}(e))||t},Ht=function(e,t,n,r){void 0===n&&(n=function(e){return 1-t(1-e)}),void 0===r&&(r=function(e){return e<.5?t(2*e)/2:1-t(2*(1-e))/2});var a,i={easeIn:t,easeOut:n,easeInOut:r};return pe(e,(function(e){for(var t in Tt[e]=$[e]=i,Tt[a=e.toLowerCase()]=n,i)Tt[a+("easeIn"===t?".in":"easeOut"===t?".out":".inOut")]=Tt[e+"."+t]=i[t]})),i},Ct=function(e){return function(t){return t<.5?(1-e(1-2*t))/2:.5+e(2*(t-.5))/2}},At=function e(t,n,r){var a=n>=1?n:1,i=(r||(t?.3:.45))/(n<1?n:1),s=i/D*(Math.asin(1/a)||0),o=function(e){return 1===e?1:a*Math.pow(2,-10*e)*E((e-s)*i)+1},u="out"===t?o:"in"===t?function(e){return 1-o(1-e)}:Ct(o);return i=D/i,u.config=function(n,r){return e(t,n,r)},u},Nt=function e(t,n){void 0===n&&(n=1.70158);var r=function(e){return e?--e*e*((n+1)*e+n)+1:0},a="out"===t?r:"in"===t?function(e){return 1-r(1-e)}:Ct(r);return a.config=function(n){return e(t,n)},a};pe("Linear,Quad,Cubic,Quart,Quint,Strong",(function(e,t){var n=t<5?t+1:t;Ht(e+",Power"+(n-1),t?function(e){return Math.pow(e,n)}:function(e){return e},(function(e){return 1-Math.pow(1-e,n)}),(function(e){return e<.5?Math.pow(2*e,n)/2:1-Math.pow(2*(1-e),n)/2}))})),Tt.Linear.easeNone=Tt.none=Tt.Linear.easeIn,Ht("Elastic",At("in"),At("out"),At()),p=7.5625,v=2*(g=1/(y=2.75)),M=2.5*g,Ht("Bounce",(function(e){return 1-L(1-e)}),L=function(e){return e<g?p*e*e:e<v?p*Math.pow(e-1.5/y,2)+.75:e<M?p*(e-=2.25/y)*e+.9375:p*Math.pow(e-2.625/y,2)+.984375}),Ht("Expo",(function(e){return e?Math.pow(2,10*(e-1)):0})),Ht("Circ",(function(e){return-(x(1-e*e)-1)})),Ht("Sine",(function(e){return 1===e?1:1-O(e*T)})),Ht("Back",Nt("in"),Nt("out"),Nt()),Tt.SteppedEase=Tt.steps=$.SteppedEase={config:function(e,t){void 0===e&&(e=1);var n=1/e,r=e+(t?0:1),a=t?1:0;return function(e){return((r*Ze(0,.99999999,e)|0)+a)*n}}},b.ease=Tt["quad.out"],pe("onComplete,onUpdate,onStart,onRepeat,onReverseComplete,onInterrupt",(function(e){return fe+=e+","+e+"Params,"}));var Rt=function(e,t){this.id=S++,e._gsap=this,this.target=e,this.harness=t,this.get=t?t.get:he,this.set=t?t.getSetter:nn},Ft=function(){function e(e){this.vars=e,this._delay=+e.delay||0,(this._repeat=e.repeat===1/0?-2:e.repeat||0)&&(this._rDelay=e.repeatDelay||0,this._yoyo=!!e.yoyo||!!e.yoyoEase),this._ts=1,Ge(this,+e.duration,1,1),this.data=e.data,o&&(this._ctx=o,o.data.push(this)),h||wt.wake()}var t=e.prototype;return t.delay=function(e){return e||0===e?(this.parent&&this.parent.smoothChildTiming&&this.startTime(this._start+e-this._delay),this._delay=e,this):this._delay},t.duration=function(e){return arguments.length?this.totalDuration(this._repeat>0?e+(e+this._rDelay)*this._repeat:e):this.totalDuration()&&this._dur},t.totalDuration=function(e){return arguments.length?(this._dirty=0,Ge(this,this._repeat<0?e:(e-this._repeat*this._rDelay)/(this._repeat+1))):this._tDur},t.totalTime=function(e,t){if(Dt(),!arguments.length)return this._tTime;var n=this._dp;if(n&&n.smoothChildTiming&&this._ts){for(ze(this,e),!n._dp||n.parent||We(n,this);n&&n.parent;)n.parent._time!==n._start+(n._ts>=0?n._tTime/n._ts:(n.totalDuration()-n._tTime)/-n._ts)&&n.totalTime(n._tTime,!0),n=n.parent;!this.parent&&this._dp.autoRemoveChildren&&(this._ts>0&&e<this._tDur||this._ts<0&&e>0||!this._tDur&&!e)&&Ie(this._dp,this,this._start-this._delay)}return(this._tTime!==e||!this._dur&&!t||this._initted&&Math.abs(this._zTime)===w||!e&&!this._initted&&(this.add||this._ptLookup))&&(this._ts||(this._pTime=e),ke(this,e,t)),this},t.time=function(e,t){return arguments.length?this.totalTime(Math.min(this.totalDuration(),e+Ae(this))%(this._dur+this._rDelay)||(e?this._dur:0),t):this._time},t.totalProgress=function(e,t){return arguments.length?this.totalTime(this.totalDuration()*e,t):this.totalDuration()?Math.min(1,this._tTime/this._tDur):this.ratio},t.progress=function(e,t){return arguments.length?this.totalTime(this.duration()*(!this._yoyo||1&this.iteration()?e:1-e)+Ae(this),t):this.duration()?Math.min(1,this._time/this._dur):this.ratio},t.iteration=function(e,t){var n=this.duration()+this._rDelay;return arguments.length?this.totalTime(this._time+(e-1)*n,t):this._repeat?Ne(this._tTime,n)+1:1},t.timeScale=function(e){if(!arguments.length)return-1e-8===this._rts?0:this._rts;if(this._rts===e)return this;var t=this.parent&&this._ts?Re(this.parent._time,this):this._tTime;return this._rts=+e||0,this._ts=this._ps||-1e-8===e?0:this._rts,this.totalTime(Ze(-this._delay,this._tDur,t),!0),Fe(this),function(e){for(var t=e.parent;t&&t.parent;)t._dirty=1,t.totalDuration(),t=t.parent;return e}(this)},t.paused=function(e){return arguments.length?(this._ps!==e&&(this._ps=e,e?(this._pTime=this._tTime||Math.max(-this._delay,this.rawTime()),this._ts=this._act=0):(Dt(),this._ts=this._rts,this.totalTime(this.parent&&!this.parent.smoothChildTiming?this.rawTime():this._tTime||this._pTime,1===this.progress()&&Math.abs(this._zTime)!==w&&(this._tTime-=w)))),this):this._ps},t.startTime=function(e){if(arguments.length){this._start=e;var t=this.parent||this._dp;return t&&(t._sort||!this.parent)&&Ie(t,this,e-this._delay),this}return this._start},t.endTime=function(e){return this._start+(N(e)?this.totalDuration():this.duration())/Math.abs(this._ts||1)},t.rawTime=function(e){var t=this.parent||this._dp;return t?e&&(!this._ts||this._repeat&&this._time&&this.totalProgress()<1)?this._tTime%(this._dur+this._rDelay):this._ts?Re(t.rawTime(e),this):this._tTime:this._tTime},t.revert=function(e){void 0===e&&(e=ae);var t=s;return s=e,(this._initted||this._startAt)&&(this.timeline&&this.timeline.revert(e),this.totalTime(-.01,e.suppressEvents)),"nested"!==this.data&&!1!==e.kill&&this.kill(),s=t,this},t.globalTime=function(e){for(var t=this,n=arguments.length?e:t.rawTime();t;)n=t._start+n/(t._ts||1),t=t._dp;return!this.parent&&this.vars.immediateRender?-1:n},t.repeat=function(e){return arguments.length?(this._repeat=e===1/0?-2:e,qe(this)):-2===this._repeat?1/0:this._repeat},t.repeatDelay=function(e){if(arguments.length){var t=this._time;return this._rDelay=e,qe(this),t?this.time(t):this}return this._rDelay},t.yoyo=function(e){return arguments.length?(this._yoyo=e,this):this._yoyo},t.seek=function(e,t){return this.totalTime(Ke(this,e),N(t))},t.restart=function(e,t){return this.play().totalTime(e?-this._delay:0,N(t))},t.play=function(e,t){return null!=e&&this.seek(e,t),this.reversed(!1).paused(!1)},t.reverse=function(e,t){return null!=e&&this.seek(e||this.totalDuration(),t),this.reversed(!0).paused(!1)},t.pause=function(e,t){return null!=e&&this.seek(e,t),this.paused(!0)},t.resume=function(){return this.paused(!1)},t.reversed=function(e){return arguments.length?(!!e!==this.reversed()&&this.timeScale(-this._rts||(e?-1e-8:0)),this):this._rts<0},t.invalidate=function(){return this._initted=this._act=0,this._zTime=-1e-8,this},t.isActive=function(){var e,t=this.parent||this._dp,n=this._start;return!(t&&!(this._ts&&this._initted&&t.isActive()&&(e=t.rawTime(!0))>=n&&e<this.endTime(!0)-w))},t.eventCallback=function(e,t,n){var r=this.vars;return arguments.length>1?(t?(r[e]=t,n&&(r[e+"Params"]=n),"onUpdate"===e&&(this._onUpdate=t)):delete r[e],this):r[e]},t.then=function(e){var t=this;return new Promise((function(n){var r=P(e)?e:Ye,a=function(){var e=t.then;t.then=null,P(r)&&(r=r(t))&&(r.then||r===t)&&(t.then=e),n(r),t.then=e};t._initted&&1===t.totalProgress()&&t._ts>=0||!t._tTime&&t._ts<0?a():t._prom=a}))},t.kill=function(){ht(this)},e}();we(Ft.prototype,{_time:0,_start:0,_end:0,_tTime:0,_tDur:0,_dirty:0,_repeat:0,_yoyo:!1,parent:null,_initted:!1,_rDelay:0,_ts:1,_dp:0,ratio:0,_zTime:-1e-8,_prom:0,_ps:!1,_rts:1});var zt=function(e){function t(t,n){var a;return void 0===t&&(t={}),(a=e.call(this,t)||this).labels={},a.smoothChildTiming=!!t.smoothChildTiming,a.autoRemoveChildren=!!t.autoRemoveChildren,a._sort=N(t.sortChildren),u&&Ie(t.parent||u,r(a),n),t.reversed&&a.reverse(),t.paused&&a.paused(!0),t.scrollTrigger&&Ue(r(a),t.scrollTrigger),a}a(t,e);var n=t.prototype;return n.to=function(e,t,n){return Qe(0,arguments,this),this},n.from=function(e,t,n){return Qe(1,arguments,this),this},n.fromTo=function(e,t,n,r){return Qe(2,arguments,this),this},n.set=function(e,t,n){return t.duration=0,t.parent=this,xe(t).repeatDelay||(t.repeat=0),t.immediateRender=!!t.immediateRender,new Qt(e,t,Ke(this,n),1),this},n.call=function(e,t,n){return Ie(this,Qt.delayedCall(0,e,t),n)},n.staggerTo=function(e,t,n,r,a,i,s){return n.duration=t,n.stagger=n.stagger||r,n.onComplete=i,n.onCompleteParams=s,n.parent=this,new Qt(e,n,Ke(this,a)),this},n.staggerFrom=function(e,t,n,r,a,i,s){return n.runBackwards=1,xe(n).immediateRender=N(n.immediateRender),this.staggerTo(e,t,n,r,a,i,s)},n.staggerFromTo=function(e,t,n,r,a,i,s,o){return r.startAt=n,xe(r).immediateRender=N(r.immediateRender),this.staggerTo(e,t,r,a,i,s,o)},n.render=function(e,t,n){var r,a,i,o,l,d,c,f,m,_,h,p,y=this._time,g=this._dirty?this.totalDuration():this._tDur,v=this._dur,M=e<=0?0:ge(e),L=this._zTime<0!=e<0&&(this._initted||!v);if(this!==u&&M>g&&e>=0&&(M=g),M!==this._tTime||n||L){if(y!==this._time&&v&&(M+=this._time-y,e+=this._time-y),r=M,m=this._start,d=!(f=this._ts),L&&(v||(y=this._zTime),(e||!t)&&(this._zTime=e)),this._repeat){if(h=this._yoyo,l=v+this._rDelay,this._repeat<-1&&e<0)return this.totalTime(100*l+e,t,n);if(r=ge(M%l),M===g?(o=this._repeat,r=v):((o=~~(M/l))&&o===M/l&&(r=v,o--),r>v&&(r=v)),_=Ne(this._tTime,l),!y&&this._tTime&&_!==o&&(_=o),h&&1&o&&(r=v-r,p=1),o!==_&&!this._lock){var k=h&&1&_,b=k===(h&&1&o);if(o<_&&(k=!k),y=k?0:v,this._lock=1,this.render(y||(p?0:ge(o*l)),t,!v)._lock=0,this._tTime=M,!t&&this.parent&&_t(this,"onRepeat"),this.vars.repeatRefresh&&!p&&(this.invalidate()._lock=1),y&&y!==this._time||d!==!this._ts||this.vars.onRepeat&&!this.parent&&!this._act)return this;if(v=this._dur,g=this._tDur,b&&(this._lock=2,y=k?v:-1e-4,this.render(y,!0),this.vars.repeatRefresh&&!p&&this.invalidate()),this._lock=0,!this._ts&&!d)return this;jt(this,p)}}if(this._hasPause&&!this._forcing&&this._lock<2&&(c=function(e,t,n){var r;if(n>t)for(r=e._first;r&&r._start<=n;){if("isPause"===r.data&&r._start>t)return r;r=r._next}else for(r=e._last;r&&r._start>=n;){if("isPause"===r.data&&r._start<t)return r;r=r._prev}}(this,ge(y),ge(r)),c&&(M-=r-(r=c._start))),this._tTime=M,this._time=r,this._act=!f,this._initted||(this._onUpdate=this.vars.onUpdate,this._initted=1,this._zTime=e,y=0),!y&&r&&!t&&(_t(this,"onStart"),this._tTime!==M))return this;if(r>=y&&e>=0)for(a=this._first;a;){if(i=a._next,(a._act||r>=a._start)&&a._ts&&c!==a){if(a.parent!==this)return this.render(e,t,n);if(a.render(a._ts>0?(r-a._start)*a._ts:(a._dirty?a.totalDuration():a._tDur)+(r-a._start)*a._ts,t,n),r!==this._time||!this._ts&&!d){c=0,i&&(M+=this._zTime=-1e-8);break}}a=i}else{a=this._last;for(var Y=e<0?e:r;a;){if(i=a._prev,(a._act||Y<=a._end)&&a._ts&&c!==a){if(a.parent!==this)return this.render(e,t,n);if(a.render(a._ts>0?(Y-a._start)*a._ts:(a._dirty?a.totalDuration():a._tDur)+(Y-a._start)*a._ts,t,n||s&&(a._initted||a._startAt)),r!==this._time||!this._ts&&!d){c=0,i&&(M+=this._zTime=Y?-1e-8:w);break}}a=i}}if(c&&!t&&(this.pause(),c.render(r>=y?0:-1e-8)._zTime=r>=y?1:-1,this._ts))return this._start=m,Fe(this),this.render(e,t,n);this._onUpdate&&!t&&_t(this,"onUpdate",!0),(M===g&&this._tTime>=this.totalDuration()||!M&&y)&&(m!==this._start&&Math.abs(f)===Math.abs(this._ts)||this._lock||((e||!v)&&(M===g&&this._ts>0||!M&&this._ts<0)&&je(this,1),t||e<0&&!y||!M&&!y&&g||(_t(this,M===g&&e>=0?"onComplete":"onReverseComplete",!0),this._prom&&!(M<g&&this.timeScale()>0)&&this._prom())))}return this},n.add=function(e,t){var n=this;if(H(t)||(t=Ke(this,t,e)),!(e instanceof Ft)){if(W(e))return e.forEach((function(e){return n.add(e,t)})),this;if(j(e))return this.addLabel(e,t);if(!P(e))return this;e=Qt.delayedCall(0,e)}return this!==e?Ie(this,e,t):this},n.getChildren=function(e,t,n,r){void 0===e&&(e=!0),void 0===t&&(t=!0),void 0===n&&(n=!0),void 0===r&&(r=-Y);for(var a=[],i=this._first;i;)i._start>=r&&(i instanceof Qt?t&&a.push(i):(n&&a.push(i),e&&a.push.apply(a,i.getChildren(!0,t,n)))),i=i._next;return a},n.getById=function(e){for(var t=this.getChildren(1,1,1),n=t.length;n--;)if(t[n].vars.id===e)return t[n]},n.remove=function(e){return j(e)?this.removeLabel(e):P(e)?this.killTweensOf(e):(Ee(this,e),e===this._recent&&(this._recent=this._last),Pe(this))},n.totalTime=function(t,n){return arguments.length?(this._forcing=1,!this._dp&&this._ts&&(this._start=ge(wt.time-(this._ts>0?t/this._ts:(this.totalDuration()-t)/-this._ts))),e.prototype.totalTime.call(this,t,n),this._forcing=0,this):this._tTime},n.addLabel=function(e,t){return this.labels[e]=Ke(this,t),this},n.removeLabel=function(e){return delete this.labels[e],this},n.addPause=function(e,t,n){var r=Qt.delayedCall(0,t||te,n);return r.data="isPause",this._hasPause=1,Ie(this,r,Ke(this,e))},n.removePause=function(e){var t=this._first;for(e=Ke(this,e);t;)t._start===e&&"isPause"===t.data&&je(t),t=t._next},n.killTweensOf=function(e,t,n){for(var r=this.getTweensOf(e,n),a=r.length;a--;)Wt!==r[a]&&r[a].kill(e,t);return this},n.getTweensOf=function(e,t){for(var n,r=[],a=rt(e),i=this._first,s=H(t);i;)i instanceof Qt?Me(i._targets,a)&&(s?(!Wt||i._initted&&i._ts)&&i.globalTime(0)<=t&&i.globalTime(i.totalDuration())>t:!t||i.isActive())&&r.push(i):(n=i.getTweensOf(a,t)).length&&r.push.apply(r,n),i=i._next;return r},n.tweenTo=function(e,t){t=t||{};var n,r=this,a=Ke(r,e),i=t,s=i.startAt,o=i.onStart,u=i.onStartParams,l=i.immediateRender,d=Qt.to(r,we({ease:t.ease||"none",lazy:!1,immediateRender:!1,time:a,overwrite:"auto",duration:t.duration||Math.abs((a-(s&&"time"in s?s.time:r._time))/r.timeScale())||w,onStart:function(){if(r.pause(),!n){var e=t.duration||Math.abs((a-(s&&"time"in s?s.time:r._time))/r.timeScale());d._dur!==e&&Ge(d,e,0,1).render(d._time,!0,!0),n=1}o&&o.apply(d,u||[])}},t));return l?d.render(0):d},n.tweenFromTo=function(e,t,n){return this.tweenTo(t,we({startAt:{time:Ke(this,e)}},n))},n.recent=function(){return this._recent},n.nextLabel=function(e){return void 0===e&&(e=this._time),mt(this,Ke(this,e))},n.previousLabel=function(e){return void 0===e&&(e=this._time),mt(this,Ke(this,e),1)},n.currentLabel=function(e){return arguments.length?this.seek(e,!0):this.previousLabel(this._time+w)},n.shiftChildren=function(e,t,n){void 0===n&&(n=0);for(var r,a=this._first,i=this.labels;a;)a._start>=n&&(a._start+=e,a._end+=e),a=a._next;if(t)for(r in i)i[r]>=n&&(i[r]+=e);return Pe(this)},n.invalidate=function(t){var n=this._first;for(this._lock=0;n;)n.invalidate(t),n=n._next;return e.prototype.invalidate.call(this,t)},n.clear=function(e){void 0===e&&(e=!0);for(var t,n=this._first;n;)t=n._next,this.remove(n),n=t;return this._dp&&(this._time=this._tTime=this._pTime=0),e&&(this.labels={}),Pe(this)},n.totalDuration=function(e){var t,n,r,a=0,i=this,s=i._last,o=Y;if(arguments.length)return i.timeScale((i._repeat<0?i.duration():i.totalDuration())/(i.reversed()?-e:e));if(i._dirty){for(r=i.parent;s;)t=s._prev,s._dirty&&s.totalDuration(),(n=s._start)>o&&i._sort&&s._ts&&!i._lock?(i._lock=1,Ie(i,s,n-s._delay,1)._lock=0):o=n,n<0&&s._ts&&(a-=n,(!r&&!i._dp||r&&r.smoothChildTiming)&&(i._start+=n/i._ts,i._time-=n,i._tTime-=n),i.shiftChildren(-n,!1,-Infinity),o=0),s._end>a&&s._ts&&(a=s._end),s=t;Ge(i,i===u&&i._time>a?i._time:a,1,1),i._dirty=0}return i._tDur},t.updateRoot=function(e){if(u._ts&&(ke(u,Re(e,u)),m=wt.frame),wt.frame>=de){de+=k.autoSleep||120;var t=u._first;if((!t||!t._ts)&&k.autoSleep&&wt._listeners.length<2){for(;t&&!t._ts;)t=t._next;t||wt.sleep()}}},t}(Ft);we(zt.prototype,{_lock:0,_hasPause:0,_forcing:0});var Wt,It,Ut=function(e,t,n,r,a,i,s){var o,u,l,d,c,f,m,_,h=new fn(this._pt,e,t,0,1,sn,null,a),p=0,y=0;for(h.b=n,h.e=r,n+="",(m=~(r+="").indexOf("random("))&&(r=ct(r)),i&&(i(_=[n,r],e,t),n=_[0],r=_[1]),u=n.match(V)||[];o=V.exec(r);)d=o[0],c=r.substring(p,o.index),l?l=(l+1)%5:"rgba("===c.substr(-5)&&(l=1),d!==u[y++]&&(f=parseFloat(u[y-1])||0,h._pt={_next:h._pt,p:c||1===y?c:",",s:f,c:"="===d.charAt(1)?ve(f,d)-f:parseFloat(d)-f,m:l&&l<4?Math.round:0},p=V.lastIndex);return h.c=p<r.length?r.substring(p,r.length):"",h.fp=s,(J.test(r)||m)&&(h.e=0),this._pt=h,h},Bt=function(e,t,n,r,a,i,s,o,u,l){P(r)&&(r=r(a||0,e,i));var d,c=e[t],f="get"!==n?n:P(c)?u?e[t.indexOf("set")||!P(e["get"+t.substr(3)])?t:"get"+t.substr(3)](u):e[t]():c,m=P(c)?u?en:Zt:Xt;if(j(r)&&(~r.indexOf("random(")&&(r=ct(r)),"="===r.charAt(1)&&((d=ve(f,r)+(et(f)||0))||0===d)&&(r=d)),!l||f!==r||It)return isNaN(f*r)||""===r?(!c&&!(t in e)&&X(t,r),Ut.call(this,e,t,f,r,m,o||k.stringFilter,u)):(d=new fn(this._pt,e,t,+f||0,r-(f||0),"boolean"==typeof c?an:rn,0,m),u&&(d.fp=u),s&&d.modifier(s,this,e),this._pt=d)},Vt=function(e,t,n,r,a,i){var s,o,u,l;if(ue[e]&&!1!==(s=new ue[e]).init(a,s.rawVars?t[e]:function(e,t,n,r,a){if(P(e)&&(e=qt(e,a,t,n,r)),!A(e)||e.style&&e.nodeType||W(e)||z(e))return j(e)?qt(e,a,t,n,r):e;var i,s={};for(i in e)s[i]=qt(e[i],a,t,n,r);return s}(t[e],r,a,i,n),n,r,i)&&(n._pt=o=new fn(n._pt,a,e,0,1,s.render,s,0,s.priority),n!==_))for(u=n._ptLookup[n._targets.indexOf(a)],l=s._props.length;l--;)u[s._props[l]]=o;return s},Jt=function e(t,n,r){var a,o,l,d,c,f,m,_,h,p,y,g,v,M=t.vars,L=M.ease,k=M.startAt,D=M.immediateRender,T=M.lazy,S=M.onUpdate,x=M.onUpdateParams,O=M.callbackScope,E=M.runBackwards,j=M.yoyoEase,P=M.keyframes,H=M.autoRevert,C=t._dur,A=t._startAt,R=t._targets,F=t.parent,z=F&&"nested"===F.data?F.vars.targets:R,W="auto"===t._overwrite&&!i,I=t.timeline;if(I&&(!P||!L)&&(L="none"),t._ease=Pt(L,b.ease),t._yEase=j?Et(Pt(!0===j?L:j,b.ease)):0,j&&t._yoyo&&!t._repeat&&(j=t._yEase,t._yEase=t._ease,t._ease=j),t._from=!I&&!!M.runBackwards,!I||P&&!M.stagger){if(g=(_=R[0]?_e(R[0]).harness:0)&&M[_.prop],a=Se(M,ie),A&&(A._zTime<0&&A.progress(1),n<0&&E&&D&&!H?A.render(-1,!0):A.revert(E&&C?re:ne),A._lazy=0),k){if(je(t._startAt=Qt.set(R,we({data:"isStart",overwrite:!1,parent:F,immediateRender:!0,lazy:N(T),startAt:null,delay:0,onUpdate:S,onUpdateParams:x,callbackScope:O,stagger:0},k))),t._startAt._dp=0,n<0&&(s||!D&&!H)&&t._startAt.revert(re),D&&C&&n<=0&&r<=0)return void(n&&(t._zTime=n))}else if(E&&C&&!A)if(n&&(D=!1),l=we({overwrite:!1,data:"isFromStart",lazy:D&&N(T),immediateRender:D,stagger:0,parent:F},a),g&&(l[_.prop]=g),je(t._startAt=Qt.set(R,l)),t._startAt._dp=0,n<0&&(s?t._startAt.revert(re):t._startAt.render(-1,!0)),t._zTime=n,D){if(!n)return}else e(t._startAt,w,w);for(t._pt=t._ptCache=0,T=C&&N(T)||T&&!C,o=0;o<R.length;o++){if(m=(c=R[o])._gsap||me(R)[o]._gsap,t._ptLookup[o]=p={},oe[m.id]&&se.length&&Le(),y=z===R?o:z.indexOf(c),_&&!1!==(h=new _).init(c,g||a,t,y,z)&&(t._pt=d=new fn(t._pt,c,h.name,0,1,h.render,h,0,h.priority),h._props.forEach((function(e){p[e]=d})),h.priority&&(f=1)),!_||g)for(l in a)ue[l]&&(h=Vt(l,a,t,y,c,z))?h.priority&&(f=1):p[l]=d=Bt.call(t,c,l,"get",a[l],y,z,0,M.stringFilter);t._op&&t._op[o]&&t.kill(c,t._op[o]),W&&t._pt&&(Wt=t,u.killTweensOf(c,p,t.globalTime(n)),v=!t.parent,Wt=0),t._pt&&T&&(oe[m.id]=1)}f&&cn(t),t._onInit&&t._onInit(t)}t._onUpdate=S,t._initted=(!t._op||t._pt)&&!v,P&&n<=0&&I.render(Y,!0,!0)},Gt=function(e,t,n,r){var a,i,s=t.ease||r||"power1.inOut";if(W(t))i=n[e]||(n[e]=[]),t.forEach((function(e,n){return i.push({t:n/(t.length-1)*100,v:e,e:s})}));else for(a in t)i=n[a]||(n[a]=[]),"ease"===a||i.push({t:parseFloat(e),v:t[a],e:s})},qt=function(e,t,n,r,a){return P(e)?e.call(t,n,r,a):j(e)&&~e.indexOf("random(")?ct(e):e},$t=fe+"repeat,repeatDelay,yoyo,repeatRefresh,yoyoEase,autoRevert",Kt={};pe($t+",id,stagger,delay,duration,paused,scrollTrigger",(function(e){return Kt[e]=1}));var Qt=function(e){function t(t,n,a,s){var o;"number"==typeof n&&(a.duration=n,n=a,a=null);var l,d,c,f,m,_,h,p,y=(o=e.call(this,s?n:xe(n))||this).vars,g=y.duration,v=y.delay,M=y.immediateRender,L=y.stagger,b=y.overwrite,Y=y.keyframes,w=y.defaults,D=y.scrollTrigger,T=y.yoyoEase,S=n.parent||u,x=(W(t)||z(t)?H(t[0]):"length"in n)?[t]:rt(t);if(o._targets=x.length?me(x):Z("GSAP target "+t+" not found. https://greensock.com",!k.nullTargetWarn)||[],o._ptLookup=[],o._overwrite=b,Y||L||F(g)||F(v)){if(n=o.vars,(l=o.timeline=new zt({data:"nested",defaults:w||{},targets:S&&"nested"===S.data?S.vars.targets:x})).kill(),l.parent=l._dp=r(o),l._start=0,L||F(g)||F(v)){if(f=x.length,h=L&&st(L),A(L))for(m in L)~$t.indexOf(m)&&(p||(p={}),p[m]=L[m]);for(d=0;d<f;d++)(c=Se(n,Kt)).stagger=0,T&&(c.yoyoEase=T),p&&De(c,p),_=x[d],c.duration=+qt(g,r(o),d,_,x),c.delay=(+qt(v,r(o),d,_,x)||0)-o._delay,!L&&1===f&&c.delay&&(o._delay=v=c.delay,o._start+=v,c.delay=0),l.to(_,c,h?h(d,_,x):0),l._ease=Tt.none;l.duration()?g=v=0:o.timeline=0}else if(Y){xe(we(l.vars.defaults,{ease:"none"})),l._ease=Pt(Y.ease||n.ease||"none");var O,E,j,P=0;if(W(Y))Y.forEach((function(e){return l.to(x,e,">")})),l.duration();else{for(m in c={},Y)"ease"===m||"easeEach"===m||Gt(m,Y[m],c,Y.easeEach);for(m in c)for(O=c[m].sort((function(e,t){return e.t-t.t})),P=0,d=0;d<O.length;d++)(j={ease:(E=O[d]).e,duration:(E.t-(d?O[d-1].t:0))/100*g})[m]=E.v,l.to(x,j,P),P+=j.duration;l.duration()<g&&l.to({},{duration:g-l.duration()})}}g||o.duration(g=l.duration())}else o.timeline=0;return!0!==b||i||(Wt=r(o),u.killTweensOf(x),Wt=0),Ie(S,r(o),a),n.reversed&&o.reverse(),n.paused&&o.paused(!0),(M||!g&&!Y&&o._start===ge(S._time)&&N(M)&&Ce(r(o))&&"nested"!==S.data)&&(o._tTime=-1e-8,o.render(Math.max(0,-v)||0)),D&&Ue(r(o),D),o}a(t,e);var n=t.prototype;return n.render=function(e,t,n){var r,a,i,o,u,l,d,c,f,m=this._time,_=this._tDur,h=this._dur,p=e<0,y=e>_-w&&!p?_:e<w?0:e;if(h){if(y!==this._tTime||!e||n||!this._initted&&this._tTime||this._startAt&&this._zTime<0!==p){if(r=y,c=this.timeline,this._repeat){if(o=h+this._rDelay,this._repeat<-1&&p)return this.totalTime(100*o+e,t,n);if(r=ge(y%o),y===_?(i=this._repeat,r=h):((i=~~(y/o))&&i===y/o&&(r=h,i--),r>h&&(r=h)),(l=this._yoyo&&1&i)&&(f=this._yEase,r=h-r),u=Ne(this._tTime,o),r===m&&!n&&this._initted)return this._tTime=y,this;i!==u&&(c&&this._yEase&&jt(c,l),!this.vars.repeatRefresh||l||this._lock||(this._lock=n=1,this.render(ge(o*i),!0).invalidate()._lock=0))}if(!this._initted){if(Be(this,p?e:r,n,t,y))return this._tTime=0,this;if(m!==this._time)return this;if(h!==this._dur)return this.render(e,t,n)}if(this._tTime=y,this._time=r,!this._act&&this._ts&&(this._act=1,this._lazy=0),this.ratio=d=(f||this._ease)(r/h),this._from&&(this.ratio=d=1-d),r&&!m&&!t&&(_t(this,"onStart"),this._tTime!==y))return this;for(a=this._pt;a;)a.r(d,a.d),a=a._next;c&&c.render(e<0?e:!r&&l?-1e-8:c._dur*c._ease(r/this._dur),t,n)||this._startAt&&(this._zTime=e),this._onUpdate&&!t&&(p&&He(this,e,0,n),_t(this,"onUpdate")),this._repeat&&i!==u&&this.vars.onRepeat&&!t&&this.parent&&_t(this,"onRepeat"),y!==this._tDur&&y||this._tTime!==y||(p&&!this._onUpdate&&He(this,e,0,!0),(e||!h)&&(y===this._tDur&&this._ts>0||!y&&this._ts<0)&&je(this,1),t||p&&!m||!(y||m||l)||(_t(this,y===_?"onComplete":"onReverseComplete",!0),this._prom&&!(y<_&&this.timeScale()>0)&&this._prom()))}}else!function(e,t,n,r){var a,i,o,u=e.ratio,l=t<0||!t&&(!e._start&&Ve(e)&&(e._initted||!Je(e))||(e._ts<0||e._dp._ts<0)&&!Je(e))?0:1,d=e._rDelay,c=0;if(d&&e._repeat&&(c=Ze(0,e._tDur,t),i=Ne(c,d),e._yoyo&&1&i&&(l=1-l),i!==Ne(e._tTime,d)&&(u=1-l,e.vars.repeatRefresh&&e._initted&&e.invalidate())),l!==u||s||r||e._zTime===w||!t&&e._zTime){if(!e._initted&&Be(e,t,r,n,c))return;for(o=e._zTime,e._zTime=t||(n?w:0),n||(n=t&&!o),e.ratio=l,e._from&&(l=1-l),e._time=0,e._tTime=c,a=e._pt;a;)a.r(l,a.d),a=a._next;t<0&&He(e,t,0,!0),e._onUpdate&&!n&&_t(e,"onUpdate"),c&&e._repeat&&!n&&e.parent&&_t(e,"onRepeat"),(t>=e._tDur||t<0)&&e.ratio===l&&(l&&je(e,1),n||s||(_t(e,l?"onComplete":"onReverseComplete",!0),e._prom&&e._prom()))}else e._zTime||(e._zTime=t)}(this,e,t,n);return this},n.targets=function(){return this._targets},n.invalidate=function(t){return(!t||!this.vars.runBackwards)&&(this._startAt=0),this._pt=this._op=this._onUpdate=this._lazy=this.ratio=0,this._ptLookup=[],this.timeline&&this.timeline.invalidate(t),e.prototype.invalidate.call(this,t)},n.resetTo=function(e,t,n,r){h||wt.wake(),this._ts||this.play();var a=Math.min(this._dur,(this._dp._time-this._start)*this._ts);return this._initted||Jt(this,a),function(e,t,n,r,a,i,s){var o,u,l,d,c=(e._pt&&e._ptCache||(e._ptCache={}))[t];if(!c)for(c=e._ptCache[t]=[],l=e._ptLookup,d=e._targets.length;d--;){if((o=l[d][t])&&o.d&&o.d._pt)for(o=o.d._pt;o&&o.p!==t&&o.fp!==t;)o=o._next;if(!o)return It=1,e.vars[t]="+=0",Jt(e,s),It=0,1;c.push(o)}for(d=c.length;d--;)(o=(u=c[d])._pt||u).s=!r&&0!==r||a?o.s+(r||0)+i*o.c:r,o.c=n-o.s,u.e&&(u.e=ye(n)+et(u.e)),u.b&&(u.b=o.s+et(u.b))}(this,e,t,n,r,this._ease(a/this._dur),a)?this.resetTo(e,t,n,r):(ze(this,0),this.parent||Oe(this._dp,this,"_first","_last",this._dp._sort?"_start":0),this.render(0))},n.kill=function(e,t){if(void 0===t&&(t="all"),!(e||t&&"all"!==t))return this._lazy=this._pt=0,this.parent?ht(this):this;if(this.timeline){var n=this.timeline.totalDuration();return this.timeline.killTweensOf(e,t,Wt&&!0!==Wt.vars.overwrite)._first||ht(this),this.parent&&n!==this.timeline.totalDuration()&&Ge(this,this._dur*this.timeline._tDur/n,0,1),this}var r,a,i,s,o,u,l,d=this._targets,c=e?rt(e):d,f=this._ptLookup,m=this._pt;if((!t||"all"===t)&&function(e,t){for(var n=e.length,r=n===t.length;r&&n--&&e[n]===t[n];);return n<0}(d,c))return"all"===t&&(this._pt=0),ht(this);for(r=this._op=this._op||[],"all"!==t&&(j(t)&&(o={},pe(t,(function(e){return o[e]=1})),t=o),t=function(e,t){var n,r,a,i,s=e[0]?_e(e[0]).harness:0,o=s&&s.aliases;if(!o)return t;for(r in n=De({},t),o)if(r in n)for(a=(i=o[r].split(",")).length;a--;)n[i[a]]=n[r];return n}(d,t)),l=d.length;l--;)if(~c.indexOf(d[l]))for(o in a=f[l],"all"===t?(r[l]=t,s=a,i={}):(i=r[l]=r[l]||{},s=t),s)(u=a&&a[o])&&("kill"in u.d&&!0!==u.d.kill(o)||Ee(this,u,"_pt"),delete a[o]),"all"!==i&&(i[o]=1);return this._initted&&!this._pt&&m&&ht(this),this},t.to=function(e,n){return new t(e,n,arguments[2])},t.from=function(e,t){return Qe(1,arguments)},t.delayedCall=function(e,n,r,a){return new t(n,0,{immediateRender:!1,lazy:!1,overwrite:!1,delay:e,onComplete:n,onReverseComplete:n,onCompleteParams:r,onReverseCompleteParams:r,callbackScope:a})},t.fromTo=function(e,t,n){return Qe(2,arguments)},t.set=function(e,n){return n.duration=0,n.repeatDelay||(n.repeat=0),new t(e,n)},t.killTweensOf=function(e,t,n){return u.killTweensOf(e,t,n)},t}(Ft);we(Qt.prototype,{_targets:[],_lazy:0,_startAt:0,_op:0,_onInit:0}),pe("staggerTo,staggerFrom,staggerFromTo",(function(e){Qt[e]=function(){var t=new zt,n=tt.call(arguments,0);return n.splice("staggerFromTo"===e?5:4,0,0),t[e].apply(t,n)}}));var Xt=function(e,t,n){return e[t]=n},Zt=function(e,t,n){return e[t](n)},en=function(e,t,n,r){return e[t](r.fp,n)},tn=function(e,t,n){return e.setAttribute(t,n)},nn=function(e,t){return P(e[t])?Zt:C(e[t])&&e.setAttribute?tn:Xt},rn=function(e,t){return t.set(t.t,t.p,Math.round(1e6*(t.s+t.c*e))/1e6,t)},an=function(e,t){return t.set(t.t,t.p,!!(t.s+t.c*e),t)},sn=function(e,t){var n=t._pt,r="";if(!e&&t.b)r=t.b;else if(1===e&&t.e)r=t.e;else{for(;n;)r=n.p+(n.m?n.m(n.s+n.c*e):Math.round(1e4*(n.s+n.c*e))/1e4)+r,n=n._next;r+=t.c}t.set(t.t,t.p,r,t)},on=function(e,t){for(var n=t._pt;n;)n.r(e,n.d),n=n._next},un=function(e,t,n,r){for(var a,i=this._pt;i;)a=i._next,i.p===r&&i.modifier(e,t,n),i=a},ln=function(e){for(var t,n,r=this._pt;r;)n=r._next,r.p===e&&!r.op||r.op===e?Ee(this,r,"_pt"):r.dep||(t=1),r=n;return!t},dn=function(e,t,n,r){r.mSet(e,t,r.m.call(r.tween,n,r.mt),r)},cn=function(e){for(var t,n,r,a,i=e._pt;i;){for(t=i._next,n=r;n&&n.pr>i.pr;)n=n._next;(i._prev=n?n._prev:a)?i._prev._next=i:r=i,(i._next=n)?n._prev=i:a=i,i=t}e._pt=r},fn=function(){function e(e,t,n,r,a,i,s,o,u){this.t=t,this.s=r,this.c=a,this.p=n,this.r=i||rn,this.d=s||this,this.set=o||Xt,this.pr=u||0,this._next=e,e&&(e._prev=this)}return e.prototype.modifier=function(e,t,n){this.mSet=this.mSet||this.set,this.set=dn,this.m=e,this.mt=n,this.tween=t},e}();pe(fe+"parent,duration,ease,delay,overwrite,runBackwards,startAt,yoyo,immediateRender,repeat,repeatDelay,data,paused,reversed,lazy,callbackScope,stringFilter,id,yoyoEase,stagger,inherit,repeatRefresh,keyframes,autoRevert,scrollTrigger",(function(e){return ie[e]=1})),$.TweenMax=$.TweenLite=Qt,$.TimelineLite=$.TimelineMax=zt,u=new zt({sortChildren:!1,defaults:b,autoRemoveChildren:!0,id:"root",smoothChildTiming:!0}),k.stringFilter=Yt;var mn=[],_n={},hn=[],pn=0,yn=function(e){return(_n[e]||hn).map((function(e){return e()}))},gn=function(){var e=Date.now(),t=[];e-pn>2&&(yn("matchMediaInit"),mn.forEach((function(e){var n,r,a,i,s=e.queries,o=e.conditions;for(r in s)(n=l.matchMedia(s[r]).matches)&&(a=1),n!==o[r]&&(o[r]=n,i=1);i&&(e.revert(),a&&t.push(e))})),yn("matchMediaRevert"),t.forEach((function(e){return e.onMatch(e)})),pn=e,yn("matchMedia"))},vn=function(){function e(e,t){this.selector=t&&at(t),this.data=[],this._r=[],this.isReverted=!1,e&&this.add(e)}var t=e.prototype;return t.add=function(e,t,n){P(e)&&(n=t,t=e,e=P);var r=this,a=function(){var e,a=o,i=r.selector;return a&&a!==r&&a.data.push(r),n&&(r.selector=at(n)),o=r,e=t.apply(r,arguments),P(e)&&r._r.push(e),o=a,r.selector=i,r.isReverted=!1,e};return r.last=a,e===P?a(r):e?r[e]=a:a},t.ignore=function(e){var t=o;o=null,e(this),o=t},t.getTweens=function(){var t=[];return this.data.forEach((function(n){return n instanceof e?t.push.apply(t,n.getTweens()):n instanceof Qt&&!(n.parent&&"nested"===n.parent.data)&&t.push(n)})),t},t.clear=function(){this._r.length=this.data.length=0},t.kill=function(e,t){var n=this;if(e){var r=this.getTweens();this.data.forEach((function(e){"isFlip"===e.data&&(e.revert(),e.getChildren(!0,!0,!1).forEach((function(e){return r.splice(r.indexOf(e),1)})))})),r.map((function(e){return{g:e.globalTime(0),t:e}})).sort((function(e,t){return t.g-e.g||-1})).forEach((function(t){return t.t.revert(e)})),this.data.forEach((function(t){return!(t instanceof Ft)&&t.revert&&t.revert(e)})),this._r.forEach((function(t){return t(e,n)})),this.isReverted=!0}else this.data.forEach((function(e){return e.kill&&e.kill()}));if(this.clear(),t){var a=mn.indexOf(this);~a&&mn.splice(a,1)}},t.revert=function(e){this.kill(e||{})},e}(),Mn=function(){function e(e){this.contexts=[],this.scope=e}var t=e.prototype;return t.add=function(e,t,n){A(e)||(e={matches:e});var r,a,i,s=new vn(0,n||this.scope),o=s.conditions={};for(a in this.contexts.push(s),t=s.add("onMatch",t),s.queries=e,e)"all"===a?i=1:(r=l.matchMedia(e[a]))&&(mn.indexOf(s)<0&&mn.push(s),(o[a]=r.matches)&&(i=1),r.addListener?r.addListener(gn):r.addEventListener("change",gn));return i&&t(s),this},t.revert=function(e){this.kill(e||{})},t.kill=function(e){this.contexts.forEach((function(t){return t.kill(e,!0)}))},e}(),Ln={registerPlugin:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];t.forEach((function(e){return function(e){var t=(e=!e.name&&e.default||e).name,n=P(e),r=t&&!n&&e.init?function(){this._props=[]}:e,a={init:te,render:on,add:Bt,kill:ln,modifier:un,rawVars:0},i={targetTest:0,get:0,getSetter:nn,aliases:{},register:0};if(Dt(),e!==r){if(ue[t])return;we(r,we(Se(e,a),i)),De(r.prototype,De(a,Se(e,i))),ue[r.prop=t]=r,e.targetTest&&(ce.push(r),ie[t]=1),t=("css"===t?"CSS":t.charAt(0).toUpperCase()+t.substr(1))+"Plugin"}ee(t,r),e.register&&e.register(Yn,r,fn)}(e)}))},timeline:function(e){return new zt(e)},getTweensOf:function(e,t){return u.getTweensOf(e,t)},getProperty:function(e,t,n,r){j(e)&&(e=rt(e)[0]);var a=_e(e||{}).get,i=n?Ye:be;return"native"===n&&(n=""),e?t?i((ue[t]&&ue[t].get||a)(e,t,n,r)):function(t,n,r){return i((ue[t]&&ue[t].get||a)(e,t,n,r))}:e},quickSetter:function(e,t,n){if((e=rt(e)).length>1){var r=e.map((function(e){return Yn.quickSetter(e,t,n)})),a=r.length;return function(e){for(var t=a;t--;)r[t](e)}}e=e[0]||{};var i=ue[t],s=_e(e),o=s.harness&&(s.harness.aliases||{})[t]||t,u=i?function(t){var r=new i;_._pt=0,r.init(e,n?t+n:t,_,0,[e]),r.render(1,r),_._pt&&on(1,_)}:s.set(e,o);return i?u:function(t){return u(e,o,n?t+n:t,s,1)}},quickTo:function(e,t,n){var r,a=Yn.to(e,De(((r={})[t]="+=0.1",r.paused=!0,r),n||{})),i=function(e,n,r){return a.resetTo(t,e,n,r)};return i.tween=a,i},isTweening:function(e){return u.getTweensOf(e,!0).length>0},defaults:function(e){return e&&e.ease&&(e.ease=Pt(e.ease,b.ease)),Te(b,e||{})},config:function(e){return Te(k,e||{})},registerEffect:function(e){var t=e.name,n=e.effect,r=e.plugins,a=e.defaults,i=e.extendTimeline;(r||"").split(",").forEach((function(e){return e&&!ue[e]&&!$[e]&&Z(t+" effect requires "+e+" plugin.")})),le[t]=function(e,t,r){return n(rt(e),we(t||{},a),r)},i&&(zt.prototype[t]=function(e,n,r){return this.add(le[t](e,A(n)?n:(r=n)&&{},this),r)})},registerEase:function(e,t){Tt[e]=Pt(t)},parseEase:function(e,t){return arguments.length?Pt(e,t):Tt},getById:function(e){return u.getById(e)},exportRoot:function(e,t){void 0===e&&(e={});var n,r,a=new zt(e);for(a.smoothChildTiming=N(e.smoothChildTiming),u.remove(a),a._dp=0,a._time=a._tTime=u._time,n=u._first;n;)r=n._next,!t&&!n._dur&&n instanceof Qt&&n.vars.onComplete===n._targets[0]||Ie(a,n,n._start-n._delay),n=r;return Ie(u,a,0),a},context:function(e,t){return e?new vn(e,t):o},matchMedia:function(e){return new Mn(e)},matchMediaRefresh:function(){return mn.forEach((function(e){var t,n,r=e.conditions;for(n in r)r[n]&&(r[n]=!1,t=1);t&&e.revert()}))||gn()},addEventListener:function(e,t){var n=_n[e]||(_n[e]=[]);~n.indexOf(t)||n.push(t)},removeEventListener:function(e,t){var n=_n[e],r=n&&n.indexOf(t);r>=0&&n.splice(r,1)},utils:{wrap:function e(t,n,r){var a=n-t;return W(t)?dt(t,e(0,t.length),n):Xe(r,(function(e){return(a+(e-t)%a)%a+t}))},wrapYoyo:function e(t,n,r){var a=n-t,i=2*a;return W(t)?dt(t,e(0,t.length-1),n):Xe(r,(function(e){return t+((e=(i+(e-t)%i)%i||0)>a?i-e:e)}))},distribute:st,random:lt,snap:ut,normalize:function(e,t,n){return ft(e,t,0,1,n)},getUnit:et,clamp:function(e,t,n){return Xe(n,(function(n){return Ze(e,t,n)}))},splitColor:vt,toArray:rt,selector:at,mapRange:ft,pipe:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return t.reduce((function(e,t){return t(e)}),e)}},unitize:function(e,t){return function(n){return e(parseFloat(n))+(t||et(n))}},interpolate:function e(t,n,r,a){var i=isNaN(t+n)?0:function(e){return(1-e)*t+e*n};if(!i){var s,o,u,l,d,c=j(t),f={};if(!0===r&&(a=1)&&(r=null),c)t={p:t},n={p:n};else if(W(t)&&!W(n)){for(u=[],l=t.length,d=l-2,o=1;o<l;o++)u.push(e(t[o-1],t[o]));l--,i=function(e){e*=l;var t=Math.min(d,~~e);return u[t](e-t)},r=n}else a||(t=De(W(t)?[]:{},t));if(!u){for(s in n)Bt.call(f,t,s,"get",n[s]);i=function(e){return on(e,f)||(c?t.p:t)}}}return Xe(r,i)},shuffle:it},install:Q,effects:le,ticker:wt,updateRoot:zt.updateRoot,plugins:ue,globalTimeline:u,core:{PropTween:fn,globals:ee,Tween:Qt,Timeline:zt,Animation:Ft,getCache:_e,_removeLinkedListItem:Ee,reverting:function(){return s},context:function(e){return e&&o&&(o.data.push(e),e._ctx=o),o},suppressOverwrites:function(e){return i=e}}};pe("to,from,fromTo,delayedCall,set,killTweensOf",(function(e){return Ln[e]=Qt[e]})),wt.add(zt.updateRoot),_=Ln.to({},{duration:0});var kn=function(e,t){for(var n=e._pt;n&&n.p!==t&&n.op!==t&&n.fp!==t;)n=n._next;return n},bn=function(e,t){return{name:e,rawVars:1,init:function(e,n,r){r._onInit=function(e){var r,a;if(j(n)&&(r={},pe(n,(function(e){return r[e]=1})),n=r),t){for(a in r={},n)r[a]=t(n[a]);n=r}!function(e,t){var n,r,a,i=e._targets;for(n in t)for(r=i.length;r--;)(a=e._ptLookup[r][n])&&(a=a.d)&&(a._pt&&(a=kn(a,n)),a&&a.modifier&&a.modifier(t[n],e,i[r],n))}(e,n)}}}},Yn=Ln.registerPlugin({name:"attr",init:function(e,t,n,r,a){var i,s,o;for(i in this.tween=n,t)o=e.getAttribute(i)||"",(s=this.add(e,"setAttribute",(o||0)+"",t[i],r,a,0,0,i)).op=i,s.b=o,this._props.push(i)},render:function(e,t){for(var n=t._pt;n;)s?n.set(n.t,n.p,n.b,n):n.r(e,n.d),n=n._next}},{name:"endArray",init:function(e,t){for(var n=t.length;n--;)this.add(e,n,e[n]||0,t[n],0,0,0,0,0,1)}},bn("roundProps",ot),bn("modifiers"),bn("snap",ut))||Ln;Qt.version=zt.version=Yn.version="3.11.3",f=1,R()&&Dt();var wn,Dn,Tn,Sn,xn,On,En,jn,Pn=Tt.Power0,Hn=Tt.Power1,Cn=Tt.Power2,An=Tt.Power3,Nn=Tt.Power4,Rn=Tt.Linear,Fn=Tt.Quad,zn=Tt.Cubic,Wn=Tt.Quart,In=Tt.Quint,Un=Tt.Strong,Bn=Tt.Elastic,Vn=Tt.Back,Jn=Tt.SteppedEase,Gn=Tt.Bounce,qn=Tt.Sine,$n=Tt.Expo,Kn=Tt.Circ,Qn={},Xn=180/Math.PI,Zn=Math.PI/180,er=Math.atan2,tr=/([A-Z])/g,nr=/(left|right|width|margin|padding|x)/i,rr=/[\s,\(]\S/,ar={autoAlpha:"opacity,visibility",scale:"scaleX,scaleY",alpha:"opacity"},ir=function(e,t){return t.set(t.t,t.p,Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},sr=function(e,t){return t.set(t.t,t.p,1===e?t.e:Math.round(1e4*(t.s+t.c*e))/1e4+t.u,t)},or=function(e,t){return t.set(t.t,t.p,e?Math.round(1e4*(t.s+t.c*e))/1e4+t.u:t.b,t)},ur=function(e,t){var n=t.s+t.c*e;t.set(t.t,t.p,~~(n+(n<0?-.5:.5))+t.u,t)},lr=function(e,t){return t.set(t.t,t.p,e?t.e:t.b,t)},dr=function(e,t){return t.set(t.t,t.p,1!==e?t.b:t.e,t)},cr=function(e,t,n){return e.style[t]=n},fr=function(e,t,n){return e.style.setProperty(t,n)},mr=function(e,t,n){return e._gsap[t]=n},_r=function(e,t,n){return e._gsap.scaleX=e._gsap.scaleY=n},hr=function(e,t,n,r,a){var i=e._gsap;i.scaleX=i.scaleY=n,i.renderTransform(a,i)},pr=function(e,t,n,r,a){var i=e._gsap;i[t]=n,i.renderTransform(a,i)},yr="transform",gr=yr+"Origin",vr=function(e,t){var n=this,r=this.target,a=r.style;if(e in Qn){if(this.tfm=this.tfm||{},"transform"!==e&&(~(e=ar[e]||e).indexOf(",")?e.split(",").forEach((function(e){return n.tfm[e]=Nr(r,e)})):this.tfm[e]=r._gsap.x?r._gsap[e]:Nr(r,e)),this.props.indexOf(yr)>=0)return;r._gsap.svg&&(this.svgo=r.getAttribute("data-svg-origin"),this.props.push(gr,t,"")),e=yr}(a||t)&&this.props.push(e,t,a[e])},Mr=function(e){e.translate&&(e.removeProperty("translate"),e.removeProperty("scale"),e.removeProperty("rotate"))},Lr=function(){var e,t,n=this.props,r=this.target,a=r.style,i=r._gsap;for(e=0;e<n.length;e+=3)n[e+1]?r[n[e]]=n[e+2]:n[e+2]?a[n[e]]=n[e+2]:a.removeProperty(n[e].replace(tr,"-$1").toLowerCase());if(this.tfm){for(t in this.tfm)i[t]=this.tfm[t];i.svg&&(i.renderTransform(),r.setAttribute("data-svg-origin",this.svgo||"")),!(e=En())||e.isStart||a[yr]||(Mr(a),i.uncache=1)}},kr=function(e,t){var n={target:e,props:[],revert:Lr,save:vr};return t&&t.split(",").forEach((function(e){return n.save(e)})),n},br=function(e,t){var n=Dn.createElementNS?Dn.createElementNS((t||"http://www.w3.org/1999/xhtml").replace(/^https/,"http"),e):Dn.createElement(e);return n.style?n:Dn.createElement(e)},Yr=function e(t,n,r){var a=getComputedStyle(t);return a[n]||a.getPropertyValue(n.replace(tr,"-$1").toLowerCase())||a.getPropertyValue(n)||!r&&e(t,Dr(n)||n,1)||""},wr="O,Moz,ms,Ms,Webkit".split(","),Dr=function(e,t,n){var r=(t||xn).style,a=5;if(e in r&&!n)return e;for(e=e.charAt(0).toUpperCase()+e.substr(1);a--&&!(wr[a]+e in r););return a<0?null:(3===a?"ms":a>=0?wr[a]:"")+e},Tr=function(){"undefined"!=typeof window&&window.document&&(wn=window,Dn=wn.document,Tn=Dn.documentElement,xn=br("div")||{style:{}},br("div"),yr=Dr(yr),gr=yr+"Origin",xn.style.cssText="border-width:0;line-height:0;position:absolute;padding:0",jn=!!Dr("perspective"),En=Yn.core.reverting,Sn=1)},Sr=function e(t){var n,r=br("svg",this.ownerSVGElement&&this.ownerSVGElement.getAttribute("xmlns")||"http://www.w3.org/2000/svg"),a=this.parentNode,i=this.nextSibling,s=this.style.cssText;if(Tn.appendChild(r),r.appendChild(this),this.style.display="block",t)try{n=this.getBBox(),this._gsapBBox=this.getBBox,this.getBBox=e}catch(e){}else this._gsapBBox&&(n=this._gsapBBox());return a&&(i?a.insertBefore(this,i):a.appendChild(this)),Tn.removeChild(r),this.style.cssText=s,n},xr=function(e,t){for(var n=t.length;n--;)if(e.hasAttribute(t[n]))return e.getAttribute(t[n])},Or=function(e){var t;try{t=e.getBBox()}catch(n){t=Sr.call(e,!0)}return t&&(t.width||t.height)||e.getBBox===Sr||(t=Sr.call(e,!0)),!t||t.width||t.x||t.y?t:{x:+xr(e,["x","cx","x1"])||0,y:+xr(e,["y","cy","y1"])||0,width:0,height:0}},Er=function(e){return!(!e.getCTM||e.parentNode&&!e.ownerSVGElement||!Or(e))},jr=function(e,t){if(t){var n=e.style;t in Qn&&t!==gr&&(t=yr),n.removeProperty?("ms"!==t.substr(0,2)&&"webkit"!==t.substr(0,6)||(t="-"+t),n.removeProperty(t.replace(tr,"-$1").toLowerCase())):n.removeAttribute(t)}},Pr=function(e,t,n,r,a,i){var s=new fn(e._pt,t,n,0,1,i?dr:lr);return e._pt=s,s.b=r,s.e=a,e._props.push(n),s},Hr={deg:1,rad:1,turn:1},Cr={grid:1,flex:1},Ar=function e(t,n,r,a){var i,s,o,u,l=parseFloat(r)||0,d=(r+"").trim().substr((l+"").length)||"px",c=xn.style,f=nr.test(n),m="svg"===t.tagName.toLowerCase(),_=(m?"client":"offset")+(f?"Width":"Height"),h=100,p="px"===a,y="%"===a;return a===d||!l||Hr[a]||Hr[d]?l:("px"!==d&&!p&&(l=e(t,n,r,"px")),u=t.getCTM&&Er(t),!y&&"%"!==d||!Qn[n]&&!~n.indexOf("adius")?(c[f?"width":"height"]=h+(p?d:a),s=~n.indexOf("adius")||"em"===a&&t.appendChild&&!m?t:t.parentNode,u&&(s=(t.ownerSVGElement||{}).parentNode),s&&s!==Dn&&s.appendChild||(s=Dn.body),(o=s._gsap)&&y&&o.width&&f&&o.time===wt.time&&!o.uncache?ye(l/o.width*h):((y||"%"===d)&&!Cr[Yr(s,"display")]&&(c.position=Yr(t,"position")),s===t&&(c.position="static"),s.appendChild(xn),i=xn[_],s.removeChild(xn),c.position="absolute",f&&y&&((o=_e(s)).time=wt.time,o.width=s[_]),ye(p?i*l/h:i&&l?h/i*l:0))):(i=u?t.getBBox()[f?"width":"height"]:t[_],ye(y?l/i*h:l/100*i)))},Nr=function(e,t,n,r){var a;return Sn||Tr(),t in ar&&"transform"!==t&&~(t=ar[t]).indexOf(",")&&(t=t.split(",")[0]),Qn[t]&&"transform"!==t?(a=qr(e,r),a="transformOrigin"!==t?a[t]:a.svg?a.origin:$r(Yr(e,gr))+" "+a.zOrigin+"px"):(!(a=e.style[t])||"auto"===a||r||~(a+"").indexOf("calc("))&&(a=Wr[t]&&Wr[t](e,t,n)||Yr(e,t)||he(e,t)||("opacity"===t?1:0)),n&&!~(a+"").trim().indexOf(" ")?Ar(e,t,a,n)+n:a},Rr=function(e,t,n,r){if(!n||"none"===n){var a=Dr(t,e,1),i=a&&Yr(e,a,1);i&&i!==n?(t=a,n=i):"borderColor"===t&&(n=Yr(e,"borderTopColor"))}var s,o,u,l,d,c,f,m,_,h,p,y=new fn(this._pt,e.style,t,0,1,sn),g=0,v=0;if(y.b=n,y.e=r,n+="","auto"==(r+="")&&(e.style[t]=r,r=Yr(e,t)||r,e.style[t]=n),Yt(s=[n,r]),r=s[1],u=(n=s[0]).match(B)||[],(r.match(B)||[]).length){for(;o=B.exec(r);)f=o[0],_=r.substring(g,o.index),d?d=(d+1)%5:"rgba("!==_.substr(-5)&&"hsla("!==_.substr(-5)||(d=1),f!==(c=u[v++]||"")&&(l=parseFloat(c)||0,p=c.substr((l+"").length),"="===f.charAt(1)&&(f=ve(l,f)+p),m=parseFloat(f),h=f.substr((m+"").length),g=B.lastIndex-h.length,h||(h=h||k.units[t]||p,g===r.length&&(r+=h,y.e+=h)),p!==h&&(l=Ar(e,t,c,h)||0),y._pt={_next:y._pt,p:_||1===v?_:",",s:l,c:m-l,m:d&&d<4||"zIndex"===t?Math.round:0});y.c=g<r.length?r.substring(g,r.length):""}else y.r="display"===t&&"none"===r?dr:lr;return J.test(r)&&(y.e=0),this._pt=y,y},Fr={top:"0%",bottom:"100%",left:"0%",right:"100%",center:"50%"},zr=function(e,t){if(t.tween&&t.tween._time===t.tween._dur){var n,r,a,i=t.t,s=i.style,o=t.u,u=i._gsap;if("all"===o||!0===o)s.cssText="",r=1;else for(a=(o=o.split(",")).length;--a>-1;)n=o[a],Qn[n]&&(r=1,n="transformOrigin"===n?gr:yr),jr(i,n);r&&(jr(i,yr),u&&(u.svg&&i.removeAttribute("transform"),qr(i,1),u.uncache=1,Mr(s)))}},Wr={clearProps:function(e,t,n,r,a){if("isFromStart"!==a.data){var i=e._pt=new fn(e._pt,t,n,0,0,zr);return i.u=r,i.pr=-10,i.tween=a,e._props.push(n),1}}},Ir=[1,0,0,1,0,0],Ur={},Br=function(e){return"matrix(1, 0, 0, 1, 0, 0)"===e||"none"===e||!e},Vr=function(e){var t=Yr(e,yr);return Br(t)?Ir:t.substr(7).match(U).map(ye)},Jr=function(e,t){var n,r,a,i,s=e._gsap||_e(e),o=e.style,u=Vr(e);return s.svg&&e.getAttribute("transform")?"1,0,0,1,0,0"===(u=[(a=e.transform.baseVal.consolidate().matrix).a,a.b,a.c,a.d,a.e,a.f]).join(",")?Ir:u:(u!==Ir||e.offsetParent||e===Tn||s.svg||(a=o.display,o.display="block",(n=e.parentNode)&&e.offsetParent||(i=1,r=e.nextElementSibling,Tn.appendChild(e)),u=Vr(e),a?o.display=a:jr(e,"display"),i&&(r?n.insertBefore(e,r):n?n.appendChild(e):Tn.removeChild(e))),t&&u.length>6?[u[0],u[1],u[4],u[5],u[12],u[13]]:u)},Gr=function(e,t,n,r,a,i){var s,o,u,l=e._gsap,d=a||Jr(e,!0),c=l.xOrigin||0,f=l.yOrigin||0,m=l.xOffset||0,_=l.yOffset||0,h=d[0],p=d[1],y=d[2],g=d[3],v=d[4],M=d[5],L=t.split(" "),k=parseFloat(L[0])||0,b=parseFloat(L[1])||0;n?d!==Ir&&(o=h*g-p*y)&&(u=k*(-p/o)+b*(h/o)-(h*M-p*v)/o,k=k*(g/o)+b*(-y/o)+(y*M-g*v)/o,b=u):(k=(s=Or(e)).x+(~L[0].indexOf("%")?k/100*s.width:k),b=s.y+(~(L[1]||L[0]).indexOf("%")?b/100*s.height:b)),r||!1!==r&&l.smooth?(v=k-c,M=b-f,l.xOffset=m+(v*h+M*y)-v,l.yOffset=_+(v*p+M*g)-M):l.xOffset=l.yOffset=0,l.xOrigin=k,l.yOrigin=b,l.smooth=!!r,l.origin=t,l.originIsAbsolute=!!n,e.style[gr]="0px 0px",i&&(Pr(i,l,"xOrigin",c,k),Pr(i,l,"yOrigin",f,b),Pr(i,l,"xOffset",m,l.xOffset),Pr(i,l,"yOffset",_,l.yOffset)),e.setAttribute("data-svg-origin",k+" "+b)},qr=function(e,t){var n=e._gsap||new Rt(e);if("x"in n&&!t&&!n.uncache)return n;var r,a,i,s,o,u,l,d,c,f,m,_,h,p,y,g,v,M,L,b,Y,w,D,T,S,x,O,E,j,P,H,C,A=e.style,N=n.scaleX<0,R="px",F="deg",z=getComputedStyle(e),W=Yr(e,gr)||"0";return r=a=i=u=l=d=c=f=m=0,s=o=1,n.svg=!(!e.getCTM||!Er(e)),z.translate&&("none"===z.translate&&"none"===z.scale&&"none"===z.rotate||(A[yr]=("none"!==z.translate?"translate3d("+(z.translate+" 0 0").split(" ").slice(0,3).join(", ")+") ":"")+("none"!==z.rotate?"rotate("+z.rotate+") ":"")+("none"!==z.scale?"scale("+z.scale.split(" ").join(",")+") ":"")+("none"!==z[yr]?z[yr]:"")),A.scale=A.rotate=A.translate="none"),p=Jr(e,n.svg),n.svg&&(n.uncache?(S=e.getBBox(),W=n.xOrigin-S.x+"px "+(n.yOrigin-S.y)+"px",T=""):T=!t&&e.getAttribute("data-svg-origin"),Gr(e,T||W,!!T||n.originIsAbsolute,!1!==n.smooth,p)),_=n.xOrigin||0,h=n.yOrigin||0,p!==Ir&&(M=p[0],L=p[1],b=p[2],Y=p[3],r=w=p[4],a=D=p[5],6===p.length?(s=Math.sqrt(M*M+L*L),o=Math.sqrt(Y*Y+b*b),u=M||L?er(L,M)*Xn:0,(c=b||Y?er(b,Y)*Xn+u:0)&&(o*=Math.abs(Math.cos(c*Zn))),n.svg&&(r-=_-(_*M+h*b),a-=h-(_*L+h*Y))):(C=p[6],P=p[7],O=p[8],E=p[9],j=p[10],H=p[11],r=p[12],a=p[13],i=p[14],l=(y=er(C,j))*Xn,y&&(T=w*(g=Math.cos(-y))+O*(v=Math.sin(-y)),S=D*g+E*v,x=C*g+j*v,O=w*-v+O*g,E=D*-v+E*g,j=C*-v+j*g,H=P*-v+H*g,w=T,D=S,C=x),d=(y=er(-b,j))*Xn,y&&(g=Math.cos(-y),H=Y*(v=Math.sin(-y))+H*g,M=T=M*g-O*v,L=S=L*g-E*v,b=x=b*g-j*v),u=(y=er(L,M))*Xn,y&&(T=M*(g=Math.cos(y))+L*(v=Math.sin(y)),S=w*g+D*v,L=L*g-M*v,D=D*g-w*v,M=T,w=S),l&&Math.abs(l)+Math.abs(u)>359.9&&(l=u=0,d=180-d),s=ye(Math.sqrt(M*M+L*L+b*b)),o=ye(Math.sqrt(D*D+C*C)),y=er(w,D),c=Math.abs(y)>2e-4?y*Xn:0,m=H?1/(H<0?-H:H):0),n.svg&&(T=e.getAttribute("transform"),n.forceCSS=e.setAttribute("transform","")||!Br(Yr(e,yr)),T&&e.setAttribute("transform",T))),Math.abs(c)>90&&Math.abs(c)<270&&(N?(s*=-1,c+=u<=0?180:-180,u+=u<=0?180:-180):(o*=-1,c+=c<=0?180:-180)),t=t||n.uncache,n.x=r-((n.xPercent=r&&(!t&&n.xPercent||(Math.round(e.offsetWidth/2)===Math.round(-r)?-50:0)))?e.offsetWidth*n.xPercent/100:0)+R,n.y=a-((n.yPercent=a&&(!t&&n.yPercent||(Math.round(e.offsetHeight/2)===Math.round(-a)?-50:0)))?e.offsetHeight*n.yPercent/100:0)+R,n.z=i+R,n.scaleX=ye(s),n.scaleY=ye(o),n.rotation=ye(u)+F,n.rotationX=ye(l)+F,n.rotationY=ye(d)+F,n.skewX=c+F,n.skewY=f+F,n.transformPerspective=m+R,(n.zOrigin=parseFloat(W.split(" ")[2])||0)&&(A[gr]=$r(W)),n.xOffset=n.yOffset=0,n.force3D=k.force3D,n.renderTransform=n.svg?na:jn?ta:Qr,n.uncache=0,n},$r=function(e){return(e=e.split(" "))[0]+" "+e[1]},Kr=function(e,t,n){var r=et(t);return ye(parseFloat(t)+parseFloat(Ar(e,"x",n+"px",r)))+r},Qr=function(e,t){t.z="0px",t.rotationY=t.rotationX="0deg",t.force3D=0,ta(e,t)},Xr="0deg",Zr="0px",ea=") ",ta=function(e,t){var n=t||this,r=n.xPercent,a=n.yPercent,i=n.x,s=n.y,o=n.z,u=n.rotation,l=n.rotationY,d=n.rotationX,c=n.skewX,f=n.skewY,m=n.scaleX,_=n.scaleY,h=n.transformPerspective,p=n.force3D,y=n.target,g=n.zOrigin,v="",M="auto"===p&&e&&1!==e||!0===p;if(g&&(d!==Xr||l!==Xr)){var L,k=parseFloat(l)*Zn,b=Math.sin(k),Y=Math.cos(k);k=parseFloat(d)*Zn,L=Math.cos(k),i=Kr(y,i,b*L*-g),s=Kr(y,s,-Math.sin(k)*-g),o=Kr(y,o,Y*L*-g+g)}h!==Zr&&(v+="perspective("+h+ea),(r||a)&&(v+="translate("+r+"%, "+a+"%) "),(M||i!==Zr||s!==Zr||o!==Zr)&&(v+=o!==Zr||M?"translate3d("+i+", "+s+", "+o+") ":"translate("+i+", "+s+ea),u!==Xr&&(v+="rotate("+u+ea),l!==Xr&&(v+="rotateY("+l+ea),d!==Xr&&(v+="rotateX("+d+ea),c===Xr&&f===Xr||(v+="skew("+c+", "+f+ea),1===m&&1===_||(v+="scale("+m+", "+_+ea),y.style[yr]=v||"translate(0, 0)"},na=function(e,t){var n,r,a,i,s,o=t||this,u=o.xPercent,l=o.yPercent,d=o.x,c=o.y,f=o.rotation,m=o.skewX,_=o.skewY,h=o.scaleX,p=o.scaleY,y=o.target,g=o.xOrigin,v=o.yOrigin,M=o.xOffset,L=o.yOffset,k=o.forceCSS,b=parseFloat(d),Y=parseFloat(c);f=parseFloat(f),m=parseFloat(m),(_=parseFloat(_))&&(m+=_=parseFloat(_),f+=_),f||m?(f*=Zn,m*=Zn,n=Math.cos(f)*h,r=Math.sin(f)*h,a=Math.sin(f-m)*-p,i=Math.cos(f-m)*p,m&&(_*=Zn,s=Math.tan(m-_),a*=s=Math.sqrt(1+s*s),i*=s,_&&(s=Math.tan(_),n*=s=Math.sqrt(1+s*s),r*=s)),n=ye(n),r=ye(r),a=ye(a),i=ye(i)):(n=h,i=p,r=a=0),(b&&!~(d+"").indexOf("px")||Y&&!~(c+"").indexOf("px"))&&(b=Ar(y,"x",d,"px"),Y=Ar(y,"y",c,"px")),(g||v||M||L)&&(b=ye(b+g-(g*n+v*a)+M),Y=ye(Y+v-(g*r+v*i)+L)),(u||l)&&(s=y.getBBox(),b=ye(b+u/100*s.width),Y=ye(Y+l/100*s.height)),s="matrix("+n+","+r+","+a+","+i+","+b+","+Y+")",y.setAttribute("transform",s),k&&(y.style[yr]=s)},ra=function(e,t,n,r,a){var i,s,o=360,u=j(a),l=parseFloat(a)*(u&&~a.indexOf("rad")?Xn:1)-r,d=r+l+"deg";return u&&("short"===(i=a.split("_")[1])&&(l%=o)!=l%180&&(l+=l<0?o:-360),"cw"===i&&l<0?l=(l+36e9)%o-~~(l/o)*o:"ccw"===i&&l>0&&(l=(l-36e9)%o-~~(l/o)*o)),e._pt=s=new fn(e._pt,t,n,r,l,sr),s.e=d,s.u="deg",e._props.push(n),s},aa=function(e,t){for(var n in t)e[n]=t[n];return e},ia=function(e,t,n){var r,a,i,s,o,u,l,d=aa({},n._gsap),c=n.style;for(a in d.svg?(i=n.getAttribute("transform"),n.setAttribute("transform",""),c[yr]=t,r=qr(n,1),jr(n,yr),n.setAttribute("transform",i)):(i=getComputedStyle(n)[yr],c[yr]=t,r=qr(n,1),c[yr]=i),Qn)(i=d[a])!==(s=r[a])&&"perspective,force3D,transformOrigin,svgOrigin".indexOf(a)<0&&(o=et(i)!==(l=et(s))?Ar(n,a,i,l):parseFloat(i),u=parseFloat(s),e._pt=new fn(e._pt,r,a,o,u-o,ir),e._pt.u=l||0,e._props.push(a));aa(r,d)};pe("padding,margin,Width,Radius",(function(e,t){var n="Top",r="Right",a="Bottom",i="Left",s=(t<3?[n,r,a,i]:[n+i,n+r,a+r,a+i]).map((function(n){return t<2?e+n:"border"+n+e}));Wr[t>1?"border"+e:e]=function(e,t,n,r,a){var i,o;if(arguments.length<4)return i=s.map((function(t){return Nr(e,t,n)})),5===(o=i.join(" ")).split(i[0]).length?i[0]:o;i=(r+"").split(" "),o={},s.forEach((function(e,t){return o[e]=i[t]=i[t]||i[(t-1)/2|0]})),e.init(t,o,a)}}));var sa,oa,ua={name:"css",register:Tr,targetTest:function(e){return e.style&&e.nodeType},init:function(e,t,n,r,a){var i,s,o,u,l,d,c,f,m,_,h,p,y,g,v,M,L,b,Y,w,D=this._props,T=e.style,S=n.vars.startAt;for(c in Sn||Tr(),this.styles=this.styles||kr(e),M=this.styles.props,this.tween=n,t)if("autoRound"!==c&&(s=t[c],!ue[c]||!Vt(c,t,n,r,e,a)))if(l=typeof s,d=Wr[c],"function"===l&&(l=typeof(s=s.call(n,r,e,a))),"string"===l&&~s.indexOf("random(")&&(s=ct(s)),d)d(this,e,c,s,n)&&(v=1);else if("--"===c.substr(0,2))i=(getComputedStyle(e).getPropertyValue(c)+"").trim(),s+="",kt.lastIndex=0,kt.test(i)||(f=et(i),m=et(s)),m?f!==m&&(i=Ar(e,c,i,m)+m):f&&(s+=f),this.add(T,"setProperty",i,s,r,a,0,0,c),D.push(c),M.push(c,0,T[c]);else if("undefined"!==l){if(S&&c in S?(i="function"==typeof S[c]?S[c].call(n,r,e,a):S[c],j(i)&&~i.indexOf("random(")&&(i=ct(i)),et(i+"")||(i+=k.units[c]||et(Nr(e,c))||""),"="===(i+"").charAt(1)&&(i=Nr(e,c))):i=Nr(e,c),u=parseFloat(i),(_="string"===l&&"="===s.charAt(1)&&s.substr(0,2))&&(s=s.substr(2)),o=parseFloat(s),c in ar&&("autoAlpha"===c&&(1===u&&"hidden"===Nr(e,"visibility")&&o&&(u=0),M.push("visibility",0,T.visibility),Pr(this,T,"visibility",u?"inherit":"hidden",o?"inherit":"hidden",!o)),"scale"!==c&&"transform"!==c&&~(c=ar[c]).indexOf(",")&&(c=c.split(",")[0])),h=c in Qn)if(this.styles.save(c),p||((y=e._gsap).renderTransform&&!t.parseTransform||qr(e,t.parseTransform),g=!1!==t.smoothOrigin&&y.smooth,(p=this._pt=new fn(this._pt,T,yr,0,1,y.renderTransform,y,0,-1)).dep=1),"scale"===c)this._pt=new fn(this._pt,y,"scaleY",u,(_?ve(u,_+o):o)-u||0,ir),this._pt.u=0,D.push("scaleY",c),c+="X";else{if("transformOrigin"===c){M.push(gr,0,T[gr]),b=void 0,Y=void 0,w=void 0,Y=(b=(L=s).split(" "))[0],w=b[1]||"50%","top"!==Y&&"bottom"!==Y&&"left"!==w&&"right"!==w||(L=Y,Y=w,w=L),b[0]=Fr[Y]||Y,b[1]=Fr[w]||w,s=b.join(" "),y.svg?Gr(e,s,0,g,0,this):((m=parseFloat(s.split(" ")[2])||0)!==y.zOrigin&&Pr(this,y,"zOrigin",y.zOrigin,m),Pr(this,T,c,$r(i),$r(s)));continue}if("svgOrigin"===c){Gr(e,s,1,g,0,this);continue}if(c in Ur){ra(this,y,c,u,_?ve(u,_+s):s);continue}if("smoothOrigin"===c){Pr(this,y,"smooth",y.smooth,s);continue}if("force3D"===c){y[c]=s;continue}if("transform"===c){ia(this,s,e);continue}}else c in T||(c=Dr(c)||c);if(h||(o||0===o)&&(u||0===u)&&!rr.test(s)&&c in T)o||(o=0),(f=(i+"").substr((u+"").length))!==(m=et(s)||(c in k.units?k.units[c]:f))&&(u=Ar(e,c,i,m)),this._pt=new fn(this._pt,h?y:T,c,u,(_?ve(u,_+o):o)-u,h||"px"!==m&&"zIndex"!==c||!1===t.autoRound?ir:ur),this._pt.u=m||0,f!==m&&"%"!==m&&(this._pt.b=i,this._pt.r=or);else if(c in T)Rr.call(this,e,c,i,_?_+s:s);else{if(!(c in e)){X(c,s);continue}this.add(e,c,i||e[c],_?_+s:s,r,a)}h||(c in T?M.push(c,0,T[c]):M.push(c,1,i||e[c])),D.push(c)}v&&cn(this)},render:function(e,t){if(t.tween._time||!En())for(var n=t._pt;n;)n.r(e,n.d),n=n._next;else t.styles.revert()},get:Nr,aliases:ar,getSetter:function(e,t,n){var r=ar[t];return r&&r.indexOf(",")<0&&(t=r),t in Qn&&t!==gr&&(e._gsap.x||Nr(e,"x"))?n&&On===n?"scale"===t?_r:mr:(On=n||{})&&("scale"===t?hr:pr):e.style&&!C(e.style[t])?cr:~t.indexOf("-")?fr:nn(e,t)},core:{_removeProperty:jr,_getMatrix:Jr}};Yn.utils.checkPrefix=Dr,Yn.core.getStyleSaver=kr,oa=pe("x,y,z,scale,scaleX,scaleY,xPercent,yPercent"+","+(sa="rotation,rotationX,rotationY,skewX,skewY")+",transform,transformOrigin,svgOrigin,force3D,smoothOrigin,transformPerspective",(function(e){Qn[e]=1})),pe(sa,(function(e){k.units[e]="deg",Ur[e]=1})),ar[oa[13]]="x,y,z,scale,scaleX,scaleY,xPercent,yPercent,"+sa,pe("0:translateX,1:translateY,2:translateZ,8:rotate,8:rotationZ,8:rotateZ,9:rotateX,10:rotateY",(function(e){var t=e.split(":");ar[t[1]]=oa[t[0]]})),pe("x,y,z,top,right,bottom,left,width,height,fontSize,padding,margin,perspective",(function(e){k.units[e]="px"})),Yn.registerPlugin(ua);var la=Yn.registerPlugin(ua)||Yn,da=la.core.Tween},5177:function(e,t,n){!function(e){"use strict";e.defineLocale("af",{months:"Januarie_Februarie_Maart_April_Mei_Junie_Julie_Augustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mrt_Apr_Mei_Jun_Jul_Aug_Sep_Okt_Nov_Des".split("_"),weekdays:"Sondag_Maandag_Dinsdag_Woensdag_Donderdag_Vrydag_Saterdag".split("_"),weekdaysShort:"Son_Maa_Din_Woe_Don_Vry_Sat".split("_"),weekdaysMin:"So_Ma_Di_Wo_Do_Vr_Sa".split("_"),meridiemParse:/vm|nm/i,isPM:function(e){return/^nm$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"vm":"VM":n?"nm":"NM"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Vandag om] LT",nextDay:"[Môre om] LT",nextWeek:"dddd [om] LT",lastDay:"[Gister om] LT",lastWeek:"[Laas] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oor %s",past:"%s gelede",s:"'n paar sekondes",ss:"%d sekondes",m:"'n minuut",mm:"%d minute",h:"'n uur",hh:"%d ure",d:"'n dag",dd:"%d dae",M:"'n maand",MM:"%d maande",y:"'n jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},1488:function(e,t,n){!function(e){"use strict";var t=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},n={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},r=function(e){return function(r,a,i,s){var o=t(r),u=n[e][t(r)];return 2===o&&(u=u[a?0:1]),u.replace(/%d/i,r)}},a=["جانفي","فيفري","مارس","أفريل","ماي","جوان","جويلية","أوت","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-dz",{months:a,monthsShort:a,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:r("s"),ss:r("s"),m:r("m"),mm:r("m"),h:r("h"),hh:r("h"),d:r("d"),dd:r("d"),M:r("M"),MM:r("M"),y:r("y"),yy:r("y")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:0,doy:4}})}(n(5093))},8676:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-kw",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإتنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اتنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:0,doy:12}})}(n(5093))},2353:function(e,t,n){!function(e){"use strict";var t={1:"1",2:"2",3:"3",4:"4",5:"5",6:"6",7:"7",8:"8",9:"9",0:"0"},n=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},r={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},a=function(e){return function(t,a,i,s){var o=n(t),u=r[e][n(t)];return 2===o&&(u=u[a?0:1]),u.replace(/%d/i,t)}},i=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar-ly",{months:i,monthsShort:i,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:a("s"),ss:a("s"),m:a("m"),mm:a("m"),h:a("h"),hh:a("h"),d:a("d"),dd:a("d"),M:a("M"),MM:a("M"),y:a("y"),yy:a("y")},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(5093))},4496:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-ma",{months:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_ماي_يونيو_يوليوز_غشت_شتنبر_أكتوبر_نونبر_دجنبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"احد_اثنين_ثلاثاء_اربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(5093))},2682:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"};e.defineLocale("ar-sa",{months:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"يناير_فبراير_مارس_أبريل_مايو_يونيو_يوليو_أغسطس_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:0,doy:6}})}(n(5093))},9756:function(e,t,n){!function(e){"use strict";e.defineLocale("ar-tn",{months:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),monthsShort:"جانفي_فيفري_مارس_أفريل_ماي_جوان_جويلية_أوت_سبتمبر_أكتوبر_نوفمبر_ديسمبر".split("_"),weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[اليوم على الساعة] LT",nextDay:"[غدا على الساعة] LT",nextWeek:"dddd [على الساعة] LT",lastDay:"[أمس على الساعة] LT",lastWeek:"dddd [على الساعة] LT",sameElse:"L"},relativeTime:{future:"في %s",past:"منذ %s",s:"ثوان",ss:"%d ثانية",m:"دقيقة",mm:"%d دقائق",h:"ساعة",hh:"%d ساعات",d:"يوم",dd:"%d أيام",M:"شهر",MM:"%d أشهر",y:"سنة",yy:"%d سنوات"},week:{dow:1,doy:4}})}(n(5093))},1509:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=function(e){return 0===e?0:1===e?1:2===e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5},a={s:["أقل من ثانية","ثانية واحدة",["ثانيتان","ثانيتين"],"%d ثوان","%d ثانية","%d ثانية"],m:["أقل من دقيقة","دقيقة واحدة",["دقيقتان","دقيقتين"],"%d دقائق","%d دقيقة","%d دقيقة"],h:["أقل من ساعة","ساعة واحدة",["ساعتان","ساعتين"],"%d ساعات","%d ساعة","%d ساعة"],d:["أقل من يوم","يوم واحد",["يومان","يومين"],"%d أيام","%d يومًا","%d يوم"],M:["أقل من شهر","شهر واحد",["شهران","شهرين"],"%d أشهر","%d شهرا","%d شهر"],y:["أقل من عام","عام واحد",["عامان","عامين"],"%d أعوام","%d عامًا","%d عام"]},i=function(e){return function(t,n,i,s){var o=r(t),u=a[e][r(t)];return 2===o&&(u=u[n?0:1]),u.replace(/%d/i,t)}},s=["يناير","فبراير","مارس","أبريل","مايو","يونيو","يوليو","أغسطس","سبتمبر","أكتوبر","نوفمبر","ديسمبر"];e.defineLocale("ar",{months:s,monthsShort:s,weekdays:"الأحد_الإثنين_الثلاثاء_الأربعاء_الخميس_الجمعة_السبت".split("_"),weekdaysShort:"أحد_إثنين_ثلاثاء_أربعاء_خميس_جمعة_سبت".split("_"),weekdaysMin:"ح_ن_ث_ر_خ_ج_س".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/‏M/‏YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/ص|م/,isPM:function(e){return"م"===e},meridiem:function(e,t,n){return e<12?"ص":"م"},calendar:{sameDay:"[اليوم عند الساعة] LT",nextDay:"[غدًا عند الساعة] LT",nextWeek:"dddd [عند الساعة] LT",lastDay:"[أمس عند الساعة] LT",lastWeek:"dddd [عند الساعة] LT",sameElse:"L"},relativeTime:{future:"بعد %s",past:"منذ %s",s:i("s"),ss:i("s"),m:i("m"),mm:i("m"),h:i("h"),hh:i("h"),d:i("d"),dd:i("d"),M:i("M"),MM:i("M"),y:i("y"),yy:i("y")},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(5093))},5533:function(e,t,n){!function(e){"use strict";var t={1:"-inci",5:"-inci",8:"-inci",70:"-inci",80:"-inci",2:"-nci",7:"-nci",20:"-nci",50:"-nci",3:"-üncü",4:"-üncü",100:"-üncü",6:"-ncı",9:"-uncu",10:"-uncu",30:"-uncu",60:"-ıncı",90:"-ıncı"};e.defineLocale("az",{months:"yanvar_fevral_mart_aprel_may_iyun_iyul_avqust_sentyabr_oktyabr_noyabr_dekabr".split("_"),monthsShort:"yan_fev_mar_apr_may_iyn_iyl_avq_sen_okt_noy_dek".split("_"),weekdays:"Bazar_Bazar ertəsi_Çərşənbə axşamı_Çərşənbə_Cümə axşamı_Cümə_Şənbə".split("_"),weekdaysShort:"Baz_BzE_ÇAx_Çər_CAx_Cüm_Şən".split("_"),weekdaysMin:"Bz_BE_ÇA_Çə_CA_Cü_Şə".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[sabah saat] LT",nextWeek:"[gələn həftə] dddd [saat] LT",lastDay:"[dünən] LT",lastWeek:"[keçən həftə] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s əvvəl",s:"bir neçə saniyə",ss:"%d saniyə",m:"bir dəqiqə",mm:"%d dəqiqə",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",M:"bir ay",MM:"%d ay",y:"bir il",yy:"%d il"},meridiemParse:/gecə|səhər|gündüz|axşam/,isPM:function(e){return/^(gündüz|axşam)$/.test(e)},meridiem:function(e,t,n){return e<4?"gecə":e<12?"səhər":e<17?"gündüz":"axşam"},dayOfMonthOrdinalParse:/\d{1,2}-(ıncı|inci|nci|üncü|ncı|uncu)/,ordinal:function(e){if(0===e)return e+"-ıncı";var n=e%10;return e+(t[n]||t[e%100-n]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},8959:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвіліна":"хвіліну":"h"===n?t?"гадзіна":"гадзіну":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"хвіліна_хвіліны_хвілін":"хвіліну_хвіліны_хвілін",hh:t?"гадзіна_гадзіны_гадзін":"гадзіну_гадзіны_гадзін",dd:"дзень_дні_дзён",MM:"месяц_месяцы_месяцаў",yy:"год_гады_гадоў"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}e.defineLocale("be",{months:{format:"студзеня_лютага_сакавіка_красавіка_траўня_чэрвеня_ліпеня_жніўня_верасня_кастрычніка_лістапада_снежня".split("_"),standalone:"студзень_люты_сакавік_красавік_травень_чэрвень_ліпень_жнівень_верасень_кастрычнік_лістапад_снежань".split("_")},monthsShort:"студ_лют_сак_крас_трав_чэрв_ліп_жнів_вер_каст_ліст_снеж".split("_"),weekdays:{format:"нядзелю_панядзелак_аўторак_сераду_чацвер_пятніцу_суботу".split("_"),standalone:"нядзеля_панядзелак_аўторак_серада_чацвер_пятніца_субота".split("_"),isFormat:/\[ ?[Ууў] ?(?:мінулую|наступную)? ?\] ?dddd/},weekdaysShort:"нд_пн_ат_ср_чц_пт_сб".split("_"),weekdaysMin:"нд_пн_ат_ср_чц_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., HH:mm",LLLL:"dddd, D MMMM YYYY г., HH:mm"},calendar:{sameDay:"[Сёння ў] LT",nextDay:"[Заўтра ў] LT",lastDay:"[Учора ў] LT",nextWeek:function(){return"[У] dddd [ў] LT"},lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return"[У мінулую] dddd [ў] LT";case 1:case 2:case 4:return"[У мінулы] dddd [ў] LT"}},sameElse:"L"},relativeTime:{future:"праз %s",past:"%s таму",s:"некалькі секунд",m:t,mm:t,h:t,hh:t,d:"дзень",dd:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночы|раніцы|дня|вечара/,isPM:function(e){return/^(дня|вечара)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночы":e<12?"раніцы":e<17?"дня":"вечара"},dayOfMonthOrdinalParse:/\d{1,2}-(і|ы|га)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e%10!=2&&e%10!=3||e%100==12||e%100==13?e+"-ы":e+"-і";case"D":return e+"-га";default:return e}},week:{dow:1,doy:7}})}(n(5093))},7777:function(e,t,n){!function(e){"use strict";e.defineLocale("bg",{months:"януари_февруари_март_април_май_юни_юли_август_септември_октомври_ноември_декември".split("_"),monthsShort:"яну_фев_мар_апр_май_юни_юли_авг_сеп_окт_ное_дек".split("_"),weekdays:"неделя_понеделник_вторник_сряда_четвъртък_петък_събота".split("_"),weekdaysShort:"нед_пон_вто_сря_чет_пет_съб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Днес в] LT",nextDay:"[Утре в] LT",nextWeek:"dddd [в] LT",lastDay:"[Вчера в] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Миналата] dddd [в] LT";case 1:case 2:case 4:case 5:return"[Миналия] dddd [в] LT"}},sameElse:"L"},relativeTime:{future:"след %s",past:"преди %s",s:"няколко секунди",ss:"%d секунди",m:"минута",mm:"%d минути",h:"час",hh:"%d часа",d:"ден",dd:"%d дена",w:"седмица",ww:"%d седмици",M:"месец",MM:"%d месеца",y:"година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(5093))},4903:function(e,t,n){!function(e){"use strict";e.defineLocale("bm",{months:"Zanwuyekalo_Fewuruyekalo_Marisikalo_Awirilikalo_Mɛkalo_Zuwɛnkalo_Zuluyekalo_Utikalo_Sɛtanburukalo_ɔkutɔburukalo_Nowanburukalo_Desanburukalo".split("_"),monthsShort:"Zan_Few_Mar_Awi_Mɛ_Zuw_Zul_Uti_Sɛt_ɔku_Now_Des".split("_"),weekdays:"Kari_Ntɛnɛn_Tarata_Araba_Alamisa_Juma_Sibiri".split("_"),weekdaysShort:"Kar_Ntɛ_Tar_Ara_Ala_Jum_Sib".split("_"),weekdaysMin:"Ka_Nt_Ta_Ar_Al_Ju_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"MMMM [tile] D [san] YYYY",LLL:"MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm",LLLL:"dddd MMMM [tile] D [san] YYYY [lɛrɛ] HH:mm"},calendar:{sameDay:"[Bi lɛrɛ] LT",nextDay:"[Sini lɛrɛ] LT",nextWeek:"dddd [don lɛrɛ] LT",lastDay:"[Kunu lɛrɛ] LT",lastWeek:"dddd [tɛmɛnen lɛrɛ] LT",sameElse:"L"},relativeTime:{future:"%s kɔnɔ",past:"a bɛ %s bɔ",s:"sanga dama dama",ss:"sekondi %d",m:"miniti kelen",mm:"miniti %d",h:"lɛrɛ kelen",hh:"lɛrɛ %d",d:"tile kelen",dd:"tile %d",M:"kalo kelen",MM:"kalo %d",y:"san kelen",yy:"san %d"},week:{dow:1,doy:4}})}(n(5093))},7357:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn-bd",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|ভোর|সকাল|দুপুর|বিকাল|সন্ধ্যা|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t?e<4?e:e+12:"ভোর"===t||"সকাল"===t?e:"দুপুর"===t?e>=3?e:e+12:"বিকাল"===t||"সন্ধ্যা"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"রাত":e<6?"ভোর":e<12?"সকাল":e<15?"দুপুর":e<18?"বিকাল":e<20?"সন্ধ্যা":"রাত"},week:{dow:0,doy:6}})}(n(5093))},1290:function(e,t,n){!function(e){"use strict";var t={1:"১",2:"২",3:"৩",4:"৪",5:"৫",6:"৬",7:"৭",8:"৮",9:"৯",0:"০"},n={"১":"1","২":"2","৩":"3","৪":"4","৫":"5","৬":"6","৭":"7","৮":"8","৯":"9","০":"0"};e.defineLocale("bn",{months:"জানুয়ারি_ফেব্রুয়ারি_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্টেম্বর_অক্টোবর_নভেম্বর_ডিসেম্বর".split("_"),monthsShort:"জানু_ফেব্রু_মার্চ_এপ্রিল_মে_জুন_জুলাই_আগস্ট_সেপ্ট_অক্টো_নভে_ডিসে".split("_"),weekdays:"রবিবার_সোমবার_মঙ্গলবার_বুধবার_বৃহস্পতিবার_শুক্রবার_শনিবার".split("_"),weekdaysShort:"রবি_সোম_মঙ্গল_বুধ_বৃহস্পতি_শুক্র_শনি".split("_"),weekdaysMin:"রবি_সোম_মঙ্গল_বুধ_বৃহ_শুক্র_শনি".split("_"),longDateFormat:{LT:"A h:mm সময়",LTS:"A h:mm:ss সময়",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm সময়",LLLL:"dddd, D MMMM YYYY, A h:mm সময়"},calendar:{sameDay:"[আজ] LT",nextDay:"[আগামীকাল] LT",nextWeek:"dddd, LT",lastDay:"[গতকাল] LT",lastWeek:"[গত] dddd, LT",sameElse:"L"},relativeTime:{future:"%s পরে",past:"%s আগে",s:"কয়েক সেকেন্ড",ss:"%d সেকেন্ড",m:"এক মিনিট",mm:"%d মিনিট",h:"এক ঘন্টা",hh:"%d ঘন্টা",d:"এক দিন",dd:"%d দিন",M:"এক মাস",MM:"%d মাস",y:"এক বছর",yy:"%d বছর"},preparse:function(e){return e.replace(/[১২৩৪৫৬৭৮৯০]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/রাত|সকাল|দুপুর|বিকাল|রাত/,meridiemHour:function(e,t){return 12===e&&(e=0),"রাত"===t&&e>=4||"দুপুর"===t&&e<5||"বিকাল"===t?e+12:e},meridiem:function(e,t,n){return e<4?"রাত":e<10?"সকাল":e<17?"দুপুর":e<20?"বিকাল":"রাত"},week:{dow:0,doy:6}})}(n(5093))},1545:function(e,t,n){!function(e){"use strict";var t={1:"༡",2:"༢",3:"༣",4:"༤",5:"༥",6:"༦",7:"༧",8:"༨",9:"༩",0:"༠"},n={"༡":"1","༢":"2","༣":"3","༤":"4","༥":"5","༦":"6","༧":"7","༨":"8","༩":"9","༠":"0"};e.defineLocale("bo",{months:"ཟླ་བ་དང་པོ_ཟླ་བ་གཉིས་པ_ཟླ་བ་གསུམ་པ_ཟླ་བ་བཞི་པ_ཟླ་བ་ལྔ་པ_ཟླ་བ་དྲུག་པ_ཟླ་བ་བདུན་པ_ཟླ་བ་བརྒྱད་པ_ཟླ་བ་དགུ་པ_ཟླ་བ་བཅུ་པ_ཟླ་བ་བཅུ་གཅིག་པ_ཟླ་བ་བཅུ་གཉིས་པ".split("_"),monthsShort:"ཟླ་1_ཟླ་2_ཟླ་3_ཟླ་4_ཟླ་5_ཟླ་6_ཟླ་7_ཟླ་8_ཟླ་9_ཟླ་10_ཟླ་11_ཟླ་12".split("_"),monthsShortRegex:/^(ཟླ་\d{1,2})/,monthsParseExact:!0,weekdays:"གཟའ་ཉི་མ་_གཟའ་ཟླ་བ་_གཟའ་མིག་དམར་_གཟའ་ལྷག་པ་_གཟའ་ཕུར་བུ_གཟའ་པ་སངས་_གཟའ་སྤེན་པ་".split("_"),weekdaysShort:"ཉི་མ་_ཟླ་བ་_མིག་དམར་_ལྷག་པ་_ཕུར་བུ_པ་སངས་_སྤེན་པ་".split("_"),weekdaysMin:"ཉི_ཟླ_མིག_ལྷག_ཕུར_སངས_སྤེན".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[དི་རིང] LT",nextDay:"[སང་ཉིན] LT",nextWeek:"[བདུན་ཕྲག་རྗེས་མ], LT",lastDay:"[ཁ་སང] LT",lastWeek:"[བདུན་ཕྲག་མཐའ་མ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ལ་",past:"%s སྔན་ལ",s:"ལམ་སང",ss:"%d སྐར་ཆ།",m:"སྐར་མ་གཅིག",mm:"%d སྐར་མ",h:"ཆུ་ཚོད་གཅིག",hh:"%d ཆུ་ཚོད",d:"ཉིན་གཅིག",dd:"%d ཉིན་",M:"ཟླ་བ་གཅིག",MM:"%d ཟླ་བ",y:"ལོ་གཅིག",yy:"%d ལོ"},preparse:function(e){return e.replace(/[༡༢༣༤༥༦༧༨༩༠]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/མཚན་མོ|ཞོགས་ཀས|ཉིན་གུང|དགོང་དག|མཚན་མོ/,meridiemHour:function(e,t){return 12===e&&(e=0),"མཚན་མོ"===t&&e>=4||"ཉིན་གུང"===t&&e<5||"དགོང་དག"===t?e+12:e},meridiem:function(e,t,n){return e<4?"མཚན་མོ":e<10?"ཞོགས་ཀས":e<17?"ཉིན་གུང":e<20?"དགོང་དག":"མཚན་མོ"},week:{dow:0,doy:6}})}(n(5093))},1470:function(e,t,n){!function(e){"use strict";function t(e,t,n){return e+" "+function(e,t){return 2===t?function(e){var t={m:"v",b:"v",d:"z"};return void 0===t[e.charAt(0)]?e:t[e.charAt(0)]+e.substring(1)}(e):e}({mm:"munutenn",MM:"miz",dd:"devezh"}[n],e)}function n(e){return e>9?n(e%10):e}var r=[/^gen/i,/^c[ʼ\']hwe/i,/^meu/i,/^ebr/i,/^mae/i,/^(mez|eve)/i,/^gou/i,/^eos/i,/^gwe/i,/^her/i,/^du/i,/^ker/i],a=/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu|gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,i=[/^Su/i,/^Lu/i,/^Me([^r]|$)/i,/^Mer/i,/^Ya/i,/^Gw/i,/^Sa/i];e.defineLocale("br",{months:"Genver_Cʼhwevrer_Meurzh_Ebrel_Mae_Mezheven_Gouere_Eost_Gwengolo_Here_Du_Kerzu".split("_"),monthsShort:"Gen_Cʼhwe_Meu_Ebr_Mae_Eve_Gou_Eos_Gwe_Her_Du_Ker".split("_"),weekdays:"Sul_Lun_Meurzh_Mercʼher_Yaou_Gwener_Sadorn".split("_"),weekdaysShort:"Sul_Lun_Meu_Mer_Yao_Gwe_Sad".split("_"),weekdaysMin:"Su_Lu_Me_Mer_Ya_Gw_Sa".split("_"),weekdaysParse:i,fullWeekdaysParse:[/^sul/i,/^lun/i,/^meurzh/i,/^merc[ʼ\']her/i,/^yaou/i,/^gwener/i,/^sadorn/i],shortWeekdaysParse:[/^Sul/i,/^Lun/i,/^Meu/i,/^Mer/i,/^Yao/i,/^Gwe/i,/^Sad/i],minWeekdaysParse:i,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(genver|c[ʼ\']hwevrer|meurzh|ebrel|mae|mezheven|gouere|eost|gwengolo|here|du|kerzu)/i,monthsShortStrictRegex:/^(gen|c[ʼ\']hwe|meu|ebr|mae|eve|gou|eos|gwe|her|du|ker)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [a viz] MMMM YYYY",LLL:"D [a viz] MMMM YYYY HH:mm",LLLL:"dddd, D [a viz] MMMM YYYY HH:mm"},calendar:{sameDay:"[Hiziv da] LT",nextDay:"[Warcʼhoazh da] LT",nextWeek:"dddd [da] LT",lastDay:"[Decʼh da] LT",lastWeek:"dddd [paset da] LT",sameElse:"L"},relativeTime:{future:"a-benn %s",past:"%s ʼzo",s:"un nebeud segondennoù",ss:"%d eilenn",m:"ur vunutenn",mm:t,h:"un eur",hh:"%d eur",d:"un devezh",dd:t,M:"ur miz",MM:t,y:"ur bloaz",yy:function(e){switch(n(e)){case 1:case 3:case 4:case 5:case 9:return e+" bloaz";default:return e+" vloaz"}}},dayOfMonthOrdinalParse:/\d{1,2}(añ|vet)/,ordinal:function(e){return e+(1===e?"añ":"vet")},week:{dow:1,doy:4},meridiemParse:/a.m.|g.m./,isPM:function(e){return"g.m."===e},meridiem:function(e,t,n){return e<12?"a.m.":"g.m."}})}(n(5093))},4429:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("bs",{months:"januar_februar_mart_april_maj_juni_juli_august_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._aug._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:case 3:return"[prošlu] dddd [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},7306:function(e,t,n){!function(e){"use strict";e.defineLocale("ca",{months:{standalone:"gener_febrer_març_abril_maig_juny_juliol_agost_setembre_octubre_novembre_desembre".split("_"),format:"de gener_de febrer_de març_d'abril_de maig_de juny_de juliol_d'agost_de setembre_d'octubre_de novembre_de desembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._maig_juny_jul._ag._set._oct._nov._des.".split("_"),monthsParseExact:!0,weekdays:"diumenge_dilluns_dimarts_dimecres_dijous_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dt._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dt_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a les] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a les] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:function(){return"[avui a "+(1!==this.hours()?"les":"la")+"] LT"},nextDay:function(){return"[demà a "+(1!==this.hours()?"les":"la")+"] LT"},nextWeek:function(){return"dddd [a "+(1!==this.hours()?"les":"la")+"] LT"},lastDay:function(){return"[ahir a "+(1!==this.hours()?"les":"la")+"] LT"},lastWeek:function(){return"[el] dddd [passat a "+(1!==this.hours()?"les":"la")+"] LT"},sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"uns segons",ss:"%d segons",m:"un minut",mm:"%d minuts",h:"una hora",hh:"%d hores",d:"un dia",dd:"%d dies",M:"un mes",MM:"%d mesos",y:"un any",yy:"%d anys"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(5093))},6464:function(e,t,n){!function(e){"use strict";var t={format:"leden_únor_březen_duben_květen_červen_červenec_srpen_září_říjen_listopad_prosinec".split("_"),standalone:"ledna_února_března_dubna_května_června_července_srpna_září_října_listopadu_prosince".split("_")},n="led_úno_bře_dub_kvě_čvn_čvc_srp_zář_říj_lis_pro".split("_"),r=[/^led/i,/^úno/i,/^bře/i,/^dub/i,/^kvě/i,/^(čvn|červen$|června)/i,/^(čvc|červenec|července)/i,/^srp/i,/^zář/i,/^říj/i,/^lis/i,/^pro/i],a=/^(leden|únor|březen|duben|květen|červenec|července|červen|června|srpen|září|říjen|listopad|prosinec|led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i;function i(e){return e>1&&e<5&&1!=~~(e/10)}function s(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"pár sekund":"pár sekundami";case"ss":return t||r?a+(i(e)?"sekundy":"sekund"):a+"sekundami";case"m":return t?"minuta":r?"minutu":"minutou";case"mm":return t||r?a+(i(e)?"minuty":"minut"):a+"minutami";case"h":return t?"hodina":r?"hodinu":"hodinou";case"hh":return t||r?a+(i(e)?"hodiny":"hodin"):a+"hodinami";case"d":return t||r?"den":"dnem";case"dd":return t||r?a+(i(e)?"dny":"dní"):a+"dny";case"M":return t||r?"měsíc":"měsícem";case"MM":return t||r?a+(i(e)?"měsíce":"měsíců"):a+"měsíci";case"y":return t||r?"rok":"rokem";case"yy":return t||r?a+(i(e)?"roky":"let"):a+"lety"}}e.defineLocale("cs",{months:t,monthsShort:n,monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(leden|ledna|února|únor|březen|března|duben|dubna|květen|května|červenec|července|červen|června|srpen|srpna|září|říjen|října|listopadu|listopad|prosinec|prosince)/i,monthsShortStrictRegex:/^(led|úno|bře|dub|kvě|čvn|čvc|srp|zář|říj|lis|pro)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"neděle_pondělí_úterý_středa_čtvrtek_pátek_sobota".split("_"),weekdaysShort:"ne_po_út_st_čt_pá_so".split("_"),weekdaysMin:"ne_po_út_st_čt_pá_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm",l:"D. M. YYYY"},calendar:{sameDay:"[dnes v] LT",nextDay:"[zítra v] LT",nextWeek:function(){switch(this.day()){case 0:return"[v neděli v] LT";case 1:case 2:return"[v] dddd [v] LT";case 3:return"[ve středu v] LT";case 4:return"[ve čtvrtek v] LT";case 5:return"[v pátek v] LT";case 6:return"[v sobotu v] LT"}},lastDay:"[včera v] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulou neděli v] LT";case 1:case 2:return"[minulé] dddd [v] LT";case 3:return"[minulou středu v] LT";case 4:case 5:return"[minulý] dddd [v] LT";case 6:return"[minulou sobotu v] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"před %s",s,ss:s,m:s,mm:s,h:s,hh:s,d:s,dd:s,M:s,MM:s,y:s,yy:s},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},3635:function(e,t,n){!function(e){"use strict";e.defineLocale("cv",{months:"кӑрлач_нарӑс_пуш_ака_май_ҫӗртме_утӑ_ҫурла_авӑн_юпа_чӳк_раштав".split("_"),monthsShort:"кӑр_нар_пуш_ака_май_ҫӗр_утӑ_ҫур_авн_юпа_чӳк_раш".split("_"),weekdays:"вырсарникун_тунтикун_ытларикун_юнкун_кӗҫнерникун_эрнекун_шӑматкун".split("_"),weekdaysShort:"выр_тун_ытл_юн_кӗҫ_эрн_шӑм".split("_"),weekdaysMin:"вр_тн_ыт_юн_кҫ_эр_шм".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ]",LLL:"YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm",LLLL:"dddd, YYYY [ҫулхи] MMMM [уйӑхӗн] D[-мӗшӗ], HH:mm"},calendar:{sameDay:"[Паян] LT [сехетре]",nextDay:"[Ыран] LT [сехетре]",lastDay:"[Ӗнер] LT [сехетре]",nextWeek:"[Ҫитес] dddd LT [сехетре]",lastWeek:"[Иртнӗ] dddd LT [сехетре]",sameElse:"L"},relativeTime:{future:function(e){return e+(/сехет$/i.exec(e)?"рен":/ҫул$/i.exec(e)?"тан":"ран")},past:"%s каялла",s:"пӗр-ик ҫеккунт",ss:"%d ҫеккунт",m:"пӗр минут",mm:"%d минут",h:"пӗр сехет",hh:"%d сехет",d:"пӗр кун",dd:"%d кун",M:"пӗр уйӑх",MM:"%d уйӑх",y:"пӗр ҫул",yy:"%d ҫул"},dayOfMonthOrdinalParse:/\d{1,2}-мӗш/,ordinal:"%d-мӗш",week:{dow:1,doy:7}})}(n(5093))},4226:function(e,t,n){!function(e){"use strict";e.defineLocale("cy",{months:"Ionawr_Chwefror_Mawrth_Ebrill_Mai_Mehefin_Gorffennaf_Awst_Medi_Hydref_Tachwedd_Rhagfyr".split("_"),monthsShort:"Ion_Chwe_Maw_Ebr_Mai_Meh_Gor_Aws_Med_Hyd_Tach_Rhag".split("_"),weekdays:"Dydd Sul_Dydd Llun_Dydd Mawrth_Dydd Mercher_Dydd Iau_Dydd Gwener_Dydd Sadwrn".split("_"),weekdaysShort:"Sul_Llun_Maw_Mer_Iau_Gwe_Sad".split("_"),weekdaysMin:"Su_Ll_Ma_Me_Ia_Gw_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Heddiw am] LT",nextDay:"[Yfory am] LT",nextWeek:"dddd [am] LT",lastDay:"[Ddoe am] LT",lastWeek:"dddd [diwethaf am] LT",sameElse:"L"},relativeTime:{future:"mewn %s",past:"%s yn ôl",s:"ychydig eiliadau",ss:"%d eiliad",m:"munud",mm:"%d munud",h:"awr",hh:"%d awr",d:"diwrnod",dd:"%d diwrnod",M:"mis",MM:"%d mis",y:"blwyddyn",yy:"%d flynedd"},dayOfMonthOrdinalParse:/\d{1,2}(fed|ain|af|il|ydd|ed|eg)/,ordinal:function(e){var t="";return e>20?t=40===e||50===e||60===e||80===e||100===e?"fed":"ain":e>0&&(t=["","af","il","ydd","ydd","ed","ed","ed","fed","fed","fed","eg","fed","eg","eg","fed","eg","eg","fed","eg","fed"][e]),e+t},week:{dow:1,doy:4}})}(n(5093))},3601:function(e,t,n){!function(e){"use strict";e.defineLocale("da",{months:"januar_februar_marts_april_maj_juni_juli_august_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"søn_man_tir_ons_tor_fre_lør".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd [d.] D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"på dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[i] dddd[s kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"få sekunder",ss:"%d sekunder",m:"et minut",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dage",M:"en måned",MM:"%d måneder",y:"et år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},6111:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-at",{months:"Jänner_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jän._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},4697:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de-ch",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},7853:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eine Minute","einer Minute"],h:["eine Stunde","einer Stunde"],d:["ein Tag","einem Tag"],dd:[e+" Tage",e+" Tagen"],w:["eine Woche","einer Woche"],M:["ein Monat","einem Monat"],MM:[e+" Monate",e+" Monaten"],y:["ein Jahr","einem Jahr"],yy:[e+" Jahre",e+" Jahren"]};return t?a[n][0]:a[n][1]}e.defineLocale("de",{months:"Januar_Februar_März_April_Mai_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Feb._März_Apr._Mai_Juni_Juli_Aug._Sep._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonntag_Montag_Dienstag_Mittwoch_Donnerstag_Freitag_Samstag".split("_"),weekdaysShort:"So._Mo._Di._Mi._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mo_Di_Mi_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY HH:mm",LLLL:"dddd, D. MMMM YYYY HH:mm"},calendar:{sameDay:"[heute um] LT [Uhr]",sameElse:"L",nextDay:"[morgen um] LT [Uhr]",nextWeek:"dddd [um] LT [Uhr]",lastDay:"[gestern um] LT [Uhr]",lastWeek:"[letzten] dddd [um] LT [Uhr]"},relativeTime:{future:"in %s",past:"vor %s",s:"ein paar Sekunden",ss:"%d Sekunden",m:t,mm:"%d Minuten",h:t,hh:"%d Stunden",d:t,dd:t,w:t,ww:"%d Wochen",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},708:function(e,t,n){!function(e){"use strict";var t=["ޖެނުއަރީ","ފެބްރުއަރީ","މާރިޗު","އޭޕްރީލު","މޭ","ޖޫން","ޖުލައި","އޯގަސްޓު","ސެޕްޓެމްބަރު","އޮކްޓޯބަރު","ނޮވެމްބަރު","ޑިސެމްބަރު"],n=["އާދިއްތަ","ހޯމަ","އަންގާރަ","ބުދަ","ބުރާސްފަތި","ހުކުރު","ހޮނިހިރު"];e.defineLocale("dv",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:"އާދި_ހޯމަ_އަން_ބުދަ_ބުރާ_ހުކު_ހޮނި".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"D/M/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},meridiemParse:/މކ|މފ/,isPM:function(e){return"މފ"===e},meridiem:function(e,t,n){return e<12?"މކ":"މފ"},calendar:{sameDay:"[މިއަދު] LT",nextDay:"[މާދަމާ] LT",nextWeek:"dddd LT",lastDay:"[އިއްޔެ] LT",lastWeek:"[ފާއިތުވި] dddd LT",sameElse:"L"},relativeTime:{future:"ތެރޭގައި %s",past:"ކުރިން %s",s:"ސިކުންތުކޮޅެއް",ss:"d% ސިކުންތު",m:"މިނިޓެއް",mm:"މިނިޓު %d",h:"ގަޑިއިރެއް",hh:"ގަޑިއިރު %d",d:"ދުވަހެއް",dd:"ދުވަސް %d",M:"މަހެއް",MM:"މަސް %d",y:"އަހަރެއް",yy:"އަހަރު %d"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:7,doy:12}})}(n(5093))},4691:function(e,t,n){!function(e){"use strict";e.defineLocale("el",{monthsNominativeEl:"Ιανουάριος_Φεβρουάριος_Μάρτιος_Απρίλιος_Μάιος_Ιούνιος_Ιούλιος_Αύγουστος_Σεπτέμβριος_Οκτώβριος_Νοέμβριος_Δεκέμβριος".split("_"),monthsGenitiveEl:"Ιανουαρίου_Φεβρουαρίου_Μαρτίου_Απριλίου_Μαΐου_Ιουνίου_Ιουλίου_Αυγούστου_Σεπτεμβρίου_Οκτωβρίου_Νοεμβρίου_Δεκεμβρίου".split("_"),months:function(e,t){return e?"string"==typeof t&&/D/.test(t.substring(0,t.indexOf("MMMM")))?this._monthsGenitiveEl[e.month()]:this._monthsNominativeEl[e.month()]:this._monthsNominativeEl},monthsShort:"Ιαν_Φεβ_Μαρ_Απρ_Μαϊ_Ιουν_Ιουλ_Αυγ_Σεπ_Οκτ_Νοε_Δεκ".split("_"),weekdays:"Κυριακή_Δευτέρα_Τρίτη_Τετάρτη_Πέμπτη_Παρασκευή_Σάββατο".split("_"),weekdaysShort:"Κυρ_Δευ_Τρι_Τετ_Πεμ_Παρ_Σαβ".split("_"),weekdaysMin:"Κυ_Δε_Τρ_Τε_Πε_Πα_Σα".split("_"),meridiem:function(e,t,n){return e>11?n?"μμ":"ΜΜ":n?"πμ":"ΠΜ"},isPM:function(e){return"μ"===(e+"").toLowerCase()[0]},meridiemParse:/[ΠΜ]\.?Μ?\.?/i,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendarEl:{sameDay:"[Σήμερα {}] LT",nextDay:"[Αύριο {}] LT",nextWeek:"dddd [{}] LT",lastDay:"[Χθες {}] LT",lastWeek:function(){return 6===this.day()?"[το προηγούμενο] dddd [{}] LT":"[την προηγούμενη] dddd [{}] LT"},sameElse:"L"},calendar:function(e,t){var n,r=this._calendarEl[e],a=t&&t.hours();return n=r,("undefined"!=typeof Function&&n instanceof Function||"[object Function]"===Object.prototype.toString.call(n))&&(r=r.apply(t)),r.replace("{}",a%12==1?"στη":"στις")},relativeTime:{future:"σε %s",past:"%s πριν",s:"λίγα δευτερόλεπτα",ss:"%d δευτερόλεπτα",m:"ένα λεπτό",mm:"%d λεπτά",h:"μία ώρα",hh:"%d ώρες",d:"μία μέρα",dd:"%d μέρες",M:"ένας μήνας",MM:"%d μήνες",y:"ένας χρόνος",yy:"%d χρόνια"},dayOfMonthOrdinalParse:/\d{1,2}η/,ordinal:"%dη",week:{dow:1,doy:4}})}(n(5093))},3872:function(e,t,n){!function(e){"use strict";e.defineLocale("en-au",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:4}})}(n(5093))},8298:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ca",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"YYYY-MM-DD",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(5093))},6195:function(e,t,n){!function(e){"use strict";e.defineLocale("en-gb",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},6584:function(e,t,n){!function(e){"use strict";e.defineLocale("en-ie",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},5543:function(e,t,n){!function(e){"use strict";e.defineLocale("en-il",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}})}(n(5093))},9033:function(e,t,n){!function(e){"use strict";e.defineLocale("en-in",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:0,doy:6}})}(n(5093))},9402:function(e,t,n){!function(e){"use strict";e.defineLocale("en-nz",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},3004:function(e,t,n){!function(e){"use strict";e.defineLocale("en-sg",{months:"January_February_March_April_May_June_July_August_September_October_November_December".split("_"),monthsShort:"Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),weekdays:"Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),weekdaysShort:"Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),weekdaysMin:"Su_Mo_Tu_We_Th_Fr_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},2934:function(e,t,n){!function(e){"use strict";e.defineLocale("eo",{months:"januaro_februaro_marto_aprilo_majo_junio_julio_aŭgusto_septembro_oktobro_novembro_decembro".split("_"),monthsShort:"jan_feb_mart_apr_maj_jun_jul_aŭg_sept_okt_nov_dec".split("_"),weekdays:"dimanĉo_lundo_mardo_merkredo_ĵaŭdo_vendredo_sabato".split("_"),weekdaysShort:"dim_lun_mard_merk_ĵaŭ_ven_sab".split("_"),weekdaysMin:"di_lu_ma_me_ĵa_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"[la] D[-an de] MMMM, YYYY",LLL:"[la] D[-an de] MMMM, YYYY HH:mm",LLLL:"dddd[n], [la] D[-an de] MMMM, YYYY HH:mm",llll:"ddd, [la] D[-an de] MMM, YYYY HH:mm"},meridiemParse:/[ap]\.t\.m/i,isPM:function(e){return"p"===e.charAt(0).toLowerCase()},meridiem:function(e,t,n){return e>11?n?"p.t.m.":"P.T.M.":n?"a.t.m.":"A.T.M."},calendar:{sameDay:"[Hodiaŭ je] LT",nextDay:"[Morgaŭ je] LT",nextWeek:"dddd[n je] LT",lastDay:"[Hieraŭ je] LT",lastWeek:"[pasintan] dddd[n je] LT",sameElse:"L"},relativeTime:{future:"post %s",past:"antaŭ %s",s:"kelkaj sekundoj",ss:"%d sekundoj",m:"unu minuto",mm:"%d minutoj",h:"unu horo",hh:"%d horoj",d:"unu tago",dd:"%d tagoj",M:"unu monato",MM:"%d monatoj",y:"unu jaro",yy:"%d jaroj"},dayOfMonthOrdinalParse:/\d{1,2}a/,ordinal:"%da",week:{dow:1,doy:7}})}(n(5093))},838:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-do",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},7730:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-mx",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:4},invalidDate:"Fecha inválida"})}(n(5093))},6575:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es-us",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"MM/DD/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY h:mm A",LLLL:"dddd, D [de] MMMM [de] YYYY h:mm A"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:0,doy:6}})}(n(5093))},7650:function(e,t,n){!function(e){"use strict";var t="ene._feb._mar._abr._may._jun._jul._ago._sep._oct._nov._dic.".split("_"),n="ene_feb_mar_abr_may_jun_jul_ago_sep_oct_nov_dic".split("_"),r=[/^ene/i,/^feb/i,/^mar/i,/^abr/i,/^may/i,/^jun/i,/^jul/i,/^ago/i,/^sep/i,/^oct/i,/^nov/i,/^dic/i],a=/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre|ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i;e.defineLocale("es",{months:"enero_febrero_marzo_abril_mayo_junio_julio_agosto_septiembre_octubre_noviembre_diciembre".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(enero|febrero|marzo|abril|mayo|junio|julio|agosto|septiembre|octubre|noviembre|diciembre)/i,monthsShortStrictRegex:/^(ene\.?|feb\.?|mar\.?|abr\.?|may\.?|jun\.?|jul\.?|ago\.?|sep\.?|oct\.?|nov\.?|dic\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"domingo_lunes_martes_miércoles_jueves_viernes_sábado".split("_"),weekdaysShort:"dom._lun._mar._mié._jue._vie._sáb.".split("_"),weekdaysMin:"do_lu_ma_mi_ju_vi_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoy a la"+(1!==this.hours()?"s":"")+"] LT"},nextDay:function(){return"[mañana a la"+(1!==this.hours()?"s":"")+"] LT"},nextWeek:function(){return"dddd [a la"+(1!==this.hours()?"s":"")+"] LT"},lastDay:function(){return"[ayer a la"+(1!==this.hours()?"s":"")+"] LT"},lastWeek:function(){return"[el] dddd [pasado a la"+(1!==this.hours()?"s":"")+"] LT"},sameElse:"L"},relativeTime:{future:"en %s",past:"hace %s",s:"unos segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"una hora",hh:"%d horas",d:"un día",dd:"%d días",w:"una semana",ww:"%d semanas",M:"un mes",MM:"%d meses",y:"un año",yy:"%d años"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4},invalidDate:"Fecha inválida"})}(n(5093))},3035:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["mõne sekundi","mõni sekund","paar sekundit"],ss:[e+"sekundi",e+"sekundit"],m:["ühe minuti","üks minut"],mm:[e+" minuti",e+" minutit"],h:["ühe tunni","tund aega","üks tund"],hh:[e+" tunni",e+" tundi"],d:["ühe päeva","üks päev"],M:["kuu aja","kuu aega","üks kuu"],MM:[e+" kuu",e+" kuud"],y:["ühe aasta","aasta","üks aasta"],yy:[e+" aasta",e+" aastat"]};return t?a[n][2]?a[n][2]:a[n][1]:r?a[n][0]:a[n][1]}e.defineLocale("et",{months:"jaanuar_veebruar_märts_aprill_mai_juuni_juuli_august_september_oktoober_november_detsember".split("_"),monthsShort:"jaan_veebr_märts_apr_mai_juuni_juuli_aug_sept_okt_nov_dets".split("_"),weekdays:"pühapäev_esmaspäev_teisipäev_kolmapäev_neljapäev_reede_laupäev".split("_"),weekdaysShort:"P_E_T_K_N_R_L".split("_"),weekdaysMin:"P_E_T_K_N_R_L".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[Täna,] LT",nextDay:"[Homme,] LT",nextWeek:"[Järgmine] dddd LT",lastDay:"[Eile,] LT",lastWeek:"[Eelmine] dddd LT",sameElse:"L"},relativeTime:{future:"%s pärast",past:"%s tagasi",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:"%d päeva",M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},3508:function(e,t,n){!function(e){"use strict";e.defineLocale("eu",{months:"urtarrila_otsaila_martxoa_apirila_maiatza_ekaina_uztaila_abuztua_iraila_urria_azaroa_abendua".split("_"),monthsShort:"urt._ots._mar._api._mai._eka._uzt._abu._ira._urr._aza._abe.".split("_"),monthsParseExact:!0,weekdays:"igandea_astelehena_asteartea_asteazkena_osteguna_ostirala_larunbata".split("_"),weekdaysShort:"ig._al._ar._az._og._ol._lr.".split("_"),weekdaysMin:"ig_al_ar_az_og_ol_lr".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY[ko] MMMM[ren] D[a]",LLL:"YYYY[ko] MMMM[ren] D[a] HH:mm",LLLL:"dddd, YYYY[ko] MMMM[ren] D[a] HH:mm",l:"YYYY-M-D",ll:"YYYY[ko] MMM D[a]",lll:"YYYY[ko] MMM D[a] HH:mm",llll:"ddd, YYYY[ko] MMM D[a] HH:mm"},calendar:{sameDay:"[gaur] LT[etan]",nextDay:"[bihar] LT[etan]",nextWeek:"dddd LT[etan]",lastDay:"[atzo] LT[etan]",lastWeek:"[aurreko] dddd LT[etan]",sameElse:"L"},relativeTime:{future:"%s barru",past:"duela %s",s:"segundo batzuk",ss:"%d segundo",m:"minutu bat",mm:"%d minutu",h:"ordu bat",hh:"%d ordu",d:"egun bat",dd:"%d egun",M:"hilabete bat",MM:"%d hilabete",y:"urte bat",yy:"%d urte"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},119:function(e,t,n){!function(e){"use strict";var t={1:"۱",2:"۲",3:"۳",4:"۴",5:"۵",6:"۶",7:"۷",8:"۸",9:"۹",0:"۰"},n={"۱":"1","۲":"2","۳":"3","۴":"4","۵":"5","۶":"6","۷":"7","۸":"8","۹":"9","۰":"0"};e.defineLocale("fa",{months:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),monthsShort:"ژانویه_فوریه_مارس_آوریل_مه_ژوئن_ژوئیه_اوت_سپتامبر_اکتبر_نوامبر_دسامبر".split("_"),weekdays:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysShort:"یک‌شنبه_دوشنبه_سه‌شنبه_چهارشنبه_پنج‌شنبه_جمعه_شنبه".split("_"),weekdaysMin:"ی_د_س_چ_پ_ج_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/قبل از ظهر|بعد از ظهر/,isPM:function(e){return/بعد از ظهر/.test(e)},meridiem:function(e,t,n){return e<12?"قبل از ظهر":"بعد از ظهر"},calendar:{sameDay:"[امروز ساعت] LT",nextDay:"[فردا ساعت] LT",nextWeek:"dddd [ساعت] LT",lastDay:"[دیروز ساعت] LT",lastWeek:"dddd [پیش] [ساعت] LT",sameElse:"L"},relativeTime:{future:"در %s",past:"%s پیش",s:"چند ثانیه",ss:"%d ثانیه",m:"یک دقیقه",mm:"%d دقیقه",h:"یک ساعت",hh:"%d ساعت",d:"یک روز",dd:"%d روز",M:"یک ماه",MM:"%d ماه",y:"یک سال",yy:"%d سال"},preparse:function(e){return e.replace(/[۰-۹]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},dayOfMonthOrdinalParse:/\d{1,2}م/,ordinal:"%dم",week:{dow:6,doy:12}})}(n(5093))},527:function(e,t,n){!function(e){"use strict";var t="nolla yksi kaksi kolme neljä viisi kuusi seitsemän kahdeksan yhdeksän".split(" "),n=["nolla","yhden","kahden","kolmen","neljän","viiden","kuuden",t[7],t[8],t[9]];function r(e,r,a,i){var s="";switch(a){case"s":return i?"muutaman sekunnin":"muutama sekunti";case"ss":s=i?"sekunnin":"sekuntia";break;case"m":return i?"minuutin":"minuutti";case"mm":s=i?"minuutin":"minuuttia";break;case"h":return i?"tunnin":"tunti";case"hh":s=i?"tunnin":"tuntia";break;case"d":return i?"päivän":"päivä";case"dd":s=i?"päivän":"päivää";break;case"M":return i?"kuukauden":"kuukausi";case"MM":s=i?"kuukauden":"kuukautta";break;case"y":return i?"vuoden":"vuosi";case"yy":s=i?"vuoden":"vuotta"}return function(e,r){return e<10?r?n[e]:t[e]:e}(e,i)+" "+s}e.defineLocale("fi",{months:"tammikuu_helmikuu_maaliskuu_huhtikuu_toukokuu_kesäkuu_heinäkuu_elokuu_syyskuu_lokakuu_marraskuu_joulukuu".split("_"),monthsShort:"tammi_helmi_maalis_huhti_touko_kesä_heinä_elo_syys_loka_marras_joulu".split("_"),weekdays:"sunnuntai_maanantai_tiistai_keskiviikko_torstai_perjantai_lauantai".split("_"),weekdaysShort:"su_ma_ti_ke_to_pe_la".split("_"),weekdaysMin:"su_ma_ti_ke_to_pe_la".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"Do MMMM[ta] YYYY",LLL:"Do MMMM[ta] YYYY, [klo] HH.mm",LLLL:"dddd, Do MMMM[ta] YYYY, [klo] HH.mm",l:"D.M.YYYY",ll:"Do MMM YYYY",lll:"Do MMM YYYY, [klo] HH.mm",llll:"ddd, Do MMM YYYY, [klo] HH.mm"},calendar:{sameDay:"[tänään] [klo] LT",nextDay:"[huomenna] [klo] LT",nextWeek:"dddd [klo] LT",lastDay:"[eilen] [klo] LT",lastWeek:"[viime] dddd[na] [klo] LT",sameElse:"L"},relativeTime:{future:"%s päästä",past:"%s sitten",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},5995:function(e,t,n){!function(e){"use strict";e.defineLocale("fil",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(5093))},2477:function(e,t,n){!function(e){"use strict";e.defineLocale("fo",{months:"januar_februar_mars_apríl_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan_feb_mar_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_"),weekdays:"sunnudagur_mánadagur_týsdagur_mikudagur_hósdagur_fríggjadagur_leygardagur".split("_"),weekdaysShort:"sun_mán_týs_mik_hós_frí_ley".split("_"),weekdaysMin:"su_má_tý_mi_hó_fr_le".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D. MMMM, YYYY HH:mm"},calendar:{sameDay:"[Í dag kl.] LT",nextDay:"[Í morgin kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[Í gjár kl.] LT",lastWeek:"[síðstu] dddd [kl] LT",sameElse:"L"},relativeTime:{future:"um %s",past:"%s síðani",s:"fá sekund",ss:"%d sekundir",m:"ein minuttur",mm:"%d minuttir",h:"ein tími",hh:"%d tímar",d:"ein dagur",dd:"%d dagar",M:"ein mánaður",MM:"%d mánaðir",y:"eitt ár",yy:"%d ár"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},6435:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ca",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}}})}(n(5093))},7892:function(e,t,n){!function(e){"use strict";e.defineLocale("fr-ch",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsParseExact:!0,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|e)/,ordinal:function(e,t){switch(t){default:case"M":case"Q":case"D":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(5093))},5498:function(e,t,n){!function(e){"use strict";var t=/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?|janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,n=[/^janv/i,/^févr/i,/^mars/i,/^avr/i,/^mai/i,/^juin/i,/^juil/i,/^août/i,/^sept/i,/^oct/i,/^nov/i,/^déc/i];e.defineLocale("fr",{months:"janvier_février_mars_avril_mai_juin_juillet_août_septembre_octobre_novembre_décembre".split("_"),monthsShort:"janv._févr._mars_avr._mai_juin_juil._août_sept._oct._nov._déc.".split("_"),monthsRegex:t,monthsShortRegex:t,monthsStrictRegex:/^(janvier|février|mars|avril|mai|juin|juillet|août|septembre|octobre|novembre|décembre)/i,monthsShortStrictRegex:/(janv\.?|févr\.?|mars|avr\.?|mai|juin|juil\.?|août|sept\.?|oct\.?|nov\.?|déc\.?)/i,monthsParse:n,longMonthsParse:n,shortMonthsParse:n,weekdays:"dimanche_lundi_mardi_mercredi_jeudi_vendredi_samedi".split("_"),weekdaysShort:"dim._lun._mar._mer._jeu._ven._sam.".split("_"),weekdaysMin:"di_lu_ma_me_je_ve_sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Aujourd’hui à] LT",nextDay:"[Demain à] LT",nextWeek:"dddd [à] LT",lastDay:"[Hier à] LT",lastWeek:"dddd [dernier à] LT",sameElse:"L"},relativeTime:{future:"dans %s",past:"il y a %s",s:"quelques secondes",ss:"%d secondes",m:"une minute",mm:"%d minutes",h:"une heure",hh:"%d heures",d:"un jour",dd:"%d jours",w:"une semaine",ww:"%d semaines",M:"un mois",MM:"%d mois",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(er|)/,ordinal:function(e,t){switch(t){case"D":return e+(1===e?"er":"");default:case"M":case"Q":case"DDD":case"d":return e+(1===e?"er":"e");case"w":case"W":return e+(1===e?"re":"e")}},week:{dow:1,doy:4}})}(n(5093))},7071:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mai_jun._jul._aug._sep._okt._nov._des.".split("_"),n="jan_feb_mrt_apr_mai_jun_jul_aug_sep_okt_nov_des".split("_");e.defineLocale("fy",{months:"jannewaris_febrewaris_maart_april_maaie_juny_july_augustus_septimber_oktober_novimber_desimber".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsParseExact:!0,weekdays:"snein_moandei_tiisdei_woansdei_tongersdei_freed_sneon".split("_"),weekdaysShort:"si._mo._ti._wo._to._fr._so.".split("_"),weekdaysMin:"Si_Mo_Ti_Wo_To_Fr_So".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[hjoed om] LT",nextDay:"[moarn om] LT",nextWeek:"dddd [om] LT",lastDay:"[juster om] LT",lastWeek:"[ôfrûne] dddd [om] LT",sameElse:"L"},relativeTime:{future:"oer %s",past:"%s lyn",s:"in pear sekonden",ss:"%d sekonden",m:"ien minút",mm:"%d minuten",h:"ien oere",hh:"%d oeren",d:"ien dei",dd:"%d dagen",M:"ien moanne",MM:"%d moannen",y:"ien jier",yy:"%d jierren"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},1734:function(e,t,n){!function(e){"use strict";e.defineLocale("ga",{months:["Eanáir","Feabhra","Márta","Aibreán","Bealtaine","Meitheamh","Iúil","Lúnasa","Meán Fómhair","Deireadh Fómhair","Samhain","Nollaig"],monthsShort:["Ean","Feabh","Márt","Aib","Beal","Meith","Iúil","Lún","M.F.","D.F.","Samh","Noll"],monthsParseExact:!0,weekdays:["Dé Domhnaigh","Dé Luain","Dé Máirt","Dé Céadaoin","Déardaoin","Dé hAoine","Dé Sathairn"],weekdaysShort:["Domh","Luan","Máirt","Céad","Déar","Aoine","Sath"],weekdaysMin:["Do","Lu","Má","Cé","Dé","A","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Inniu ag] LT",nextDay:"[Amárach ag] LT",nextWeek:"dddd [ag] LT",lastDay:"[Inné ag] LT",lastWeek:"dddd [seo caite] [ag] LT",sameElse:"L"},relativeTime:{future:"i %s",past:"%s ó shin",s:"cúpla soicind",ss:"%d soicind",m:"nóiméad",mm:"%d nóiméad",h:"uair an chloig",hh:"%d uair an chloig",d:"lá",dd:"%d lá",M:"mí",MM:"%d míonna",y:"bliain",yy:"%d bliain"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(5093))},217:function(e,t,n){!function(e){"use strict";e.defineLocale("gd",{months:["Am Faoilleach","An Gearran","Am Màrt","An Giblean","An Cèitean","An t-Ògmhios","An t-Iuchar","An Lùnastal","An t-Sultain","An Dàmhair","An t-Samhain","An Dùbhlachd"],monthsShort:["Faoi","Gear","Màrt","Gibl","Cèit","Ògmh","Iuch","Lùn","Sult","Dàmh","Samh","Dùbh"],monthsParseExact:!0,weekdays:["Didòmhnaich","Diluain","Dimàirt","Diciadain","Diardaoin","Dihaoine","Disathairne"],weekdaysShort:["Did","Dil","Dim","Dic","Dia","Dih","Dis"],weekdaysMin:["Dò","Lu","Mà","Ci","Ar","Ha","Sa"],longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[An-diugh aig] LT",nextDay:"[A-màireach aig] LT",nextWeek:"dddd [aig] LT",lastDay:"[An-dè aig] LT",lastWeek:"dddd [seo chaidh] [aig] LT",sameElse:"L"},relativeTime:{future:"ann an %s",past:"bho chionn %s",s:"beagan diogan",ss:"%d diogan",m:"mionaid",mm:"%d mionaidean",h:"uair",hh:"%d uairean",d:"latha",dd:"%d latha",M:"mìos",MM:"%d mìosan",y:"bliadhna",yy:"%d bliadhna"},dayOfMonthOrdinalParse:/\d{1,2}(d|na|mh)/,ordinal:function(e){return e+(1===e?"d":e%10==2?"na":"mh")},week:{dow:1,doy:4}})}(n(5093))},7329:function(e,t,n){!function(e){"use strict";e.defineLocale("gl",{months:"xaneiro_febreiro_marzo_abril_maio_xuño_xullo_agosto_setembro_outubro_novembro_decembro".split("_"),monthsShort:"xan._feb._mar._abr._mai._xuñ._xul._ago._set._out._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"domingo_luns_martes_mércores_xoves_venres_sábado".split("_"),weekdaysShort:"dom._lun._mar._mér._xov._ven._sáb.".split("_"),weekdaysMin:"do_lu_ma_mé_xo_ve_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY H:mm",LLLL:"dddd, D [de] MMMM [de] YYYY H:mm"},calendar:{sameDay:function(){return"[hoxe "+(1!==this.hours()?"ás":"á")+"] LT"},nextDay:function(){return"[mañá "+(1!==this.hours()?"ás":"á")+"] LT"},nextWeek:function(){return"dddd ["+(1!==this.hours()?"ás":"a")+"] LT"},lastDay:function(){return"[onte "+(1!==this.hours()?"á":"a")+"] LT"},lastWeek:function(){return"[o] dddd [pasado "+(1!==this.hours()?"ás":"a")+"] LT"},sameElse:"L"},relativeTime:{future:function(e){return 0===e.indexOf("un")?"n"+e:"en "+e},past:"hai %s",s:"uns segundos",ss:"%d segundos",m:"un minuto",mm:"%d minutos",h:"unha hora",hh:"%d horas",d:"un día",dd:"%d días",M:"un mes",MM:"%d meses",y:"un ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},2124:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["थोडया सॅकंडांनी","थोडे सॅकंड"],ss:[e+" सॅकंडांनी",e+" सॅकंड"],m:["एका मिणटान","एक मिनूट"],mm:[e+" मिणटांनी",e+" मिणटां"],h:["एका वरान","एक वर"],hh:[e+" वरांनी",e+" वरां"],d:["एका दिसान","एक दीस"],dd:[e+" दिसांनी",e+" दीस"],M:["एका म्हयन्यान","एक म्हयनो"],MM:[e+" म्हयन्यानी",e+" म्हयने"],y:["एका वर्सान","एक वर्स"],yy:[e+" वर्सांनी",e+" वर्सां"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-deva",{months:{standalone:"जानेवारी_फेब्रुवारी_मार्च_एप्रील_मे_जून_जुलय_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),format:"जानेवारीच्या_फेब्रुवारीच्या_मार्चाच्या_एप्रीलाच्या_मेयाच्या_जूनाच्या_जुलयाच्या_ऑगस्टाच्या_सप्टेंबराच्या_ऑक्टोबराच्या_नोव्हेंबराच्या_डिसेंबराच्या".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"जाने._फेब्रु._मार्च_एप्री._मे_जून_जुल._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"आयतार_सोमार_मंगळार_बुधवार_बिरेस्तार_सुक्रार_शेनवार".split("_"),weekdaysShort:"आयत._सोम._मंगळ._बुध._ब्रेस्त._सुक्र._शेन.".split("_"),weekdaysMin:"आ_सो_मं_बु_ब्रे_सु_शे".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [वाजतां]",LTS:"A h:mm:ss [वाजतां]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [वाजतां]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [वाजतां]",llll:"ddd, D MMM YYYY, A h:mm [वाजतां]"},calendar:{sameDay:"[आयज] LT",nextDay:"[फाल्यां] LT",nextWeek:"[फुडलो] dddd[,] LT",lastDay:"[काल] LT",lastWeek:"[फाटलो] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s आदीं",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(वेर)/,ordinal:function(e,t){return"D"===t?e+"वेर":e},week:{dow:0,doy:3},meridiemParse:/राती|सकाळीं|दनपारां|सांजे/,meridiemHour:function(e,t){return 12===e&&(e=0),"राती"===t?e<4?e:e+12:"सकाळीं"===t?e:"दनपारां"===t?e>12?e:e+12:"सांजे"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"राती":e<12?"सकाळीं":e<16?"दनपारां":e<20?"सांजे":"राती"}})}(n(5093))},3383:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["thoddea sekondamni","thodde sekond"],ss:[e+" sekondamni",e+" sekond"],m:["eka mintan","ek minut"],mm:[e+" mintamni",e+" mintam"],h:["eka voran","ek vor"],hh:[e+" voramni",e+" voram"],d:["eka disan","ek dis"],dd:[e+" disamni",e+" dis"],M:["eka mhoinean","ek mhoino"],MM:[e+" mhoineamni",e+" mhoine"],y:["eka vorsan","ek voros"],yy:[e+" vorsamni",e+" vorsam"]};return r?a[n][0]:a[n][1]}e.defineLocale("gom-latn",{months:{standalone:"Janer_Febrer_Mars_Abril_Mai_Jun_Julai_Agost_Setembr_Otubr_Novembr_Dezembr".split("_"),format:"Janerachea_Febrerachea_Marsachea_Abrilachea_Maiachea_Junachea_Julaiachea_Agostachea_Setembrachea_Otubrachea_Novembrachea_Dezembrachea".split("_"),isFormat:/MMMM(\s)+D[oD]?/},monthsShort:"Jan._Feb._Mars_Abr._Mai_Jun_Jul._Ago._Set._Otu._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Aitar_Somar_Mongllar_Budhvar_Birestar_Sukrar_Son'var".split("_"),weekdaysShort:"Ait._Som._Mon._Bud._Bre._Suk._Son.".split("_"),weekdaysMin:"Ai_Sm_Mo_Bu_Br_Su_Sn".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"A h:mm [vazta]",LTS:"A h:mm:ss [vazta]",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY A h:mm [vazta]",LLLL:"dddd, MMMM Do, YYYY, A h:mm [vazta]",llll:"ddd, D MMM YYYY, A h:mm [vazta]"},calendar:{sameDay:"[Aiz] LT",nextDay:"[Faleam] LT",nextWeek:"[Fuddlo] dddd[,] LT",lastDay:"[Kal] LT",lastWeek:"[Fattlo] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%s",past:"%s adim",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}(er)/,ordinal:function(e,t){return"D"===t?e+"er":e},week:{dow:0,doy:3},meridiemParse:/rati|sokallim|donparam|sanje/,meridiemHour:function(e,t){return 12===e&&(e=0),"rati"===t?e<4?e:e+12:"sokallim"===t?e:"donparam"===t?e>12?e:e+12:"sanje"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"rati":e<12?"sokallim":e<16?"donparam":e<20?"sanje":"rati"}})}(n(5093))},5050:function(e,t,n){!function(e){"use strict";var t={1:"૧",2:"૨",3:"૩",4:"૪",5:"૫",6:"૬",7:"૭",8:"૮",9:"૯",0:"૦"},n={"૧":"1","૨":"2","૩":"3","૪":"4","૫":"5","૬":"6","૭":"7","૮":"8","૯":"9","૦":"0"};e.defineLocale("gu",{months:"જાન્યુઆરી_ફેબ્રુઆરી_માર્ચ_એપ્રિલ_મે_જૂન_જુલાઈ_ઑગસ્ટ_સપ્ટેમ્બર_ઑક્ટ્બર_નવેમ્બર_ડિસેમ્બર".split("_"),monthsShort:"જાન્યુ._ફેબ્રુ._માર્ચ_એપ્રિ._મે_જૂન_જુલા._ઑગ._સપ્ટે._ઑક્ટ્._નવે._ડિસે.".split("_"),monthsParseExact:!0,weekdays:"રવિવાર_સોમવાર_મંગળવાર_બુધ્વાર_ગુરુવાર_શુક્રવાર_શનિવાર".split("_"),weekdaysShort:"રવિ_સોમ_મંગળ_બુધ્_ગુરુ_શુક્ર_શનિ".split("_"),weekdaysMin:"ર_સો_મં_બુ_ગુ_શુ_શ".split("_"),longDateFormat:{LT:"A h:mm વાગ્યે",LTS:"A h:mm:ss વાગ્યે",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm વાગ્યે",LLLL:"dddd, D MMMM YYYY, A h:mm વાગ્યે"},calendar:{sameDay:"[આજ] LT",nextDay:"[કાલે] LT",nextWeek:"dddd, LT",lastDay:"[ગઇકાલે] LT",lastWeek:"[પાછલા] dddd, LT",sameElse:"L"},relativeTime:{future:"%s મા",past:"%s પહેલા",s:"અમુક પળો",ss:"%d સેકંડ",m:"એક મિનિટ",mm:"%d મિનિટ",h:"એક કલાક",hh:"%d કલાક",d:"એક દિવસ",dd:"%d દિવસ",M:"એક મહિનો",MM:"%d મહિનો",y:"એક વર્ષ",yy:"%d વર્ષ"},preparse:function(e){return e.replace(/[૧૨૩૪૫૬૭૮૯૦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/રાત|બપોર|સવાર|સાંજ/,meridiemHour:function(e,t){return 12===e&&(e=0),"રાત"===t?e<4?e:e+12:"સવાર"===t?e:"બપોર"===t?e>=10?e:e+12:"સાંજ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"રાત":e<10?"સવાર":e<17?"બપોર":e<20?"સાંજ":"રાત"},week:{dow:0,doy:6}})}(n(5093))},1713:function(e,t,n){!function(e){"use strict";e.defineLocale("he",{months:"ינואר_פברואר_מרץ_אפריל_מאי_יוני_יולי_אוגוסט_ספטמבר_אוקטובר_נובמבר_דצמבר".split("_"),monthsShort:"ינו׳_פבר׳_מרץ_אפר׳_מאי_יוני_יולי_אוג׳_ספט׳_אוק׳_נוב׳_דצמ׳".split("_"),weekdays:"ראשון_שני_שלישי_רביעי_חמישי_שישי_שבת".split("_"),weekdaysShort:"א׳_ב׳_ג׳_ד׳_ה׳_ו׳_ש׳".split("_"),weekdaysMin:"א_ב_ג_ד_ה_ו_ש".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [ב]MMMM YYYY",LLL:"D [ב]MMMM YYYY HH:mm",LLLL:"dddd, D [ב]MMMM YYYY HH:mm",l:"D/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[היום ב־]LT",nextDay:"[מחר ב־]LT",nextWeek:"dddd [בשעה] LT",lastDay:"[אתמול ב־]LT",lastWeek:"[ביום] dddd [האחרון בשעה] LT",sameElse:"L"},relativeTime:{future:"בעוד %s",past:"לפני %s",s:"מספר שניות",ss:"%d שניות",m:"דקה",mm:"%d דקות",h:"שעה",hh:function(e){return 2===e?"שעתיים":e+" שעות"},d:"יום",dd:function(e){return 2===e?"יומיים":e+" ימים"},M:"חודש",MM:function(e){return 2===e?"חודשיים":e+" חודשים"},y:"שנה",yy:function(e){return 2===e?"שנתיים":e%10==0&&10!==e?e+" שנה":e+" שנים"}},meridiemParse:/אחה"צ|לפנה"צ|אחרי הצהריים|לפני הצהריים|לפנות בוקר|בבוקר|בערב/i,isPM:function(e){return/^(אחה"צ|אחרי הצהריים|בערב)$/.test(e)},meridiem:function(e,t,n){return e<5?"לפנות בוקר":e<10?"בבוקר":e<12?n?'לפנה"צ':"לפני הצהריים":e<18?n?'אחה"צ':"אחרי הצהריים":"בערב"}})}(n(5093))},3861:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"},r=[/^जन/i,/^फ़र|फर/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सितं|सित/i,/^अक्टू/i,/^नव|नवं/i,/^दिसं|दिस/i];e.defineLocale("hi",{months:{format:"जनवरी_फ़रवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितम्बर_अक्टूबर_नवम्बर_दिसम्बर".split("_"),standalone:"जनवरी_फरवरी_मार्च_अप्रैल_मई_जून_जुलाई_अगस्त_सितंबर_अक्टूबर_नवंबर_दिसंबर".split("_")},monthsShort:"जन._फ़र._मार्च_अप्रै._मई_जून_जुल._अग._सित._अक्टू._नव._दिस.".split("_"),weekdays:"रविवार_सोमवार_मंगलवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगल_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm बजे",LTS:"A h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm बजे",LLLL:"dddd, D MMMM YYYY, A h:mm बजे"},monthsParse:r,longMonthsParse:r,shortMonthsParse:[/^जन/i,/^फ़र/i,/^मार्च/i,/^अप्रै/i,/^मई/i,/^जून/i,/^जुल/i,/^अग/i,/^सित/i,/^अक्टू/i,/^नव/i,/^दिस/i],monthsRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsShortRegex:/^(जनवरी|जन\.?|फ़रवरी|फरवरी|फ़र\.?|मार्च?|अप्रैल|अप्रै\.?|मई?|जून?|जुलाई|जुल\.?|अगस्त|अग\.?|सितम्बर|सितंबर|सित\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर|नव\.?|दिसम्बर|दिसंबर|दिस\.?)/i,monthsStrictRegex:/^(जनवरी?|फ़रवरी|फरवरी?|मार्च?|अप्रैल?|मई?|जून?|जुलाई?|अगस्त?|सितम्बर|सितंबर|सित?\.?|अक्टूबर|अक्टू\.?|नवम्बर|नवंबर?|दिसम्बर|दिसंबर?)/i,monthsShortStrictRegex:/^(जन\.?|फ़र\.?|मार्च?|अप्रै\.?|मई?|जून?|जुल\.?|अग\.?|सित\.?|अक्टू\.?|नव\.?|दिस\.?)/i,calendar:{sameDay:"[आज] LT",nextDay:"[कल] LT",nextWeek:"dddd, LT",lastDay:"[कल] LT",lastWeek:"[पिछले] dddd, LT",sameElse:"L"},relativeTime:{future:"%s में",past:"%s पहले",s:"कुछ ही क्षण",ss:"%d सेकंड",m:"एक मिनट",mm:"%d मिनट",h:"एक घंटा",hh:"%d घंटे",d:"एक दिन",dd:"%d दिन",M:"एक महीने",MM:"%d महीने",y:"एक वर्ष",yy:"%d वर्ष"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/रात|सुबह|दोपहर|शाम/,meridiemHour:function(e,t){return 12===e&&(e=0),"रात"===t?e<4?e:e+12:"सुबह"===t?e:"दोपहर"===t?e>=10?e:e+12:"शाम"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"रात":e<10?"सुबह":e<17?"दोपहर":e<20?"शाम":"रात"},week:{dow:0,doy:6}})}(n(5093))},6308:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=e+" ";switch(n){case"ss":return r+(1===e?"sekunda":2===e||3===e||4===e?"sekunde":"sekundi");case"m":return t?"jedna minuta":"jedne minute";case"mm":return r+(1===e?"minuta":2===e||3===e||4===e?"minute":"minuta");case"h":return t?"jedan sat":"jednog sata";case"hh":return r+(1===e?"sat":2===e||3===e||4===e?"sata":"sati");case"dd":return r+(1===e?"dan":"dana");case"MM":return r+(1===e?"mjesec":2===e||3===e||4===e?"mjeseca":"mjeseci");case"yy":return r+(1===e?"godina":2===e||3===e||4===e?"godine":"godina")}}e.defineLocale("hr",{months:{format:"siječnja_veljače_ožujka_travnja_svibnja_lipnja_srpnja_kolovoza_rujna_listopada_studenoga_prosinca".split("_"),standalone:"siječanj_veljača_ožujak_travanj_svibanj_lipanj_srpanj_kolovoz_rujan_listopad_studeni_prosinac".split("_")},monthsShort:"sij._velj._ožu._tra._svi._lip._srp._kol._ruj._lis._stu._pro.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"Do MMMM YYYY",LLL:"Do MMMM YYYY H:mm",LLLL:"dddd, Do MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[jučer u] LT",lastWeek:function(){switch(this.day()){case 0:return"[prošlu] [nedjelju] [u] LT";case 3:return"[prošlu] [srijedu] [u] LT";case 6:return"[prošle] [subote] [u] LT";case 1:case 2:case 4:case 5:return"[prošli] dddd [u] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"par sekundi",ss:t,m:t,mm:t,h:t,hh:t,d:"dan",dd:t,M:"mjesec",MM:t,y:"godinu",yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},609:function(e,t,n){!function(e){"use strict";var t="vasárnap hétfőn kedden szerdán csütörtökön pénteken szombaton".split(" ");function n(e,t,n,r){var a=e;switch(n){case"s":return r||t?"néhány másodperc":"néhány másodperce";case"ss":return a+(r||t)?" másodperc":" másodperce";case"m":return"egy"+(r||t?" perc":" perce");case"mm":return a+(r||t?" perc":" perce");case"h":return"egy"+(r||t?" óra":" órája");case"hh":return a+(r||t?" óra":" órája");case"d":return"egy"+(r||t?" nap":" napja");case"dd":return a+(r||t?" nap":" napja");case"M":return"egy"+(r||t?" hónap":" hónapja");case"MM":return a+(r||t?" hónap":" hónapja");case"y":return"egy"+(r||t?" év":" éve");case"yy":return a+(r||t?" év":" éve")}return""}function r(e){return(e?"":"[múlt] ")+"["+t[this.day()]+"] LT[-kor]"}e.defineLocale("hu",{months:"január_február_március_április_május_június_július_augusztus_szeptember_október_november_december".split("_"),monthsShort:"jan._feb._márc._ápr._máj._jún._júl._aug._szept._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"vasárnap_hétfő_kedd_szerda_csütörtök_péntek_szombat".split("_"),weekdaysShort:"vas_hét_kedd_sze_csüt_pén_szo".split("_"),weekdaysMin:"v_h_k_sze_cs_p_szo".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY. MMMM D.",LLL:"YYYY. MMMM D. H:mm",LLLL:"YYYY. MMMM D., dddd H:mm"},meridiemParse:/de|du/i,isPM:function(e){return"u"===e.charAt(1).toLowerCase()},meridiem:function(e,t,n){return e<12?!0===n?"de":"DE":!0===n?"du":"DU"},calendar:{sameDay:"[ma] LT[-kor]",nextDay:"[holnap] LT[-kor]",nextWeek:function(){return r.call(this,!0)},lastDay:"[tegnap] LT[-kor]",lastWeek:function(){return r.call(this,!1)},sameElse:"L"},relativeTime:{future:"%s múlva",past:"%s",s:n,ss:n,m:n,mm:n,h:n,hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},7160:function(e,t,n){!function(e){"use strict";e.defineLocale("hy-am",{months:{format:"հունվարի_փետրվարի_մարտի_ապրիլի_մայիսի_հունիսի_հուլիսի_օգոստոսի_սեպտեմբերի_հոկտեմբերի_նոյեմբերի_դեկտեմբերի".split("_"),standalone:"հունվար_փետրվար_մարտ_ապրիլ_մայիս_հունիս_հուլիս_օգոստոս_սեպտեմբեր_հոկտեմբեր_նոյեմբեր_դեկտեմբեր".split("_")},monthsShort:"հնվ_փտր_մրտ_ապր_մյս_հնս_հլս_օգս_սպտ_հկտ_նմբ_դկտ".split("_"),weekdays:"կիրակի_երկուշաբթի_երեքշաբթի_չորեքշաբթի_հինգշաբթի_ուրբաթ_շաբաթ".split("_"),weekdaysShort:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),weekdaysMin:"կրկ_երկ_երք_չրք_հնգ_ուրբ_շբթ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY թ.",LLL:"D MMMM YYYY թ., HH:mm",LLLL:"dddd, D MMMM YYYY թ., HH:mm"},calendar:{sameDay:"[այսօր] LT",nextDay:"[վաղը] LT",lastDay:"[երեկ] LT",nextWeek:function(){return"dddd [օրը ժամը] LT"},lastWeek:function(){return"[անցած] dddd [օրը ժամը] LT"},sameElse:"L"},relativeTime:{future:"%s հետո",past:"%s առաջ",s:"մի քանի վայրկյան",ss:"%d վայրկյան",m:"րոպե",mm:"%d րոպե",h:"ժամ",hh:"%d ժամ",d:"օր",dd:"%d օր",M:"ամիս",MM:"%d ամիս",y:"տարի",yy:"%d տարի"},meridiemParse:/գիշերվա|առավոտվա|ցերեկվա|երեկոյան/,isPM:function(e){return/^(ցերեկվա|երեկոյան)$/.test(e)},meridiem:function(e){return e<4?"գիշերվա":e<12?"առավոտվա":e<17?"ցերեկվա":"երեկոյան"},dayOfMonthOrdinalParse:/\d{1,2}|\d{1,2}-(ին|րդ)/,ordinal:function(e,t){switch(t){case"DDD":case"w":case"W":case"DDDo":return 1===e?e+"-ին":e+"-րդ";default:return e}},week:{dow:1,doy:7}})}(n(5093))},4063:function(e,t,n){!function(e){"use strict";e.defineLocale("id",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_November_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Agt_Sep_Okt_Nov_Des".split("_"),weekdays:"Minggu_Senin_Selasa_Rabu_Kamis_Jumat_Sabtu".split("_"),weekdaysShort:"Min_Sen_Sel_Rab_Kam_Jum_Sab".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|siang|sore|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"siang"===t?e>=11?e:e+12:"sore"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"siang":e<19?"sore":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Besok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kemarin pukul] LT",lastWeek:"dddd [lalu pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lalu",s:"beberapa detik",ss:"%d detik",m:"semenit",mm:"%d menit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:0,doy:6}})}(n(5093))},9374:function(e,t,n){!function(e){"use strict";function t(e){return e%100==11||e%10!=1}function n(e,n,r,a){var i=e+" ";switch(r){case"s":return n||a?"nokkrar sekúndur":"nokkrum sekúndum";case"ss":return t(e)?i+(n||a?"sekúndur":"sekúndum"):i+"sekúnda";case"m":return n?"mínúta":"mínútu";case"mm":return t(e)?i+(n||a?"mínútur":"mínútum"):n?i+"mínúta":i+"mínútu";case"hh":return t(e)?i+(n||a?"klukkustundir":"klukkustundum"):i+"klukkustund";case"d":return n?"dagur":a?"dag":"degi";case"dd":return t(e)?n?i+"dagar":i+(a?"daga":"dögum"):n?i+"dagur":i+(a?"dag":"degi");case"M":return n?"mánuður":a?"mánuð":"mánuði";case"MM":return t(e)?n?i+"mánuðir":i+(a?"mánuði":"mánuðum"):n?i+"mánuður":i+(a?"mánuð":"mánuði");case"y":return n||a?"ár":"ári";case"yy":return t(e)?i+(n||a?"ár":"árum"):i+(n||a?"ár":"ári")}}e.defineLocale("is",{months:"janúar_febrúar_mars_apríl_maí_júní_júlí_ágúst_september_október_nóvember_desember".split("_"),monthsShort:"jan_feb_mar_apr_maí_jún_júl_ágú_sep_okt_nóv_des".split("_"),weekdays:"sunnudagur_mánudagur_þriðjudagur_miðvikudagur_fimmtudagur_föstudagur_laugardagur".split("_"),weekdaysShort:"sun_mán_þri_mið_fim_fös_lau".split("_"),weekdaysMin:"Su_Má_Þr_Mi_Fi_Fö_La".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd, D. MMMM YYYY [kl.] H:mm"},calendar:{sameDay:"[í dag kl.] LT",nextDay:"[á morgun kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[í gær kl.] LT",lastWeek:"[síðasta] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"eftir %s",past:"fyrir %s síðan",s:n,ss:n,m:n,mm:n,h:"klukkustund",hh:n,d:n,dd:n,M:n,MM:n,y:n,yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},1827:function(e,t,n){!function(e){"use strict";e.defineLocale("it-ch",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[Oggi alle] LT",nextDay:"[Domani alle] LT",nextWeek:"dddd [alle] LT",lastDay:"[Ieri alle] LT",lastWeek:function(){return 0===this.day()?"[la scorsa] dddd [alle] LT":"[lo scorso] dddd [alle] LT"},sameElse:"L"},relativeTime:{future:function(e){return(/^[0-9].+$/.test(e)?"tra":"in")+" "+e},past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},8383:function(e,t,n){!function(e){"use strict";e.defineLocale("it",{months:"gennaio_febbraio_marzo_aprile_maggio_giugno_luglio_agosto_settembre_ottobre_novembre_dicembre".split("_"),monthsShort:"gen_feb_mar_apr_mag_giu_lug_ago_set_ott_nov_dic".split("_"),weekdays:"domenica_lunedì_martedì_mercoledì_giovedì_venerdì_sabato".split("_"),weekdaysShort:"dom_lun_mar_mer_gio_ven_sab".split("_"),weekdaysMin:"do_lu_ma_me_gi_ve_sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:function(){return"[Oggi a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextDay:function(){return"[Domani a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},nextWeek:function(){return"dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastDay:function(){return"[Ieri a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},lastWeek:function(){return 0===this.day()?"[La scorsa] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT":"[Lo scorso] dddd [a"+(this.hours()>1?"lle ":0===this.hours()?" ":"ll'")+"]LT"},sameElse:"L"},relativeTime:{future:"tra %s",past:"%s fa",s:"alcuni secondi",ss:"%d secondi",m:"un minuto",mm:"%d minuti",h:"un'ora",hh:"%d ore",d:"un giorno",dd:"%d giorni",w:"una settimana",ww:"%d settimane",M:"un mese",MM:"%d mesi",y:"un anno",yy:"%d anni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},3827:function(e,t,n){!function(e){"use strict";e.defineLocale("ja",{eras:[{since:"2019-05-01",offset:1,name:"令和",narrow:"㋿",abbr:"R"},{since:"1989-01-08",until:"2019-04-30",offset:1,name:"平成",narrow:"㍻",abbr:"H"},{since:"1926-12-25",until:"1989-01-07",offset:1,name:"昭和",narrow:"㍼",abbr:"S"},{since:"1912-07-30",until:"1926-12-24",offset:1,name:"大正",narrow:"㍽",abbr:"T"},{since:"1873-01-01",until:"1912-07-29",offset:6,name:"明治",narrow:"㍾",abbr:"M"},{since:"0001-01-01",until:"1873-12-31",offset:1,name:"西暦",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"紀元前",narrow:"BC",abbr:"BC"}],eraYearOrdinalRegex:/(元|\d+)年/,eraYearOrdinalParse:function(e,t){return"元"===t[1]?1:parseInt(t[1]||e,10)},months:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"日曜日_月曜日_火曜日_水曜日_木曜日_金曜日_土曜日".split("_"),weekdaysShort:"日_月_火_水_木_金_土".split("_"),weekdaysMin:"日_月_火_水_木_金_土".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日 dddd HH:mm",l:"YYYY/MM/DD",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日(ddd) HH:mm"},meridiemParse:/午前|午後/i,isPM:function(e){return"午後"===e},meridiem:function(e,t,n){return e<12?"午前":"午後"},calendar:{sameDay:"[今日] LT",nextDay:"[明日] LT",nextWeek:function(e){return e.week()!==this.week()?"[来週]dddd LT":"dddd LT"},lastDay:"[昨日] LT",lastWeek:function(e){return this.week()!==e.week()?"[先週]dddd LT":"dddd LT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}日/,ordinal:function(e,t){switch(t){case"y":return 1===e?"元年":e+"年";case"d":case"D":case"DDD":return e+"日";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"数秒",ss:"%d秒",m:"1分",mm:"%d分",h:"1時間",hh:"%d時間",d:"1日",dd:"%d日",M:"1ヶ月",MM:"%dヶ月",y:"1年",yy:"%d年"}})}(n(5093))},9722:function(e,t,n){!function(e){"use strict";e.defineLocale("jv",{months:"Januari_Februari_Maret_April_Mei_Juni_Juli_Agustus_September_Oktober_Nopember_Desember".split("_"),monthsShort:"Jan_Feb_Mar_Apr_Mei_Jun_Jul_Ags_Sep_Okt_Nop_Des".split("_"),weekdays:"Minggu_Senen_Seloso_Rebu_Kemis_Jemuwah_Septu".split("_"),weekdaysShort:"Min_Sen_Sel_Reb_Kem_Jem_Sep".split("_"),weekdaysMin:"Mg_Sn_Sl_Rb_Km_Jm_Sp".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/enjing|siyang|sonten|ndalu/,meridiemHour:function(e,t){return 12===e&&(e=0),"enjing"===t?e:"siyang"===t?e>=11?e:e+12:"sonten"===t||"ndalu"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"enjing":e<15?"siyang":e<19?"sonten":"ndalu"},calendar:{sameDay:"[Dinten puniko pukul] LT",nextDay:"[Mbenjang pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kala wingi pukul] LT",lastWeek:"dddd [kepengker pukul] LT",sameElse:"L"},relativeTime:{future:"wonten ing %s",past:"%s ingkang kepengker",s:"sawetawis detik",ss:"%d detik",m:"setunggal menit",mm:"%d menit",h:"setunggal jam",hh:"%d jam",d:"sedinten",dd:"%d dinten",M:"sewulan",MM:"%d wulan",y:"setaun",yy:"%d taun"},week:{dow:1,doy:7}})}(n(5093))},1794:function(e,t,n){!function(e){"use strict";e.defineLocale("ka",{months:"იანვარი_თებერვალი_მარტი_აპრილი_მაისი_ივნისი_ივლისი_აგვისტო_სექტემბერი_ოქტომბერი_ნოემბერი_დეკემბერი".split("_"),monthsShort:"იან_თებ_მარ_აპრ_მაი_ივნ_ივლ_აგვ_სექ_ოქტ_ნოე_დეკ".split("_"),weekdays:{standalone:"კვირა_ორშაბათი_სამშაბათი_ოთხშაბათი_ხუთშაბათი_პარასკევი_შაბათი".split("_"),format:"კვირას_ორშაბათს_სამშაბათს_ოთხშაბათს_ხუთშაბათს_პარასკევს_შაბათს".split("_"),isFormat:/(წინა|შემდეგ)/},weekdaysShort:"კვი_ორშ_სამ_ოთხ_ხუთ_პარ_შაბ".split("_"),weekdaysMin:"კვ_ორ_სა_ოთ_ხუ_პა_შა".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[დღეს] LT[-ზე]",nextDay:"[ხვალ] LT[-ზე]",lastDay:"[გუშინ] LT[-ზე]",nextWeek:"[შემდეგ] dddd LT[-ზე]",lastWeek:"[წინა] dddd LT-ზე",sameElse:"L"},relativeTime:{future:function(e){return e.replace(/(წამ|წუთ|საათ|წელ|დღ|თვ)(ი|ე)/,(function(e,t,n){return"ი"===n?t+"ში":t+n+"ში"}))},past:function(e){return/(წამი|წუთი|საათი|დღე|თვე)/.test(e)?e.replace(/(ი|ე)$/,"ის წინ"):/წელი/.test(e)?e.replace(/წელი$/,"წლის წინ"):e},s:"რამდენიმე წამი",ss:"%d წამი",m:"წუთი",mm:"%d წუთი",h:"საათი",hh:"%d საათი",d:"დღე",dd:"%d დღე",M:"თვე",MM:"%d თვე",y:"წელი",yy:"%d წელი"},dayOfMonthOrdinalParse:/0|1-ლი|მე-\d{1,2}|\d{1,2}-ე/,ordinal:function(e){return 0===e?e:1===e?e+"-ლი":e<20||e<=100&&e%20==0||e%100==0?"მე-"+e:e+"-ე"},week:{dow:1,doy:7}})}(n(5093))},7088:function(e,t,n){!function(e){"use strict";var t={0:"-ші",1:"-ші",2:"-ші",3:"-ші",4:"-ші",5:"-ші",6:"-шы",7:"-ші",8:"-ші",9:"-шы",10:"-шы",20:"-шы",30:"-шы",40:"-шы",50:"-ші",60:"-шы",70:"-ші",80:"-ші",90:"-шы",100:"-ші"};e.defineLocale("kk",{months:"қаңтар_ақпан_наурыз_сәуір_мамыр_маусым_шілде_тамыз_қыркүйек_қазан_қараша_желтоқсан".split("_"),monthsShort:"қаң_ақп_нау_сәу_мам_мау_шіл_там_қыр_қаз_қар_жел".split("_"),weekdays:"жексенбі_дүйсенбі_сейсенбі_сәрсенбі_бейсенбі_жұма_сенбі".split("_"),weekdaysShort:"жек_дүй_сей_сәр_бей_жұм_сен".split("_"),weekdaysMin:"жк_дй_сй_ср_бй_жм_сн".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгін сағат] LT",nextDay:"[Ертең сағат] LT",nextWeek:"dddd [сағат] LT",lastDay:"[Кеше сағат] LT",lastWeek:"[Өткен аптаның] dddd [сағат] LT",sameElse:"L"},relativeTime:{future:"%s ішінде",past:"%s бұрын",s:"бірнеше секунд",ss:"%d секунд",m:"бір минут",mm:"%d минут",h:"бір сағат",hh:"%d сағат",d:"бір күн",dd:"%d күн",M:"бір ай",MM:"%d ай",y:"бір жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(ші|шы)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},6870:function(e,t,n){!function(e){"use strict";var t={1:"១",2:"២",3:"៣",4:"៤",5:"៥",6:"៦",7:"៧",8:"៨",9:"៩",0:"០"},n={"១":"1","២":"2","៣":"3","៤":"4","៥":"5","៦":"6","៧":"7","៨":"8","៩":"9","០":"0"};e.defineLocale("km",{months:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),monthsShort:"មករា_កុម្ភៈ_មីនា_មេសា_ឧសភា_មិថុនា_កក្កដា_សីហា_កញ្ញា_តុលា_វិច្ឆិកា_ធ្នូ".split("_"),weekdays:"អាទិត្យ_ច័ន្ទ_អង្គារ_ពុធ_ព្រហស្បតិ៍_សុក្រ_សៅរ៍".split("_"),weekdaysShort:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysMin:"អា_ច_អ_ព_ព្រ_សុ_ស".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ព្រឹក|ល្ងាច/,isPM:function(e){return"ល្ងាច"===e},meridiem:function(e,t,n){return e<12?"ព្រឹក":"ល្ងាច"},calendar:{sameDay:"[ថ្ងៃនេះ ម៉ោង] LT",nextDay:"[ស្អែក ម៉ោង] LT",nextWeek:"dddd [ម៉ោង] LT",lastDay:"[ម្សិលមិញ ម៉ោង] LT",lastWeek:"dddd [សប្តាហ៍មុន] [ម៉ោង] LT",sameElse:"L"},relativeTime:{future:"%sទៀត",past:"%sមុន",s:"ប៉ុន្មានវិនាទី",ss:"%d វិនាទី",m:"មួយនាទី",mm:"%d នាទី",h:"មួយម៉ោង",hh:"%d ម៉ោង",d:"មួយថ្ងៃ",dd:"%d ថ្ងៃ",M:"មួយខែ",MM:"%d ខែ",y:"មួយឆ្នាំ",yy:"%d ឆ្នាំ"},dayOfMonthOrdinalParse:/ទី\d{1,2}/,ordinal:"ទី%d",preparse:function(e){return e.replace(/[១២៣៤៥៦៧៨៩០]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(5093))},4451:function(e,t,n){!function(e){"use strict";var t={1:"೧",2:"೨",3:"೩",4:"೪",5:"೫",6:"೬",7:"೭",8:"೮",9:"೯",0:"೦"},n={"೧":"1","೨":"2","೩":"3","೪":"4","೫":"5","೬":"6","೭":"7","೮":"8","೯":"9","೦":"0"};e.defineLocale("kn",{months:"ಜನವರಿ_ಫೆಬ್ರವರಿ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂಬರ್_ಅಕ್ಟೋಬರ್_ನವೆಂಬರ್_ಡಿಸೆಂಬರ್".split("_"),monthsShort:"ಜನ_ಫೆಬ್ರ_ಮಾರ್ಚ್_ಏಪ್ರಿಲ್_ಮೇ_ಜೂನ್_ಜುಲೈ_ಆಗಸ್ಟ್_ಸೆಪ್ಟೆಂ_ಅಕ್ಟೋ_ನವೆಂ_ಡಿಸೆಂ".split("_"),monthsParseExact:!0,weekdays:"ಭಾನುವಾರ_ಸೋಮವಾರ_ಮಂಗಳವಾರ_ಬುಧವಾರ_ಗುರುವಾರ_ಶುಕ್ರವಾರ_ಶನಿವಾರ".split("_"),weekdaysShort:"ಭಾನು_ಸೋಮ_ಮಂಗಳ_ಬುಧ_ಗುರು_ಶುಕ್ರ_ಶನಿ".split("_"),weekdaysMin:"ಭಾ_ಸೋ_ಮಂ_ಬು_ಗು_ಶು_ಶ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[ಇಂದು] LT",nextDay:"[ನಾಳೆ] LT",nextWeek:"dddd, LT",lastDay:"[ನಿನ್ನೆ] LT",lastWeek:"[ಕೊನೆಯ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ನಂತರ",past:"%s ಹಿಂದೆ",s:"ಕೆಲವು ಕ್ಷಣಗಳು",ss:"%d ಸೆಕೆಂಡುಗಳು",m:"ಒಂದು ನಿಮಿಷ",mm:"%d ನಿಮಿಷ",h:"ಒಂದು ಗಂಟೆ",hh:"%d ಗಂಟೆ",d:"ಒಂದು ದಿನ",dd:"%d ದಿನ",M:"ಒಂದು ತಿಂಗಳು",MM:"%d ತಿಂಗಳು",y:"ಒಂದು ವರ್ಷ",yy:"%d ವರ್ಷ"},preparse:function(e){return e.replace(/[೧೨೩೪೫೬೭೮೯೦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ರಾತ್ರಿ|ಬೆಳಿಗ್ಗೆ|ಮಧ್ಯಾಹ್ನ|ಸಂಜೆ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ರಾತ್ರಿ"===t?e<4?e:e+12:"ಬೆಳಿಗ್ಗೆ"===t?e:"ಮಧ್ಯಾಹ್ನ"===t?e>=10?e:e+12:"ಸಂಜೆ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ರಾತ್ರಿ":e<10?"ಬೆಳಿಗ್ಗೆ":e<17?"ಮಧ್ಯಾಹ್ನ":e<20?"ಸಂಜೆ":"ರಾತ್ರಿ"},dayOfMonthOrdinalParse:/\d{1,2}(ನೇ)/,ordinal:function(e){return e+"ನೇ"},week:{dow:0,doy:6}})}(n(5093))},3164:function(e,t,n){!function(e){"use strict";e.defineLocale("ko",{months:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),monthsShort:"1월_2월_3월_4월_5월_6월_7월_8월_9월_10월_11월_12월".split("_"),weekdays:"일요일_월요일_화요일_수요일_목요일_금요일_토요일".split("_"),weekdaysShort:"일_월_화_수_목_금_토".split("_"),weekdaysMin:"일_월_화_수_목_금_토".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"YYYY.MM.DD.",LL:"YYYY년 MMMM D일",LLL:"YYYY년 MMMM D일 A h:mm",LLLL:"YYYY년 MMMM D일 dddd A h:mm",l:"YYYY.MM.DD.",ll:"YYYY년 MMMM D일",lll:"YYYY년 MMMM D일 A h:mm",llll:"YYYY년 MMMM D일 dddd A h:mm"},calendar:{sameDay:"오늘 LT",nextDay:"내일 LT",nextWeek:"dddd LT",lastDay:"어제 LT",lastWeek:"지난주 dddd LT",sameElse:"L"},relativeTime:{future:"%s 후",past:"%s 전",s:"몇 초",ss:"%d초",m:"1분",mm:"%d분",h:"한 시간",hh:"%d시간",d:"하루",dd:"%d일",M:"한 달",MM:"%d달",y:"일 년",yy:"%d년"},dayOfMonthOrdinalParse:/\d{1,2}(일|월|주)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"일";case"M":return e+"월";case"w":case"W":return e+"주";default:return e}},meridiemParse:/오전|오후/,isPM:function(e){return"오후"===e},meridiem:function(e,t,n){return e<12?"오전":"오후"}})}(n(5093))},8174:function(e,t,n){!function(e){"use strict";var t={1:"١",2:"٢",3:"٣",4:"٤",5:"٥",6:"٦",7:"٧",8:"٨",9:"٩",0:"٠"},n={"١":"1","٢":"2","٣":"3","٤":"4","٥":"5","٦":"6","٧":"7","٨":"8","٩":"9","٠":"0"},r=["کانونی دووەم","شوبات","ئازار","نیسان","ئایار","حوزەیران","تەمموز","ئاب","ئەیلوول","تشرینی یەكەم","تشرینی دووەم","كانونی یەکەم"];e.defineLocale("ku",{months:r,monthsShort:r,weekdays:"یه‌كشه‌ممه‌_دووشه‌ممه‌_سێشه‌ممه‌_چوارشه‌ممه‌_پێنجشه‌ممه‌_هه‌ینی_شه‌ممه‌".split("_"),weekdaysShort:"یه‌كشه‌م_دووشه‌م_سێشه‌م_چوارشه‌م_پێنجشه‌م_هه‌ینی_شه‌ممه‌".split("_"),weekdaysMin:"ی_د_س_چ_پ_ه_ش".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},meridiemParse:/ئێواره‌|به‌یانی/,isPM:function(e){return/ئێواره‌/.test(e)},meridiem:function(e,t,n){return e<12?"به‌یانی":"ئێواره‌"},calendar:{sameDay:"[ئه‌مرۆ كاتژمێر] LT",nextDay:"[به‌یانی كاتژمێر] LT",nextWeek:"dddd [كاتژمێر] LT",lastDay:"[دوێنێ كاتژمێر] LT",lastWeek:"dddd [كاتژمێر] LT",sameElse:"L"},relativeTime:{future:"له‌ %s",past:"%s",s:"چه‌ند چركه‌یه‌ك",ss:"چركه‌ %d",m:"یه‌ك خوله‌ك",mm:"%d خوله‌ك",h:"یه‌ك كاتژمێر",hh:"%d كاتژمێر",d:"یه‌ك ڕۆژ",dd:"%d ڕۆژ",M:"یه‌ك مانگ",MM:"%d مانگ",y:"یه‌ك ساڵ",yy:"%d ساڵ"},preparse:function(e){return e.replace(/[١٢٣٤٥٦٧٨٩٠]/g,(function(e){return n[e]})).replace(/،/g,",")},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]})).replace(/,/g,"،")},week:{dow:6,doy:12}})}(n(5093))},8474:function(e,t,n){!function(e){"use strict";var t={0:"-чү",1:"-чи",2:"-чи",3:"-чү",4:"-чү",5:"-чи",6:"-чы",7:"-чи",8:"-чи",9:"-чу",10:"-чу",20:"-чы",30:"-чу",40:"-чы",50:"-чү",60:"-чы",70:"-чи",80:"-чи",90:"-чу",100:"-чү"};e.defineLocale("ky",{months:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_"),monthsShort:"янв_фев_март_апр_май_июнь_июль_авг_сен_окт_ноя_дек".split("_"),weekdays:"Жекшемби_Дүйшөмбү_Шейшемби_Шаршемби_Бейшемби_Жума_Ишемби".split("_"),weekdaysShort:"Жек_Дүй_Шей_Шар_Бей_Жум_Ише".split("_"),weekdaysMin:"Жк_Дй_Шй_Шр_Бй_Жм_Иш".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Бүгүн саат] LT",nextDay:"[Эртең саат] LT",nextWeek:"dddd [саат] LT",lastDay:"[Кечээ саат] LT",lastWeek:"[Өткөн аптанын] dddd [күнү] [саат] LT",sameElse:"L"},relativeTime:{future:"%s ичинде",past:"%s мурун",s:"бирнече секунд",ss:"%d секунд",m:"бир мүнөт",mm:"%d мүнөт",h:"бир саат",hh:"%d саат",d:"бир күн",dd:"%d күн",M:"бир ай",MM:"%d ай",y:"бир жыл",yy:"%d жыл"},dayOfMonthOrdinalParse:/\d{1,2}-(чи|чы|чү|чу)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},9680:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={m:["eng Minutt","enger Minutt"],h:["eng Stonn","enger Stonn"],d:["een Dag","engem Dag"],M:["ee Mount","engem Mount"],y:["ee Joer","engem Joer"]};return t?a[n][0]:a[n][1]}function n(e){if(e=parseInt(e,10),isNaN(e))return!1;if(e<0)return!0;if(e<10)return 4<=e&&e<=7;if(e<100){var t=e%10;return n(0===t?e/10:t)}if(e<1e4){for(;e>=10;)e/=10;return n(e)}return n(e/=1e3)}e.defineLocale("lb",{months:"Januar_Februar_Mäerz_Abrëll_Mee_Juni_Juli_August_September_Oktober_November_Dezember".split("_"),monthsShort:"Jan._Febr._Mrz._Abr._Mee_Jun._Jul._Aug._Sept._Okt._Nov._Dez.".split("_"),monthsParseExact:!0,weekdays:"Sonndeg_Méindeg_Dënschdeg_Mëttwoch_Donneschdeg_Freideg_Samschdeg".split("_"),weekdaysShort:"So._Mé._Dë._Më._Do._Fr._Sa.".split("_"),weekdaysMin:"So_Mé_Dë_Më_Do_Fr_Sa".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm [Auer]",LTS:"H:mm:ss [Auer]",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm [Auer]",LLLL:"dddd, D. MMMM YYYY H:mm [Auer]"},calendar:{sameDay:"[Haut um] LT",sameElse:"L",nextDay:"[Muer um] LT",nextWeek:"dddd [um] LT",lastDay:"[Gëschter um] LT",lastWeek:function(){switch(this.day()){case 2:case 4:return"[Leschten] dddd [um] LT";default:return"[Leschte] dddd [um] LT"}}},relativeTime:{future:function(e){return n(e.substr(0,e.indexOf(" ")))?"a "+e:"an "+e},past:function(e){return n(e.substr(0,e.indexOf(" ")))?"viru "+e:"virun "+e},s:"e puer Sekonnen",ss:"%d Sekonnen",m:t,mm:"%d Minutten",h:t,hh:"%d Stonnen",d:t,dd:"%d Deeg",M:t,MM:"%d Méint",y:t,yy:"%d Joer"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},5867:function(e,t,n){!function(e){"use strict";e.defineLocale("lo",{months:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),monthsShort:"ມັງກອນ_ກຸມພາ_ມີນາ_ເມສາ_ພຶດສະພາ_ມິຖຸນາ_ກໍລະກົດ_ສິງຫາ_ກັນຍາ_ຕຸລາ_ພະຈິກ_ທັນວາ".split("_"),weekdays:"ອາທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysShort:"ທິດ_ຈັນ_ອັງຄານ_ພຸດ_ພະຫັດ_ສຸກ_ເສົາ".split("_"),weekdaysMin:"ທ_ຈ_ອຄ_ພ_ພຫ_ສກ_ສ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"ວັນdddd D MMMM YYYY HH:mm"},meridiemParse:/ຕອນເຊົ້າ|ຕອນແລງ/,isPM:function(e){return"ຕອນແລງ"===e},meridiem:function(e,t,n){return e<12?"ຕອນເຊົ້າ":"ຕອນແລງ"},calendar:{sameDay:"[ມື້ນີ້ເວລາ] LT",nextDay:"[ມື້ອື່ນເວລາ] LT",nextWeek:"[ວັນ]dddd[ໜ້າເວລາ] LT",lastDay:"[ມື້ວານນີ້ເວລາ] LT",lastWeek:"[ວັນ]dddd[ແລ້ວນີ້ເວລາ] LT",sameElse:"L"},relativeTime:{future:"ອີກ %s",past:"%sຜ່ານມາ",s:"ບໍ່ເທົ່າໃດວິນາທີ",ss:"%d ວິນາທີ",m:"1 ນາທີ",mm:"%d ນາທີ",h:"1 ຊົ່ວໂມງ",hh:"%d ຊົ່ວໂມງ",d:"1 ມື້",dd:"%d ມື້",M:"1 ເດືອນ",MM:"%d ເດືອນ",y:"1 ປີ",yy:"%d ປີ"},dayOfMonthOrdinalParse:/(ທີ່)\d{1,2}/,ordinal:function(e){return"ທີ່"+e}})}(n(5093))},5766:function(e,t,n){!function(e){"use strict";var t={ss:"sekundė_sekundžių_sekundes",m:"minutė_minutės_minutę",mm:"minutės_minučių_minutes",h:"valanda_valandos_valandą",hh:"valandos_valandų_valandas",d:"diena_dienos_dieną",dd:"dienos_dienų_dienas",M:"mėnuo_mėnesio_mėnesį",MM:"mėnesiai_mėnesių_mėnesius",y:"metai_metų_metus",yy:"metai_metų_metus"};function n(e,t,n,r){return t?a(n)[0]:r?a(n)[1]:a(n)[2]}function r(e){return e%10==0||e>10&&e<20}function a(e){return t[e].split("_")}function i(e,t,i,s){var o=e+" ";return 1===e?o+n(0,t,i[0],s):t?o+(r(e)?a(i)[1]:a(i)[0]):s?o+a(i)[1]:o+(r(e)?a(i)[1]:a(i)[2])}e.defineLocale("lt",{months:{format:"sausio_vasario_kovo_balandžio_gegužės_birželio_liepos_rugpjūčio_rugsėjo_spalio_lapkričio_gruodžio".split("_"),standalone:"sausis_vasaris_kovas_balandis_gegužė_birželis_liepa_rugpjūtis_rugsėjis_spalis_lapkritis_gruodis".split("_"),isFormat:/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?|MMMM?(\[[^\[\]]*\]|\s)+D[oD]?/},monthsShort:"sau_vas_kov_bal_geg_bir_lie_rgp_rgs_spa_lap_grd".split("_"),weekdays:{format:"sekmadienį_pirmadienį_antradienį_trečiadienį_ketvirtadienį_penktadienį_šeštadienį".split("_"),standalone:"sekmadienis_pirmadienis_antradienis_trečiadienis_ketvirtadienis_penktadienis_šeštadienis".split("_"),isFormat:/dddd HH:mm/},weekdaysShort:"Sek_Pir_Ant_Tre_Ket_Pen_Šeš".split("_"),weekdaysMin:"S_P_A_T_K_Pn_Š".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY [m.] MMMM D [d.]",LLL:"YYYY [m.] MMMM D [d.], HH:mm [val.]",LLLL:"YYYY [m.] MMMM D [d.], dddd, HH:mm [val.]",l:"YYYY-MM-DD",ll:"YYYY [m.] MMMM D [d.]",lll:"YYYY [m.] MMMM D [d.], HH:mm [val.]",llll:"YYYY [m.] MMMM D [d.], ddd, HH:mm [val.]"},calendar:{sameDay:"[Šiandien] LT",nextDay:"[Rytoj] LT",nextWeek:"dddd LT",lastDay:"[Vakar] LT",lastWeek:"[Praėjusį] dddd LT",sameElse:"L"},relativeTime:{future:"po %s",past:"prieš %s",s:function(e,t,n,r){return t?"kelios sekundės":r?"kelių sekundžių":"kelias sekundes"},ss:i,m:n,mm:i,h:n,hh:i,d:n,dd:i,M:n,MM:i,y:n,yy:i},dayOfMonthOrdinalParse:/\d{1,2}-oji/,ordinal:function(e){return e+"-oji"},week:{dow:1,doy:4}})}(n(5093))},9532:function(e,t,n){!function(e){"use strict";var t={ss:"sekundes_sekundēm_sekunde_sekundes".split("_"),m:"minūtes_minūtēm_minūte_minūtes".split("_"),mm:"minūtes_minūtēm_minūte_minūtes".split("_"),h:"stundas_stundām_stunda_stundas".split("_"),hh:"stundas_stundām_stunda_stundas".split("_"),d:"dienas_dienām_diena_dienas".split("_"),dd:"dienas_dienām_diena_dienas".split("_"),M:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),MM:"mēneša_mēnešiem_mēnesis_mēneši".split("_"),y:"gada_gadiem_gads_gadi".split("_"),yy:"gada_gadiem_gads_gadi".split("_")};function n(e,t,n){return n?t%10==1&&t%100!=11?e[2]:e[3]:t%10==1&&t%100!=11?e[0]:e[1]}function r(e,r,a){return e+" "+n(t[a],e,r)}function a(e,r,a){return n(t[a],e,r)}e.defineLocale("lv",{months:"janvāris_februāris_marts_aprīlis_maijs_jūnijs_jūlijs_augusts_septembris_oktobris_novembris_decembris".split("_"),monthsShort:"jan_feb_mar_apr_mai_jūn_jūl_aug_sep_okt_nov_dec".split("_"),weekdays:"svētdiena_pirmdiena_otrdiena_trešdiena_ceturtdiena_piektdiena_sestdiena".split("_"),weekdaysShort:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysMin:"Sv_P_O_T_C_Pk_S".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY.",LL:"YYYY. [gada] D. MMMM",LLL:"YYYY. [gada] D. MMMM, HH:mm",LLLL:"YYYY. [gada] D. MMMM, dddd, HH:mm"},calendar:{sameDay:"[Šodien pulksten] LT",nextDay:"[Rīt pulksten] LT",nextWeek:"dddd [pulksten] LT",lastDay:"[Vakar pulksten] LT",lastWeek:"[Pagājušā] dddd [pulksten] LT",sameElse:"L"},relativeTime:{future:"pēc %s",past:"pirms %s",s:function(e,t){return t?"dažas sekundes":"dažām sekundēm"},ss:r,m:a,mm:r,h:a,hh:r,d:a,dd:r,M:a,MM:r,y:a,yy:r},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},8076:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekund","sekunda","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],dd:["dan","dana","dana"],MM:["mjesec","mjeseca","mjeseci"],yy:["godina","godine","godina"]},correctGrammaticalCase:function(e,t){return 1===e?t[0]:e>=2&&e<=4?t[1]:t[2]},translate:function(e,n,r){var a=t.words[r];return 1===r.length?n?a[0]:a[1]:e+" "+t.correctGrammaticalCase(e,a)}};e.defineLocale("me",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedjelja_ponedjeljak_utorak_srijeda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sri._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sjutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedjelju] [u] LT";case 3:return"[u] [srijedu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedjelje] [u] LT","[prošlog] [ponedjeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srijede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"prije %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:"dan",dd:t.translate,M:"mjesec",MM:t.translate,y:"godinu",yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},1848:function(e,t,n){!function(e){"use strict";e.defineLocale("mi",{months:"Kohi-tāte_Hui-tanguru_Poutū-te-rangi_Paenga-whāwhā_Haratua_Pipiri_Hōngoingoi_Here-turi-kōkā_Mahuru_Whiringa-ā-nuku_Whiringa-ā-rangi_Hakihea".split("_"),monthsShort:"Kohi_Hui_Pou_Pae_Hara_Pipi_Hōngoi_Here_Mahu_Whi-nu_Whi-ra_Haki".split("_"),monthsRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,3}/i,monthsShortStrictRegex:/(?:['a-z\u0101\u014D\u016B]+\-?){1,2}/i,weekdays:"Rātapu_Mane_Tūrei_Wenerei_Tāite_Paraire_Hātarei".split("_"),weekdaysShort:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),weekdaysMin:"Ta_Ma_Tū_We_Tāi_Pa_Hā".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [i] HH:mm",LLLL:"dddd, D MMMM YYYY [i] HH:mm"},calendar:{sameDay:"[i teie mahana, i] LT",nextDay:"[apopo i] LT",nextWeek:"dddd [i] LT",lastDay:"[inanahi i] LT",lastWeek:"dddd [whakamutunga i] LT",sameElse:"L"},relativeTime:{future:"i roto i %s",past:"%s i mua",s:"te hēkona ruarua",ss:"%d hēkona",m:"he meneti",mm:"%d meneti",h:"te haora",hh:"%d haora",d:"he ra",dd:"%d ra",M:"he marama",MM:"%d marama",y:"he tau",yy:"%d tau"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},306:function(e,t,n){!function(e){"use strict";e.defineLocale("mk",{months:"јануари_февруари_март_април_мај_јуни_јули_август_септември_октомври_ноември_декември".split("_"),monthsShort:"јан_фев_мар_апр_мај_јун_јул_авг_сеп_окт_ное_дек".split("_"),weekdays:"недела_понеделник_вторник_среда_четврток_петок_сабота".split("_"),weekdaysShort:"нед_пон_вто_сре_чет_пет_саб".split("_"),weekdaysMin:"нe_пo_вт_ср_че_пе_сa".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[Денес во] LT",nextDay:"[Утре во] LT",nextWeek:"[Во] dddd [во] LT",lastDay:"[Вчера во] LT",lastWeek:function(){switch(this.day()){case 0:case 3:case 6:return"[Изминатата] dddd [во] LT";case 1:case 2:case 4:case 5:return"[Изминатиот] dddd [во] LT"}},sameElse:"L"},relativeTime:{future:"за %s",past:"пред %s",s:"неколку секунди",ss:"%d секунди",m:"една минута",mm:"%d минути",h:"еден час",hh:"%d часа",d:"еден ден",dd:"%d дена",M:"еден месец",MM:"%d месеци",y:"една година",yy:"%d години"},dayOfMonthOrdinalParse:/\d{1,2}-(ев|ен|ти|ви|ри|ми)/,ordinal:function(e){var t=e%10,n=e%100;return 0===e?e+"-ев":0===n?e+"-ен":n>10&&n<20?e+"-ти":1===t?e+"-ви":2===t?e+"-ри":7===t||8===t?e+"-ми":e+"-ти"},week:{dow:1,doy:7}})}(n(5093))},3739:function(e,t,n){!function(e){"use strict";e.defineLocale("ml",{months:"ജനുവരി_ഫെബ്രുവരി_മാർച്ച്_ഏപ്രിൽ_മേയ്_ജൂൺ_ജൂലൈ_ഓഗസ്റ്റ്_സെപ്റ്റംബർ_ഒക്ടോബർ_നവംബർ_ഡിസംബർ".split("_"),monthsShort:"ജനു._ഫെബ്രു._മാർ._ഏപ്രി._മേയ്_ജൂൺ_ജൂലൈ._ഓഗ._സെപ്റ്റ._ഒക്ടോ._നവം._ഡിസം.".split("_"),monthsParseExact:!0,weekdays:"ഞായറാഴ്ച_തിങ്കളാഴ്ച_ചൊവ്വാഴ്ച_ബുധനാഴ്ച_വ്യാഴാഴ്ച_വെള്ളിയാഴ്ച_ശനിയാഴ്ച".split("_"),weekdaysShort:"ഞായർ_തിങ്കൾ_ചൊവ്വ_ബുധൻ_വ്യാഴം_വെള്ളി_ശനി".split("_"),weekdaysMin:"ഞാ_തി_ചൊ_ബു_വ്യാ_വെ_ശ".split("_"),longDateFormat:{LT:"A h:mm -നു",LTS:"A h:mm:ss -നു",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm -നു",LLLL:"dddd, D MMMM YYYY, A h:mm -നു"},calendar:{sameDay:"[ഇന്ന്] LT",nextDay:"[നാളെ] LT",nextWeek:"dddd, LT",lastDay:"[ഇന്നലെ] LT",lastWeek:"[കഴിഞ്ഞ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s കഴിഞ്ഞ്",past:"%s മുൻപ്",s:"അൽപ നിമിഷങ്ങൾ",ss:"%d സെക്കൻഡ്",m:"ഒരു മിനിറ്റ്",mm:"%d മിനിറ്റ്",h:"ഒരു മണിക്കൂർ",hh:"%d മണിക്കൂർ",d:"ഒരു ദിവസം",dd:"%d ദിവസം",M:"ഒരു മാസം",MM:"%d മാസം",y:"ഒരു വർഷം",yy:"%d വർഷം"},meridiemParse:/രാത്രി|രാവിലെ|ഉച്ച കഴിഞ്ഞ്|വൈകുന്നേരം|രാത്രി/i,meridiemHour:function(e,t){return 12===e&&(e=0),"രാത്രി"===t&&e>=4||"ഉച്ച കഴിഞ്ഞ്"===t||"വൈകുന്നേരം"===t?e+12:e},meridiem:function(e,t,n){return e<4?"രാത്രി":e<12?"രാവിലെ":e<17?"ഉച്ച കഴിഞ്ഞ്":e<20?"വൈകുന്നേരം":"രാത്രി"}})}(n(5093))},9053:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){switch(n){case"s":return t?"хэдхэн секунд":"хэдхэн секундын";case"ss":return e+(t?" секунд":" секундын");case"m":case"mm":return e+(t?" минут":" минутын");case"h":case"hh":return e+(t?" цаг":" цагийн");case"d":case"dd":return e+(t?" өдөр":" өдрийн");case"M":case"MM":return e+(t?" сар":" сарын");case"y":case"yy":return e+(t?" жил":" жилийн");default:return e}}e.defineLocale("mn",{months:"Нэгдүгээр сар_Хоёрдугаар сар_Гуравдугаар сар_Дөрөвдүгээр сар_Тавдугаар сар_Зургадугаар сар_Долдугаар сар_Наймдугаар сар_Есдүгээр сар_Аравдугаар сар_Арван нэгдүгээр сар_Арван хоёрдугаар сар".split("_"),monthsShort:"1 сар_2 сар_3 сар_4 сар_5 сар_6 сар_7 сар_8 сар_9 сар_10 сар_11 сар_12 сар".split("_"),monthsParseExact:!0,weekdays:"Ням_Даваа_Мягмар_Лхагва_Пүрэв_Баасан_Бямба".split("_"),weekdaysShort:"Ням_Дав_Мяг_Лха_Пүр_Баа_Бям".split("_"),weekdaysMin:"Ня_Да_Мя_Лх_Пү_Ба_Бя".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY оны MMMMын D",LLL:"YYYY оны MMMMын D HH:mm",LLLL:"dddd, YYYY оны MMMMын D HH:mm"},meridiemParse:/ҮӨ|ҮХ/i,isPM:function(e){return"ҮХ"===e},meridiem:function(e,t,n){return e<12?"ҮӨ":"ҮХ"},calendar:{sameDay:"[Өнөөдөр] LT",nextDay:"[Маргааш] LT",nextWeek:"[Ирэх] dddd LT",lastDay:"[Өчигдөр] LT",lastWeek:"[Өнгөрсөн] dddd LT",sameElse:"L"},relativeTime:{future:"%s дараа",past:"%s өмнө",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2} өдөр/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+" өдөр";default:return e}}})}(n(5093))},6169:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};function r(e,t,n,r){var a="";if(t)switch(n){case"s":a="काही सेकंद";break;case"ss":a="%d सेकंद";break;case"m":a="एक मिनिट";break;case"mm":a="%d मिनिटे";break;case"h":a="एक तास";break;case"hh":a="%d तास";break;case"d":a="एक दिवस";break;case"dd":a="%d दिवस";break;case"M":a="एक महिना";break;case"MM":a="%d महिने";break;case"y":a="एक वर्ष";break;case"yy":a="%d वर्षे"}else switch(n){case"s":a="काही सेकंदां";break;case"ss":a="%d सेकंदां";break;case"m":a="एका मिनिटा";break;case"mm":a="%d मिनिटां";break;case"h":a="एका तासा";break;case"hh":a="%d तासां";break;case"d":a="एका दिवसा";break;case"dd":a="%d दिवसां";break;case"M":a="एका महिन्या";break;case"MM":a="%d महिन्यां";break;case"y":a="एका वर्षा";break;case"yy":a="%d वर्षां"}return a.replace(/%d/i,e)}e.defineLocale("mr",{months:"जानेवारी_फेब्रुवारी_मार्च_एप्रिल_मे_जून_जुलै_ऑगस्ट_सप्टेंबर_ऑक्टोबर_नोव्हेंबर_डिसेंबर".split("_"),monthsShort:"जाने._फेब्रु._मार्च._एप्रि._मे._जून._जुलै._ऑग._सप्टें._ऑक्टो._नोव्हें._डिसें.".split("_"),monthsParseExact:!0,weekdays:"रविवार_सोमवार_मंगळवार_बुधवार_गुरूवार_शुक्रवार_शनिवार".split("_"),weekdaysShort:"रवि_सोम_मंगळ_बुध_गुरू_शुक्र_शनि".split("_"),weekdaysMin:"र_सो_मं_बु_गु_शु_श".split("_"),longDateFormat:{LT:"A h:mm वाजता",LTS:"A h:mm:ss वाजता",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm वाजता",LLLL:"dddd, D MMMM YYYY, A h:mm वाजता"},calendar:{sameDay:"[आज] LT",nextDay:"[उद्या] LT",nextWeek:"dddd, LT",lastDay:"[काल] LT",lastWeek:"[मागील] dddd, LT",sameElse:"L"},relativeTime:{future:"%sमध्ये",past:"%sपूर्वी",s:r,ss:r,m:r,mm:r,h:r,hh:r,d:r,dd:r,M:r,MM:r,y:r,yy:r},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/पहाटे|सकाळी|दुपारी|सायंकाळी|रात्री/,meridiemHour:function(e,t){return 12===e&&(e=0),"पहाटे"===t||"सकाळी"===t?e:"दुपारी"===t||"सायंकाळी"===t||"रात्री"===t?e>=12?e:e+12:void 0},meridiem:function(e,t,n){return e>=0&&e<6?"पहाटे":e<12?"सकाळी":e<17?"दुपारी":e<20?"सायंकाळी":"रात्री"},week:{dow:0,doy:6}})}(n(5093))},2297:function(e,t,n){!function(e){"use strict";e.defineLocale("ms-my",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(5093))},3386:function(e,t,n){!function(e){"use strict";e.defineLocale("ms",{months:"Januari_Februari_Mac_April_Mei_Jun_Julai_Ogos_September_Oktober_November_Disember".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ogs_Sep_Okt_Nov_Dis".split("_"),weekdays:"Ahad_Isnin_Selasa_Rabu_Khamis_Jumaat_Sabtu".split("_"),weekdaysShort:"Ahd_Isn_Sel_Rab_Kha_Jum_Sab".split("_"),weekdaysMin:"Ah_Is_Sl_Rb_Km_Jm_Sb".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [pukul] HH.mm",LLLL:"dddd, D MMMM YYYY [pukul] HH.mm"},meridiemParse:/pagi|tengahari|petang|malam/,meridiemHour:function(e,t){return 12===e&&(e=0),"pagi"===t?e:"tengahari"===t?e>=11?e:e+12:"petang"===t||"malam"===t?e+12:void 0},meridiem:function(e,t,n){return e<11?"pagi":e<15?"tengahari":e<19?"petang":"malam"},calendar:{sameDay:"[Hari ini pukul] LT",nextDay:"[Esok pukul] LT",nextWeek:"dddd [pukul] LT",lastDay:"[Kelmarin pukul] LT",lastWeek:"dddd [lepas pukul] LT",sameElse:"L"},relativeTime:{future:"dalam %s",past:"%s yang lepas",s:"beberapa saat",ss:"%d saat",m:"seminit",mm:"%d minit",h:"sejam",hh:"%d jam",d:"sehari",dd:"%d hari",M:"sebulan",MM:"%d bulan",y:"setahun",yy:"%d tahun"},week:{dow:1,doy:7}})}(n(5093))},7075:function(e,t,n){!function(e){"use strict";e.defineLocale("mt",{months:"Jannar_Frar_Marzu_April_Mejju_Ġunju_Lulju_Awwissu_Settembru_Ottubru_Novembru_Diċembru".split("_"),monthsShort:"Jan_Fra_Mar_Apr_Mej_Ġun_Lul_Aww_Set_Ott_Nov_Diċ".split("_"),weekdays:"Il-Ħadd_It-Tnejn_It-Tlieta_L-Erbgħa_Il-Ħamis_Il-Ġimgħa_Is-Sibt".split("_"),weekdaysShort:"Ħad_Tne_Tli_Erb_Ħam_Ġim_Sib".split("_"),weekdaysMin:"Ħa_Tn_Tl_Er_Ħa_Ġi_Si".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Illum fil-]LT",nextDay:"[Għada fil-]LT",nextWeek:"dddd [fil-]LT",lastDay:"[Il-bieraħ fil-]LT",lastWeek:"dddd [li għadda] [fil-]LT",sameElse:"L"},relativeTime:{future:"f’ %s",past:"%s ilu",s:"ftit sekondi",ss:"%d sekondi",m:"minuta",mm:"%d minuti",h:"siegħa",hh:"%d siegħat",d:"ġurnata",dd:"%d ġranet",M:"xahar",MM:"%d xhur",y:"sena",yy:"%d sni"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},2264:function(e,t,n){!function(e){"use strict";var t={1:"၁",2:"၂",3:"၃",4:"၄",5:"၅",6:"၆",7:"၇",8:"၈",9:"၉",0:"၀"},n={"၁":"1","၂":"2","၃":"3","၄":"4","၅":"5","၆":"6","၇":"7","၈":"8","၉":"9","၀":"0"};e.defineLocale("my",{months:"ဇန်နဝါရီ_ဖေဖော်ဝါရီ_မတ်_ဧပြီ_မေ_ဇွန်_ဇူလိုင်_သြဂုတ်_စက်တင်ဘာ_အောက်တိုဘာ_နိုဝင်ဘာ_ဒီဇင်ဘာ".split("_"),monthsShort:"ဇန်_ဖေ_မတ်_ပြီ_မေ_ဇွန်_လိုင်_သြ_စက်_အောက်_နို_ဒီ".split("_"),weekdays:"တနင်္ဂနွေ_တနင်္လာ_အင်္ဂါ_ဗုဒ္ဓဟူး_ကြာသပတေး_သောကြာ_စနေ".split("_"),weekdaysShort:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),weekdaysMin:"နွေ_လာ_ဂါ_ဟူး_ကြာ_သော_နေ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ယနေ.] LT [မှာ]",nextDay:"[မနက်ဖြန်] LT [မှာ]",nextWeek:"dddd LT [မှာ]",lastDay:"[မနေ.က] LT [မှာ]",lastWeek:"[ပြီးခဲ့သော] dddd LT [မှာ]",sameElse:"L"},relativeTime:{future:"လာမည့် %s မှာ",past:"လွန်ခဲ့သော %s က",s:"စက္ကန်.အနည်းငယ်",ss:"%d စက္ကန့်",m:"တစ်မိနစ်",mm:"%d မိနစ်",h:"တစ်နာရီ",hh:"%d နာရီ",d:"တစ်ရက်",dd:"%d ရက်",M:"တစ်လ",MM:"%d လ",y:"တစ်နှစ်",yy:"%d နှစ်"},preparse:function(e){return e.replace(/[၁၂၃၄၅၆၇၈၉၀]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},week:{dow:1,doy:4}})}(n(5093))},2274:function(e,t,n){!function(e){"use strict";e.defineLocale("nb",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"søndag_mandag_tirsdag_onsdag_torsdag_fredag_lørdag".split("_"),weekdaysShort:"sø._ma._ti._on._to._fr._lø.".split("_"),weekdaysMin:"sø_ma_ti_on_to_fr_lø".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] HH:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[i dag kl.] LT",nextDay:"[i morgen kl.] LT",nextWeek:"dddd [kl.] LT",lastDay:"[i går kl.] LT",lastWeek:"[forrige] dddd [kl.] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s siden",s:"noen sekunder",ss:"%d sekunder",m:"ett minutt",mm:"%d minutter",h:"en time",hh:"%d timer",d:"en dag",dd:"%d dager",w:"en uke",ww:"%d uker",M:"en måned",MM:"%d måneder",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},8235:function(e,t,n){!function(e){"use strict";var t={1:"१",2:"२",3:"३",4:"४",5:"५",6:"६",7:"७",8:"८",9:"९",0:"०"},n={"१":"1","२":"2","३":"3","४":"4","५":"5","६":"6","७":"7","८":"8","९":"9","०":"0"};e.defineLocale("ne",{months:"जनवरी_फेब्रुवरी_मार्च_अप्रिल_मई_जुन_जुलाई_अगष्ट_सेप्टेम्बर_अक्टोबर_नोभेम्बर_डिसेम्बर".split("_"),monthsShort:"जन._फेब्रु._मार्च_अप्रि._मई_जुन_जुलाई._अग._सेप्ट._अक्टो._नोभे._डिसे.".split("_"),monthsParseExact:!0,weekdays:"आइतबार_सोमबार_मङ्गलबार_बुधबार_बिहिबार_शुक्रबार_शनिबार".split("_"),weekdaysShort:"आइत._सोम._मङ्गल._बुध._बिहि._शुक्र._शनि.".split("_"),weekdaysMin:"आ._सो._मं._बु._बि._शु._श.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"Aको h:mm बजे",LTS:"Aको h:mm:ss बजे",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, Aको h:mm बजे",LLLL:"dddd, D MMMM YYYY, Aको h:mm बजे"},preparse:function(e){return e.replace(/[१२३४५६७८९०]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/राति|बिहान|दिउँसो|साँझ/,meridiemHour:function(e,t){return 12===e&&(e=0),"राति"===t?e<4?e:e+12:"बिहान"===t?e:"दिउँसो"===t?e>=10?e:e+12:"साँझ"===t?e+12:void 0},meridiem:function(e,t,n){return e<3?"राति":e<12?"बिहान":e<16?"दिउँसो":e<20?"साँझ":"राति"},calendar:{sameDay:"[आज] LT",nextDay:"[भोलि] LT",nextWeek:"[आउँदो] dddd[,] LT",lastDay:"[हिजो] LT",lastWeek:"[गएको] dddd[,] LT",sameElse:"L"},relativeTime:{future:"%sमा",past:"%s अगाडि",s:"केही क्षण",ss:"%d सेकेण्ड",m:"एक मिनेट",mm:"%d मिनेट",h:"एक घण्टा",hh:"%d घण्टा",d:"एक दिन",dd:"%d दिन",M:"एक महिना",MM:"%d महिना",y:"एक बर्ष",yy:"%d बर्ष"},week:{dow:0,doy:6}})}(n(5093))},3784:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl-be",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},2572:function(e,t,n){!function(e){"use strict";var t="jan._feb._mrt._apr._mei_jun._jul._aug._sep._okt._nov._dec.".split("_"),n="jan_feb_mrt_apr_mei_jun_jul_aug_sep_okt_nov_dec".split("_"),r=[/^jan/i,/^feb/i,/^maart|mrt.?$/i,/^apr/i,/^mei$/i,/^jun[i.]?$/i,/^jul[i.]?$/i,/^aug/i,/^sep/i,/^okt/i,/^nov/i,/^dec/i],a=/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december|jan\.?|feb\.?|mrt\.?|apr\.?|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i;e.defineLocale("nl",{months:"januari_februari_maart_april_mei_juni_juli_augustus_september_oktober_november_december".split("_"),monthsShort:function(e,r){return e?/-MMM-/.test(r)?n[e.month()]:t[e.month()]:t},monthsRegex:a,monthsShortRegex:a,monthsStrictRegex:/^(januari|februari|maart|april|mei|ju[nl]i|augustus|september|oktober|november|december)/i,monthsShortStrictRegex:/^(jan\.?|feb\.?|mrt\.?|apr\.?|mei|ju[nl]\.?|aug\.?|sep\.?|okt\.?|nov\.?|dec\.?)/i,monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"zondag_maandag_dinsdag_woensdag_donderdag_vrijdag_zaterdag".split("_"),weekdaysShort:"zo._ma._di._wo._do._vr._za.".split("_"),weekdaysMin:"zo_ma_di_wo_do_vr_za".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD-MM-YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[vandaag om] LT",nextDay:"[morgen om] LT",nextWeek:"dddd [om] LT",lastDay:"[gisteren om] LT",lastWeek:"[afgelopen] dddd [om] LT",sameElse:"L"},relativeTime:{future:"over %s",past:"%s geleden",s:"een paar seconden",ss:"%d seconden",m:"één minuut",mm:"%d minuten",h:"één uur",hh:"%d uur",d:"één dag",dd:"%d dagen",w:"één week",ww:"%d weken",M:"één maand",MM:"%d maanden",y:"één jaar",yy:"%d jaar"},dayOfMonthOrdinalParse:/\d{1,2}(ste|de)/,ordinal:function(e){return e+(1===e||8===e||e>=20?"ste":"de")},week:{dow:1,doy:4}})}(n(5093))},4566:function(e,t,n){!function(e){"use strict";e.defineLocale("nn",{months:"januar_februar_mars_april_mai_juni_juli_august_september_oktober_november_desember".split("_"),monthsShort:"jan._feb._mars_apr._mai_juni_juli_aug._sep._okt._nov._des.".split("_"),monthsParseExact:!0,weekdays:"sundag_måndag_tysdag_onsdag_torsdag_fredag_laurdag".split("_"),weekdaysShort:"su._må._ty._on._to._fr._lau.".split("_"),weekdaysMin:"su_må_ty_on_to_fr_la".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY [kl.] H:mm",LLLL:"dddd D. MMMM YYYY [kl.] HH:mm"},calendar:{sameDay:"[I dag klokka] LT",nextDay:"[I morgon klokka] LT",nextWeek:"dddd [klokka] LT",lastDay:"[I går klokka] LT",lastWeek:"[Føregåande] dddd [klokka] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"%s sidan",s:"nokre sekund",ss:"%d sekund",m:"eit minutt",mm:"%d minutt",h:"ein time",hh:"%d timar",d:"ein dag",dd:"%d dagar",w:"ei veke",ww:"%d veker",M:"ein månad",MM:"%d månader",y:"eit år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},9330:function(e,t,n){!function(e){"use strict";e.defineLocale("oc-lnc",{months:{standalone:"genièr_febrièr_març_abril_mai_junh_julhet_agost_setembre_octòbre_novembre_decembre".split("_"),format:"de genièr_de febrièr_de març_d'abril_de mai_de junh_de julhet_d'agost_de setembre_d'octòbre_de novembre_de decembre".split("_"),isFormat:/D[oD]?(\s)+MMMM/},monthsShort:"gen._febr._març_abr._mai_junh_julh._ago._set._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"dimenge_diluns_dimars_dimècres_dijòus_divendres_dissabte".split("_"),weekdaysShort:"dg._dl._dm._dc._dj._dv._ds.".split("_"),weekdaysMin:"dg_dl_dm_dc_dj_dv_ds".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [de] YYYY",ll:"D MMM YYYY",LLL:"D MMMM [de] YYYY [a] H:mm",lll:"D MMM YYYY, H:mm",LLLL:"dddd D MMMM [de] YYYY [a] H:mm",llll:"ddd D MMM YYYY, H:mm"},calendar:{sameDay:"[uèi a] LT",nextDay:"[deman a] LT",nextWeek:"dddd [a] LT",lastDay:"[ièr a] LT",lastWeek:"dddd [passat a] LT",sameElse:"L"},relativeTime:{future:"d'aquí %s",past:"fa %s",s:"unas segondas",ss:"%d segondas",m:"una minuta",mm:"%d minutas",h:"una ora",hh:"%d oras",d:"un jorn",dd:"%d jorns",M:"un mes",MM:"%d meses",y:"un an",yy:"%d ans"},dayOfMonthOrdinalParse:/\d{1,2}(r|n|t|è|a)/,ordinal:function(e,t){var n=1===e?"r":2===e?"n":3===e?"r":4===e?"t":"è";return"w"!==t&&"W"!==t||(n="a"),e+n},week:{dow:1,doy:4}})}(n(5093))},9849:function(e,t,n){!function(e){"use strict";var t={1:"੧",2:"੨",3:"੩",4:"੪",5:"੫",6:"੬",7:"੭",8:"੮",9:"੯",0:"੦"},n={"੧":"1","੨":"2","੩":"3","੪":"4","੫":"5","੬":"6","੭":"7","੮":"8","੯":"9","੦":"0"};e.defineLocale("pa-in",{months:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),monthsShort:"ਜਨਵਰੀ_ਫ਼ਰਵਰੀ_ਮਾਰਚ_ਅਪ੍ਰੈਲ_ਮਈ_ਜੂਨ_ਜੁਲਾਈ_ਅਗਸਤ_ਸਤੰਬਰ_ਅਕਤੂਬਰ_ਨਵੰਬਰ_ਦਸੰਬਰ".split("_"),weekdays:"ਐਤਵਾਰ_ਸੋਮਵਾਰ_ਮੰਗਲਵਾਰ_ਬੁਧਵਾਰ_ਵੀਰਵਾਰ_ਸ਼ੁੱਕਰਵਾਰ_ਸ਼ਨੀਚਰਵਾਰ".split("_"),weekdaysShort:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),weekdaysMin:"ਐਤ_ਸੋਮ_ਮੰਗਲ_ਬੁਧ_ਵੀਰ_ਸ਼ੁਕਰ_ਸ਼ਨੀ".split("_"),longDateFormat:{LT:"A h:mm ਵਜੇ",LTS:"A h:mm:ss ਵਜੇ",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm ਵਜੇ",LLLL:"dddd, D MMMM YYYY, A h:mm ਵਜੇ"},calendar:{sameDay:"[ਅਜ] LT",nextDay:"[ਕਲ] LT",nextWeek:"[ਅਗਲਾ] dddd, LT",lastDay:"[ਕਲ] LT",lastWeek:"[ਪਿਛਲੇ] dddd, LT",sameElse:"L"},relativeTime:{future:"%s ਵਿੱਚ",past:"%s ਪਿਛਲੇ",s:"ਕੁਝ ਸਕਿੰਟ",ss:"%d ਸਕਿੰਟ",m:"ਇਕ ਮਿੰਟ",mm:"%d ਮਿੰਟ",h:"ਇੱਕ ਘੰਟਾ",hh:"%d ਘੰਟੇ",d:"ਇੱਕ ਦਿਨ",dd:"%d ਦਿਨ",M:"ਇੱਕ ਮਹੀਨਾ",MM:"%d ਮਹੀਨੇ",y:"ਇੱਕ ਸਾਲ",yy:"%d ਸਾਲ"},preparse:function(e){return e.replace(/[੧੨੩੪੫੬੭੮੯੦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/ਰਾਤ|ਸਵੇਰ|ਦੁਪਹਿਰ|ਸ਼ਾਮ/,meridiemHour:function(e,t){return 12===e&&(e=0),"ਰਾਤ"===t?e<4?e:e+12:"ਸਵੇਰ"===t?e:"ਦੁਪਹਿਰ"===t?e>=10?e:e+12:"ਸ਼ਾਮ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"ਰਾਤ":e<10?"ਸਵੇਰ":e<17?"ਦੁਪਹਿਰ":e<20?"ਸ਼ਾਮ":"ਰਾਤ"},week:{dow:0,doy:6}})}(n(5093))},4418:function(e,t,n){!function(e){"use strict";var t="styczeń_luty_marzec_kwiecień_maj_czerwiec_lipiec_sierpień_wrzesień_październik_listopad_grudzień".split("_"),n="stycznia_lutego_marca_kwietnia_maja_czerwca_lipca_sierpnia_września_października_listopada_grudnia".split("_"),r=[/^sty/i,/^lut/i,/^mar/i,/^kwi/i,/^maj/i,/^cze/i,/^lip/i,/^sie/i,/^wrz/i,/^paź/i,/^lis/i,/^gru/i];function a(e){return e%10<5&&e%10>1&&~~(e/10)%10!=1}function i(e,t,n){var r=e+" ";switch(n){case"ss":return r+(a(e)?"sekundy":"sekund");case"m":return t?"minuta":"minutę";case"mm":return r+(a(e)?"minuty":"minut");case"h":return t?"godzina":"godzinę";case"hh":return r+(a(e)?"godziny":"godzin");case"ww":return r+(a(e)?"tygodnie":"tygodni");case"MM":return r+(a(e)?"miesiące":"miesięcy");case"yy":return r+(a(e)?"lata":"lat")}}e.defineLocale("pl",{months:function(e,r){return e?/D MMMM/.test(r)?n[e.month()]:t[e.month()]:t},monthsShort:"sty_lut_mar_kwi_maj_cze_lip_sie_wrz_paź_lis_gru".split("_"),monthsParse:r,longMonthsParse:r,shortMonthsParse:r,weekdays:"niedziela_poniedziałek_wtorek_środa_czwartek_piątek_sobota".split("_"),weekdaysShort:"ndz_pon_wt_śr_czw_pt_sob".split("_"),weekdaysMin:"Nd_Pn_Wt_Śr_Cz_Pt_So".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Dziś o] LT",nextDay:"[Jutro o] LT",nextWeek:function(){switch(this.day()){case 0:return"[W niedzielę o] LT";case 2:return"[We wtorek o] LT";case 3:return"[W środę o] LT";case 6:return"[W sobotę o] LT";default:return"[W] dddd [o] LT"}},lastDay:"[Wczoraj o] LT",lastWeek:function(){switch(this.day()){case 0:return"[W zeszłą niedzielę o] LT";case 3:return"[W zeszłą środę o] LT";case 6:return"[W zeszłą sobotę o] LT";default:return"[W zeszły] dddd [o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"%s temu",s:"kilka sekund",ss:i,m:i,mm:i,h:i,hh:i,d:"1 dzień",dd:"%d dni",w:"tydzień",ww:i,M:"miesiąc",MM:i,y:"rok",yy:i},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},8303:function(e,t,n){!function(e){"use strict";e.defineLocale("pt-br",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"domingo_segunda-feira_terça-feira_quarta-feira_quinta-feira_sexta-feira_sábado".split("_"),weekdaysShort:"dom_seg_ter_qua_qui_sex_sáb".split("_"),weekdaysMin:"do_2ª_3ª_4ª_5ª_6ª_sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY [às] HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY [às] HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"poucos segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",invalidDate:"Data inválida"})}(n(5093))},9834:function(e,t,n){!function(e){"use strict";e.defineLocale("pt",{months:"janeiro_fevereiro_março_abril_maio_junho_julho_agosto_setembro_outubro_novembro_dezembro".split("_"),monthsShort:"jan_fev_mar_abr_mai_jun_jul_ago_set_out_nov_dez".split("_"),weekdays:"Domingo_Segunda-feira_Terça-feira_Quarta-feira_Quinta-feira_Sexta-feira_Sábado".split("_"),weekdaysShort:"Dom_Seg_Ter_Qua_Qui_Sex_Sáb".split("_"),weekdaysMin:"Do_2ª_3ª_4ª_5ª_6ª_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D [de] MMMM [de] YYYY",LLL:"D [de] MMMM [de] YYYY HH:mm",LLLL:"dddd, D [de] MMMM [de] YYYY HH:mm"},calendar:{sameDay:"[Hoje às] LT",nextDay:"[Amanhã às] LT",nextWeek:"dddd [às] LT",lastDay:"[Ontem às] LT",lastWeek:function(){return 0===this.day()||6===this.day()?"[Último] dddd [às] LT":"[Última] dddd [às] LT"},sameElse:"L"},relativeTime:{future:"em %s",past:"há %s",s:"segundos",ss:"%d segundos",m:"um minuto",mm:"%d minutos",h:"uma hora",hh:"%d horas",d:"um dia",dd:"%d dias",w:"uma semana",ww:"%d semanas",M:"um mês",MM:"%d meses",y:"um ano",yy:"%d anos"},dayOfMonthOrdinalParse:/\d{1,2}º/,ordinal:"%dº",week:{dow:1,doy:4}})}(n(5093))},4457:function(e,t,n){!function(e){"use strict";function t(e,t,n){var r=" ";return(e%100>=20||e>=100&&e%100==0)&&(r=" de "),e+r+{ss:"secunde",mm:"minute",hh:"ore",dd:"zile",ww:"săptămâni",MM:"luni",yy:"ani"}[n]}e.defineLocale("ro",{months:"ianuarie_februarie_martie_aprilie_mai_iunie_iulie_august_septembrie_octombrie_noiembrie_decembrie".split("_"),monthsShort:"ian._feb._mart._apr._mai_iun._iul._aug._sept._oct._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"duminică_luni_marți_miercuri_joi_vineri_sâmbătă".split("_"),weekdaysShort:"Dum_Lun_Mar_Mie_Joi_Vin_Sâm".split("_"),weekdaysMin:"Du_Lu_Ma_Mi_Jo_Vi_Sâ".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY H:mm",LLLL:"dddd, D MMMM YYYY H:mm"},calendar:{sameDay:"[azi la] LT",nextDay:"[mâine la] LT",nextWeek:"dddd [la] LT",lastDay:"[ieri la] LT",lastWeek:"[fosta] dddd [la] LT",sameElse:"L"},relativeTime:{future:"peste %s",past:"%s în urmă",s:"câteva secunde",ss:t,m:"un minut",mm:t,h:"o oră",hh:t,d:"o zi",dd:t,w:"o săptămână",ww:t,M:"o lună",MM:t,y:"un an",yy:t},week:{dow:1,doy:7}})}(n(5093))},2271:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"минута":"минуту":e+" "+(r=+e,a={ss:t?"секунда_секунды_секунд":"секунду_секунды_секунд",mm:t?"минута_минуты_минут":"минуту_минуты_минут",hh:"час_часа_часов",dd:"день_дня_дней",ww:"неделя_недели_недель",MM:"месяц_месяца_месяцев",yy:"год_года_лет"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}var n=[/^янв/i,/^фев/i,/^мар/i,/^апр/i,/^ма[йя]/i,/^июн/i,/^июл/i,/^авг/i,/^сен/i,/^окт/i,/^ноя/i,/^дек/i];e.defineLocale("ru",{months:{format:"января_февраля_марта_апреля_мая_июня_июля_августа_сентября_октября_ноября_декабря".split("_"),standalone:"январь_февраль_март_апрель_май_июнь_июль_август_сентябрь_октябрь_ноябрь_декабрь".split("_")},monthsShort:{format:"янв._февр._мар._апр._мая_июня_июля_авг._сент._окт._нояб._дек.".split("_"),standalone:"янв._февр._март_апр._май_июнь_июль_авг._сент._окт._нояб._дек.".split("_")},weekdays:{standalone:"воскресенье_понедельник_вторник_среда_четверг_пятница_суббота".split("_"),format:"воскресенье_понедельник_вторник_среду_четверг_пятницу_субботу".split("_"),isFormat:/\[ ?[Вв] ?(?:прошлую|следующую|эту)? ?] ?dddd/},weekdaysShort:"вс_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"вс_пн_вт_ср_чт_пт_сб".split("_"),monthsParse:n,longMonthsParse:n,shortMonthsParse:n,monthsRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsShortRegex:/^(январ[ья]|янв\.?|феврал[ья]|февр?\.?|марта?|мар\.?|апрел[ья]|апр\.?|ма[йя]|июн[ья]|июн\.?|июл[ья]|июл\.?|августа?|авг\.?|сентябр[ья]|сент?\.?|октябр[ья]|окт\.?|ноябр[ья]|нояб?\.?|декабр[ья]|дек\.?)/i,monthsStrictRegex:/^(январ[яь]|феврал[яь]|марта?|апрел[яь]|ма[яй]|июн[яь]|июл[яь]|августа?|сентябр[яь]|октябр[яь]|ноябр[яь]|декабр[яь])/i,monthsShortStrictRegex:/^(янв\.|февр?\.|мар[т.]|апр\.|ма[яй]|июн[ья.]|июл[ья.]|авг\.|сент?\.|окт\.|нояб?\.|дек\.)/i,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY г.",LLL:"D MMMM YYYY г., H:mm",LLLL:"dddd, D MMMM YYYY г., H:mm"},calendar:{sameDay:"[Сегодня, в] LT",nextDay:"[Завтра, в] LT",lastDay:"[Вчера, в] LT",nextWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В следующее] dddd, [в] LT";case 1:case 2:case 4:return"[В следующий] dddd, [в] LT";case 3:case 5:case 6:return"[В следующую] dddd, [в] LT"}},lastWeek:function(e){if(e.week()===this.week())return 2===this.day()?"[Во] dddd, [в] LT":"[В] dddd, [в] LT";switch(this.day()){case 0:return"[В прошлое] dddd, [в] LT";case 1:case 2:case 4:return"[В прошлый] dddd, [в] LT";case 3:case 5:case 6:return"[В прошлую] dddd, [в] LT"}},sameElse:"L"},relativeTime:{future:"через %s",past:"%s назад",s:"несколько секунд",ss:t,m:t,mm:t,h:"час",hh:t,d:"день",dd:t,w:"неделя",ww:t,M:"месяц",MM:t,y:"год",yy:t},meridiemParse:/ночи|утра|дня|вечера/i,isPM:function(e){return/^(дня|вечера)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночи":e<12?"утра":e<17?"дня":"вечера"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го|я)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":return e+"-й";case"D":return e+"-го";case"w":case"W":return e+"-я";default:return e}},week:{dow:1,doy:4}})}(n(5093))},1221:function(e,t,n){!function(e){"use strict";var t=["جنوري","فيبروري","مارچ","اپريل","مئي","جون","جولاءِ","آگسٽ","سيپٽمبر","آڪٽوبر","نومبر","ڊسمبر"],n=["آچر","سومر","اڱارو","اربع","خميس","جمع","ڇنڇر"];e.defineLocale("sd",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[اڄ] LT",nextDay:"[سڀاڻي] LT",nextWeek:"dddd [اڳين هفتي تي] LT",lastDay:"[ڪالهه] LT",lastWeek:"[گزريل هفتي] dddd [تي] LT",sameElse:"L"},relativeTime:{future:"%s پوء",past:"%s اڳ",s:"چند سيڪنڊ",ss:"%d سيڪنڊ",m:"هڪ منٽ",mm:"%d منٽ",h:"هڪ ڪلاڪ",hh:"%d ڪلاڪ",d:"هڪ ڏينهن",dd:"%d ڏينهن",M:"هڪ مهينو",MM:"%d مهينا",y:"هڪ سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(5093))},3478:function(e,t,n){!function(e){"use strict";e.defineLocale("se",{months:"ođđajagemánnu_guovvamánnu_njukčamánnu_cuoŋománnu_miessemánnu_geassemánnu_suoidnemánnu_borgemánnu_čakčamánnu_golggotmánnu_skábmamánnu_juovlamánnu".split("_"),monthsShort:"ođđj_guov_njuk_cuo_mies_geas_suoi_borg_čakč_golg_skáb_juov".split("_"),weekdays:"sotnabeaivi_vuossárga_maŋŋebárga_gaskavahkku_duorastat_bearjadat_lávvardat".split("_"),weekdaysShort:"sotn_vuos_maŋ_gask_duor_bear_láv".split("_"),weekdaysMin:"s_v_m_g_d_b_L".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"MMMM D. [b.] YYYY",LLL:"MMMM D. [b.] YYYY [ti.] HH:mm",LLLL:"dddd, MMMM D. [b.] YYYY [ti.] HH:mm"},calendar:{sameDay:"[otne ti] LT",nextDay:"[ihttin ti] LT",nextWeek:"dddd [ti] LT",lastDay:"[ikte ti] LT",lastWeek:"[ovddit] dddd [ti] LT",sameElse:"L"},relativeTime:{future:"%s geažes",past:"maŋit %s",s:"moadde sekunddat",ss:"%d sekunddat",m:"okta minuhta",mm:"%d minuhtat",h:"okta diimmu",hh:"%d diimmut",d:"okta beaivi",dd:"%d beaivvit",M:"okta mánnu",MM:"%d mánut",y:"okta jahki",yy:"%d jagit"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},7538:function(e,t,n){!function(e){"use strict";e.defineLocale("si",{months:"ජනවාරි_පෙබරවාරි_මාර්තු_අප්‍රේල්_මැයි_ජූනි_ජූලි_අගෝස්තු_සැප්තැම්බර්_ඔක්තෝබර්_නොවැම්බර්_දෙසැම්බර්".split("_"),monthsShort:"ජන_පෙබ_මාර්_අප්_මැයි_ජූනි_ජූලි_අගෝ_සැප්_ඔක්_නොවැ_දෙසැ".split("_"),weekdays:"ඉරිදා_සඳුදා_අඟහරුවාදා_බදාදා_බ්‍රහස්පතින්දා_සිකුරාදා_සෙනසුරාදා".split("_"),weekdaysShort:"ඉරි_සඳු_අඟ_බදා_බ්‍රහ_සිකු_සෙන".split("_"),weekdaysMin:"ඉ_ස_අ_බ_බ්‍ර_සි_සෙ".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"a h:mm",LTS:"a h:mm:ss",L:"YYYY/MM/DD",LL:"YYYY MMMM D",LLL:"YYYY MMMM D, a h:mm",LLLL:"YYYY MMMM D [වැනි] dddd, a h:mm:ss"},calendar:{sameDay:"[අද] LT[ට]",nextDay:"[හෙට] LT[ට]",nextWeek:"dddd LT[ට]",lastDay:"[ඊයේ] LT[ට]",lastWeek:"[පසුගිය] dddd LT[ට]",sameElse:"L"},relativeTime:{future:"%sකින්",past:"%sකට පෙර",s:"තත්පර කිහිපය",ss:"තත්පර %d",m:"මිනිත්තුව",mm:"මිනිත්තු %d",h:"පැය",hh:"පැය %d",d:"දිනය",dd:"දින %d",M:"මාසය",MM:"මාස %d",y:"වසර",yy:"වසර %d"},dayOfMonthOrdinalParse:/\d{1,2} වැනි/,ordinal:function(e){return e+" වැනි"},meridiemParse:/පෙර වරු|පස් වරු|පෙ.ව|ප.ව./,isPM:function(e){return"ප.ව."===e||"පස් වරු"===e},meridiem:function(e,t,n){return e>11?n?"ප.ව.":"පස් වරු":n?"පෙ.ව.":"පෙර වරු"}})}(n(5093))},5784:function(e,t,n){!function(e){"use strict";var t="január_február_marec_apríl_máj_jún_júl_august_september_október_november_december".split("_"),n="jan_feb_mar_apr_máj_jún_júl_aug_sep_okt_nov_dec".split("_");function r(e){return e>1&&e<5}function a(e,t,n,a){var i=e+" ";switch(n){case"s":return t||a?"pár sekúnd":"pár sekundami";case"ss":return t||a?i+(r(e)?"sekundy":"sekúnd"):i+"sekundami";case"m":return t?"minúta":a?"minútu":"minútou";case"mm":return t||a?i+(r(e)?"minúty":"minút"):i+"minútami";case"h":return t?"hodina":a?"hodinu":"hodinou";case"hh":return t||a?i+(r(e)?"hodiny":"hodín"):i+"hodinami";case"d":return t||a?"deň":"dňom";case"dd":return t||a?i+(r(e)?"dni":"dní"):i+"dňami";case"M":return t||a?"mesiac":"mesiacom";case"MM":return t||a?i+(r(e)?"mesiace":"mesiacov"):i+"mesiacmi";case"y":return t||a?"rok":"rokom";case"yy":return t||a?i+(r(e)?"roky":"rokov"):i+"rokmi"}}e.defineLocale("sk",{months:t,monthsShort:n,weekdays:"nedeľa_pondelok_utorok_streda_štvrtok_piatok_sobota".split("_"),weekdaysShort:"ne_po_ut_st_št_pi_so".split("_"),weekdaysMin:"ne_po_ut_st_št_pi_so".split("_"),longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD.MM.YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd D. MMMM YYYY H:mm"},calendar:{sameDay:"[dnes o] LT",nextDay:"[zajtra o] LT",nextWeek:function(){switch(this.day()){case 0:return"[v nedeľu o] LT";case 1:case 2:return"[v] dddd [o] LT";case 3:return"[v stredu o] LT";case 4:return"[vo štvrtok o] LT";case 5:return"[v piatok o] LT";case 6:return"[v sobotu o] LT"}},lastDay:"[včera o] LT",lastWeek:function(){switch(this.day()){case 0:return"[minulú nedeľu o] LT";case 1:case 2:case 4:case 5:return"[minulý] dddd [o] LT";case 3:return"[minulú stredu o] LT";case 6:return"[minulú sobotu o] LT"}},sameElse:"L"},relativeTime:{future:"za %s",past:"pred %s",s:a,ss:a,m:a,mm:a,h:a,hh:a,d:a,dd:a,M:a,MM:a,y:a,yy:a},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},6637:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a=e+" ";switch(n){case"s":return t||r?"nekaj sekund":"nekaj sekundami";case"ss":return a+(1===e?t?"sekundo":"sekundi":2===e?t||r?"sekundi":"sekundah":e<5?t||r?"sekunde":"sekundah":"sekund");case"m":return t?"ena minuta":"eno minuto";case"mm":return a+(1===e?t?"minuta":"minuto":2===e?t||r?"minuti":"minutama":e<5?t||r?"minute":"minutami":t||r?"minut":"minutami");case"h":return t?"ena ura":"eno uro";case"hh":return a+(1===e?t?"ura":"uro":2===e?t||r?"uri":"urama":e<5?t||r?"ure":"urami":t||r?"ur":"urami");case"d":return t||r?"en dan":"enim dnem";case"dd":return a+(1===e?t||r?"dan":"dnem":2===e?t||r?"dni":"dnevoma":t||r?"dni":"dnevi");case"M":return t||r?"en mesec":"enim mesecem";case"MM":return a+(1===e?t||r?"mesec":"mesecem":2===e?t||r?"meseca":"mesecema":e<5?t||r?"mesece":"meseci":t||r?"mesecev":"meseci");case"y":return t||r?"eno leto":"enim letom";case"yy":return a+(1===e?t||r?"leto":"letom":2===e?t||r?"leti":"letoma":e<5?t||r?"leta":"leti":t||r?"let":"leti")}}e.defineLocale("sl",{months:"januar_februar_marec_april_maj_junij_julij_avgust_september_oktober_november_december".split("_"),monthsShort:"jan._feb._mar._apr._maj._jun._jul._avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljek_torek_sreda_četrtek_petek_sobota".split("_"),weekdaysShort:"ned._pon._tor._sre._čet._pet._sob.".split("_"),weekdaysMin:"ne_po_to_sr_če_pe_so".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD. MM. YYYY",LL:"D. MMMM YYYY",LLL:"D. MMMM YYYY H:mm",LLLL:"dddd, D. MMMM YYYY H:mm"},calendar:{sameDay:"[danes ob] LT",nextDay:"[jutri ob] LT",nextWeek:function(){switch(this.day()){case 0:return"[v] [nedeljo] [ob] LT";case 3:return"[v] [sredo] [ob] LT";case 6:return"[v] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[v] dddd [ob] LT"}},lastDay:"[včeraj ob] LT",lastWeek:function(){switch(this.day()){case 0:return"[prejšnjo] [nedeljo] [ob] LT";case 3:return"[prejšnjo] [sredo] [ob] LT";case 6:return"[prejšnjo] [soboto] [ob] LT";case 1:case 2:case 4:case 5:return"[prejšnji] dddd [ob] LT"}},sameElse:"L"},relativeTime:{future:"čez %s",past:"pred %s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},6794:function(e,t,n){!function(e){"use strict";e.defineLocale("sq",{months:"Janar_Shkurt_Mars_Prill_Maj_Qershor_Korrik_Gusht_Shtator_Tetor_Nëntor_Dhjetor".split("_"),monthsShort:"Jan_Shk_Mar_Pri_Maj_Qer_Kor_Gus_Sht_Tet_Nën_Dhj".split("_"),weekdays:"E Diel_E Hënë_E Martë_E Mërkurë_E Enjte_E Premte_E Shtunë".split("_"),weekdaysShort:"Die_Hën_Mar_Mër_Enj_Pre_Sht".split("_"),weekdaysMin:"D_H_Ma_Më_E_P_Sh".split("_"),weekdaysParseExact:!0,meridiemParse:/PD|MD/,isPM:function(e){return"M"===e.charAt(0)},meridiem:function(e,t,n){return e<12?"PD":"MD"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Sot në] LT",nextDay:"[Nesër në] LT",nextWeek:"dddd [në] LT",lastDay:"[Dje në] LT",lastWeek:"dddd [e kaluar në] LT",sameElse:"L"},relativeTime:{future:"në %s",past:"%s më parë",s:"disa sekonda",ss:"%d sekonda",m:"një minutë",mm:"%d minuta",h:"një orë",hh:"%d orë",d:"një ditë",dd:"%d ditë",M:"një muaj",MM:"%d muaj",y:"një vit",yy:"%d vite"},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},3322:function(e,t,n){!function(e){"use strict";var t={words:{ss:["секунда","секунде","секунди"],m:["један минут","једног минута"],mm:["минут","минута","минута"],h:["један сат","једног сата"],hh:["сат","сата","сати"],d:["један дан","једног дана"],dd:["дан","дана","дана"],M:["један месец","једног месеца"],MM:["месец","месеца","месеци"],y:["једну годину","једне године"],yy:["годину","године","година"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,s=t.words[r];return 1===r.length?"y"===r&&n?"једна година":a||n?s[0]:s[1]:(i=t.correctGrammaticalCase(e,s),"yy"===r&&n&&"годину"===i?e+" година":e+" "+i)}};e.defineLocale("sr-cyrl",{months:"јануар_фебруар_март_април_мај_јун_јул_август_септембар_октобар_новембар_децембар".split("_"),monthsShort:"јан._феб._мар._апр._мај_јун_јул_авг._сеп._окт._нов._дец.".split("_"),monthsParseExact:!0,weekdays:"недеља_понедељак_уторак_среда_четвртак_петак_субота".split("_"),weekdaysShort:"нед._пон._уто._сре._чет._пет._суб.".split("_"),weekdaysMin:"не_по_ут_ср_че_пе_су".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[данас у] LT",nextDay:"[сутра у] LT",nextWeek:function(){switch(this.day()){case 0:return"[у] [недељу] [у] LT";case 3:return"[у] [среду] [у] LT";case 6:return"[у] [суботу] [у] LT";case 1:case 2:case 4:case 5:return"[у] dddd [у] LT"}},lastDay:"[јуче у] LT",lastWeek:function(){return["[прошле] [недеље] [у] LT","[прошлог] [понедељка] [у] LT","[прошлог] [уторка] [у] LT","[прошле] [среде] [у] LT","[прошлог] [четвртка] [у] LT","[прошлог] [петка] [у] LT","[прошле] [суботе] [у] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"за %s",past:"пре %s",s:"неколико секунди",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},5719:function(e,t,n){!function(e){"use strict";var t={words:{ss:["sekunda","sekunde","sekundi"],m:["jedan minut","jednog minuta"],mm:["minut","minuta","minuta"],h:["jedan sat","jednog sata"],hh:["sat","sata","sati"],d:["jedan dan","jednog dana"],dd:["dan","dana","dana"],M:["jedan mesec","jednog meseca"],MM:["mesec","meseca","meseci"],y:["jednu godinu","jedne godine"],yy:["godinu","godine","godina"]},correctGrammaticalCase:function(e,t){return e%10>=1&&e%10<=4&&(e%100<10||e%100>=20)?e%10==1?t[0]:t[1]:t[2]},translate:function(e,n,r,a){var i,s=t.words[r];return 1===r.length?"y"===r&&n?"jedna godina":a||n?s[0]:s[1]:(i=t.correctGrammaticalCase(e,s),"yy"===r&&n&&"godinu"===i?e+" godina":e+" "+i)}};e.defineLocale("sr",{months:"januar_februar_mart_april_maj_jun_jul_avgust_septembar_oktobar_novembar_decembar".split("_"),monthsShort:"jan._feb._mar._apr._maj_jun_jul_avg._sep._okt._nov._dec.".split("_"),monthsParseExact:!0,weekdays:"nedelja_ponedeljak_utorak_sreda_četvrtak_petak_subota".split("_"),weekdaysShort:"ned._pon._uto._sre._čet._pet._sub.".split("_"),weekdaysMin:"ne_po_ut_sr_če_pe_su".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"D. M. YYYY.",LL:"D. MMMM YYYY.",LLL:"D. MMMM YYYY. H:mm",LLLL:"dddd, D. MMMM YYYY. H:mm"},calendar:{sameDay:"[danas u] LT",nextDay:"[sutra u] LT",nextWeek:function(){switch(this.day()){case 0:return"[u] [nedelju] [u] LT";case 3:return"[u] [sredu] [u] LT";case 6:return"[u] [subotu] [u] LT";case 1:case 2:case 4:case 5:return"[u] dddd [u] LT"}},lastDay:"[juče u] LT",lastWeek:function(){return["[prošle] [nedelje] [u] LT","[prošlog] [ponedeljka] [u] LT","[prošlog] [utorka] [u] LT","[prošle] [srede] [u] LT","[prošlog] [četvrtka] [u] LT","[prošlog] [petka] [u] LT","[prošle] [subote] [u] LT"][this.day()]},sameElse:"L"},relativeTime:{future:"za %s",past:"pre %s",s:"nekoliko sekundi",ss:t.translate,m:t.translate,mm:t.translate,h:t.translate,hh:t.translate,d:t.translate,dd:t.translate,M:t.translate,MM:t.translate,y:t.translate,yy:t.translate},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:7}})}(n(5093))},6e3:function(e,t,n){!function(e){"use strict";e.defineLocale("ss",{months:"Bhimbidvwane_Indlovana_Indlov'lenkhulu_Mabasa_Inkhwekhweti_Inhlaba_Kholwane_Ingci_Inyoni_Imphala_Lweti_Ingongoni".split("_"),monthsShort:"Bhi_Ina_Inu_Mab_Ink_Inh_Kho_Igc_Iny_Imp_Lwe_Igo".split("_"),weekdays:"Lisontfo_Umsombuluko_Lesibili_Lesitsatfu_Lesine_Lesihlanu_Umgcibelo".split("_"),weekdaysShort:"Lis_Umb_Lsb_Les_Lsi_Lsh_Umg".split("_"),weekdaysMin:"Li_Us_Lb_Lt_Ls_Lh_Ug".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Namuhla nga] LT",nextDay:"[Kusasa nga] LT",nextWeek:"dddd [nga] LT",lastDay:"[Itolo nga] LT",lastWeek:"dddd [leliphelile] [nga] LT",sameElse:"L"},relativeTime:{future:"nga %s",past:"wenteka nga %s",s:"emizuzwana lomcane",ss:"%d mzuzwana",m:"umzuzu",mm:"%d emizuzu",h:"lihora",hh:"%d emahora",d:"lilanga",dd:"%d emalanga",M:"inyanga",MM:"%d tinyanga",y:"umnyaka",yy:"%d iminyaka"},meridiemParse:/ekuseni|emini|entsambama|ebusuku/,meridiem:function(e,t,n){return e<11?"ekuseni":e<15?"emini":e<19?"entsambama":"ebusuku"},meridiemHour:function(e,t){return 12===e&&(e=0),"ekuseni"===t?e:"emini"===t?e>=11?e:e+12:"entsambama"===t||"ebusuku"===t?0===e?0:e+12:void 0},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:"%d",week:{dow:1,doy:4}})}(n(5093))},1011:function(e,t,n){!function(e){"use strict";e.defineLocale("sv",{months:"januari_februari_mars_april_maj_juni_juli_augusti_september_oktober_november_december".split("_"),monthsShort:"jan_feb_mar_apr_maj_jun_jul_aug_sep_okt_nov_dec".split("_"),weekdays:"söndag_måndag_tisdag_onsdag_torsdag_fredag_lördag".split("_"),weekdaysShort:"sön_mån_tis_ons_tor_fre_lör".split("_"),weekdaysMin:"sö_må_ti_on_to_fr_lö".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"D MMMM YYYY",LLL:"D MMMM YYYY [kl.] HH:mm",LLLL:"dddd D MMMM YYYY [kl.] HH:mm",lll:"D MMM YYYY HH:mm",llll:"ddd D MMM YYYY HH:mm"},calendar:{sameDay:"[Idag] LT",nextDay:"[Imorgon] LT",lastDay:"[Igår] LT",nextWeek:"[På] dddd LT",lastWeek:"[I] dddd[s] LT",sameElse:"L"},relativeTime:{future:"om %s",past:"för %s sedan",s:"några sekunder",ss:"%d sekunder",m:"en minut",mm:"%d minuter",h:"en timme",hh:"%d timmar",d:"en dag",dd:"%d dagar",M:"en månad",MM:"%d månader",y:"ett år",yy:"%d år"},dayOfMonthOrdinalParse:/\d{1,2}(\:e|\:a)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?":e":1===t||2===t?":a":":e")},week:{dow:1,doy:4}})}(n(5093))},748:function(e,t,n){!function(e){"use strict";e.defineLocale("sw",{months:"Januari_Februari_Machi_Aprili_Mei_Juni_Julai_Agosti_Septemba_Oktoba_Novemba_Desemba".split("_"),monthsShort:"Jan_Feb_Mac_Apr_Mei_Jun_Jul_Ago_Sep_Okt_Nov_Des".split("_"),weekdays:"Jumapili_Jumatatu_Jumanne_Jumatano_Alhamisi_Ijumaa_Jumamosi".split("_"),weekdaysShort:"Jpl_Jtat_Jnne_Jtan_Alh_Ijm_Jmos".split("_"),weekdaysMin:"J2_J3_J4_J5_Al_Ij_J1".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"hh:mm A",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[leo saa] LT",nextDay:"[kesho saa] LT",nextWeek:"[wiki ijayo] dddd [saat] LT",lastDay:"[jana] LT",lastWeek:"[wiki iliyopita] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s baadaye",past:"tokea %s",s:"hivi punde",ss:"sekunde %d",m:"dakika moja",mm:"dakika %d",h:"saa limoja",hh:"masaa %d",d:"siku moja",dd:"siku %d",M:"mwezi mmoja",MM:"miezi %d",y:"mwaka mmoja",yy:"miaka %d"},week:{dow:1,doy:7}})}(n(5093))},1025:function(e,t,n){!function(e){"use strict";var t={1:"௧",2:"௨",3:"௩",4:"௪",5:"௫",6:"௬",7:"௭",8:"௮",9:"௯",0:"௦"},n={"௧":"1","௨":"2","௩":"3","௪":"4","௫":"5","௬":"6","௭":"7","௮":"8","௯":"9","௦":"0"};e.defineLocale("ta",{months:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),monthsShort:"ஜனவரி_பிப்ரவரி_மார்ச்_ஏப்ரல்_மே_ஜூன்_ஜூலை_ஆகஸ்ட்_செப்டெம்பர்_அக்டோபர்_நவம்பர்_டிசம்பர்".split("_"),weekdays:"ஞாயிற்றுக்கிழமை_திங்கட்கிழமை_செவ்வாய்கிழமை_புதன்கிழமை_வியாழக்கிழமை_வெள்ளிக்கிழமை_சனிக்கிழமை".split("_"),weekdaysShort:"ஞாயிறு_திங்கள்_செவ்வாய்_புதன்_வியாழன்_வெள்ளி_சனி".split("_"),weekdaysMin:"ஞா_தி_செ_பு_வி_வெ_ச".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, HH:mm",LLLL:"dddd, D MMMM YYYY, HH:mm"},calendar:{sameDay:"[இன்று] LT",nextDay:"[நாளை] LT",nextWeek:"dddd, LT",lastDay:"[நேற்று] LT",lastWeek:"[கடந்த வாரம்] dddd, LT",sameElse:"L"},relativeTime:{future:"%s இல்",past:"%s முன்",s:"ஒரு சில விநாடிகள்",ss:"%d விநாடிகள்",m:"ஒரு நிமிடம்",mm:"%d நிமிடங்கள்",h:"ஒரு மணி நேரம்",hh:"%d மணி நேரம்",d:"ஒரு நாள்",dd:"%d நாட்கள்",M:"ஒரு மாதம்",MM:"%d மாதங்கள்",y:"ஒரு வருடம்",yy:"%d ஆண்டுகள்"},dayOfMonthOrdinalParse:/\d{1,2}வது/,ordinal:function(e){return e+"வது"},preparse:function(e){return e.replace(/[௧௨௩௪௫௬௭௮௯௦]/g,(function(e){return n[e]}))},postformat:function(e){return e.replace(/\d/g,(function(e){return t[e]}))},meridiemParse:/யாமம்|வைகறை|காலை|நண்பகல்|எற்பாடு|மாலை/,meridiem:function(e,t,n){return e<2?" யாமம்":e<6?" வைகறை":e<10?" காலை":e<14?" நண்பகல்":e<18?" எற்பாடு":e<22?" மாலை":" யாமம்"},meridiemHour:function(e,t){return 12===e&&(e=0),"யாமம்"===t?e<2?e:e+12:"வைகறை"===t||"காலை"===t||"நண்பகல்"===t&&e>=10?e:e+12},week:{dow:0,doy:6}})}(n(5093))},1885:function(e,t,n){!function(e){"use strict";e.defineLocale("te",{months:"జనవరి_ఫిబ్రవరి_మార్చి_ఏప్రిల్_మే_జూన్_జులై_ఆగస్టు_సెప్టెంబర్_అక్టోబర్_నవంబర్_డిసెంబర్".split("_"),monthsShort:"జన._ఫిబ్ర._మార్చి_ఏప్రి._మే_జూన్_జులై_ఆగ._సెప్._అక్టో._నవ._డిసె.".split("_"),monthsParseExact:!0,weekdays:"ఆదివారం_సోమవారం_మంగళవారం_బుధవారం_గురువారం_శుక్రవారం_శనివారం".split("_"),weekdaysShort:"ఆది_సోమ_మంగళ_బుధ_గురు_శుక్ర_శని".split("_"),weekdaysMin:"ఆ_సో_మం_బు_గు_శు_శ".split("_"),longDateFormat:{LT:"A h:mm",LTS:"A h:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY, A h:mm",LLLL:"dddd, D MMMM YYYY, A h:mm"},calendar:{sameDay:"[నేడు] LT",nextDay:"[రేపు] LT",nextWeek:"dddd, LT",lastDay:"[నిన్న] LT",lastWeek:"[గత] dddd, LT",sameElse:"L"},relativeTime:{future:"%s లో",past:"%s క్రితం",s:"కొన్ని క్షణాలు",ss:"%d సెకన్లు",m:"ఒక నిమిషం",mm:"%d నిమిషాలు",h:"ఒక గంట",hh:"%d గంటలు",d:"ఒక రోజు",dd:"%d రోజులు",M:"ఒక నెల",MM:"%d నెలలు",y:"ఒక సంవత్సరం",yy:"%d సంవత్సరాలు"},dayOfMonthOrdinalParse:/\d{1,2}వ/,ordinal:"%dవ",meridiemParse:/రాత్రి|ఉదయం|మధ్యాహ్నం|సాయంత్రం/,meridiemHour:function(e,t){return 12===e&&(e=0),"రాత్రి"===t?e<4?e:e+12:"ఉదయం"===t?e:"మధ్యాహ్నం"===t?e>=10?e:e+12:"సాయంత్రం"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"రాత్రి":e<10?"ఉదయం":e<17?"మధ్యాహ్నం":e<20?"సాయంత్రం":"రాత్రి"},week:{dow:0,doy:6}})}(n(5093))},8861:function(e,t,n){!function(e){"use strict";e.defineLocale("tet",{months:"Janeiru_Fevereiru_Marsu_Abril_Maiu_Juñu_Jullu_Agustu_Setembru_Outubru_Novembru_Dezembru".split("_"),monthsShort:"Jan_Fev_Mar_Abr_Mai_Jun_Jul_Ago_Set_Out_Nov_Dez".split("_"),weekdays:"Domingu_Segunda_Tersa_Kuarta_Kinta_Sesta_Sabadu".split("_"),weekdaysShort:"Dom_Seg_Ters_Kua_Kint_Sest_Sab".split("_"),weekdaysMin:"Do_Seg_Te_Ku_Ki_Ses_Sa".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Ohin iha] LT",nextDay:"[Aban iha] LT",nextWeek:"dddd [iha] LT",lastDay:"[Horiseik iha] LT",lastWeek:"dddd [semana kotuk] [iha] LT",sameElse:"L"},relativeTime:{future:"iha %s",past:"%s liuba",s:"segundu balun",ss:"segundu %d",m:"minutu ida",mm:"minutu %d",h:"oras ida",hh:"oras %d",d:"loron ida",dd:"loron %d",M:"fulan ida",MM:"fulan %d",y:"tinan ida",yy:"tinan %d"},dayOfMonthOrdinalParse:/\d{1,2}(st|nd|rd|th)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},6571:function(e,t,n){!function(e){"use strict";var t={0:"-ум",1:"-ум",2:"-юм",3:"-юм",4:"-ум",5:"-ум",6:"-ум",7:"-ум",8:"-ум",9:"-ум",10:"-ум",12:"-ум",13:"-ум",20:"-ум",30:"-юм",40:"-ум",50:"-ум",60:"-ум",70:"-ум",80:"-ум",90:"-ум",100:"-ум"};e.defineLocale("tg",{months:{format:"январи_феврали_марти_апрели_майи_июни_июли_августи_сентябри_октябри_ноябри_декабри".split("_"),standalone:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_")},monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"якшанбе_душанбе_сешанбе_чоршанбе_панҷшанбе_ҷумъа_шанбе".split("_"),weekdaysShort:"яшб_дшб_сшб_чшб_пшб_ҷум_шнб".split("_"),weekdaysMin:"яш_дш_сш_чш_пш_ҷм_шб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[Имрӯз соати] LT",nextDay:"[Фардо соати] LT",lastDay:"[Дирӯз соати] LT",nextWeek:"dddd[и] [ҳафтаи оянда соати] LT",lastWeek:"dddd[и] [ҳафтаи гузашта соати] LT",sameElse:"L"},relativeTime:{future:"баъди %s",past:"%s пеш",s:"якчанд сония",m:"як дақиқа",mm:"%d дақиқа",h:"як соат",hh:"%d соат",d:"як рӯз",dd:"%d рӯз",M:"як моҳ",MM:"%d моҳ",y:"як сол",yy:"%d сол"},meridiemParse:/шаб|субҳ|рӯз|бегоҳ/,meridiemHour:function(e,t){return 12===e&&(e=0),"шаб"===t?e<4?e:e+12:"субҳ"===t?e:"рӯз"===t?e>=11?e:e+12:"бегоҳ"===t?e+12:void 0},meridiem:function(e,t,n){return e<4?"шаб":e<11?"субҳ":e<16?"рӯз":e<19?"бегоҳ":"шаб"},dayOfMonthOrdinalParse:/\d{1,2}-(ум|юм)/,ordinal:function(e){return e+(t[e]||t[e%10]||t[e>=100?100:null])},week:{dow:1,doy:7}})}(n(5093))},5802:function(e,t,n){!function(e){"use strict";e.defineLocale("th",{months:"มกราคม_กุมภาพันธ์_มีนาคม_เมษายน_พฤษภาคม_มิถุนายน_กรกฎาคม_สิงหาคม_กันยายน_ตุลาคม_พฤศจิกายน_ธันวาคม".split("_"),monthsShort:"ม.ค._ก.พ._มี.ค._เม.ย._พ.ค._มิ.ย._ก.ค._ส.ค._ก.ย._ต.ค._พ.ย._ธ.ค.".split("_"),monthsParseExact:!0,weekdays:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัสบดี_ศุกร์_เสาร์".split("_"),weekdaysShort:"อาทิตย์_จันทร์_อังคาร_พุธ_พฤหัส_ศุกร์_เสาร์".split("_"),weekdaysMin:"อา._จ._อ._พ._พฤ._ศ._ส.".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"H:mm",LTS:"H:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY เวลา H:mm",LLLL:"วันddddที่ D MMMM YYYY เวลา H:mm"},meridiemParse:/ก่อนเที่ยง|หลังเที่ยง/,isPM:function(e){return"หลังเที่ยง"===e},meridiem:function(e,t,n){return e<12?"ก่อนเที่ยง":"หลังเที่ยง"},calendar:{sameDay:"[วันนี้ เวลา] LT",nextDay:"[พรุ่งนี้ เวลา] LT",nextWeek:"dddd[หน้า เวลา] LT",lastDay:"[เมื่อวานนี้ เวลา] LT",lastWeek:"[วัน]dddd[ที่แล้ว เวลา] LT",sameElse:"L"},relativeTime:{future:"อีก %s",past:"%sที่แล้ว",s:"ไม่กี่วินาที",ss:"%d วินาที",m:"1 นาที",mm:"%d นาที",h:"1 ชั่วโมง",hh:"%d ชั่วโมง",d:"1 วัน",dd:"%d วัน",w:"1 สัปดาห์",ww:"%d สัปดาห์",M:"1 เดือน",MM:"%d เดือน",y:"1 ปี",yy:"%d ปี"}})}(n(5093))},9527:function(e,t,n){!function(e){"use strict";var t={1:"'inji",5:"'inji",8:"'inji",70:"'inji",80:"'inji",2:"'nji",7:"'nji",20:"'nji",50:"'nji",3:"'ünji",4:"'ünji",100:"'ünji",6:"'njy",9:"'unjy",10:"'unjy",30:"'unjy",60:"'ynjy",90:"'ynjy"};e.defineLocale("tk",{months:"Ýanwar_Fewral_Mart_Aprel_Maý_Iýun_Iýul_Awgust_Sentýabr_Oktýabr_Noýabr_Dekabr".split("_"),monthsShort:"Ýan_Few_Mar_Apr_Maý_Iýn_Iýl_Awg_Sen_Okt_Noý_Dek".split("_"),weekdays:"Ýekşenbe_Duşenbe_Sişenbe_Çarşenbe_Penşenbe_Anna_Şenbe".split("_"),weekdaysShort:"Ýek_Duş_Siş_Çar_Pen_Ann_Şen".split("_"),weekdaysMin:"Ýk_Dş_Sş_Çr_Pn_An_Şn".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün sagat] LT",nextDay:"[ertir sagat] LT",nextWeek:"[indiki] dddd [sagat] LT",lastDay:"[düýn] LT",lastWeek:"[geçen] dddd [sagat] LT",sameElse:"L"},relativeTime:{future:"%s soň",past:"%s öň",s:"birnäçe sekunt",m:"bir minut",mm:"%d minut",h:"bir sagat",hh:"%d sagat",d:"bir gün",dd:"%d gün",M:"bir aý",MM:"%d aý",y:"bir ýyl",yy:"%d ýyl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'unjy";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(5093))},9231:function(e,t,n){!function(e){"use strict";e.defineLocale("tl-ph",{months:"Enero_Pebrero_Marso_Abril_Mayo_Hunyo_Hulyo_Agosto_Setyembre_Oktubre_Nobyembre_Disyembre".split("_"),monthsShort:"Ene_Peb_Mar_Abr_May_Hun_Hul_Ago_Set_Okt_Nob_Dis".split("_"),weekdays:"Linggo_Lunes_Martes_Miyerkules_Huwebes_Biyernes_Sabado".split("_"),weekdaysShort:"Lin_Lun_Mar_Miy_Huw_Biy_Sab".split("_"),weekdaysMin:"Li_Lu_Ma_Mi_Hu_Bi_Sab".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"MM/D/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY HH:mm",LLLL:"dddd, MMMM DD, YYYY HH:mm"},calendar:{sameDay:"LT [ngayong araw]",nextDay:"[Bukas ng] LT",nextWeek:"LT [sa susunod na] dddd",lastDay:"LT [kahapon]",lastWeek:"LT [noong nakaraang] dddd",sameElse:"L"},relativeTime:{future:"sa loob ng %s",past:"%s ang nakalipas",s:"ilang segundo",ss:"%d segundo",m:"isang minuto",mm:"%d minuto",h:"isang oras",hh:"%d oras",d:"isang araw",dd:"%d araw",M:"isang buwan",MM:"%d buwan",y:"isang taon",yy:"%d taon"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(5093))},1052:function(e,t,n){!function(e){"use strict";var t="pagh_wa’_cha’_wej_loS_vagh_jav_Soch_chorgh_Hut".split("_");function n(e,n,r,a){var i=function(e){var n=Math.floor(e%1e3/100),r=Math.floor(e%100/10),a=e%10,i="";return n>0&&(i+=t[n]+"vatlh"),r>0&&(i+=(""!==i?" ":"")+t[r]+"maH"),a>0&&(i+=(""!==i?" ":"")+t[a]),""===i?"pagh":i}(e);switch(r){case"ss":return i+" lup";case"mm":return i+" tup";case"hh":return i+" rep";case"dd":return i+" jaj";case"MM":return i+" jar";case"yy":return i+" DIS"}}e.defineLocale("tlh",{months:"tera’ jar wa’_tera’ jar cha’_tera’ jar wej_tera’ jar loS_tera’ jar vagh_tera’ jar jav_tera’ jar Soch_tera’ jar chorgh_tera’ jar Hut_tera’ jar wa’maH_tera’ jar wa’maH wa’_tera’ jar wa’maH cha’".split("_"),monthsShort:"jar wa’_jar cha’_jar wej_jar loS_jar vagh_jar jav_jar Soch_jar chorgh_jar Hut_jar wa’maH_jar wa’maH wa’_jar wa’maH cha’".split("_"),monthsParseExact:!0,weekdays:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysShort:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),weekdaysMin:"lojmItjaj_DaSjaj_povjaj_ghItlhjaj_loghjaj_buqjaj_ghInjaj".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[DaHjaj] LT",nextDay:"[wa’leS] LT",nextWeek:"LLL",lastDay:"[wa’Hu’] LT",lastWeek:"LLL",sameElse:"L"},relativeTime:{future:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"leS":-1!==e.indexOf("jar")?t.slice(0,-3)+"waQ":-1!==e.indexOf("DIS")?t.slice(0,-3)+"nem":t+" pIq"},past:function(e){var t=e;return-1!==e.indexOf("jaj")?t.slice(0,-3)+"Hu’":-1!==e.indexOf("jar")?t.slice(0,-3)+"wen":-1!==e.indexOf("DIS")?t.slice(0,-3)+"ben":t+" ret"},s:"puS lup",ss:n,m:"wa’ tup",mm:n,h:"wa’ rep",hh:n,d:"wa’ jaj",dd:n,M:"wa’ jar",MM:n,y:"wa’ DIS",yy:n},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},5096:function(e,t,n){!function(e){"use strict";var t={1:"'inci",5:"'inci",8:"'inci",70:"'inci",80:"'inci",2:"'nci",7:"'nci",20:"'nci",50:"'nci",3:"'üncü",4:"'üncü",100:"'üncü",6:"'ncı",9:"'uncu",10:"'uncu",30:"'uncu",60:"'ıncı",90:"'ıncı"};e.defineLocale("tr",{months:"Ocak_Şubat_Mart_Nisan_Mayıs_Haziran_Temmuz_Ağustos_Eylül_Ekim_Kasım_Aralık".split("_"),monthsShort:"Oca_Şub_Mar_Nis_May_Haz_Tem_Ağu_Eyl_Eki_Kas_Ara".split("_"),weekdays:"Pazar_Pazartesi_Salı_Çarşamba_Perşembe_Cuma_Cumartesi".split("_"),weekdaysShort:"Paz_Pzt_Sal_Çar_Per_Cum_Cmt".split("_"),weekdaysMin:"Pz_Pt_Sa_Ça_Pe_Cu_Ct".split("_"),meridiem:function(e,t,n){return e<12?n?"öö":"ÖÖ":n?"ös":"ÖS"},meridiemParse:/öö|ÖÖ|ös|ÖS/,isPM:function(e){return"ös"===e||"ÖS"===e},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[bugün saat] LT",nextDay:"[yarın saat] LT",nextWeek:"[gelecek] dddd [saat] LT",lastDay:"[dün] LT",lastWeek:"[geçen] dddd [saat] LT",sameElse:"L"},relativeTime:{future:"%s sonra",past:"%s önce",s:"birkaç saniye",ss:"%d saniye",m:"bir dakika",mm:"%d dakika",h:"bir saat",hh:"%d saat",d:"bir gün",dd:"%d gün",w:"bir hafta",ww:"%d hafta",M:"bir ay",MM:"%d ay",y:"bir yıl",yy:"%d yıl"},ordinal:function(e,n){switch(n){case"d":case"D":case"Do":case"DD":return e;default:if(0===e)return e+"'ıncı";var r=e%10;return e+(t[r]||t[e%100-r]||t[e>=100?100:null])}},week:{dow:1,doy:7}})}(n(5093))},9846:function(e,t,n){!function(e){"use strict";function t(e,t,n,r){var a={s:["viensas secunds","'iensas secunds"],ss:[e+" secunds",e+" secunds"],m:["'n míut","'iens míut"],mm:[e+" míuts",e+" míuts"],h:["'n þora","'iensa þora"],hh:[e+" þoras",e+" þoras"],d:["'n ziua","'iensa ziua"],dd:[e+" ziuas",e+" ziuas"],M:["'n mes","'iens mes"],MM:[e+" mesen",e+" mesen"],y:["'n ar","'iens ar"],yy:[e+" ars",e+" ars"]};return r||t?a[n][0]:a[n][1]}e.defineLocale("tzl",{months:"Januar_Fevraglh_Març_Avrïu_Mai_Gün_Julia_Guscht_Setemvar_Listopäts_Noemvar_Zecemvar".split("_"),monthsShort:"Jan_Fev_Mar_Avr_Mai_Gün_Jul_Gus_Set_Lis_Noe_Zec".split("_"),weekdays:"Súladi_Lúneçi_Maitzi_Márcuri_Xhúadi_Viénerçi_Sáturi".split("_"),weekdaysShort:"Súl_Lún_Mai_Már_Xhú_Vié_Sát".split("_"),weekdaysMin:"Sú_Lú_Ma_Má_Xh_Vi_Sá".split("_"),longDateFormat:{LT:"HH.mm",LTS:"HH.mm.ss",L:"DD.MM.YYYY",LL:"D. MMMM [dallas] YYYY",LLL:"D. MMMM [dallas] YYYY HH.mm",LLLL:"dddd, [li] D. MMMM [dallas] YYYY HH.mm"},meridiemParse:/d\'o|d\'a/i,isPM:function(e){return"d'o"===e.toLowerCase()},meridiem:function(e,t,n){return e>11?n?"d'o":"D'O":n?"d'a":"D'A"},calendar:{sameDay:"[oxhi à] LT",nextDay:"[demà à] LT",nextWeek:"dddd [à] LT",lastDay:"[ieiri à] LT",lastWeek:"[sür el] dddd [lasteu à] LT",sameElse:"L"},relativeTime:{future:"osprei %s",past:"ja%s",s:t,ss:t,m:t,mm:t,h:t,hh:t,d:t,dd:t,M:t,MM:t,y:t,yy:t},dayOfMonthOrdinalParse:/\d{1,2}\./,ordinal:"%d.",week:{dow:1,doy:4}})}(n(5093))},7711:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm-latn",{months:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),monthsShort:"innayr_brˤayrˤ_marˤsˤ_ibrir_mayyw_ywnyw_ywlywz_ɣwšt_šwtanbir_ktˤwbrˤ_nwwanbir_dwjnbir".split("_"),weekdays:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysShort:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),weekdaysMin:"asamas_aynas_asinas_akras_akwas_asimwas_asiḍyas".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[asdkh g] LT",nextDay:"[aska g] LT",nextWeek:"dddd [g] LT",lastDay:"[assant g] LT",lastWeek:"dddd [g] LT",sameElse:"L"},relativeTime:{future:"dadkh s yan %s",past:"yan %s",s:"imik",ss:"%d imik",m:"minuḍ",mm:"%d minuḍ",h:"saɛa",hh:"%d tassaɛin",d:"ass",dd:"%d ossan",M:"ayowr",MM:"%d iyyirn",y:"asgas",yy:"%d isgasn"},week:{dow:6,doy:12}})}(n(5093))},1765:function(e,t,n){!function(e){"use strict";e.defineLocale("tzm",{months:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),monthsShort:"ⵉⵏⵏⴰⵢⵔ_ⴱⵕⴰⵢⵕ_ⵎⴰⵕⵚ_ⵉⴱⵔⵉⵔ_ⵎⴰⵢⵢⵓ_ⵢⵓⵏⵢⵓ_ⵢⵓⵍⵢⵓⵣ_ⵖⵓⵛⵜ_ⵛⵓⵜⴰⵏⴱⵉⵔ_ⴽⵟⵓⴱⵕ_ⵏⵓⵡⴰⵏⴱⵉⵔ_ⴷⵓⵊⵏⴱⵉⵔ".split("_"),weekdays:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysShort:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),weekdaysMin:"ⴰⵙⴰⵎⴰⵙ_ⴰⵢⵏⴰⵙ_ⴰⵙⵉⵏⴰⵙ_ⴰⴽⵔⴰⵙ_ⴰⴽⵡⴰⵙ_ⴰⵙⵉⵎⵡⴰⵙ_ⴰⵙⵉⴹⵢⴰⵙ".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd D MMMM YYYY HH:mm"},calendar:{sameDay:"[ⴰⵙⴷⵅ ⴴ] LT",nextDay:"[ⴰⵙⴽⴰ ⴴ] LT",nextWeek:"dddd [ⴴ] LT",lastDay:"[ⴰⵚⴰⵏⵜ ⴴ] LT",lastWeek:"dddd [ⴴ] LT",sameElse:"L"},relativeTime:{future:"ⴷⴰⴷⵅ ⵙ ⵢⴰⵏ %s",past:"ⵢⴰⵏ %s",s:"ⵉⵎⵉⴽ",ss:"%d ⵉⵎⵉⴽ",m:"ⵎⵉⵏⵓⴺ",mm:"%d ⵎⵉⵏⵓⴺ",h:"ⵙⴰⵄⴰ",hh:"%d ⵜⴰⵙⵙⴰⵄⵉⵏ",d:"ⴰⵙⵙ",dd:"%d oⵙⵙⴰⵏ",M:"ⴰⵢoⵓⵔ",MM:"%d ⵉⵢⵢⵉⵔⵏ",y:"ⴰⵙⴳⴰⵙ",yy:"%d ⵉⵙⴳⴰⵙⵏ"},week:{dow:6,doy:12}})}(n(5093))},8414:function(e,t,n){!function(e){"use strict";e.defineLocale("ug-cn",{months:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),monthsShort:"يانۋار_فېۋرال_مارت_ئاپرېل_ماي_ئىيۇن_ئىيۇل_ئاۋغۇست_سېنتەبىر_ئۆكتەبىر_نويابىر_دېكابىر".split("_"),weekdays:"يەكشەنبە_دۈشەنبە_سەيشەنبە_چارشەنبە_پەيشەنبە_جۈمە_شەنبە".split("_"),weekdaysShort:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),weekdaysMin:"يە_دۈ_سە_چا_پە_جۈ_شە".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY-MM-DD",LL:"YYYY-يىلىM-ئاينىڭD-كۈنى",LLL:"YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm",LLLL:"dddd، YYYY-يىلىM-ئاينىڭD-كۈنى، HH:mm"},meridiemParse:/يېرىم كېچە|سەھەر|چۈشتىن بۇرۇن|چۈش|چۈشتىن كېيىن|كەچ/,meridiemHour:function(e,t){return 12===e&&(e=0),"يېرىم كېچە"===t||"سەھەر"===t||"چۈشتىن بۇرۇن"===t?e:"چۈشتىن كېيىن"===t||"كەچ"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"يېرىم كېچە":r<900?"سەھەر":r<1130?"چۈشتىن بۇرۇن":r<1230?"چۈش":r<1800?"چۈشتىن كېيىن":"كەچ"},calendar:{sameDay:"[بۈگۈن سائەت] LT",nextDay:"[ئەتە سائەت] LT",nextWeek:"[كېلەركى] dddd [سائەت] LT",lastDay:"[تۆنۈگۈن] LT",lastWeek:"[ئالدىنقى] dddd [سائەت] LT",sameElse:"L"},relativeTime:{future:"%s كېيىن",past:"%s بۇرۇن",s:"نەچچە سېكونت",ss:"%d سېكونت",m:"بىر مىنۇت",mm:"%d مىنۇت",h:"بىر سائەت",hh:"%d سائەت",d:"بىر كۈن",dd:"%d كۈن",M:"بىر ئاي",MM:"%d ئاي",y:"بىر يىل",yy:"%d يىل"},dayOfMonthOrdinalParse:/\d{1,2}(-كۈنى|-ئاي|-ھەپتە)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"-كۈنى";case"w":case"W":return e+"-ھەپتە";default:return e}},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:7}})}(n(5093))},6618:function(e,t,n){!function(e){"use strict";function t(e,t,n){return"m"===n?t?"хвилина":"хвилину":"h"===n?t?"година":"годину":e+" "+(r=+e,a={ss:t?"секунда_секунди_секунд":"секунду_секунди_секунд",mm:t?"хвилина_хвилини_хвилин":"хвилину_хвилини_хвилин",hh:t?"година_години_годин":"годину_години_годин",dd:"день_дні_днів",MM:"місяць_місяці_місяців",yy:"рік_роки_років"}[n].split("_"),r%10==1&&r%100!=11?a[0]:r%10>=2&&r%10<=4&&(r%100<10||r%100>=20)?a[1]:a[2]);var r,a}function n(e){return function(){return e+"о"+(11===this.hours()?"б":"")+"] LT"}}e.defineLocale("uk",{months:{format:"січня_лютого_березня_квітня_травня_червня_липня_серпня_вересня_жовтня_листопада_грудня".split("_"),standalone:"січень_лютий_березень_квітень_травень_червень_липень_серпень_вересень_жовтень_листопад_грудень".split("_")},monthsShort:"січ_лют_бер_квіт_трав_черв_лип_серп_вер_жовт_лист_груд".split("_"),weekdays:function(e,t){var n={nominative:"неділя_понеділок_вівторок_середа_четвер_п’ятниця_субота".split("_"),accusative:"неділю_понеділок_вівторок_середу_четвер_п’ятницю_суботу".split("_"),genitive:"неділі_понеділка_вівторка_середи_четверга_п’ятниці_суботи".split("_")};return!0===e?n.nominative.slice(1,7).concat(n.nominative.slice(0,1)):e?n[/(\[[ВвУу]\]) ?dddd/.test(t)?"accusative":/\[?(?:минулої|наступної)? ?\] ?dddd/.test(t)?"genitive":"nominative"][e.day()]:n.nominative},weekdaysShort:"нд_пн_вт_ср_чт_пт_сб".split("_"),weekdaysMin:"нд_пн_вт_ср_чт_пт_сб".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD.MM.YYYY",LL:"D MMMM YYYY р.",LLL:"D MMMM YYYY р., HH:mm",LLLL:"dddd, D MMMM YYYY р., HH:mm"},calendar:{sameDay:n("[Сьогодні "),nextDay:n("[Завтра "),lastDay:n("[Вчора "),nextWeek:n("[У] dddd ["),lastWeek:function(){switch(this.day()){case 0:case 3:case 5:case 6:return n("[Минулої] dddd [").call(this);case 1:case 2:case 4:return n("[Минулого] dddd [").call(this)}},sameElse:"L"},relativeTime:{future:"за %s",past:"%s тому",s:"декілька секунд",ss:t,m:t,mm:t,h:"годину",hh:t,d:"день",dd:t,M:"місяць",MM:t,y:"рік",yy:t},meridiemParse:/ночі|ранку|дня|вечора/,isPM:function(e){return/^(дня|вечора)$/.test(e)},meridiem:function(e,t,n){return e<4?"ночі":e<12?"ранку":e<17?"дня":"вечора"},dayOfMonthOrdinalParse:/\d{1,2}-(й|го)/,ordinal:function(e,t){switch(t){case"M":case"d":case"DDD":case"w":case"W":return e+"-й";case"D":return e+"-го";default:return e}},week:{dow:1,doy:7}})}(n(5093))},158:function(e,t,n){!function(e){"use strict";var t=["جنوری","فروری","مارچ","اپریل","مئی","جون","جولائی","اگست","ستمبر","اکتوبر","نومبر","دسمبر"],n=["اتوار","پیر","منگل","بدھ","جمعرات","جمعہ","ہفتہ"];e.defineLocale("ur",{months:t,monthsShort:t,weekdays:n,weekdaysShort:n,weekdaysMin:n,longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd، D MMMM YYYY HH:mm"},meridiemParse:/صبح|شام/,isPM:function(e){return"شام"===e},meridiem:function(e,t,n){return e<12?"صبح":"شام"},calendar:{sameDay:"[آج بوقت] LT",nextDay:"[کل بوقت] LT",nextWeek:"dddd [بوقت] LT",lastDay:"[گذشتہ روز بوقت] LT",lastWeek:"[گذشتہ] dddd [بوقت] LT",sameElse:"L"},relativeTime:{future:"%s بعد",past:"%s قبل",s:"چند سیکنڈ",ss:"%d سیکنڈ",m:"ایک منٹ",mm:"%d منٹ",h:"ایک گھنٹہ",hh:"%d گھنٹے",d:"ایک دن",dd:"%d دن",M:"ایک ماہ",MM:"%d ماہ",y:"ایک سال",yy:"%d سال"},preparse:function(e){return e.replace(/،/g,",")},postformat:function(e){return e.replace(/,/g,"،")},week:{dow:1,doy:4}})}(n(5093))},2475:function(e,t,n){!function(e){"use strict";e.defineLocale("uz-latn",{months:"Yanvar_Fevral_Mart_Aprel_May_Iyun_Iyul_Avgust_Sentabr_Oktabr_Noyabr_Dekabr".split("_"),monthsShort:"Yan_Fev_Mar_Apr_May_Iyun_Iyul_Avg_Sen_Okt_Noy_Dek".split("_"),weekdays:"Yakshanba_Dushanba_Seshanba_Chorshanba_Payshanba_Juma_Shanba".split("_"),weekdaysShort:"Yak_Dush_Sesh_Chor_Pay_Jum_Shan".split("_"),weekdaysMin:"Ya_Du_Se_Cho_Pa_Ju_Sha".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Bugun soat] LT [da]",nextDay:"[Ertaga] LT [da]",nextWeek:"dddd [kuni soat] LT [da]",lastDay:"[Kecha soat] LT [da]",lastWeek:"[O'tgan] dddd [kuni soat] LT [da]",sameElse:"L"},relativeTime:{future:"Yaqin %s ichida",past:"Bir necha %s oldin",s:"soniya",ss:"%d soniya",m:"bir daqiqa",mm:"%d daqiqa",h:"bir soat",hh:"%d soat",d:"bir kun",dd:"%d kun",M:"bir oy",MM:"%d oy",y:"bir yil",yy:"%d yil"},week:{dow:1,doy:7}})}(n(5093))},7609:function(e,t,n){!function(e){"use strict";e.defineLocale("uz",{months:"январ_феврал_март_апрел_май_июн_июл_август_сентябр_октябр_ноябр_декабр".split("_"),monthsShort:"янв_фев_мар_апр_май_июн_июл_авг_сен_окт_ноя_дек".split("_"),weekdays:"Якшанба_Душанба_Сешанба_Чоршанба_Пайшанба_Жума_Шанба".split("_"),weekdaysShort:"Якш_Душ_Сеш_Чор_Пай_Жум_Шан".split("_"),weekdaysMin:"Як_Ду_Се_Чо_Па_Жу_Ша".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"D MMMM YYYY, dddd HH:mm"},calendar:{sameDay:"[Бугун соат] LT [да]",nextDay:"[Эртага] LT [да]",nextWeek:"dddd [куни соат] LT [да]",lastDay:"[Кеча соат] LT [да]",lastWeek:"[Утган] dddd [куни соат] LT [да]",sameElse:"L"},relativeTime:{future:"Якин %s ичида",past:"Бир неча %s олдин",s:"фурсат",ss:"%d фурсат",m:"бир дакика",mm:"%d дакика",h:"бир соат",hh:"%d соат",d:"бир кун",dd:"%d кун",M:"бир ой",MM:"%d ой",y:"бир йил",yy:"%d йил"},week:{dow:1,doy:7}})}(n(5093))},1135:function(e,t,n){!function(e){"use strict";e.defineLocale("vi",{months:"tháng 1_tháng 2_tháng 3_tháng 4_tháng 5_tháng 6_tháng 7_tháng 8_tháng 9_tháng 10_tháng 11_tháng 12".split("_"),monthsShort:"Thg 01_Thg 02_Thg 03_Thg 04_Thg 05_Thg 06_Thg 07_Thg 08_Thg 09_Thg 10_Thg 11_Thg 12".split("_"),monthsParseExact:!0,weekdays:"chủ nhật_thứ hai_thứ ba_thứ tư_thứ năm_thứ sáu_thứ bảy".split("_"),weekdaysShort:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysMin:"CN_T2_T3_T4_T5_T6_T7".split("_"),weekdaysParseExact:!0,meridiemParse:/sa|ch/i,isPM:function(e){return/^ch$/i.test(e)},meridiem:function(e,t,n){return e<12?n?"sa":"SA":n?"ch":"CH"},longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"D MMMM [năm] YYYY",LLL:"D MMMM [năm] YYYY HH:mm",LLLL:"dddd, D MMMM [năm] YYYY HH:mm",l:"DD/M/YYYY",ll:"D MMM YYYY",lll:"D MMM YYYY HH:mm",llll:"ddd, D MMM YYYY HH:mm"},calendar:{sameDay:"[Hôm nay lúc] LT",nextDay:"[Ngày mai lúc] LT",nextWeek:"dddd [tuần tới lúc] LT",lastDay:"[Hôm qua lúc] LT",lastWeek:"dddd [tuần trước lúc] LT",sameElse:"L"},relativeTime:{future:"%s tới",past:"%s trước",s:"vài giây",ss:"%d giây",m:"một phút",mm:"%d phút",h:"một giờ",hh:"%d giờ",d:"một ngày",dd:"%d ngày",w:"một tuần",ww:"%d tuần",M:"một tháng",MM:"%d tháng",y:"một năm",yy:"%d năm"},dayOfMonthOrdinalParse:/\d{1,2}/,ordinal:function(e){return e},week:{dow:1,doy:4}})}(n(5093))},4051:function(e,t,n){!function(e){"use strict";e.defineLocale("x-pseudo",{months:"J~áñúá~rý_F~ébrú~árý_~Márc~h_Áp~ríl_~Máý_~Júñé~_Júl~ý_Áú~gúst~_Sép~témb~ér_Ó~ctób~ér_Ñ~óvém~bér_~Décé~mbér".split("_"),monthsShort:"J~áñ_~Féb_~Már_~Ápr_~Máý_~Júñ_~Júl_~Áúg_~Sép_~Óct_~Ñóv_~Déc".split("_"),monthsParseExact:!0,weekdays:"S~úñdá~ý_Mó~ñdáý~_Túé~sdáý~_Wéd~ñésd~áý_T~húrs~dáý_~Fríd~áý_S~átúr~dáý".split("_"),weekdaysShort:"S~úñ_~Móñ_~Túé_~Wéd_~Thú_~Frí_~Sát".split("_"),weekdaysMin:"S~ú_Mó~_Tú_~Wé_T~h_Fr~_Sá".split("_"),weekdaysParseExact:!0,longDateFormat:{LT:"HH:mm",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY HH:mm",LLLL:"dddd, D MMMM YYYY HH:mm"},calendar:{sameDay:"[T~ódá~ý át] LT",nextDay:"[T~ómó~rró~w át] LT",nextWeek:"dddd [át] LT",lastDay:"[Ý~ést~érdá~ý át] LT",lastWeek:"[L~ást] dddd [át] LT",sameElse:"L"},relativeTime:{future:"í~ñ %s",past:"%s á~gó",s:"á ~féw ~sécó~ñds",ss:"%d s~écóñ~ds",m:"á ~míñ~úté",mm:"%d m~íñú~tés",h:"á~ñ hó~úr",hh:"%d h~óúrs",d:"á ~dáý",dd:"%d d~áýs",M:"á ~móñ~th",MM:"%d m~óñt~hs",y:"á ~ýéár",yy:"%d ý~éárs"},dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1==~~(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")},week:{dow:1,doy:4}})}(n(5093))},2218:function(e,t,n){!function(e){"use strict";e.defineLocale("yo",{months:"Sẹ́rẹ́_Èrèlè_Ẹrẹ̀nà_Ìgbé_Èbibi_Òkùdu_Agẹmo_Ògún_Owewe_Ọ̀wàrà_Bélú_Ọ̀pẹ̀̀".split("_"),monthsShort:"Sẹ́r_Èrl_Ẹrn_Ìgb_Èbi_Òkù_Agẹ_Ògú_Owe_Ọ̀wà_Bél_Ọ̀pẹ̀̀".split("_"),weekdays:"Àìkú_Ajé_Ìsẹ́gun_Ọjọ́rú_Ọjọ́bọ_Ẹtì_Àbámẹ́ta".split("_"),weekdaysShort:"Àìk_Ajé_Ìsẹ́_Ọjr_Ọjb_Ẹtì_Àbá".split("_"),weekdaysMin:"Àì_Aj_Ìs_Ọr_Ọb_Ẹt_Àb".split("_"),longDateFormat:{LT:"h:mm A",LTS:"h:mm:ss A",L:"DD/MM/YYYY",LL:"D MMMM YYYY",LLL:"D MMMM YYYY h:mm A",LLLL:"dddd, D MMMM YYYY h:mm A"},calendar:{sameDay:"[Ònì ni] LT",nextDay:"[Ọ̀la ni] LT",nextWeek:"dddd [Ọsẹ̀ tón'bọ] [ni] LT",lastDay:"[Àna ni] LT",lastWeek:"dddd [Ọsẹ̀ tólọ́] [ni] LT",sameElse:"L"},relativeTime:{future:"ní %s",past:"%s kọjá",s:"ìsẹjú aayá die",ss:"aayá %d",m:"ìsẹjú kan",mm:"ìsẹjú %d",h:"wákati kan",hh:"wákati %d",d:"ọjọ́ kan",dd:"ọjọ́ %d",M:"osù kan",MM:"osù %d",y:"ọdún kan",yy:"ọdún %d"},dayOfMonthOrdinalParse:/ọjọ́\s\d{1,2}/,ordinal:"ọjọ́ %d",week:{dow:1,doy:4}})}(n(5093))},2648:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-cn",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"周日_周一_周二_周三_周四_周五_周六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日Ah点mm分",LLLL:"YYYY年M月D日ddddAh点mm分",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"下午"===t||"晚上"===t?e+12:e>=11?e:e+12},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:function(e){return e.week()!==this.week()?"[下]dddLT":"[本]dddLT"},lastDay:"[昨天]LT",lastWeek:function(e){return this.week()!==e.week()?"[上]dddLT":"[本]dddLT"},sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|周)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"周";default:return e}},relativeTime:{future:"%s后",past:"%s前",s:"几秒",ss:"%d 秒",m:"1 分钟",mm:"%d 分钟",h:"1 小时",hh:"%d 小时",d:"1 天",dd:"%d 天",w:"1 周",ww:"%d 周",M:"1 个月",MM:"%d 个月",y:"1 年",yy:"%d 年"},week:{dow:1,doy:4}})}(n(5093))},1632:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-hk",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1200?"上午":1200===r?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天]LT",nextDay:"[明天]LT",nextWeek:"[下]ddddLT",lastDay:"[昨天]LT",lastWeek:"[上]ddddLT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(5093))},1541:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-mo",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"DD/MM/YYYY",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"D/M/YYYY",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s內",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(5093))},304:function(e,t,n){!function(e){"use strict";e.defineLocale("zh-tw",{months:"一月_二月_三月_四月_五月_六月_七月_八月_九月_十月_十一月_十二月".split("_"),monthsShort:"1月_2月_3月_4月_5月_6月_7月_8月_9月_10月_11月_12月".split("_"),weekdays:"星期日_星期一_星期二_星期三_星期四_星期五_星期六".split("_"),weekdaysShort:"週日_週一_週二_週三_週四_週五_週六".split("_"),weekdaysMin:"日_一_二_三_四_五_六".split("_"),longDateFormat:{LT:"HH:mm",LTS:"HH:mm:ss",L:"YYYY/MM/DD",LL:"YYYY年M月D日",LLL:"YYYY年M月D日 HH:mm",LLLL:"YYYY年M月D日dddd HH:mm",l:"YYYY/M/D",ll:"YYYY年M月D日",lll:"YYYY年M月D日 HH:mm",llll:"YYYY年M月D日dddd HH:mm"},meridiemParse:/凌晨|早上|上午|中午|下午|晚上/,meridiemHour:function(e,t){return 12===e&&(e=0),"凌晨"===t||"早上"===t||"上午"===t?e:"中午"===t?e>=11?e:e+12:"下午"===t||"晚上"===t?e+12:void 0},meridiem:function(e,t,n){var r=100*e+t;return r<600?"凌晨":r<900?"早上":r<1130?"上午":r<1230?"中午":r<1800?"下午":"晚上"},calendar:{sameDay:"[今天] LT",nextDay:"[明天] LT",nextWeek:"[下]dddd LT",lastDay:"[昨天] LT",lastWeek:"[上]dddd LT",sameElse:"L"},dayOfMonthOrdinalParse:/\d{1,2}(日|月|週)/,ordinal:function(e,t){switch(t){case"d":case"D":case"DDD":return e+"日";case"M":return e+"月";case"w":case"W":return e+"週";default:return e}},relativeTime:{future:"%s後",past:"%s前",s:"幾秒",ss:"%d 秒",m:"1 分鐘",mm:"%d 分鐘",h:"1 小時",hh:"%d 小時",d:"1 天",dd:"%d 天",M:"1 個月",MM:"%d 個月",y:"1 年",yy:"%d 年"}})}(n(5093))},5358:(e,t,n)=>{var r={"./af":5177,"./af.js":5177,"./ar":1509,"./ar-dz":1488,"./ar-dz.js":1488,"./ar-kw":8676,"./ar-kw.js":8676,"./ar-ly":2353,"./ar-ly.js":2353,"./ar-ma":4496,"./ar-ma.js":4496,"./ar-sa":2682,"./ar-sa.js":2682,"./ar-tn":9756,"./ar-tn.js":9756,"./ar.js":1509,"./az":5533,"./az.js":5533,"./be":8959,"./be.js":8959,"./bg":7777,"./bg.js":7777,"./bm":4903,"./bm.js":4903,"./bn":1290,"./bn-bd":7357,"./bn-bd.js":7357,"./bn.js":1290,"./bo":1545,"./bo.js":1545,"./br":1470,"./br.js":1470,"./bs":4429,"./bs.js":4429,"./ca":7306,"./ca.js":7306,"./cs":6464,"./cs.js":6464,"./cv":3635,"./cv.js":3635,"./cy":4226,"./cy.js":4226,"./da":3601,"./da.js":3601,"./de":7853,"./de-at":6111,"./de-at.js":6111,"./de-ch":4697,"./de-ch.js":4697,"./de.js":7853,"./dv":708,"./dv.js":708,"./el":4691,"./el.js":4691,"./en-au":3872,"./en-au.js":3872,"./en-ca":8298,"./en-ca.js":8298,"./en-gb":6195,"./en-gb.js":6195,"./en-ie":6584,"./en-ie.js":6584,"./en-il":5543,"./en-il.js":5543,"./en-in":9033,"./en-in.js":9033,"./en-nz":9402,"./en-nz.js":9402,"./en-sg":3004,"./en-sg.js":3004,"./eo":2934,"./eo.js":2934,"./es":7650,"./es-do":838,"./es-do.js":838,"./es-mx":7730,"./es-mx.js":7730,"./es-us":6575,"./es-us.js":6575,"./es.js":7650,"./et":3035,"./et.js":3035,"./eu":3508,"./eu.js":3508,"./fa":119,"./fa.js":119,"./fi":527,"./fi.js":527,"./fil":5995,"./fil.js":5995,"./fo":2477,"./fo.js":2477,"./fr":5498,"./fr-ca":6435,"./fr-ca.js":6435,"./fr-ch":7892,"./fr-ch.js":7892,"./fr.js":5498,"./fy":7071,"./fy.js":7071,"./ga":1734,"./ga.js":1734,"./gd":217,"./gd.js":217,"./gl":7329,"./gl.js":7329,"./gom-deva":2124,"./gom-deva.js":2124,"./gom-latn":3383,"./gom-latn.js":3383,"./gu":5050,"./gu.js":5050,"./he":1713,"./he.js":1713,"./hi":3861,"./hi.js":3861,"./hr":6308,"./hr.js":6308,"./hu":609,"./hu.js":609,"./hy-am":7160,"./hy-am.js":7160,"./id":4063,"./id.js":4063,"./is":9374,"./is.js":9374,"./it":8383,"./it-ch":1827,"./it-ch.js":1827,"./it.js":8383,"./ja":3827,"./ja.js":3827,"./jv":9722,"./jv.js":9722,"./ka":1794,"./ka.js":1794,"./kk":7088,"./kk.js":7088,"./km":6870,"./km.js":6870,"./kn":4451,"./kn.js":4451,"./ko":3164,"./ko.js":3164,"./ku":8174,"./ku.js":8174,"./ky":8474,"./ky.js":8474,"./lb":9680,"./lb.js":9680,"./lo":5867,"./lo.js":5867,"./lt":5766,"./lt.js":5766,"./lv":9532,"./lv.js":9532,"./me":8076,"./me.js":8076,"./mi":1848,"./mi.js":1848,"./mk":306,"./mk.js":306,"./ml":3739,"./ml.js":3739,"./mn":9053,"./mn.js":9053,"./mr":6169,"./mr.js":6169,"./ms":3386,"./ms-my":2297,"./ms-my.js":2297,"./ms.js":3386,"./mt":7075,"./mt.js":7075,"./my":2264,"./my.js":2264,"./nb":2274,"./nb.js":2274,"./ne":8235,"./ne.js":8235,"./nl":2572,"./nl-be":3784,"./nl-be.js":3784,"./nl.js":2572,"./nn":4566,"./nn.js":4566,"./oc-lnc":9330,"./oc-lnc.js":9330,"./pa-in":9849,"./pa-in.js":9849,"./pl":4418,"./pl.js":4418,"./pt":9834,"./pt-br":8303,"./pt-br.js":8303,"./pt.js":9834,"./ro":4457,"./ro.js":4457,"./ru":2271,"./ru.js":2271,"./sd":1221,"./sd.js":1221,"./se":3478,"./se.js":3478,"./si":7538,"./si.js":7538,"./sk":5784,"./sk.js":5784,"./sl":6637,"./sl.js":6637,"./sq":6794,"./sq.js":6794,"./sr":5719,"./sr-cyrl":3322,"./sr-cyrl.js":3322,"./sr.js":5719,"./ss":6e3,"./ss.js":6e3,"./sv":1011,"./sv.js":1011,"./sw":748,"./sw.js":748,"./ta":1025,"./ta.js":1025,"./te":1885,"./te.js":1885,"./tet":8861,"./tet.js":8861,"./tg":6571,"./tg.js":6571,"./th":5802,"./th.js":5802,"./tk":9527,"./tk.js":9527,"./tl-ph":9231,"./tl-ph.js":9231,"./tlh":1052,"./tlh.js":1052,"./tr":5096,"./tr.js":5096,"./tzl":9846,"./tzl.js":9846,"./tzm":1765,"./tzm-latn":7711,"./tzm-latn.js":7711,"./tzm.js":1765,"./ug-cn":8414,"./ug-cn.js":8414,"./uk":6618,"./uk.js":6618,"./ur":158,"./ur.js":158,"./uz":7609,"./uz-latn":2475,"./uz-latn.js":2475,"./uz.js":7609,"./vi":1135,"./vi.js":1135,"./x-pseudo":4051,"./x-pseudo.js":4051,"./yo":2218,"./yo.js":2218,"./zh-cn":2648,"./zh-cn.js":2648,"./zh-hk":1632,"./zh-hk.js":1632,"./zh-mo":1541,"./zh-mo.js":1541,"./zh-tw":304,"./zh-tw.js":304};function a(e){var t=i(e);return n(t)}function i(e){if(!n.o(r,e)){var t=new Error("Cannot find module '"+e+"'");throw t.code="MODULE_NOT_FOUND",t}return r[e]}a.keys=function(){return Object.keys(r)},a.resolve=i,e.exports=a,a.id=5358},5093:function(e,t,n){(e=n.nmd(e)).exports=function(){"use strict";var t,r;function a(){return t.apply(null,arguments)}function i(e){return e instanceof Array||"[object Array]"===Object.prototype.toString.call(e)}function s(e){return null!=e&&"[object Object]"===Object.prototype.toString.call(e)}function o(e,t){return Object.prototype.hasOwnProperty.call(e,t)}function u(e){if(Object.getOwnPropertyNames)return 0===Object.getOwnPropertyNames(e).length;var t;for(t in e)if(o(e,t))return!1;return!0}function l(e){return void 0===e}function d(e){return"number"==typeof e||"[object Number]"===Object.prototype.toString.call(e)}function c(e){return e instanceof Date||"[object Date]"===Object.prototype.toString.call(e)}function f(e,t){var n,r=[],a=e.length;for(n=0;n<a;++n)r.push(t(e[n],n));return r}function m(e,t){for(var n in t)o(t,n)&&(e[n]=t[n]);return o(t,"toString")&&(e.toString=t.toString),o(t,"valueOf")&&(e.valueOf=t.valueOf),e}function _(e,t,n,r){return Ht(e,t,n,r,!0).utc()}function h(e){return null==e._pf&&(e._pf={empty:!1,unusedTokens:[],unusedInput:[],overflow:-2,charsLeftOver:0,nullInput:!1,invalidEra:null,invalidMonth:null,invalidFormat:!1,userInvalidated:!1,iso:!1,parsedDateParts:[],era:null,meridiem:null,rfc2822:!1,weekdayMismatch:!1}),e._pf}function p(e){if(null==e._isValid){var t=h(e),n=r.call(t.parsedDateParts,(function(e){return null!=e})),a=!isNaN(e._d.getTime())&&t.overflow<0&&!t.empty&&!t.invalidEra&&!t.invalidMonth&&!t.invalidWeekday&&!t.weekdayMismatch&&!t.nullInput&&!t.invalidFormat&&!t.userInvalidated&&(!t.meridiem||t.meridiem&&n);if(e._strict&&(a=a&&0===t.charsLeftOver&&0===t.unusedTokens.length&&void 0===t.bigHour),null!=Object.isFrozen&&Object.isFrozen(e))return a;e._isValid=a}return e._isValid}function y(e){var t=_(NaN);return null!=e?m(h(t),e):h(t).userInvalidated=!0,t}r=Array.prototype.some?Array.prototype.some:function(e){var t,n=Object(this),r=n.length>>>0;for(t=0;t<r;t++)if(t in n&&e.call(this,n[t],t,n))return!0;return!1};var g=a.momentProperties=[],v=!1;function M(e,t){var n,r,a,i=g.length;if(l(t._isAMomentObject)||(e._isAMomentObject=t._isAMomentObject),l(t._i)||(e._i=t._i),l(t._f)||(e._f=t._f),l(t._l)||(e._l=t._l),l(t._strict)||(e._strict=t._strict),l(t._tzm)||(e._tzm=t._tzm),l(t._isUTC)||(e._isUTC=t._isUTC),l(t._offset)||(e._offset=t._offset),l(t._pf)||(e._pf=h(t)),l(t._locale)||(e._locale=t._locale),i>0)for(n=0;n<i;n++)l(a=t[r=g[n]])||(e[r]=a);return e}function L(e){M(this,e),this._d=new Date(null!=e._d?e._d.getTime():NaN),this.isValid()||(this._d=new Date(NaN)),!1===v&&(v=!0,a.updateOffset(this),v=!1)}function k(e){return e instanceof L||null!=e&&null!=e._isAMomentObject}function b(e){!1===a.suppressDeprecationWarnings&&"undefined"!=typeof console&&console.warn&&console.warn("Deprecation warning: "+e)}function Y(e,t){var n=!0;return m((function(){if(null!=a.deprecationHandler&&a.deprecationHandler(null,e),n){var r,i,s,u=[],l=arguments.length;for(i=0;i<l;i++){if(r="","object"==typeof arguments[i]){for(s in r+="\n["+i+"] ",arguments[0])o(arguments[0],s)&&(r+=s+": "+arguments[0][s]+", ");r=r.slice(0,-2)}else r=arguments[i];u.push(r)}b(e+"\nArguments: "+Array.prototype.slice.call(u).join("")+"\n"+(new Error).stack),n=!1}return t.apply(this,arguments)}),t)}var w,D={};function T(e,t){null!=a.deprecationHandler&&a.deprecationHandler(e,t),D[e]||(b(t),D[e]=!0)}function S(e){return"undefined"!=typeof Function&&e instanceof Function||"[object Function]"===Object.prototype.toString.call(e)}function x(e,t){var n,r=m({},e);for(n in t)o(t,n)&&(s(e[n])&&s(t[n])?(r[n]={},m(r[n],e[n]),m(r[n],t[n])):null!=t[n]?r[n]=t[n]:delete r[n]);for(n in e)o(e,n)&&!o(t,n)&&s(e[n])&&(r[n]=m({},r[n]));return r}function O(e){null!=e&&this.set(e)}a.suppressDeprecationWarnings=!1,a.deprecationHandler=null,w=Object.keys?Object.keys:function(e){var t,n=[];for(t in e)o(e,t)&&n.push(t);return n};function E(e,t,n){var r=""+Math.abs(e),a=t-r.length;return(e>=0?n?"+":"":"-")+Math.pow(10,Math.max(0,a)).toString().substr(1)+r}var j=/(\[[^\[]*\])|(\\)?([Hh]mm(ss)?|Mo|MM?M?M?|Do|DDDo|DD?D?D?|ddd?d?|do?|w[o|w]?|W[o|W]?|Qo?|N{1,5}|YYYYYY|YYYYY|YYYY|YY|y{2,4}|yo?|gg(ggg?)?|GG(GGG?)?|e|E|a|A|hh?|HH?|kk?|mm?|ss?|S{1,9}|x|X|zz?|ZZ?|.)/g,P=/(\[[^\[]*\])|(\\)?(LTS|LT|LL?L?L?|l{1,4})/g,H={},C={};function A(e,t,n,r){var a=r;"string"==typeof r&&(a=function(){return this[r]()}),e&&(C[e]=a),t&&(C[t[0]]=function(){return E(a.apply(this,arguments),t[1],t[2])}),n&&(C[n]=function(){return this.localeData().ordinal(a.apply(this,arguments),e)})}function N(e,t){return e.isValid()?(t=R(t,e.localeData()),H[t]=H[t]||function(e){var t,n,r,a=e.match(j);for(t=0,n=a.length;t<n;t++)C[a[t]]?a[t]=C[a[t]]:a[t]=(r=a[t]).match(/\[[\s\S]/)?r.replace(/^\[|\]$/g,""):r.replace(/\\/g,"");return function(t){var r,i="";for(r=0;r<n;r++)i+=S(a[r])?a[r].call(t,e):a[r];return i}}(t),H[t](e)):e.localeData().invalidDate()}function R(e,t){var n=5;function r(e){return t.longDateFormat(e)||e}for(P.lastIndex=0;n>=0&&P.test(e);)e=e.replace(P,r),P.lastIndex=0,n-=1;return e}var F={};function z(e,t){var n=e.toLowerCase();F[n]=F[n+"s"]=F[t]=e}function W(e){return"string"==typeof e?F[e]||F[e.toLowerCase()]:void 0}function I(e){var t,n,r={};for(n in e)o(e,n)&&(t=W(n))&&(r[t]=e[n]);return r}var U={};function B(e,t){U[e]=t}function V(e){return e%4==0&&e%100!=0||e%400==0}function J(e){return e<0?Math.ceil(e)||0:Math.floor(e)}function G(e){var t=+e,n=0;return 0!==t&&isFinite(t)&&(n=J(t)),n}function q(e,t){return function(n){return null!=n?(K(this,e,n),a.updateOffset(this,t),this):$(this,e)}}function $(e,t){return e.isValid()?e._d["get"+(e._isUTC?"UTC":"")+t]():NaN}function K(e,t,n){e.isValid()&&!isNaN(n)&&("FullYear"===t&&V(e.year())&&1===e.month()&&29===e.date()?(n=G(n),e._d["set"+(e._isUTC?"UTC":"")+t](n,e.month(),Ee(n,e.month()))):e._d["set"+(e._isUTC?"UTC":"")+t](n))}var Q,X=/\d/,Z=/\d\d/,ee=/\d{3}/,te=/\d{4}/,ne=/[+-]?\d{6}/,re=/\d\d?/,ae=/\d\d\d\d?/,ie=/\d\d\d\d\d\d?/,se=/\d{1,3}/,oe=/\d{1,4}/,ue=/[+-]?\d{1,6}/,le=/\d+/,de=/[+-]?\d+/,ce=/Z|[+-]\d\d:?\d\d/gi,fe=/Z|[+-]\d\d(?::?\d\d)?/gi,me=/[0-9]{0,256}['a-z\u00A0-\u05FF\u0700-\uD7FF\uF900-\uFDCF\uFDF0-\uFF07\uFF10-\uFFEF]{1,256}|[\u0600-\u06FF\/]{1,256}(\s*?[\u0600-\u06FF]{1,256}){1,2}/i;function _e(e,t,n){Q[e]=S(t)?t:function(e,r){return e&&n?n:t}}function he(e,t){return o(Q,e)?Q[e](t._strict,t._locale):new RegExp(pe(e.replace("\\","").replace(/\\(\[)|\\(\])|\[([^\]\[]*)\]|\\(.)/g,(function(e,t,n,r,a){return t||n||r||a}))))}function pe(e){return e.replace(/[-\/\\^$*+?.()|[\]{}]/g,"\\$&")}Q={};var ye={};function ge(e,t){var n,r,a=t;for("string"==typeof e&&(e=[e]),d(t)&&(a=function(e,n){n[t]=G(e)}),r=e.length,n=0;n<r;n++)ye[e[n]]=a}function ve(e,t){ge(e,(function(e,n,r,a){r._w=r._w||{},t(e,r._w,r,a)}))}function Me(e,t,n){null!=t&&o(ye,e)&&ye[e](t,n._a,n,e)}var Le,ke=0,be=1,Ye=2,we=3,De=4,Te=5,Se=6,xe=7,Oe=8;function Ee(e,t){if(isNaN(e)||isNaN(t))return NaN;var n,r=(t%(n=12)+n)%n;return e+=(t-r)/12,1===r?V(e)?29:28:31-r%7%2}Le=Array.prototype.indexOf?Array.prototype.indexOf:function(e){var t;for(t=0;t<this.length;++t)if(this[t]===e)return t;return-1},A("M",["MM",2],"Mo",(function(){return this.month()+1})),A("MMM",0,0,(function(e){return this.localeData().monthsShort(this,e)})),A("MMMM",0,0,(function(e){return this.localeData().months(this,e)})),z("month","M"),B("month",8),_e("M",re),_e("MM",re,Z),_e("MMM",(function(e,t){return t.monthsShortRegex(e)})),_e("MMMM",(function(e,t){return t.monthsRegex(e)})),ge(["M","MM"],(function(e,t){t[be]=G(e)-1})),ge(["MMM","MMMM"],(function(e,t,n,r){var a=n._locale.monthsParse(e,r,n._strict);null!=a?t[be]=a:h(n).invalidMonth=e}));var je="January_February_March_April_May_June_July_August_September_October_November_December".split("_"),Pe="Jan_Feb_Mar_Apr_May_Jun_Jul_Aug_Sep_Oct_Nov_Dec".split("_"),He=/D[oD]?(\[[^\[\]]*\]|\s)+MMMM?/,Ce=me,Ae=me;function Ne(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._monthsParse)for(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[],r=0;r<12;++r)i=_([2e3,r]),this._shortMonthsParse[r]=this.monthsShort(i,"").toLocaleLowerCase(),this._longMonthsParse[r]=this.months(i,"").toLocaleLowerCase();return n?"MMM"===t?-1!==(a=Le.call(this._shortMonthsParse,s))?a:null:-1!==(a=Le.call(this._longMonthsParse,s))?a:null:"MMM"===t?-1!==(a=Le.call(this._shortMonthsParse,s))||-1!==(a=Le.call(this._longMonthsParse,s))?a:null:-1!==(a=Le.call(this._longMonthsParse,s))||-1!==(a=Le.call(this._shortMonthsParse,s))?a:null}function Re(e,t){var n;if(!e.isValid())return e;if("string"==typeof t)if(/^\d+$/.test(t))t=G(t);else if(!d(t=e.localeData().monthsParse(t)))return e;return n=Math.min(e.date(),Ee(e.year(),t)),e._d["set"+(e._isUTC?"UTC":"")+"Month"](t,n),e}function Fe(e){return null!=e?(Re(this,e),a.updateOffset(this,!0),this):$(this,"Month")}function ze(){function e(e,t){return t.length-e.length}var t,n,r=[],a=[],i=[];for(t=0;t<12;t++)n=_([2e3,t]),r.push(this.monthsShort(n,"")),a.push(this.months(n,"")),i.push(this.months(n,"")),i.push(this.monthsShort(n,""));for(r.sort(e),a.sort(e),i.sort(e),t=0;t<12;t++)r[t]=pe(r[t]),a[t]=pe(a[t]);for(t=0;t<24;t++)i[t]=pe(i[t]);this._monthsRegex=new RegExp("^("+i.join("|")+")","i"),this._monthsShortRegex=this._monthsRegex,this._monthsStrictRegex=new RegExp("^("+a.join("|")+")","i"),this._monthsShortStrictRegex=new RegExp("^("+r.join("|")+")","i")}function We(e){return V(e)?366:365}A("Y",0,0,(function(){var e=this.year();return e<=9999?E(e,4):"+"+e})),A(0,["YY",2],0,(function(){return this.year()%100})),A(0,["YYYY",4],0,"year"),A(0,["YYYYY",5],0,"year"),A(0,["YYYYYY",6,!0],0,"year"),z("year","y"),B("year",1),_e("Y",de),_e("YY",re,Z),_e("YYYY",oe,te),_e("YYYYY",ue,ne),_e("YYYYYY",ue,ne),ge(["YYYYY","YYYYYY"],ke),ge("YYYY",(function(e,t){t[ke]=2===e.length?a.parseTwoDigitYear(e):G(e)})),ge("YY",(function(e,t){t[ke]=a.parseTwoDigitYear(e)})),ge("Y",(function(e,t){t[ke]=parseInt(e,10)})),a.parseTwoDigitYear=function(e){return G(e)+(G(e)>68?1900:2e3)};var Ie=q("FullYear",!0);function Ue(e,t,n,r,a,i,s){var o;return e<100&&e>=0?(o=new Date(e+400,t,n,r,a,i,s),isFinite(o.getFullYear())&&o.setFullYear(e)):o=new Date(e,t,n,r,a,i,s),o}function Be(e){var t,n;return e<100&&e>=0?((n=Array.prototype.slice.call(arguments))[0]=e+400,t=new Date(Date.UTC.apply(null,n)),isFinite(t.getUTCFullYear())&&t.setUTCFullYear(e)):t=new Date(Date.UTC.apply(null,arguments)),t}function Ve(e,t,n){var r=7+t-n;return-(7+Be(e,0,r).getUTCDay()-t)%7+r-1}function Je(e,t,n,r,a){var i,s,o=1+7*(t-1)+(7+n-r)%7+Ve(e,r,a);return o<=0?s=We(i=e-1)+o:o>We(e)?(i=e+1,s=o-We(e)):(i=e,s=o),{year:i,dayOfYear:s}}function Ge(e,t,n){var r,a,i=Ve(e.year(),t,n),s=Math.floor((e.dayOfYear()-i-1)/7)+1;return s<1?r=s+qe(a=e.year()-1,t,n):s>qe(e.year(),t,n)?(r=s-qe(e.year(),t,n),a=e.year()+1):(a=e.year(),r=s),{week:r,year:a}}function qe(e,t,n){var r=Ve(e,t,n),a=Ve(e+1,t,n);return(We(e)-r+a)/7}A("w",["ww",2],"wo","week"),A("W",["WW",2],"Wo","isoWeek"),z("week","w"),z("isoWeek","W"),B("week",5),B("isoWeek",5),_e("w",re),_e("ww",re,Z),_e("W",re),_e("WW",re,Z),ve(["w","ww","W","WW"],(function(e,t,n,r){t[r.substr(0,1)]=G(e)}));function $e(e,t){return e.slice(t,7).concat(e.slice(0,t))}A("d",0,"do","day"),A("dd",0,0,(function(e){return this.localeData().weekdaysMin(this,e)})),A("ddd",0,0,(function(e){return this.localeData().weekdaysShort(this,e)})),A("dddd",0,0,(function(e){return this.localeData().weekdays(this,e)})),A("e",0,0,"weekday"),A("E",0,0,"isoWeekday"),z("day","d"),z("weekday","e"),z("isoWeekday","E"),B("day",11),B("weekday",11),B("isoWeekday",11),_e("d",re),_e("e",re),_e("E",re),_e("dd",(function(e,t){return t.weekdaysMinRegex(e)})),_e("ddd",(function(e,t){return t.weekdaysShortRegex(e)})),_e("dddd",(function(e,t){return t.weekdaysRegex(e)})),ve(["dd","ddd","dddd"],(function(e,t,n,r){var a=n._locale.weekdaysParse(e,r,n._strict);null!=a?t.d=a:h(n).invalidWeekday=e})),ve(["d","e","E"],(function(e,t,n,r){t[r]=G(e)}));var Ke="Sunday_Monday_Tuesday_Wednesday_Thursday_Friday_Saturday".split("_"),Qe="Sun_Mon_Tue_Wed_Thu_Fri_Sat".split("_"),Xe="Su_Mo_Tu_We_Th_Fr_Sa".split("_"),Ze=me,et=me,tt=me;function nt(e,t,n){var r,a,i,s=e.toLocaleLowerCase();if(!this._weekdaysParse)for(this._weekdaysParse=[],this._shortWeekdaysParse=[],this._minWeekdaysParse=[],r=0;r<7;++r)i=_([2e3,1]).day(r),this._minWeekdaysParse[r]=this.weekdaysMin(i,"").toLocaleLowerCase(),this._shortWeekdaysParse[r]=this.weekdaysShort(i,"").toLocaleLowerCase(),this._weekdaysParse[r]=this.weekdays(i,"").toLocaleLowerCase();return n?"dddd"===t?-1!==(a=Le.call(this._weekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Le.call(this._shortWeekdaysParse,s))?a:null:-1!==(a=Le.call(this._minWeekdaysParse,s))?a:null:"dddd"===t?-1!==(a=Le.call(this._weekdaysParse,s))||-1!==(a=Le.call(this._shortWeekdaysParse,s))||-1!==(a=Le.call(this._minWeekdaysParse,s))?a:null:"ddd"===t?-1!==(a=Le.call(this._shortWeekdaysParse,s))||-1!==(a=Le.call(this._weekdaysParse,s))||-1!==(a=Le.call(this._minWeekdaysParse,s))?a:null:-1!==(a=Le.call(this._minWeekdaysParse,s))||-1!==(a=Le.call(this._weekdaysParse,s))||-1!==(a=Le.call(this._shortWeekdaysParse,s))?a:null}function rt(){function e(e,t){return t.length-e.length}var t,n,r,a,i,s=[],o=[],u=[],l=[];for(t=0;t<7;t++)n=_([2e3,1]).day(t),r=pe(this.weekdaysMin(n,"")),a=pe(this.weekdaysShort(n,"")),i=pe(this.weekdays(n,"")),s.push(r),o.push(a),u.push(i),l.push(r),l.push(a),l.push(i);s.sort(e),o.sort(e),u.sort(e),l.sort(e),this._weekdaysRegex=new RegExp("^("+l.join("|")+")","i"),this._weekdaysShortRegex=this._weekdaysRegex,this._weekdaysMinRegex=this._weekdaysRegex,this._weekdaysStrictRegex=new RegExp("^("+u.join("|")+")","i"),this._weekdaysShortStrictRegex=new RegExp("^("+o.join("|")+")","i"),this._weekdaysMinStrictRegex=new RegExp("^("+s.join("|")+")","i")}function at(){return this.hours()%12||12}function it(e,t){A(e,0,0,(function(){return this.localeData().meridiem(this.hours(),this.minutes(),t)}))}function st(e,t){return t._meridiemParse}A("H",["HH",2],0,"hour"),A("h",["hh",2],0,at),A("k",["kk",2],0,(function(){return this.hours()||24})),A("hmm",0,0,(function(){return""+at.apply(this)+E(this.minutes(),2)})),A("hmmss",0,0,(function(){return""+at.apply(this)+E(this.minutes(),2)+E(this.seconds(),2)})),A("Hmm",0,0,(function(){return""+this.hours()+E(this.minutes(),2)})),A("Hmmss",0,0,(function(){return""+this.hours()+E(this.minutes(),2)+E(this.seconds(),2)})),it("a",!0),it("A",!1),z("hour","h"),B("hour",13),_e("a",st),_e("A",st),_e("H",re),_e("h",re),_e("k",re),_e("HH",re,Z),_e("hh",re,Z),_e("kk",re,Z),_e("hmm",ae),_e("hmmss",ie),_e("Hmm",ae),_e("Hmmss",ie),ge(["H","HH"],we),ge(["k","kk"],(function(e,t,n){var r=G(e);t[we]=24===r?0:r})),ge(["a","A"],(function(e,t,n){n._isPm=n._locale.isPM(e),n._meridiem=e})),ge(["h","hh"],(function(e,t,n){t[we]=G(e),h(n).bigHour=!0})),ge("hmm",(function(e,t,n){var r=e.length-2;t[we]=G(e.substr(0,r)),t[De]=G(e.substr(r)),h(n).bigHour=!0})),ge("hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[we]=G(e.substr(0,r)),t[De]=G(e.substr(r,2)),t[Te]=G(e.substr(a)),h(n).bigHour=!0})),ge("Hmm",(function(e,t,n){var r=e.length-2;t[we]=G(e.substr(0,r)),t[De]=G(e.substr(r))})),ge("Hmmss",(function(e,t,n){var r=e.length-4,a=e.length-2;t[we]=G(e.substr(0,r)),t[De]=G(e.substr(r,2)),t[Te]=G(e.substr(a))}));var ot=q("Hours",!0);var ut,lt={calendar:{sameDay:"[Today at] LT",nextDay:"[Tomorrow at] LT",nextWeek:"dddd [at] LT",lastDay:"[Yesterday at] LT",lastWeek:"[Last] dddd [at] LT",sameElse:"L"},longDateFormat:{LTS:"h:mm:ss A",LT:"h:mm A",L:"MM/DD/YYYY",LL:"MMMM D, YYYY",LLL:"MMMM D, YYYY h:mm A",LLLL:"dddd, MMMM D, YYYY h:mm A"},invalidDate:"Invalid date",ordinal:"%d",dayOfMonthOrdinalParse:/\d{1,2}/,relativeTime:{future:"in %s",past:"%s ago",s:"a few seconds",ss:"%d seconds",m:"a minute",mm:"%d minutes",h:"an hour",hh:"%d hours",d:"a day",dd:"%d days",w:"a week",ww:"%d weeks",M:"a month",MM:"%d months",y:"a year",yy:"%d years"},months:je,monthsShort:Pe,week:{dow:0,doy:6},weekdays:Ke,weekdaysMin:Xe,weekdaysShort:Qe,meridiemParse:/[ap]\.?m?\.?/i},dt={},ct={};function ft(e,t){var n,r=Math.min(e.length,t.length);for(n=0;n<r;n+=1)if(e[n]!==t[n])return n;return r}function mt(e){return e?e.toLowerCase().replace("_","-"):e}function _t(t){var r=null;if(void 0===dt[t]&&e&&e.exports&&function(e){return null!=e.match("^[^/\\\\]*$")}(t))try{r=ut._abbr,n(5358)("./"+t),ht(r)}catch(e){dt[t]=null}return dt[t]}function ht(e,t){var n;return e&&((n=l(t)?yt(e):pt(e,t))?ut=n:"undefined"!=typeof console&&console.warn&&console.warn("Locale "+e+" not found. Did you forget to load it?")),ut._abbr}function pt(e,t){if(null!==t){var n,r=lt;if(t.abbr=e,null!=dt[e])T("defineLocaleOverride","use moment.updateLocale(localeName, config) to change an existing locale. moment.defineLocale(localeName, config) should only be used for creating a new locale See http://momentjs.com/guides/#/warnings/define-locale/ for more info."),r=dt[e]._config;else if(null!=t.parentLocale)if(null!=dt[t.parentLocale])r=dt[t.parentLocale]._config;else{if(null==(n=_t(t.parentLocale)))return ct[t.parentLocale]||(ct[t.parentLocale]=[]),ct[t.parentLocale].push({name:e,config:t}),null;r=n._config}return dt[e]=new O(x(r,t)),ct[e]&&ct[e].forEach((function(e){pt(e.name,e.config)})),ht(e),dt[e]}return delete dt[e],null}function yt(e){var t;if(e&&e._locale&&e._locale._abbr&&(e=e._locale._abbr),!e)return ut;if(!i(e)){if(t=_t(e))return t;e=[e]}return function(e){for(var t,n,r,a,i=0;i<e.length;){for(t=(a=mt(e[i]).split("-")).length,n=(n=mt(e[i+1]))?n.split("-"):null;t>0;){if(r=_t(a.slice(0,t).join("-")))return r;if(n&&n.length>=t&&ft(a,n)>=t-1)break;t--}i++}return ut}(e)}function gt(e){var t,n=e._a;return n&&-2===h(e).overflow&&(t=n[be]<0||n[be]>11?be:n[Ye]<1||n[Ye]>Ee(n[ke],n[be])?Ye:n[we]<0||n[we]>24||24===n[we]&&(0!==n[De]||0!==n[Te]||0!==n[Se])?we:n[De]<0||n[De]>59?De:n[Te]<0||n[Te]>59?Te:n[Se]<0||n[Se]>999?Se:-1,h(e)._overflowDayOfYear&&(t<ke||t>Ye)&&(t=Ye),h(e)._overflowWeeks&&-1===t&&(t=xe),h(e)._overflowWeekday&&-1===t&&(t=Oe),h(e).overflow=t),e}var vt=/^\s*((?:[+-]\d{6}|\d{4})-(?:\d\d-\d\d|W\d\d-\d|W\d\d|\d\d\d|\d\d))(?:(T| )(\d\d(?::\d\d(?::\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Mt=/^\s*((?:[+-]\d{6}|\d{4})(?:\d\d\d\d|W\d\d\d|W\d\d|\d\d\d|\d\d|))(?:(T| )(\d\d(?:\d\d(?:\d\d(?:[.,]\d+)?)?)?)([+-]\d\d(?::?\d\d)?|\s*Z)?)?$/,Lt=/Z|[+-]\d\d(?::?\d\d)?/,kt=[["YYYYYY-MM-DD",/[+-]\d{6}-\d\d-\d\d/],["YYYY-MM-DD",/\d{4}-\d\d-\d\d/],["GGGG-[W]WW-E",/\d{4}-W\d\d-\d/],["GGGG-[W]WW",/\d{4}-W\d\d/,!1],["YYYY-DDD",/\d{4}-\d{3}/],["YYYY-MM",/\d{4}-\d\d/,!1],["YYYYYYMMDD",/[+-]\d{10}/],["YYYYMMDD",/\d{8}/],["GGGG[W]WWE",/\d{4}W\d{3}/],["GGGG[W]WW",/\d{4}W\d{2}/,!1],["YYYYDDD",/\d{7}/],["YYYYMM",/\d{6}/,!1],["YYYY",/\d{4}/,!1]],bt=[["HH:mm:ss.SSSS",/\d\d:\d\d:\d\d\.\d+/],["HH:mm:ss,SSSS",/\d\d:\d\d:\d\d,\d+/],["HH:mm:ss",/\d\d:\d\d:\d\d/],["HH:mm",/\d\d:\d\d/],["HHmmss.SSSS",/\d\d\d\d\d\d\.\d+/],["HHmmss,SSSS",/\d\d\d\d\d\d,\d+/],["HHmmss",/\d\d\d\d\d\d/],["HHmm",/\d\d\d\d/],["HH",/\d\d/]],Yt=/^\/?Date\((-?\d+)/i,wt=/^(?:(Mon|Tue|Wed|Thu|Fri|Sat|Sun),?\s)?(\d{1,2})\s(Jan|Feb|Mar|Apr|May|Jun|Jul|Aug|Sep|Oct|Nov|Dec)\s(\d{2,4})\s(\d\d):(\d\d)(?::(\d\d))?\s(?:(UT|GMT|[ECMP][SD]T)|([Zz])|([+-]\d{4}))$/,Dt={UT:0,GMT:0,EDT:-240,EST:-300,CDT:-300,CST:-360,MDT:-360,MST:-420,PDT:-420,PST:-480};function Tt(e){var t,n,r,a,i,s,o=e._i,u=vt.exec(o)||Mt.exec(o),l=kt.length,d=bt.length;if(u){for(h(e).iso=!0,t=0,n=l;t<n;t++)if(kt[t][1].exec(u[1])){a=kt[t][0],r=!1!==kt[t][2];break}if(null==a)return void(e._isValid=!1);if(u[3]){for(t=0,n=d;t<n;t++)if(bt[t][1].exec(u[3])){i=(u[2]||" ")+bt[t][0];break}if(null==i)return void(e._isValid=!1)}if(!r&&null!=i)return void(e._isValid=!1);if(u[4]){if(!Lt.exec(u[4]))return void(e._isValid=!1);s="Z"}e._f=a+(i||"")+(s||""),jt(e)}else e._isValid=!1}function St(e){var t=parseInt(e,10);return t<=49?2e3+t:t<=999?1900+t:t}function xt(e){var t,n,r,a,i,s,o,u,l=wt.exec(e._i.replace(/\([^()]*\)|[\n\t]/g," ").replace(/(\s\s+)/g," ").replace(/^\s\s*/,"").replace(/\s\s*$/,""));if(l){if(n=l[4],r=l[3],a=l[2],i=l[5],s=l[6],o=l[7],u=[St(n),Pe.indexOf(r),parseInt(a,10),parseInt(i,10),parseInt(s,10)],o&&u.push(parseInt(o,10)),t=u,!function(e,t,n){return!e||Qe.indexOf(e)===new Date(t[0],t[1],t[2]).getDay()||(h(n).weekdayMismatch=!0,n._isValid=!1,!1)}(l[1],t,e))return;e._a=t,e._tzm=function(e,t,n){if(e)return Dt[e];if(t)return 0;var r=parseInt(n,10),a=r%100;return(r-a)/100*60+a}(l[8],l[9],l[10]),e._d=Be.apply(null,e._a),e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),h(e).rfc2822=!0}else e._isValid=!1}function Ot(e,t,n){return null!=e?e:null!=t?t:n}function Et(e){var t,n,r,i,s,o=[];if(!e._d){for(r=function(e){var t=new Date(a.now());return e._useUTC?[t.getUTCFullYear(),t.getUTCMonth(),t.getUTCDate()]:[t.getFullYear(),t.getMonth(),t.getDate()]}(e),e._w&&null==e._a[Ye]&&null==e._a[be]&&function(e){var t,n,r,a,i,s,o,u,l;null!=(t=e._w).GG||null!=t.W||null!=t.E?(i=1,s=4,n=Ot(t.GG,e._a[ke],Ge(Ct(),1,4).year),r=Ot(t.W,1),((a=Ot(t.E,1))<1||a>7)&&(u=!0)):(i=e._locale._week.dow,s=e._locale._week.doy,l=Ge(Ct(),i,s),n=Ot(t.gg,e._a[ke],l.year),r=Ot(t.w,l.week),null!=t.d?((a=t.d)<0||a>6)&&(u=!0):null!=t.e?(a=t.e+i,(t.e<0||t.e>6)&&(u=!0)):a=i),r<1||r>qe(n,i,s)?h(e)._overflowWeeks=!0:null!=u?h(e)._overflowWeekday=!0:(o=Je(n,r,a,i,s),e._a[ke]=o.year,e._dayOfYear=o.dayOfYear)}(e),null!=e._dayOfYear&&(s=Ot(e._a[ke],r[ke]),(e._dayOfYear>We(s)||0===e._dayOfYear)&&(h(e)._overflowDayOfYear=!0),n=Be(s,0,e._dayOfYear),e._a[be]=n.getUTCMonth(),e._a[Ye]=n.getUTCDate()),t=0;t<3&&null==e._a[t];++t)e._a[t]=o[t]=r[t];for(;t<7;t++)e._a[t]=o[t]=null==e._a[t]?2===t?1:0:e._a[t];24===e._a[we]&&0===e._a[De]&&0===e._a[Te]&&0===e._a[Se]&&(e._nextDay=!0,e._a[we]=0),e._d=(e._useUTC?Be:Ue).apply(null,o),i=e._useUTC?e._d.getUTCDay():e._d.getDay(),null!=e._tzm&&e._d.setUTCMinutes(e._d.getUTCMinutes()-e._tzm),e._nextDay&&(e._a[we]=24),e._w&&void 0!==e._w.d&&e._w.d!==i&&(h(e).weekdayMismatch=!0)}}function jt(e){if(e._f!==a.ISO_8601)if(e._f!==a.RFC_2822){e._a=[],h(e).empty=!0;var t,n,r,i,s,o,u,l=""+e._i,d=l.length,c=0;for(u=(r=R(e._f,e._locale).match(j)||[]).length,t=0;t<u;t++)i=r[t],(n=(l.match(he(i,e))||[])[0])&&((s=l.substr(0,l.indexOf(n))).length>0&&h(e).unusedInput.push(s),l=l.slice(l.indexOf(n)+n.length),c+=n.length),C[i]?(n?h(e).empty=!1:h(e).unusedTokens.push(i),Me(i,n,e)):e._strict&&!n&&h(e).unusedTokens.push(i);h(e).charsLeftOver=d-c,l.length>0&&h(e).unusedInput.push(l),e._a[we]<=12&&!0===h(e).bigHour&&e._a[we]>0&&(h(e).bigHour=void 0),h(e).parsedDateParts=e._a.slice(0),h(e).meridiem=e._meridiem,e._a[we]=function(e,t,n){var r;return null==n?t:null!=e.meridiemHour?e.meridiemHour(t,n):null!=e.isPM?((r=e.isPM(n))&&t<12&&(t+=12),r||12!==t||(t=0),t):t}(e._locale,e._a[we],e._meridiem),null!==(o=h(e).era)&&(e._a[ke]=e._locale.erasConvertYear(o,e._a[ke])),Et(e),gt(e)}else xt(e);else Tt(e)}function Pt(e){var t=e._i,n=e._f;return e._locale=e._locale||yt(e._l),null===t||void 0===n&&""===t?y({nullInput:!0}):("string"==typeof t&&(e._i=t=e._locale.preparse(t)),k(t)?new L(gt(t)):(c(t)?e._d=t:i(n)?function(e){var t,n,r,a,i,s,o=!1,u=e._f.length;if(0===u)return h(e).invalidFormat=!0,void(e._d=new Date(NaN));for(a=0;a<u;a++)i=0,s=!1,t=M({},e),null!=e._useUTC&&(t._useUTC=e._useUTC),t._f=e._f[a],jt(t),p(t)&&(s=!0),i+=h(t).charsLeftOver,i+=10*h(t).unusedTokens.length,h(t).score=i,o?i<r&&(r=i,n=t):(null==r||i<r||s)&&(r=i,n=t,s&&(o=!0));m(e,n||t)}(e):n?jt(e):function(e){var t=e._i;l(t)?e._d=new Date(a.now()):c(t)?e._d=new Date(t.valueOf()):"string"==typeof t?function(e){var t=Yt.exec(e._i);null===t?(Tt(e),!1===e._isValid&&(delete e._isValid,xt(e),!1===e._isValid&&(delete e._isValid,e._strict?e._isValid=!1:a.createFromInputFallback(e)))):e._d=new Date(+t[1])}(e):i(t)?(e._a=f(t.slice(0),(function(e){return parseInt(e,10)})),Et(e)):s(t)?function(e){if(!e._d){var t=I(e._i),n=void 0===t.day?t.date:t.day;e._a=f([t.year,t.month,n,t.hour,t.minute,t.second,t.millisecond],(function(e){return e&&parseInt(e,10)})),Et(e)}}(e):d(t)?e._d=new Date(t):a.createFromInputFallback(e)}(e),p(e)||(e._d=null),e))}function Ht(e,t,n,r,a){var o,l={};return!0!==t&&!1!==t||(r=t,t=void 0),!0!==n&&!1!==n||(r=n,n=void 0),(s(e)&&u(e)||i(e)&&0===e.length)&&(e=void 0),l._isAMomentObject=!0,l._useUTC=l._isUTC=a,l._l=n,l._i=e,l._f=t,l._strict=r,(o=new L(gt(Pt(l))))._nextDay&&(o.add(1,"d"),o._nextDay=void 0),o}function Ct(e,t,n,r){return Ht(e,t,n,r,!1)}a.createFromInputFallback=Y("value provided is not in a recognized RFC2822 or ISO format. moment construction falls back to js Date(), which is not reliable across all browsers and versions. Non RFC2822/ISO date formats are discouraged. Please refer to http://momentjs.com/guides/#/warnings/js-date/ for more info.",(function(e){e._d=new Date(e._i+(e._useUTC?" UTC":""))})),a.ISO_8601=function(){},a.RFC_2822=function(){};var At=Y("moment().min is deprecated, use moment.max instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Ct.apply(null,arguments);return this.isValid()&&e.isValid()?e<this?this:e:y()})),Nt=Y("moment().max is deprecated, use moment.min instead. http://momentjs.com/guides/#/warnings/min-max/",(function(){var e=Ct.apply(null,arguments);return this.isValid()&&e.isValid()?e>this?this:e:y()}));function Rt(e,t){var n,r;if(1===t.length&&i(t[0])&&(t=t[0]),!t.length)return Ct();for(n=t[0],r=1;r<t.length;++r)t[r].isValid()&&!t[r][e](n)||(n=t[r]);return n}var Ft=["year","quarter","month","week","day","hour","minute","second","millisecond"];function zt(e){var t=I(e),n=t.year||0,r=t.quarter||0,a=t.month||0,i=t.week||t.isoWeek||0,s=t.day||0,u=t.hour||0,l=t.minute||0,d=t.second||0,c=t.millisecond||0;this._isValid=function(e){var t,n,r=!1,a=Ft.length;for(t in e)if(o(e,t)&&(-1===Le.call(Ft,t)||null!=e[t]&&isNaN(e[t])))return!1;for(n=0;n<a;++n)if(e[Ft[n]]){if(r)return!1;parseFloat(e[Ft[n]])!==G(e[Ft[n]])&&(r=!0)}return!0}(t),this._milliseconds=+c+1e3*d+6e4*l+1e3*u*60*60,this._days=+s+7*i,this._months=+a+3*r+12*n,this._data={},this._locale=yt(),this._bubble()}function Wt(e){return e instanceof zt}function It(e){return e<0?-1*Math.round(-1*e):Math.round(e)}function Ut(e,t){A(e,0,0,(function(){var e=this.utcOffset(),n="+";return e<0&&(e=-e,n="-"),n+E(~~(e/60),2)+t+E(~~e%60,2)}))}Ut("Z",":"),Ut("ZZ",""),_e("Z",fe),_e("ZZ",fe),ge(["Z","ZZ"],(function(e,t,n){n._useUTC=!0,n._tzm=Vt(fe,e)}));var Bt=/([\+\-]|\d\d)/gi;function Vt(e,t){var n,r,a=(t||"").match(e);return null===a?null:0===(r=60*(n=((a[a.length-1]||[])+"").match(Bt)||["-",0,0])[1]+G(n[2]))?0:"+"===n[0]?r:-r}function Jt(e,t){var n,r;return t._isUTC?(n=t.clone(),r=(k(e)||c(e)?e.valueOf():Ct(e).valueOf())-n.valueOf(),n._d.setTime(n._d.valueOf()+r),a.updateOffset(n,!1),n):Ct(e).local()}function Gt(e){return-Math.round(e._d.getTimezoneOffset())}function qt(){return!!this.isValid()&&this._isUTC&&0===this._offset}a.updateOffset=function(){};var $t=/^(-|\+)?(?:(\d*)[. ])?(\d+):(\d+)(?::(\d+)(\.\d*)?)?$/,Kt=/^(-|\+)?P(?:([-+]?[0-9,.]*)Y)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)W)?(?:([-+]?[0-9,.]*)D)?(?:T(?:([-+]?[0-9,.]*)H)?(?:([-+]?[0-9,.]*)M)?(?:([-+]?[0-9,.]*)S)?)?$/;function Qt(e,t){var n,r,a,i,s,u,l=e,c=null;return Wt(e)?l={ms:e._milliseconds,d:e._days,M:e._months}:d(e)||!isNaN(+e)?(l={},t?l[t]=+e:l.milliseconds=+e):(c=$t.exec(e))?(n="-"===c[1]?-1:1,l={y:0,d:G(c[Ye])*n,h:G(c[we])*n,m:G(c[De])*n,s:G(c[Te])*n,ms:G(It(1e3*c[Se]))*n}):(c=Kt.exec(e))?(n="-"===c[1]?-1:1,l={y:Xt(c[2],n),M:Xt(c[3],n),w:Xt(c[4],n),d:Xt(c[5],n),h:Xt(c[6],n),m:Xt(c[7],n),s:Xt(c[8],n)}):null==l?l={}:"object"==typeof l&&("from"in l||"to"in l)&&(i=Ct(l.from),s=Ct(l.to),a=i.isValid()&&s.isValid()?(s=Jt(s,i),i.isBefore(s)?u=Zt(i,s):((u=Zt(s,i)).milliseconds=-u.milliseconds,u.months=-u.months),u):{milliseconds:0,months:0},(l={}).ms=a.milliseconds,l.M=a.months),r=new zt(l),Wt(e)&&o(e,"_locale")&&(r._locale=e._locale),Wt(e)&&o(e,"_isValid")&&(r._isValid=e._isValid),r}function Xt(e,t){var n=e&&parseFloat(e.replace(",","."));return(isNaN(n)?0:n)*t}function Zt(e,t){var n={};return n.months=t.month()-e.month()+12*(t.year()-e.year()),e.clone().add(n.months,"M").isAfter(t)&&--n.months,n.milliseconds=+t-+e.clone().add(n.months,"M"),n}function en(e,t){return function(n,r){var a;return null===r||isNaN(+r)||(T(t,"moment()."+t+"(period, number) is deprecated. Please use moment()."+t+"(number, period). See http://momentjs.com/guides/#/warnings/add-inverted-param/ for more info."),a=n,n=r,r=a),tn(this,Qt(n,r),e),this}}function tn(e,t,n,r){var i=t._milliseconds,s=It(t._days),o=It(t._months);e.isValid()&&(r=null==r||r,o&&Re(e,$(e,"Month")+o*n),s&&K(e,"Date",$(e,"Date")+s*n),i&&e._d.setTime(e._d.valueOf()+i*n),r&&a.updateOffset(e,s||o))}Qt.fn=zt.prototype,Qt.invalid=function(){return Qt(NaN)};var nn=en(1,"add"),rn=en(-1,"subtract");function an(e){return"string"==typeof e||e instanceof String}function sn(e){return k(e)||c(e)||an(e)||d(e)||function(e){var t=i(e),n=!1;return t&&(n=0===e.filter((function(t){return!d(t)&&an(e)})).length),t&&n}(e)||function(e){var t,n,r=s(e)&&!u(e),a=!1,i=["years","year","y","months","month","M","days","day","d","dates","date","D","hours","hour","h","minutes","minute","m","seconds","second","s","milliseconds","millisecond","ms"],l=i.length;for(t=0;t<l;t+=1)n=i[t],a=a||o(e,n);return r&&a}(e)||null==e}function on(e,t){if(e.date()<t.date())return-on(t,e);var n=12*(t.year()-e.year())+(t.month()-e.month()),r=e.clone().add(n,"months");return-(n+(t-r<0?(t-r)/(r-e.clone().add(n-1,"months")):(t-r)/(e.clone().add(n+1,"months")-r)))||0}function un(e){var t;return void 0===e?this._locale._abbr:(null!=(t=yt(e))&&(this._locale=t),this)}a.defaultFormat="YYYY-MM-DDTHH:mm:ssZ",a.defaultFormatUtc="YYYY-MM-DDTHH:mm:ss[Z]";var ln=Y("moment().lang() is deprecated. Instead, use moment().localeData() to get the language configuration. Use moment().locale() to change languages.",(function(e){return void 0===e?this.localeData():this.locale(e)}));function dn(){return this._locale}var cn=1e3,fn=6e4,mn=36e5,_n=126227808e5;function hn(e,t){return(e%t+t)%t}function pn(e,t,n){return e<100&&e>=0?new Date(e+400,t,n)-_n:new Date(e,t,n).valueOf()}function yn(e,t,n){return e<100&&e>=0?Date.UTC(e+400,t,n)-_n:Date.UTC(e,t,n)}function gn(e,t){return t.erasAbbrRegex(e)}function vn(){var e,t,n=[],r=[],a=[],i=[],s=this.eras();for(e=0,t=s.length;e<t;++e)r.push(pe(s[e].name)),n.push(pe(s[e].abbr)),a.push(pe(s[e].narrow)),i.push(pe(s[e].name)),i.push(pe(s[e].abbr)),i.push(pe(s[e].narrow));this._erasRegex=new RegExp("^("+i.join("|")+")","i"),this._erasNameRegex=new RegExp("^("+r.join("|")+")","i"),this._erasAbbrRegex=new RegExp("^("+n.join("|")+")","i"),this._erasNarrowRegex=new RegExp("^("+a.join("|")+")","i")}function Mn(e,t){A(0,[e,e.length],0,t)}function Ln(e,t,n,r,a){var i;return null==e?Ge(this,r,a).year:(t>(i=qe(e,r,a))&&(t=i),kn.call(this,e,t,n,r,a))}function kn(e,t,n,r,a){var i=Je(e,t,n,r,a),s=Be(i.year,0,i.dayOfYear);return this.year(s.getUTCFullYear()),this.month(s.getUTCMonth()),this.date(s.getUTCDate()),this}A("N",0,0,"eraAbbr"),A("NN",0,0,"eraAbbr"),A("NNN",0,0,"eraAbbr"),A("NNNN",0,0,"eraName"),A("NNNNN",0,0,"eraNarrow"),A("y",["y",1],"yo","eraYear"),A("y",["yy",2],0,"eraYear"),A("y",["yyy",3],0,"eraYear"),A("y",["yyyy",4],0,"eraYear"),_e("N",gn),_e("NN",gn),_e("NNN",gn),_e("NNNN",(function(e,t){return t.erasNameRegex(e)})),_e("NNNNN",(function(e,t){return t.erasNarrowRegex(e)})),ge(["N","NN","NNN","NNNN","NNNNN"],(function(e,t,n,r){var a=n._locale.erasParse(e,r,n._strict);a?h(n).era=a:h(n).invalidEra=e})),_e("y",le),_e("yy",le),_e("yyy",le),_e("yyyy",le),_e("yo",(function(e,t){return t._eraYearOrdinalRegex||le})),ge(["y","yy","yyy","yyyy"],ke),ge(["yo"],(function(e,t,n,r){var a;n._locale._eraYearOrdinalRegex&&(a=e.match(n._locale._eraYearOrdinalRegex)),n._locale.eraYearOrdinalParse?t[ke]=n._locale.eraYearOrdinalParse(e,a):t[ke]=parseInt(e,10)})),A(0,["gg",2],0,(function(){return this.weekYear()%100})),A(0,["GG",2],0,(function(){return this.isoWeekYear()%100})),Mn("gggg","weekYear"),Mn("ggggg","weekYear"),Mn("GGGG","isoWeekYear"),Mn("GGGGG","isoWeekYear"),z("weekYear","gg"),z("isoWeekYear","GG"),B("weekYear",1),B("isoWeekYear",1),_e("G",de),_e("g",de),_e("GG",re,Z),_e("gg",re,Z),_e("GGGG",oe,te),_e("gggg",oe,te),_e("GGGGG",ue,ne),_e("ggggg",ue,ne),ve(["gggg","ggggg","GGGG","GGGGG"],(function(e,t,n,r){t[r.substr(0,2)]=G(e)})),ve(["gg","GG"],(function(e,t,n,r){t[r]=a.parseTwoDigitYear(e)})),A("Q",0,"Qo","quarter"),z("quarter","Q"),B("quarter",7),_e("Q",X),ge("Q",(function(e,t){t[be]=3*(G(e)-1)})),A("D",["DD",2],"Do","date"),z("date","D"),B("date",9),_e("D",re),_e("DD",re,Z),_e("Do",(function(e,t){return e?t._dayOfMonthOrdinalParse||t._ordinalParse:t._dayOfMonthOrdinalParseLenient})),ge(["D","DD"],Ye),ge("Do",(function(e,t){t[Ye]=G(e.match(re)[0])}));var bn=q("Date",!0);A("DDD",["DDDD",3],"DDDo","dayOfYear"),z("dayOfYear","DDD"),B("dayOfYear",4),_e("DDD",se),_e("DDDD",ee),ge(["DDD","DDDD"],(function(e,t,n){n._dayOfYear=G(e)})),A("m",["mm",2],0,"minute"),z("minute","m"),B("minute",14),_e("m",re),_e("mm",re,Z),ge(["m","mm"],De);var Yn=q("Minutes",!1);A("s",["ss",2],0,"second"),z("second","s"),B("second",15),_e("s",re),_e("ss",re,Z),ge(["s","ss"],Te);var wn,Dn,Tn=q("Seconds",!1);for(A("S",0,0,(function(){return~~(this.millisecond()/100)})),A(0,["SS",2],0,(function(){return~~(this.millisecond()/10)})),A(0,["SSS",3],0,"millisecond"),A(0,["SSSS",4],0,(function(){return 10*this.millisecond()})),A(0,["SSSSS",5],0,(function(){return 100*this.millisecond()})),A(0,["SSSSSS",6],0,(function(){return 1e3*this.millisecond()})),A(0,["SSSSSSS",7],0,(function(){return 1e4*this.millisecond()})),A(0,["SSSSSSSS",8],0,(function(){return 1e5*this.millisecond()})),A(0,["SSSSSSSSS",9],0,(function(){return 1e6*this.millisecond()})),z("millisecond","ms"),B("millisecond",16),_e("S",se,X),_e("SS",se,Z),_e("SSS",se,ee),wn="SSSS";wn.length<=9;wn+="S")_e(wn,le);function Sn(e,t){t[Se]=G(1e3*("0."+e))}for(wn="S";wn.length<=9;wn+="S")ge(wn,Sn);Dn=q("Milliseconds",!1),A("z",0,0,"zoneAbbr"),A("zz",0,0,"zoneName");var xn=L.prototype;function On(e){return e}xn.add=nn,xn.calendar=function(e,t){1===arguments.length&&(arguments[0]?sn(arguments[0])?(e=arguments[0],t=void 0):function(e){var t,n=s(e)&&!u(e),r=!1,a=["sameDay","nextDay","lastDay","nextWeek","lastWeek","sameElse"];for(t=0;t<a.length;t+=1)r=r||o(e,a[t]);return n&&r}(arguments[0])&&(t=arguments[0],e=void 0):(e=void 0,t=void 0));var n=e||Ct(),r=Jt(n,this).startOf("day"),i=a.calendarFormat(this,r)||"sameElse",l=t&&(S(t[i])?t[i].call(this,n):t[i]);return this.format(l||this.localeData().calendar(i,this,Ct(n)))},xn.clone=function(){return new L(this)},xn.diff=function(e,t,n){var r,a,i;if(!this.isValid())return NaN;if(!(r=Jt(e,this)).isValid())return NaN;switch(a=6e4*(r.utcOffset()-this.utcOffset()),t=W(t)){case"year":i=on(this,r)/12;break;case"month":i=on(this,r);break;case"quarter":i=on(this,r)/3;break;case"second":i=(this-r)/1e3;break;case"minute":i=(this-r)/6e4;break;case"hour":i=(this-r)/36e5;break;case"day":i=(this-r-a)/864e5;break;case"week":i=(this-r-a)/6048e5;break;default:i=this-r}return n?i:J(i)},xn.endOf=function(e){var t,n;if(void 0===(e=W(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?yn:pn,e){case"year":t=n(this.year()+1,0,1)-1;break;case"quarter":t=n(this.year(),this.month()-this.month()%3+3,1)-1;break;case"month":t=n(this.year(),this.month()+1,1)-1;break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday()+7)-1;break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1)+7)-1;break;case"day":case"date":t=n(this.year(),this.month(),this.date()+1)-1;break;case"hour":t=this._d.valueOf(),t+=mn-hn(t+(this._isUTC?0:this.utcOffset()*fn),mn)-1;break;case"minute":t=this._d.valueOf(),t+=fn-hn(t,fn)-1;break;case"second":t=this._d.valueOf(),t+=cn-hn(t,cn)-1}return this._d.setTime(t),a.updateOffset(this,!0),this},xn.format=function(e){e||(e=this.isUtc()?a.defaultFormatUtc:a.defaultFormat);var t=N(this,e);return this.localeData().postformat(t)},xn.from=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Ct(e).isValid())?Qt({to:this,from:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},xn.fromNow=function(e){return this.from(Ct(),e)},xn.to=function(e,t){return this.isValid()&&(k(e)&&e.isValid()||Ct(e).isValid())?Qt({from:this,to:e}).locale(this.locale()).humanize(!t):this.localeData().invalidDate()},xn.toNow=function(e){return this.to(Ct(),e)},xn.get=function(e){return S(this[e=W(e)])?this[e]():this},xn.invalidAt=function(){return h(this).overflow},xn.isAfter=function(e,t){var n=k(e)?e:Ct(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=W(t)||"millisecond")?this.valueOf()>n.valueOf():n.valueOf()<this.clone().startOf(t).valueOf())},xn.isBefore=function(e,t){var n=k(e)?e:Ct(e);return!(!this.isValid()||!n.isValid())&&("millisecond"===(t=W(t)||"millisecond")?this.valueOf()<n.valueOf():this.clone().endOf(t).valueOf()<n.valueOf())},xn.isBetween=function(e,t,n,r){var a=k(e)?e:Ct(e),i=k(t)?t:Ct(t);return!!(this.isValid()&&a.isValid()&&i.isValid())&&("("===(r=r||"()")[0]?this.isAfter(a,n):!this.isBefore(a,n))&&(")"===r[1]?this.isBefore(i,n):!this.isAfter(i,n))},xn.isSame=function(e,t){var n,r=k(e)?e:Ct(e);return!(!this.isValid()||!r.isValid())&&("millisecond"===(t=W(t)||"millisecond")?this.valueOf()===r.valueOf():(n=r.valueOf(),this.clone().startOf(t).valueOf()<=n&&n<=this.clone().endOf(t).valueOf()))},xn.isSameOrAfter=function(e,t){return this.isSame(e,t)||this.isAfter(e,t)},xn.isSameOrBefore=function(e,t){return this.isSame(e,t)||this.isBefore(e,t)},xn.isValid=function(){return p(this)},xn.lang=ln,xn.locale=un,xn.localeData=dn,xn.max=Nt,xn.min=At,xn.parsingFlags=function(){return m({},h(this))},xn.set=function(e,t){if("object"==typeof e){var n,r=function(e){var t,n=[];for(t in e)o(e,t)&&n.push({unit:t,priority:U[t]});return n.sort((function(e,t){return e.priority-t.priority})),n}(e=I(e)),a=r.length;for(n=0;n<a;n++)this[r[n].unit](e[r[n].unit])}else if(S(this[e=W(e)]))return this[e](t);return this},xn.startOf=function(e){var t,n;if(void 0===(e=W(e))||"millisecond"===e||!this.isValid())return this;switch(n=this._isUTC?yn:pn,e){case"year":t=n(this.year(),0,1);break;case"quarter":t=n(this.year(),this.month()-this.month()%3,1);break;case"month":t=n(this.year(),this.month(),1);break;case"week":t=n(this.year(),this.month(),this.date()-this.weekday());break;case"isoWeek":t=n(this.year(),this.month(),this.date()-(this.isoWeekday()-1));break;case"day":case"date":t=n(this.year(),this.month(),this.date());break;case"hour":t=this._d.valueOf(),t-=hn(t+(this._isUTC?0:this.utcOffset()*fn),mn);break;case"minute":t=this._d.valueOf(),t-=hn(t,fn);break;case"second":t=this._d.valueOf(),t-=hn(t,cn)}return this._d.setTime(t),a.updateOffset(this,!0),this},xn.subtract=rn,xn.toArray=function(){var e=this;return[e.year(),e.month(),e.date(),e.hour(),e.minute(),e.second(),e.millisecond()]},xn.toObject=function(){var e=this;return{years:e.year(),months:e.month(),date:e.date(),hours:e.hours(),minutes:e.minutes(),seconds:e.seconds(),milliseconds:e.milliseconds()}},xn.toDate=function(){return new Date(this.valueOf())},xn.toISOString=function(e){if(!this.isValid())return null;var t=!0!==e,n=t?this.clone().utc():this;return n.year()<0||n.year()>9999?N(n,t?"YYYYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYYYY-MM-DD[T]HH:mm:ss.SSSZ"):S(Date.prototype.toISOString)?t?this.toDate().toISOString():new Date(this.valueOf()+60*this.utcOffset()*1e3).toISOString().replace("Z",N(n,"Z")):N(n,t?"YYYY-MM-DD[T]HH:mm:ss.SSS[Z]":"YYYY-MM-DD[T]HH:mm:ss.SSSZ")},xn.inspect=function(){if(!this.isValid())return"moment.invalid(/* "+this._i+" */)";var e,t,n,r="moment",a="";return this.isLocal()||(r=0===this.utcOffset()?"moment.utc":"moment.parseZone",a="Z"),e="["+r+'("]',t=0<=this.year()&&this.year()<=9999?"YYYY":"YYYYYY",n=a+'[")]',this.format(e+t+"-MM-DD[T]HH:mm:ss.SSS"+n)},"undefined"!=typeof Symbol&&null!=Symbol.for&&(xn[Symbol.for("nodejs.util.inspect.custom")]=function(){return"Moment<"+this.format()+">"}),xn.toJSON=function(){return this.isValid()?this.toISOString():null},xn.toString=function(){return this.clone().locale("en").format("ddd MMM DD YYYY HH:mm:ss [GMT]ZZ")},xn.unix=function(){return Math.floor(this.valueOf()/1e3)},xn.valueOf=function(){return this._d.valueOf()-6e4*(this._offset||0)},xn.creationData=function(){return{input:this._i,format:this._f,locale:this._locale,isUTC:this._isUTC,strict:this._strict}},xn.eraName=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].name;if(r[e].until<=n&&n<=r[e].since)return r[e].name}return""},xn.eraNarrow=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].narrow;if(r[e].until<=n&&n<=r[e].since)return r[e].narrow}return""},xn.eraAbbr=function(){var e,t,n,r=this.localeData().eras();for(e=0,t=r.length;e<t;++e){if(n=this.clone().startOf("day").valueOf(),r[e].since<=n&&n<=r[e].until)return r[e].abbr;if(r[e].until<=n&&n<=r[e].since)return r[e].abbr}return""},xn.eraYear=function(){var e,t,n,r,i=this.localeData().eras();for(e=0,t=i.length;e<t;++e)if(n=i[e].since<=i[e].until?1:-1,r=this.clone().startOf("day").valueOf(),i[e].since<=r&&r<=i[e].until||i[e].until<=r&&r<=i[e].since)return(this.year()-a(i[e].since).year())*n+i[e].offset;return this.year()},xn.year=Ie,xn.isLeapYear=function(){return V(this.year())},xn.weekYear=function(e){return Ln.call(this,e,this.week(),this.weekday(),this.localeData()._week.dow,this.localeData()._week.doy)},xn.isoWeekYear=function(e){return Ln.call(this,e,this.isoWeek(),this.isoWeekday(),1,4)},xn.quarter=xn.quarters=function(e){return null==e?Math.ceil((this.month()+1)/3):this.month(3*(e-1)+this.month()%3)},xn.month=Fe,xn.daysInMonth=function(){return Ee(this.year(),this.month())},xn.week=xn.weeks=function(e){var t=this.localeData().week(this);return null==e?t:this.add(7*(e-t),"d")},xn.isoWeek=xn.isoWeeks=function(e){var t=Ge(this,1,4).week;return null==e?t:this.add(7*(e-t),"d")},xn.weeksInYear=function(){var e=this.localeData()._week;return qe(this.year(),e.dow,e.doy)},xn.weeksInWeekYear=function(){var e=this.localeData()._week;return qe(this.weekYear(),e.dow,e.doy)},xn.isoWeeksInYear=function(){return qe(this.year(),1,4)},xn.isoWeeksInISOWeekYear=function(){return qe(this.isoWeekYear(),1,4)},xn.date=bn,xn.day=xn.days=function(e){if(!this.isValid())return null!=e?this:NaN;var t=this._isUTC?this._d.getUTCDay():this._d.getDay();return null!=e?(e=function(e,t){return"string"!=typeof e?e:isNaN(e)?"number"==typeof(e=t.weekdaysParse(e))?e:null:parseInt(e,10)}(e,this.localeData()),this.add(e-t,"d")):t},xn.weekday=function(e){if(!this.isValid())return null!=e?this:NaN;var t=(this.day()+7-this.localeData()._week.dow)%7;return null==e?t:this.add(e-t,"d")},xn.isoWeekday=function(e){if(!this.isValid())return null!=e?this:NaN;if(null!=e){var t=function(e,t){return"string"==typeof e?t.weekdaysParse(e)%7||7:isNaN(e)?null:e}(e,this.localeData());return this.day(this.day()%7?t:t-7)}return this.day()||7},xn.dayOfYear=function(e){var t=Math.round((this.clone().startOf("day")-this.clone().startOf("year"))/864e5)+1;return null==e?t:this.add(e-t,"d")},xn.hour=xn.hours=ot,xn.minute=xn.minutes=Yn,xn.second=xn.seconds=Tn,xn.millisecond=xn.milliseconds=Dn,xn.utcOffset=function(e,t,n){var r,i=this._offset||0;if(!this.isValid())return null!=e?this:NaN;if(null!=e){if("string"==typeof e){if(null===(e=Vt(fe,e)))return this}else Math.abs(e)<16&&!n&&(e*=60);return!this._isUTC&&t&&(r=Gt(this)),this._offset=e,this._isUTC=!0,null!=r&&this.add(r,"m"),i!==e&&(!t||this._changeInProgress?tn(this,Qt(e-i,"m"),1,!1):this._changeInProgress||(this._changeInProgress=!0,a.updateOffset(this,!0),this._changeInProgress=null)),this}return this._isUTC?i:Gt(this)},xn.utc=function(e){return this.utcOffset(0,e)},xn.local=function(e){return this._isUTC&&(this.utcOffset(0,e),this._isUTC=!1,e&&this.subtract(Gt(this),"m")),this},xn.parseZone=function(){if(null!=this._tzm)this.utcOffset(this._tzm,!1,!0);else if("string"==typeof this._i){var e=Vt(ce,this._i);null!=e?this.utcOffset(e):this.utcOffset(0,!0)}return this},xn.hasAlignedHourOffset=function(e){return!!this.isValid()&&(e=e?Ct(e).utcOffset():0,(this.utcOffset()-e)%60==0)},xn.isDST=function(){return this.utcOffset()>this.clone().month(0).utcOffset()||this.utcOffset()>this.clone().month(5).utcOffset()},xn.isLocal=function(){return!!this.isValid()&&!this._isUTC},xn.isUtcOffset=function(){return!!this.isValid()&&this._isUTC},xn.isUtc=qt,xn.isUTC=qt,xn.zoneAbbr=function(){return this._isUTC?"UTC":""},xn.zoneName=function(){return this._isUTC?"Coordinated Universal Time":""},xn.dates=Y("dates accessor is deprecated. Use date instead.",bn),xn.months=Y("months accessor is deprecated. Use month instead",Fe),xn.years=Y("years accessor is deprecated. Use year instead",Ie),xn.zone=Y("moment().zone is deprecated, use moment().utcOffset instead. http://momentjs.com/guides/#/warnings/zone/",(function(e,t){return null!=e?("string"!=typeof e&&(e=-e),this.utcOffset(e,t),this):-this.utcOffset()})),xn.isDSTShifted=Y("isDSTShifted is deprecated. See http://momentjs.com/guides/#/warnings/dst-shifted/ for more information",(function(){if(!l(this._isDSTShifted))return this._isDSTShifted;var e,t={};return M(t,this),(t=Pt(t))._a?(e=t._isUTC?_(t._a):Ct(t._a),this._isDSTShifted=this.isValid()&&function(e,t,n){var r,a=Math.min(e.length,t.length),i=Math.abs(e.length-t.length),s=0;for(r=0;r<a;r++)(n&&e[r]!==t[r]||!n&&G(e[r])!==G(t[r]))&&s++;return s+i}(t._a,e.toArray())>0):this._isDSTShifted=!1,this._isDSTShifted}));var En=O.prototype;function jn(e,t,n,r){var a=yt(),i=_().set(r,t);return a[n](i,e)}function Pn(e,t,n){if(d(e)&&(t=e,e=void 0),e=e||"",null!=t)return jn(e,t,n,"month");var r,a=[];for(r=0;r<12;r++)a[r]=jn(e,r,n,"month");return a}function Hn(e,t,n,r){"boolean"==typeof e?(d(t)&&(n=t,t=void 0),t=t||""):(n=t=e,e=!1,d(t)&&(n=t,t=void 0),t=t||"");var a,i=yt(),s=e?i._week.dow:0,o=[];if(null!=n)return jn(t,(n+s)%7,r,"day");for(a=0;a<7;a++)o[a]=jn(t,(a+s)%7,r,"day");return o}En.calendar=function(e,t,n){var r=this._calendar[e]||this._calendar.sameElse;return S(r)?r.call(t,n):r},En.longDateFormat=function(e){var t=this._longDateFormat[e],n=this._longDateFormat[e.toUpperCase()];return t||!n?t:(this._longDateFormat[e]=n.match(j).map((function(e){return"MMMM"===e||"MM"===e||"DD"===e||"dddd"===e?e.slice(1):e})).join(""),this._longDateFormat[e])},En.invalidDate=function(){return this._invalidDate},En.ordinal=function(e){return this._ordinal.replace("%d",e)},En.preparse=On,En.postformat=On,En.relativeTime=function(e,t,n,r){var a=this._relativeTime[n];return S(a)?a(e,t,n,r):a.replace(/%d/i,e)},En.pastFuture=function(e,t){var n=this._relativeTime[e>0?"future":"past"];return S(n)?n(t):n.replace(/%s/i,t)},En.set=function(e){var t,n;for(n in e)o(e,n)&&(S(t=e[n])?this[n]=t:this["_"+n]=t);this._config=e,this._dayOfMonthOrdinalParseLenient=new RegExp((this._dayOfMonthOrdinalParse.source||this._ordinalParse.source)+"|"+/\d{1,2}/.source)},En.eras=function(e,t){var n,r,i,s=this._eras||yt("en")._eras;for(n=0,r=s.length;n<r;++n)switch("string"==typeof s[n].since&&(i=a(s[n].since).startOf("day"),s[n].since=i.valueOf()),typeof s[n].until){case"undefined":s[n].until=1/0;break;case"string":i=a(s[n].until).startOf("day").valueOf(),s[n].until=i.valueOf()}return s},En.erasParse=function(e,t,n){var r,a,i,s,o,u=this.eras();for(e=e.toUpperCase(),r=0,a=u.length;r<a;++r)if(i=u[r].name.toUpperCase(),s=u[r].abbr.toUpperCase(),o=u[r].narrow.toUpperCase(),n)switch(t){case"N":case"NN":case"NNN":if(s===e)return u[r];break;case"NNNN":if(i===e)return u[r];break;case"NNNNN":if(o===e)return u[r]}else if([i,s,o].indexOf(e)>=0)return u[r]},En.erasConvertYear=function(e,t){var n=e.since<=e.until?1:-1;return void 0===t?a(e.since).year():a(e.since).year()+(t-e.offset)*n},En.erasAbbrRegex=function(e){return o(this,"_erasAbbrRegex")||vn.call(this),e?this._erasAbbrRegex:this._erasRegex},En.erasNameRegex=function(e){return o(this,"_erasNameRegex")||vn.call(this),e?this._erasNameRegex:this._erasRegex},En.erasNarrowRegex=function(e){return o(this,"_erasNarrowRegex")||vn.call(this),e?this._erasNarrowRegex:this._erasRegex},En.months=function(e,t){return e?i(this._months)?this._months[e.month()]:this._months[(this._months.isFormat||He).test(t)?"format":"standalone"][e.month()]:i(this._months)?this._months:this._months.standalone},En.monthsShort=function(e,t){return e?i(this._monthsShort)?this._monthsShort[e.month()]:this._monthsShort[He.test(t)?"format":"standalone"][e.month()]:i(this._monthsShort)?this._monthsShort:this._monthsShort.standalone},En.monthsParse=function(e,t,n){var r,a,i;if(this._monthsParseExact)return Ne.call(this,e,t,n);for(this._monthsParse||(this._monthsParse=[],this._longMonthsParse=[],this._shortMonthsParse=[]),r=0;r<12;r++){if(a=_([2e3,r]),n&&!this._longMonthsParse[r]&&(this._longMonthsParse[r]=new RegExp("^"+this.months(a,"").replace(".","")+"$","i"),this._shortMonthsParse[r]=new RegExp("^"+this.monthsShort(a,"").replace(".","")+"$","i")),n||this._monthsParse[r]||(i="^"+this.months(a,"")+"|^"+this.monthsShort(a,""),this._monthsParse[r]=new RegExp(i.replace(".",""),"i")),n&&"MMMM"===t&&this._longMonthsParse[r].test(e))return r;if(n&&"MMM"===t&&this._shortMonthsParse[r].test(e))return r;if(!n&&this._monthsParse[r].test(e))return r}},En.monthsRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||ze.call(this),e?this._monthsStrictRegex:this._monthsRegex):(o(this,"_monthsRegex")||(this._monthsRegex=Ae),this._monthsStrictRegex&&e?this._monthsStrictRegex:this._monthsRegex)},En.monthsShortRegex=function(e){return this._monthsParseExact?(o(this,"_monthsRegex")||ze.call(this),e?this._monthsShortStrictRegex:this._monthsShortRegex):(o(this,"_monthsShortRegex")||(this._monthsShortRegex=Ce),this._monthsShortStrictRegex&&e?this._monthsShortStrictRegex:this._monthsShortRegex)},En.week=function(e){return Ge(e,this._week.dow,this._week.doy).week},En.firstDayOfYear=function(){return this._week.doy},En.firstDayOfWeek=function(){return this._week.dow},En.weekdays=function(e,t){var n=i(this._weekdays)?this._weekdays:this._weekdays[e&&!0!==e&&this._weekdays.isFormat.test(t)?"format":"standalone"];return!0===e?$e(n,this._week.dow):e?n[e.day()]:n},En.weekdaysMin=function(e){return!0===e?$e(this._weekdaysMin,this._week.dow):e?this._weekdaysMin[e.day()]:this._weekdaysMin},En.weekdaysShort=function(e){return!0===e?$e(this._weekdaysShort,this._week.dow):e?this._weekdaysShort[e.day()]:this._weekdaysShort},En.weekdaysParse=function(e,t,n){var r,a,i;if(this._weekdaysParseExact)return nt.call(this,e,t,n);for(this._weekdaysParse||(this._weekdaysParse=[],this._minWeekdaysParse=[],this._shortWeekdaysParse=[],this._fullWeekdaysParse=[]),r=0;r<7;r++){if(a=_([2e3,1]).day(r),n&&!this._fullWeekdaysParse[r]&&(this._fullWeekdaysParse[r]=new RegExp("^"+this.weekdays(a,"").replace(".","\\.?")+"$","i"),this._shortWeekdaysParse[r]=new RegExp("^"+this.weekdaysShort(a,"").replace(".","\\.?")+"$","i"),this._minWeekdaysParse[r]=new RegExp("^"+this.weekdaysMin(a,"").replace(".","\\.?")+"$","i")),this._weekdaysParse[r]||(i="^"+this.weekdays(a,"")+"|^"+this.weekdaysShort(a,"")+"|^"+this.weekdaysMin(a,""),this._weekdaysParse[r]=new RegExp(i.replace(".",""),"i")),n&&"dddd"===t&&this._fullWeekdaysParse[r].test(e))return r;if(n&&"ddd"===t&&this._shortWeekdaysParse[r].test(e))return r;if(n&&"dd"===t&&this._minWeekdaysParse[r].test(e))return r;if(!n&&this._weekdaysParse[r].test(e))return r}},En.weekdaysRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysStrictRegex:this._weekdaysRegex):(o(this,"_weekdaysRegex")||(this._weekdaysRegex=Ze),this._weekdaysStrictRegex&&e?this._weekdaysStrictRegex:this._weekdaysRegex)},En.weekdaysShortRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex):(o(this,"_weekdaysShortRegex")||(this._weekdaysShortRegex=et),this._weekdaysShortStrictRegex&&e?this._weekdaysShortStrictRegex:this._weekdaysShortRegex)},En.weekdaysMinRegex=function(e){return this._weekdaysParseExact?(o(this,"_weekdaysRegex")||rt.call(this),e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex):(o(this,"_weekdaysMinRegex")||(this._weekdaysMinRegex=tt),this._weekdaysMinStrictRegex&&e?this._weekdaysMinStrictRegex:this._weekdaysMinRegex)},En.isPM=function(e){return"p"===(e+"").toLowerCase().charAt(0)},En.meridiem=function(e,t,n){return e>11?n?"pm":"PM":n?"am":"AM"},ht("en",{eras:[{since:"0001-01-01",until:1/0,offset:1,name:"Anno Domini",narrow:"AD",abbr:"AD"},{since:"0000-12-31",until:-1/0,offset:1,name:"Before Christ",narrow:"BC",abbr:"BC"}],dayOfMonthOrdinalParse:/\d{1,2}(th|st|nd|rd)/,ordinal:function(e){var t=e%10;return e+(1===G(e%100/10)?"th":1===t?"st":2===t?"nd":3===t?"rd":"th")}}),a.lang=Y("moment.lang is deprecated. Use moment.locale instead.",ht),a.langData=Y("moment.langData is deprecated. Use moment.localeData instead.",yt);var Cn=Math.abs;function An(e,t,n,r){var a=Qt(t,n);return e._milliseconds+=r*a._milliseconds,e._days+=r*a._days,e._months+=r*a._months,e._bubble()}function Nn(e){return e<0?Math.floor(e):Math.ceil(e)}function Rn(e){return 4800*e/146097}function Fn(e){return 146097*e/4800}function zn(e){return function(){return this.as(e)}}var Wn=zn("ms"),In=zn("s"),Un=zn("m"),Bn=zn("h"),Vn=zn("d"),Jn=zn("w"),Gn=zn("M"),qn=zn("Q"),$n=zn("y");function Kn(e){return function(){return this.isValid()?this._data[e]:NaN}}var Qn=Kn("milliseconds"),Xn=Kn("seconds"),Zn=Kn("minutes"),er=Kn("hours"),tr=Kn("days"),nr=Kn("months"),rr=Kn("years");var ar=Math.round,ir={ss:44,s:45,m:45,h:22,d:26,w:null,M:11};function sr(e,t,n,r,a){return a.relativeTime(t||1,!!n,e,r)}var or=Math.abs;function ur(e){return(e>0)-(e<0)||+e}function lr(){if(!this.isValid())return this.localeData().invalidDate();var e,t,n,r,a,i,s,o,u=or(this._milliseconds)/1e3,l=or(this._days),d=or(this._months),c=this.asSeconds();return c?(e=J(u/60),t=J(e/60),u%=60,e%=60,n=J(d/12),d%=12,r=u?u.toFixed(3).replace(/\.?0+$/,""):"",a=c<0?"-":"",i=ur(this._months)!==ur(c)?"-":"",s=ur(this._days)!==ur(c)?"-":"",o=ur(this._milliseconds)!==ur(c)?"-":"",a+"P"+(n?i+n+"Y":"")+(d?i+d+"M":"")+(l?s+l+"D":"")+(t||e||u?"T":"")+(t?o+t+"H":"")+(e?o+e+"M":"")+(u?o+r+"S":"")):"P0D"}var dr=zt.prototype;return dr.isValid=function(){return this._isValid},dr.abs=function(){var e=this._data;return this._milliseconds=Cn(this._milliseconds),this._days=Cn(this._days),this._months=Cn(this._months),e.milliseconds=Cn(e.milliseconds),e.seconds=Cn(e.seconds),e.minutes=Cn(e.minutes),e.hours=Cn(e.hours),e.months=Cn(e.months),e.years=Cn(e.years),this},dr.add=function(e,t){return An(this,e,t,1)},dr.subtract=function(e,t){return An(this,e,t,-1)},dr.as=function(e){if(!this.isValid())return NaN;var t,n,r=this._milliseconds;if("month"===(e=W(e))||"quarter"===e||"year"===e)switch(t=this._days+r/864e5,n=this._months+Rn(t),e){case"month":return n;case"quarter":return n/3;case"year":return n/12}else switch(t=this._days+Math.round(Fn(this._months)),e){case"week":return t/7+r/6048e5;case"day":return t+r/864e5;case"hour":return 24*t+r/36e5;case"minute":return 1440*t+r/6e4;case"second":return 86400*t+r/1e3;case"millisecond":return Math.floor(864e5*t)+r;default:throw new Error("Unknown unit "+e)}},dr.asMilliseconds=Wn,dr.asSeconds=In,dr.asMinutes=Un,dr.asHours=Bn,dr.asDays=Vn,dr.asWeeks=Jn,dr.asMonths=Gn,dr.asQuarters=qn,dr.asYears=$n,dr.valueOf=function(){return this.isValid()?this._milliseconds+864e5*this._days+this._months%12*2592e6+31536e6*G(this._months/12):NaN},dr._bubble=function(){var e,t,n,r,a,i=this._milliseconds,s=this._days,o=this._months,u=this._data;return i>=0&&s>=0&&o>=0||i<=0&&s<=0&&o<=0||(i+=864e5*Nn(Fn(o)+s),s=0,o=0),u.milliseconds=i%1e3,e=J(i/1e3),u.seconds=e%60,t=J(e/60),u.minutes=t%60,n=J(t/60),u.hours=n%24,s+=J(n/24),o+=a=J(Rn(s)),s-=Nn(Fn(a)),r=J(o/12),o%=12,u.days=s,u.months=o,u.years=r,this},dr.clone=function(){return Qt(this)},dr.get=function(e){return e=W(e),this.isValid()?this[e+"s"]():NaN},dr.milliseconds=Qn,dr.seconds=Xn,dr.minutes=Zn,dr.hours=er,dr.days=tr,dr.weeks=function(){return J(this.days()/7)},dr.months=nr,dr.years=rr,dr.humanize=function(e,t){if(!this.isValid())return this.localeData().invalidDate();var n,r,a=!1,i=ir;return"object"==typeof e&&(t=e,e=!1),"boolean"==typeof e&&(a=e),"object"==typeof t&&(i=Object.assign({},ir,t),null!=t.s&&null==t.ss&&(i.ss=t.s-1)),r=function(e,t,n,r){var a=Qt(e).abs(),i=ar(a.as("s")),s=ar(a.as("m")),o=ar(a.as("h")),u=ar(a.as("d")),l=ar(a.as("M")),d=ar(a.as("w")),c=ar(a.as("y")),f=i<=n.ss&&["s",i]||i<n.s&&["ss",i]||s<=1&&["m"]||s<n.m&&["mm",s]||o<=1&&["h"]||o<n.h&&["hh",o]||u<=1&&["d"]||u<n.d&&["dd",u];return null!=n.w&&(f=f||d<=1&&["w"]||d<n.w&&["ww",d]),(f=f||l<=1&&["M"]||l<n.M&&["MM",l]||c<=1&&["y"]||["yy",c])[2]=t,f[3]=+e>0,f[4]=r,sr.apply(null,f)}(this,!a,i,n=this.localeData()),a&&(r=n.pastFuture(+this,r)),n.postformat(r)},dr.toISOString=lr,dr.toString=lr,dr.toJSON=lr,dr.locale=un,dr.localeData=dn,dr.toIsoString=Y("toIsoString() is deprecated. Please use toISOString() instead (notice the capitals)",lr),dr.lang=ln,A("X",0,0,"unix"),A("x",0,0,"valueOf"),_e("x",de),_e("X",/[+-]?\d+(\.\d{1,3})?/),ge("X",(function(e,t,n){n._d=new Date(1e3*parseFloat(e))})),ge("x",(function(e,t,n){n._d=new Date(G(e))})),a.version="2.29.4",t=Ct,a.fn=xn,a.min=function(){return Rt("isBefore",[].slice.call(arguments,0))},a.max=function(){return Rt("isAfter",[].slice.call(arguments,0))},a.now=function(){return Date.now?Date.now():+new Date},a.utc=_,a.unix=function(e){return Ct(1e3*e)},a.months=function(e,t){return Pn(e,t,"months")},a.isDate=c,a.locale=ht,a.invalid=y,a.duration=Qt,a.isMoment=k,a.weekdays=function(e,t,n){return Hn(e,t,n,"weekdays")},a.parseZone=function(){return Ct.apply(null,arguments).parseZone()},a.localeData=yt,a.isDuration=Wt,a.monthsShort=function(e,t){return Pn(e,t,"monthsShort")},a.weekdaysMin=function(e,t,n){return Hn(e,t,n,"weekdaysMin")},a.defineLocale=pt,a.updateLocale=function(e,t){if(null!=t){var n,r,a=lt;null!=dt[e]&&null!=dt[e].parentLocale?dt[e].set(x(dt[e]._config,t)):(null!=(r=_t(e))&&(a=r._config),t=x(a,t),null==r&&(t.abbr=e),(n=new O(t)).parentLocale=dt[e],dt[e]=n),ht(e)}else null!=dt[e]&&(null!=dt[e].parentLocale?(dt[e]=dt[e].parentLocale,e===ht()&&ht(e)):null!=dt[e]&&delete dt[e]);return dt[e]},a.locales=function(){return w(dt)},a.weekdaysShort=function(e,t,n){return Hn(e,t,n,"weekdaysShort")},a.normalizeUnits=W,a.relativeTimeRounding=function(e){return void 0===e?ar:"function"==typeof e&&(ar=e,!0)},a.relativeTimeThreshold=function(e,t){return void 0!==ir[e]&&(void 0===t?ir[e]:(ir[e]=t,"s"===e&&(ir.ss=t-1),!0))},a.calendarFormat=function(e,t){var n=e.diff(t,"days",!0);return n<-6?"sameElse":n<-1?"lastWeek":n<0?"lastDay":n<1?"sameDay":n<2?"nextDay":n<7?"nextWeek":"sameElse"},a.prototype=xn,a.HTML5_FMT={DATETIME_LOCAL:"YYYY-MM-DDTHH:mm",DATETIME_LOCAL_SECONDS:"YYYY-MM-DDTHH:mm:ss",DATETIME_LOCAL_MS:"YYYY-MM-DDTHH:mm:ss.SSS",DATE:"YYYY-MM-DD",TIME:"HH:mm",TIME_SECONDS:"HH:mm:ss",TIME_MS:"HH:mm:ss.SSS",WEEK:"GGGG-[W]WW",MONTH:"YYYY-MM"},a}()},5228:e=>{"use strict";var t=Object.getOwnPropertySymbols,n=Object.prototype.hasOwnProperty,r=Object.prototype.propertyIsEnumerable;e.exports=function(){try{if(!Object.assign)return!1;var e=new String("abc");if(e[5]="de","5"===Object.getOwnPropertyNames(e)[0])return!1;for(var t={},n=0;n<10;n++)t["_"+String.fromCharCode(n)]=n;if("0123456789"!==Object.getOwnPropertyNames(t).map((function(e){return t[e]})).join(""))return!1;var r={};return"abcdefghijklmnopqrst".split("").forEach((function(e){r[e]=e})),"abcdefghijklmnopqrst"===Object.keys(Object.assign({},r)).join("")}catch(e){return!1}}()?Object.assign:function(e,a){for(var i,s,o=function(e){if(null==e)throw new TypeError("Object.assign cannot be called with null or undefined");return Object(e)}(e),u=1;u<arguments.length;u++){for(var l in i=Object(arguments[u]))n.call(i,l)&&(o[l]=i[l]);if(t){s=t(i);for(var d=0;d<s.length;d++)r.call(i,s[d])&&(o[s[d]]=i[s[d]])}}return o}},2551:(e,t,n)=>{"use strict";var r=n(6540),a=n(5228),i=n(9982);function s(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}if(!r)throw Error(s(227));var o=new Set,u={};function l(e,t){d(e,t),d(e+"Capture",t)}function d(e,t){for(u[e]=t,e=0;e<t.length;e++)o.add(t[e])}var c=!("undefined"==typeof window||void 0===window.document||void 0===window.document.createElement),f=/^[:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD][:A-Z_a-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\-.0-9\u00B7\u0300-\u036F\u203F-\u2040]*$/,m=Object.prototype.hasOwnProperty,_={},h={};function p(e,t,n,r,a,i,s){this.acceptsBooleans=2===t||3===t||4===t,this.attributeName=r,this.attributeNamespace=a,this.mustUseProperty=n,this.propertyName=e,this.type=t,this.sanitizeURL=i,this.removeEmptyString=s}var y={};"children dangerouslySetInnerHTML defaultValue defaultChecked innerHTML suppressContentEditableWarning suppressHydrationWarning style".split(" ").forEach((function(e){y[e]=new p(e,0,!1,e,null,!1,!1)})),[["acceptCharset","accept-charset"],["className","class"],["htmlFor","for"],["httpEquiv","http-equiv"]].forEach((function(e){var t=e[0];y[t]=new p(t,1,!1,e[1],null,!1,!1)})),["contentEditable","draggable","spellCheck","value"].forEach((function(e){y[e]=new p(e,2,!1,e.toLowerCase(),null,!1,!1)})),["autoReverse","externalResourcesRequired","focusable","preserveAlpha"].forEach((function(e){y[e]=new p(e,2,!1,e,null,!1,!1)})),"allowFullScreen async autoFocus autoPlay controls default defer disabled disablePictureInPicture disableRemotePlayback formNoValidate hidden loop noModule noValidate open playsInline readOnly required reversed scoped seamless itemScope".split(" ").forEach((function(e){y[e]=new p(e,3,!1,e.toLowerCase(),null,!1,!1)})),["checked","multiple","muted","selected"].forEach((function(e){y[e]=new p(e,3,!0,e,null,!1,!1)})),["capture","download"].forEach((function(e){y[e]=new p(e,4,!1,e,null,!1,!1)})),["cols","rows","size","span"].forEach((function(e){y[e]=new p(e,6,!1,e,null,!1,!1)})),["rowSpan","start"].forEach((function(e){y[e]=new p(e,5,!1,e.toLowerCase(),null,!1,!1)}));var g=/[\-:]([a-z])/g;function v(e){return e[1].toUpperCase()}function M(e,t,n,r){var a=y.hasOwnProperty(t)?y[t]:null;(null!==a?0===a.type:!r&&2<t.length&&("o"===t[0]||"O"===t[0])&&("n"===t[1]||"N"===t[1]))||(function(e,t,n,r){if(null==t||function(e,t,n,r){if(null!==n&&0===n.type)return!1;switch(typeof t){case"function":case"symbol":return!0;case"boolean":return!r&&(null!==n?!n.acceptsBooleans:"data-"!==(e=e.toLowerCase().slice(0,5))&&"aria-"!==e);default:return!1}}(e,t,n,r))return!0;if(r)return!1;if(null!==n)switch(n.type){case 3:return!t;case 4:return!1===t;case 5:return isNaN(t);case 6:return isNaN(t)||1>t}return!1}(t,n,a,r)&&(n=null),r||null===a?function(e){return!!m.call(h,e)||!m.call(_,e)&&(f.test(e)?h[e]=!0:(_[e]=!0,!1))}(t)&&(null===n?e.removeAttribute(t):e.setAttribute(t,""+n)):a.mustUseProperty?e[a.propertyName]=null===n?3!==a.type&&"":n:(t=a.attributeName,r=a.attributeNamespace,null===n?e.removeAttribute(t):(n=3===(a=a.type)||4===a&&!0===n?"":""+n,r?e.setAttributeNS(r,t,n):e.setAttribute(t,n))))}"accent-height alignment-baseline arabic-form baseline-shift cap-height clip-path clip-rule color-interpolation color-interpolation-filters color-profile color-rendering dominant-baseline enable-background fill-opacity fill-rule flood-color flood-opacity font-family font-size font-size-adjust font-stretch font-style font-variant font-weight glyph-name glyph-orientation-horizontal glyph-orientation-vertical horiz-adv-x horiz-origin-x image-rendering letter-spacing lighting-color marker-end marker-mid marker-start overline-position overline-thickness paint-order panose-1 pointer-events rendering-intent shape-rendering stop-color stop-opacity strikethrough-position strikethrough-thickness stroke-dasharray stroke-dashoffset stroke-linecap stroke-linejoin stroke-miterlimit stroke-opacity stroke-width text-anchor text-decoration text-rendering underline-position underline-thickness unicode-bidi unicode-range units-per-em v-alphabetic v-hanging v-ideographic v-mathematical vector-effect vert-adv-y vert-origin-x vert-origin-y word-spacing writing-mode xmlns:xlink x-height".split(" ").forEach((function(e){var t=e.replace(g,v);y[t]=new p(t,1,!1,e,null,!1,!1)})),"xlink:actuate xlink:arcrole xlink:role xlink:show xlink:title xlink:type".split(" ").forEach((function(e){var t=e.replace(g,v);y[t]=new p(t,1,!1,e,"http://www.w3.org/1999/xlink",!1,!1)})),["xml:base","xml:lang","xml:space"].forEach((function(e){var t=e.replace(g,v);y[t]=new p(t,1,!1,e,"http://www.w3.org/XML/1998/namespace",!1,!1)})),["tabIndex","crossOrigin"].forEach((function(e){y[e]=new p(e,1,!1,e.toLowerCase(),null,!1,!1)})),y.xlinkHref=new p("xlinkHref",1,!1,"xlink:href","http://www.w3.org/1999/xlink",!0,!1),["src","href","action","formAction"].forEach((function(e){y[e]=new p(e,1,!1,e.toLowerCase(),null,!0,!0)}));var L=r.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED,k=60103,b=60106,Y=60107,w=60108,D=60114,T=60109,S=60110,x=60112,O=60113,E=60120,j=60115,P=60116,H=60121,C=60128,A=60129,N=60130,R=60131;if("function"==typeof Symbol&&Symbol.for){var F=Symbol.for;k=F("react.element"),b=F("react.portal"),Y=F("react.fragment"),w=F("react.strict_mode"),D=F("react.profiler"),T=F("react.provider"),S=F("react.context"),x=F("react.forward_ref"),O=F("react.suspense"),E=F("react.suspense_list"),j=F("react.memo"),P=F("react.lazy"),H=F("react.block"),F("react.scope"),C=F("react.opaque.id"),A=F("react.debug_trace_mode"),N=F("react.offscreen"),R=F("react.legacy_hidden")}var z,W="function"==typeof Symbol&&Symbol.iterator;function I(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=W&&e[W]||e["@@iterator"])?e:null}function U(e){if(void 0===z)try{throw Error()}catch(e){var t=e.stack.trim().match(/\n( *(at )?)/);z=t&&t[1]||""}return"\n"+z+e}var B=!1;function V(e,t){if(!e||B)return"";B=!0;var n=Error.prepareStackTrace;Error.prepareStackTrace=void 0;try{if(t)if(t=function(){throw Error()},Object.defineProperty(t.prototype,"props",{set:function(){throw Error()}}),"object"==typeof Reflect&&Reflect.construct){try{Reflect.construct(t,[])}catch(e){var r=e}Reflect.construct(e,[],t)}else{try{t.call()}catch(e){r=e}e.call(t.prototype)}else{try{throw Error()}catch(e){r=e}e()}}catch(e){if(e&&r&&"string"==typeof e.stack){for(var a=e.stack.split("\n"),i=r.stack.split("\n"),s=a.length-1,o=i.length-1;1<=s&&0<=o&&a[s]!==i[o];)o--;for(;1<=s&&0<=o;s--,o--)if(a[s]!==i[o]){if(1!==s||1!==o)do{if(s--,0>--o||a[s]!==i[o])return"\n"+a[s].replace(" at new "," at ")}while(1<=s&&0<=o);break}}}finally{B=!1,Error.prepareStackTrace=n}return(e=e?e.displayName||e.name:"")?U(e):""}function J(e){switch(e.tag){case 5:return U(e.type);case 16:return U("Lazy");case 13:return U("Suspense");case 19:return U("SuspenseList");case 0:case 2:case 15:return V(e.type,!1);case 11:return V(e.type.render,!1);case 22:return V(e.type._render,!1);case 1:return V(e.type,!0);default:return""}}function G(e){if(null==e)return null;if("function"==typeof e)return e.displayName||e.name||null;if("string"==typeof e)return e;switch(e){case Y:return"Fragment";case b:return"Portal";case D:return"Profiler";case w:return"StrictMode";case O:return"Suspense";case E:return"SuspenseList"}if("object"==typeof e)switch(e.$$typeof){case S:return(e.displayName||"Context")+".Consumer";case T:return(e._context.displayName||"Context")+".Provider";case x:var t=e.render;return t=t.displayName||t.name||"",e.displayName||(""!==t?"ForwardRef("+t+")":"ForwardRef");case j:return G(e.type);case H:return G(e._render);case P:t=e._payload,e=e._init;try{return G(e(t))}catch(e){}}return null}function q(e){switch(typeof e){case"boolean":case"number":case"object":case"string":case"undefined":return e;default:return""}}function $(e){var t=e.type;return(e=e.nodeName)&&"input"===e.toLowerCase()&&("checkbox"===t||"radio"===t)}function K(e){e._valueTracker||(e._valueTracker=function(e){var t=$(e)?"checked":"value",n=Object.getOwnPropertyDescriptor(e.constructor.prototype,t),r=""+e[t];if(!e.hasOwnProperty(t)&&void 0!==n&&"function"==typeof n.get&&"function"==typeof n.set){var a=n.get,i=n.set;return Object.defineProperty(e,t,{configurable:!0,get:function(){return a.call(this)},set:function(e){r=""+e,i.call(this,e)}}),Object.defineProperty(e,t,{enumerable:n.enumerable}),{getValue:function(){return r},setValue:function(e){r=""+e},stopTracking:function(){e._valueTracker=null,delete e[t]}}}}(e))}function Q(e){if(!e)return!1;var t=e._valueTracker;if(!t)return!0;var n=t.getValue(),r="";return e&&(r=$(e)?e.checked?"true":"false":e.value),(e=r)!==n&&(t.setValue(e),!0)}function X(e){if(void 0===(e=e||("undefined"!=typeof document?document:void 0)))return null;try{return e.activeElement||e.body}catch(t){return e.body}}function Z(e,t){var n=t.checked;return a({},t,{defaultChecked:void 0,defaultValue:void 0,value:void 0,checked:null!=n?n:e._wrapperState.initialChecked})}function ee(e,t){var n=null==t.defaultValue?"":t.defaultValue,r=null!=t.checked?t.checked:t.defaultChecked;n=q(null!=t.value?t.value:n),e._wrapperState={initialChecked:r,initialValue:n,controlled:"checkbox"===t.type||"radio"===t.type?null!=t.checked:null!=t.value}}function te(e,t){null!=(t=t.checked)&&M(e,"checked",t,!1)}function ne(e,t){te(e,t);var n=q(t.value),r=t.type;if(null!=n)"number"===r?(0===n&&""===e.value||e.value!=n)&&(e.value=""+n):e.value!==""+n&&(e.value=""+n);else if("submit"===r||"reset"===r)return void e.removeAttribute("value");t.hasOwnProperty("value")?ae(e,t.type,n):t.hasOwnProperty("defaultValue")&&ae(e,t.type,q(t.defaultValue)),null==t.checked&&null!=t.defaultChecked&&(e.defaultChecked=!!t.defaultChecked)}function re(e,t,n){if(t.hasOwnProperty("value")||t.hasOwnProperty("defaultValue")){var r=t.type;if(!("submit"!==r&&"reset"!==r||void 0!==t.value&&null!==t.value))return;t=""+e._wrapperState.initialValue,n||t===e.value||(e.value=t),e.defaultValue=t}""!==(n=e.name)&&(e.name=""),e.defaultChecked=!!e._wrapperState.initialChecked,""!==n&&(e.name=n)}function ae(e,t,n){"number"===t&&X(e.ownerDocument)===e||(null==n?e.defaultValue=""+e._wrapperState.initialValue:e.defaultValue!==""+n&&(e.defaultValue=""+n))}function ie(e,t){return e=a({children:void 0},t),(t=function(e){var t="";return r.Children.forEach(e,(function(e){null!=e&&(t+=e)})),t}(t.children))&&(e.children=t),e}function se(e,t,n,r){if(e=e.options,t){t={};for(var a=0;a<n.length;a++)t["$"+n[a]]=!0;for(n=0;n<e.length;n++)a=t.hasOwnProperty("$"+e[n].value),e[n].selected!==a&&(e[n].selected=a),a&&r&&(e[n].defaultSelected=!0)}else{for(n=""+q(n),t=null,a=0;a<e.length;a++){if(e[a].value===n)return e[a].selected=!0,void(r&&(e[a].defaultSelected=!0));null!==t||e[a].disabled||(t=e[a])}null!==t&&(t.selected=!0)}}function oe(e,t){if(null!=t.dangerouslySetInnerHTML)throw Error(s(91));return a({},t,{value:void 0,defaultValue:void 0,children:""+e._wrapperState.initialValue})}function ue(e,t){var n=t.value;if(null==n){if(n=t.children,t=t.defaultValue,null!=n){if(null!=t)throw Error(s(92));if(Array.isArray(n)){if(!(1>=n.length))throw Error(s(93));n=n[0]}t=n}null==t&&(t=""),n=t}e._wrapperState={initialValue:q(n)}}function le(e,t){var n=q(t.value),r=q(t.defaultValue);null!=n&&((n=""+n)!==e.value&&(e.value=n),null==t.defaultValue&&e.defaultValue!==n&&(e.defaultValue=n)),null!=r&&(e.defaultValue=""+r)}function de(e){var t=e.textContent;t===e._wrapperState.initialValue&&""!==t&&null!==t&&(e.value=t)}var ce="http://www.w3.org/1999/xhtml";function fe(e){switch(e){case"svg":return"http://www.w3.org/2000/svg";case"math":return"http://www.w3.org/1998/Math/MathML";default:return"http://www.w3.org/1999/xhtml"}}function me(e,t){return null==e||"http://www.w3.org/1999/xhtml"===e?fe(t):"http://www.w3.org/2000/svg"===e&&"foreignObject"===t?"http://www.w3.org/1999/xhtml":e}var _e,he,pe=(he=function(e,t){if("http://www.w3.org/2000/svg"!==e.namespaceURI||"innerHTML"in e)e.innerHTML=t;else{for((_e=_e||document.createElement("div")).innerHTML="<svg>"+t.valueOf().toString()+"</svg>",t=_e.firstChild;e.firstChild;)e.removeChild(e.firstChild);for(;t.firstChild;)e.appendChild(t.firstChild)}},"undefined"!=typeof MSApp&&MSApp.execUnsafeLocalFunction?function(e,t,n,r){MSApp.execUnsafeLocalFunction((function(){return he(e,t)}))}:he);function ye(e,t){if(t){var n=e.firstChild;if(n&&n===e.lastChild&&3===n.nodeType)return void(n.nodeValue=t)}e.textContent=t}var ge={animationIterationCount:!0,borderImageOutset:!0,borderImageSlice:!0,borderImageWidth:!0,boxFlex:!0,boxFlexGroup:!0,boxOrdinalGroup:!0,columnCount:!0,columns:!0,flex:!0,flexGrow:!0,flexPositive:!0,flexShrink:!0,flexNegative:!0,flexOrder:!0,gridArea:!0,gridRow:!0,gridRowEnd:!0,gridRowSpan:!0,gridRowStart:!0,gridColumn:!0,gridColumnEnd:!0,gridColumnSpan:!0,gridColumnStart:!0,fontWeight:!0,lineClamp:!0,lineHeight:!0,opacity:!0,order:!0,orphans:!0,tabSize:!0,widows:!0,zIndex:!0,zoom:!0,fillOpacity:!0,floodOpacity:!0,stopOpacity:!0,strokeDasharray:!0,strokeDashoffset:!0,strokeMiterlimit:!0,strokeOpacity:!0,strokeWidth:!0},ve=["Webkit","ms","Moz","O"];function Me(e,t,n){return null==t||"boolean"==typeof t||""===t?"":n||"number"!=typeof t||0===t||ge.hasOwnProperty(e)&&ge[e]?(""+t).trim():t+"px"}function Le(e,t){for(var n in e=e.style,t)if(t.hasOwnProperty(n)){var r=0===n.indexOf("--"),a=Me(n,t[n],r);"float"===n&&(n="cssFloat"),r?e.setProperty(n,a):e[n]=a}}Object.keys(ge).forEach((function(e){ve.forEach((function(t){t=t+e.charAt(0).toUpperCase()+e.substring(1),ge[t]=ge[e]}))}));var ke=a({menuitem:!0},{area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,keygen:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0});function be(e,t){if(t){if(ke[e]&&(null!=t.children||null!=t.dangerouslySetInnerHTML))throw Error(s(137,e));if(null!=t.dangerouslySetInnerHTML){if(null!=t.children)throw Error(s(60));if("object"!=typeof t.dangerouslySetInnerHTML||!("__html"in t.dangerouslySetInnerHTML))throw Error(s(61))}if(null!=t.style&&"object"!=typeof t.style)throw Error(s(62))}}function Ye(e,t){if(-1===e.indexOf("-"))return"string"==typeof t.is;switch(e){case"annotation-xml":case"color-profile":case"font-face":case"font-face-src":case"font-face-uri":case"font-face-format":case"font-face-name":case"missing-glyph":return!1;default:return!0}}function we(e){return(e=e.target||e.srcElement||window).correspondingUseElement&&(e=e.correspondingUseElement),3===e.nodeType?e.parentNode:e}var De=null,Te=null,Se=null;function xe(e){if(e=ta(e)){if("function"!=typeof De)throw Error(s(280));var t=e.stateNode;t&&(t=ra(t),De(e.stateNode,e.type,t))}}function Oe(e){Te?Se?Se.push(e):Se=[e]:Te=e}function Ee(){if(Te){var e=Te,t=Se;if(Se=Te=null,xe(e),t)for(e=0;e<t.length;e++)xe(t[e])}}function je(e,t){return e(t)}function Pe(e,t,n,r,a){return e(t,n,r,a)}function He(){}var Ce=je,Ae=!1,Ne=!1;function Re(){null===Te&&null===Se||(He(),Ee())}function Fe(e,t){var n=e.stateNode;if(null===n)return null;var r=ra(n);if(null===r)return null;n=r[t];e:switch(t){case"onClick":case"onClickCapture":case"onDoubleClick":case"onDoubleClickCapture":case"onMouseDown":case"onMouseDownCapture":case"onMouseMove":case"onMouseMoveCapture":case"onMouseUp":case"onMouseUpCapture":case"onMouseEnter":(r=!r.disabled)||(r=!("button"===(e=e.type)||"input"===e||"select"===e||"textarea"===e)),e=!r;break e;default:e=!1}if(e)return null;if(n&&"function"!=typeof n)throw Error(s(231,t,typeof n));return n}var ze=!1;if(c)try{var We={};Object.defineProperty(We,"passive",{get:function(){ze=!0}}),window.addEventListener("test",We,We),window.removeEventListener("test",We,We)}catch(he){ze=!1}function Ie(e,t,n,r,a,i,s,o,u){var l=Array.prototype.slice.call(arguments,3);try{t.apply(n,l)}catch(e){this.onError(e)}}var Ue=!1,Be=null,Ve=!1,Je=null,Ge={onError:function(e){Ue=!0,Be=e}};function qe(e,t,n,r,a,i,s,o,u){Ue=!1,Be=null,Ie.apply(Ge,arguments)}function $e(e){var t=e,n=e;if(e.alternate)for(;t.return;)t=t.return;else{e=t;do{!!(1026&(t=e).flags)&&(n=t.return),e=t.return}while(e)}return 3===t.tag?n:null}function Ke(e){if(13===e.tag){var t=e.memoizedState;if(null===t&&null!==(e=e.alternate)&&(t=e.memoizedState),null!==t)return t.dehydrated}return null}function Qe(e){if($e(e)!==e)throw Error(s(188))}function Xe(e,t){for(var n=e.alternate;null!==t;){if(t===e||t===n)return!0;t=t.return}return!1}var Ze,et,tt,nt,rt=!1,at=[],it=null,st=null,ot=null,ut=new Map,lt=new Map,dt=[],ct="mousedown mouseup touchcancel touchend touchstart auxclick dblclick pointercancel pointerdown pointerup dragend dragstart drop compositionend compositionstart keydown keypress keyup input textInput copy cut paste click change contextmenu reset submit".split(" ");function ft(e,t,n,r,a){return{blockedOn:e,domEventName:t,eventSystemFlags:16|n,nativeEvent:a,targetContainers:[r]}}function mt(e,t){switch(e){case"focusin":case"focusout":it=null;break;case"dragenter":case"dragleave":st=null;break;case"mouseover":case"mouseout":ot=null;break;case"pointerover":case"pointerout":ut.delete(t.pointerId);break;case"gotpointercapture":case"lostpointercapture":lt.delete(t.pointerId)}}function _t(e,t,n,r,a,i){return null===e||e.nativeEvent!==i?(e=ft(t,n,r,a,i),null!==t&&null!==(t=ta(t))&&et(t),e):(e.eventSystemFlags|=r,t=e.targetContainers,null!==a&&-1===t.indexOf(a)&&t.push(a),e)}function ht(e){var t=ea(e.target);if(null!==t){var n=$e(t);if(null!==n)if(13===(t=n.tag)){if(null!==(t=Ke(n)))return e.blockedOn=t,void nt(e.lanePriority,(function(){i.unstable_runWithPriority(e.priority,(function(){tt(n)}))}))}else if(3===t&&n.stateNode.hydrate)return void(e.blockedOn=3===n.tag?n.stateNode.containerInfo:null)}e.blockedOn=null}function pt(e){if(null!==e.blockedOn)return!1;for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n)return null!==(t=ta(n))&&et(t),e.blockedOn=n,!1;t.shift()}return!0}function yt(e,t,n){pt(e)&&n.delete(t)}function gt(){for(rt=!1;0<at.length;){var e=at[0];if(null!==e.blockedOn){null!==(e=ta(e.blockedOn))&&Ze(e);break}for(var t=e.targetContainers;0<t.length;){var n=Qt(e.domEventName,e.eventSystemFlags,t[0],e.nativeEvent);if(null!==n){e.blockedOn=n;break}t.shift()}null===e.blockedOn&&at.shift()}null!==it&&pt(it)&&(it=null),null!==st&&pt(st)&&(st=null),null!==ot&&pt(ot)&&(ot=null),ut.forEach(yt),lt.forEach(yt)}function vt(e,t){e.blockedOn===t&&(e.blockedOn=null,rt||(rt=!0,i.unstable_scheduleCallback(i.unstable_NormalPriority,gt)))}function Mt(e){function t(t){return vt(t,e)}if(0<at.length){vt(at[0],e);for(var n=1;n<at.length;n++){var r=at[n];r.blockedOn===e&&(r.blockedOn=null)}}for(null!==it&&vt(it,e),null!==st&&vt(st,e),null!==ot&&vt(ot,e),ut.forEach(t),lt.forEach(t),n=0;n<dt.length;n++)(r=dt[n]).blockedOn===e&&(r.blockedOn=null);for(;0<dt.length&&null===(n=dt[0]).blockedOn;)ht(n),null===n.blockedOn&&dt.shift()}function Lt(e,t){var n={};return n[e.toLowerCase()]=t.toLowerCase(),n["Webkit"+e]="webkit"+t,n["Moz"+e]="moz"+t,n}var kt={animationend:Lt("Animation","AnimationEnd"),animationiteration:Lt("Animation","AnimationIteration"),animationstart:Lt("Animation","AnimationStart"),transitionend:Lt("Transition","TransitionEnd")},bt={},Yt={};function wt(e){if(bt[e])return bt[e];if(!kt[e])return e;var t,n=kt[e];for(t in n)if(n.hasOwnProperty(t)&&t in Yt)return bt[e]=n[t];return e}c&&(Yt=document.createElement("div").style,"AnimationEvent"in window||(delete kt.animationend.animation,delete kt.animationiteration.animation,delete kt.animationstart.animation),"TransitionEvent"in window||delete kt.transitionend.transition);var Dt=wt("animationend"),Tt=wt("animationiteration"),St=wt("animationstart"),xt=wt("transitionend"),Ot=new Map,Et=new Map,jt=["abort","abort",Dt,"animationEnd",Tt,"animationIteration",St,"animationStart","canplay","canPlay","canplaythrough","canPlayThrough","durationchange","durationChange","emptied","emptied","encrypted","encrypted","ended","ended","error","error","gotpointercapture","gotPointerCapture","load","load","loadeddata","loadedData","loadedmetadata","loadedMetadata","loadstart","loadStart","lostpointercapture","lostPointerCapture","playing","playing","progress","progress","seeking","seeking","stalled","stalled","suspend","suspend","timeupdate","timeUpdate",xt,"transitionEnd","waiting","waiting"];function Pt(e,t){for(var n=0;n<e.length;n+=2){var r=e[n],a=e[n+1];a="on"+(a[0].toUpperCase()+a.slice(1)),Et.set(r,t),Ot.set(r,a),l(a,[r])}}(0,i.unstable_now)();var Ht=8;function Ct(e){if(1&e)return Ht=15,1;if(2&e)return Ht=14,2;if(4&e)return Ht=13,4;var t=24&e;return 0!==t?(Ht=12,t):32&e?(Ht=11,32):0!=(t=192&e)?(Ht=10,t):256&e?(Ht=9,256):0!=(t=3584&e)?(Ht=8,t):4096&e?(Ht=7,4096):0!=(t=4186112&e)?(Ht=6,t):0!=(t=62914560&e)?(Ht=5,t):67108864&e?(Ht=4,67108864):134217728&e?(Ht=3,134217728):0!=(t=805306368&e)?(Ht=2,t):1073741824&e?(Ht=1,1073741824):(Ht=8,e)}function At(e,t){var n=e.pendingLanes;if(0===n)return Ht=0;var r=0,a=0,i=e.expiredLanes,s=e.suspendedLanes,o=e.pingedLanes;if(0!==i)r=i,a=Ht=15;else if(0!=(i=134217727&n)){var u=i&~s;0!==u?(r=Ct(u),a=Ht):0!=(o&=i)&&(r=Ct(o),a=Ht)}else 0!=(i=n&~s)?(r=Ct(i),a=Ht):0!==o&&(r=Ct(o),a=Ht);if(0===r)return 0;if(r=n&((0>(r=31-It(r))?0:1<<r)<<1)-1,0!==t&&t!==r&&!(t&s)){if(Ct(t),a<=Ht)return t;Ht=a}if(0!==(t=e.entangledLanes))for(e=e.entanglements,t&=r;0<t;)a=1<<(n=31-It(t)),r|=e[n],t&=~a;return r}function Nt(e){return 0!=(e=-1073741825&e.pendingLanes)?e:1073741824&e?1073741824:0}function Rt(e,t){switch(e){case 15:return 1;case 14:return 2;case 12:return 0===(e=Ft(24&~t))?Rt(10,t):e;case 10:return 0===(e=Ft(192&~t))?Rt(8,t):e;case 8:return 0===(e=Ft(3584&~t))&&0===(e=Ft(4186112&~t))&&(e=512),e;case 2:return 0===(t=Ft(805306368&~t))&&(t=268435456),t}throw Error(s(358,e))}function Ft(e){return e&-e}function zt(e){for(var t=[],n=0;31>n;n++)t.push(e);return t}function Wt(e,t,n){e.pendingLanes|=t;var r=t-1;e.suspendedLanes&=r,e.pingedLanes&=r,(e=e.eventTimes)[t=31-It(t)]=n}var It=Math.clz32?Math.clz32:function(e){return 0===e?32:31-(Ut(e)/Bt|0)|0},Ut=Math.log,Bt=Math.LN2,Vt=i.unstable_UserBlockingPriority,Jt=i.unstable_runWithPriority,Gt=!0;function qt(e,t,n,r){Ae||He();var a=Kt,i=Ae;Ae=!0;try{Pe(a,e,t,n,r)}finally{(Ae=i)||Re()}}function $t(e,t,n,r){Jt(Vt,Kt.bind(null,e,t,n,r))}function Kt(e,t,n,r){var a;if(Gt)if((a=!(4&t))&&0<at.length&&-1<ct.indexOf(e))e=ft(null,e,t,n,r),at.push(e);else{var i=Qt(e,t,n,r);if(null===i)a&&mt(e,r);else{if(a){if(-1<ct.indexOf(e))return e=ft(i,e,t,n,r),void at.push(e);if(function(e,t,n,r,a){switch(t){case"focusin":return it=_t(it,e,t,n,r,a),!0;case"dragenter":return st=_t(st,e,t,n,r,a),!0;case"mouseover":return ot=_t(ot,e,t,n,r,a),!0;case"pointerover":var i=a.pointerId;return ut.set(i,_t(ut.get(i)||null,e,t,n,r,a)),!0;case"gotpointercapture":return i=a.pointerId,lt.set(i,_t(lt.get(i)||null,e,t,n,r,a)),!0}return!1}(i,e,t,n,r))return;mt(e,r)}Pr(e,t,r,null,n)}}}function Qt(e,t,n,r){var a=we(r);if(null!==(a=ea(a))){var i=$e(a);if(null===i)a=null;else{var s=i.tag;if(13===s){if(null!==(a=Ke(i)))return a;a=null}else if(3===s){if(i.stateNode.hydrate)return 3===i.tag?i.stateNode.containerInfo:null;a=null}else i!==a&&(a=null)}}return Pr(e,t,r,a,n),null}var Xt=null,Zt=null,en=null;function tn(){if(en)return en;var e,t,n=Zt,r=n.length,a="value"in Xt?Xt.value:Xt.textContent,i=a.length;for(e=0;e<r&&n[e]===a[e];e++);var s=r-e;for(t=1;t<=s&&n[r-t]===a[i-t];t++);return en=a.slice(e,1<t?1-t:void 0)}function nn(e){var t=e.keyCode;return"charCode"in e?0===(e=e.charCode)&&13===t&&(e=13):e=t,10===e&&(e=13),32<=e||13===e?e:0}function rn(){return!0}function an(){return!1}function sn(e){function t(t,n,r,a,i){for(var s in this._reactName=t,this._targetInst=r,this.type=n,this.nativeEvent=a,this.target=i,this.currentTarget=null,e)e.hasOwnProperty(s)&&(t=e[s],this[s]=t?t(a):a[s]);return this.isDefaultPrevented=(null!=a.defaultPrevented?a.defaultPrevented:!1===a.returnValue)?rn:an,this.isPropagationStopped=an,this}return a(t.prototype,{preventDefault:function(){this.defaultPrevented=!0;var e=this.nativeEvent;e&&(e.preventDefault?e.preventDefault():"unknown"!=typeof e.returnValue&&(e.returnValue=!1),this.isDefaultPrevented=rn)},stopPropagation:function(){var e=this.nativeEvent;e&&(e.stopPropagation?e.stopPropagation():"unknown"!=typeof e.cancelBubble&&(e.cancelBubble=!0),this.isPropagationStopped=rn)},persist:function(){},isPersistent:rn}),t}var on,un,ln,dn={eventPhase:0,bubbles:0,cancelable:0,timeStamp:function(e){return e.timeStamp||Date.now()},defaultPrevented:0,isTrusted:0},cn=sn(dn),fn=a({},dn,{view:0,detail:0}),mn=sn(fn),_n=a({},fn,{screenX:0,screenY:0,clientX:0,clientY:0,pageX:0,pageY:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,getModifierState:Dn,button:0,buttons:0,relatedTarget:function(e){return void 0===e.relatedTarget?e.fromElement===e.srcElement?e.toElement:e.fromElement:e.relatedTarget},movementX:function(e){return"movementX"in e?e.movementX:(e!==ln&&(ln&&"mousemove"===e.type?(on=e.screenX-ln.screenX,un=e.screenY-ln.screenY):un=on=0,ln=e),on)},movementY:function(e){return"movementY"in e?e.movementY:un}}),hn=sn(_n),pn=sn(a({},_n,{dataTransfer:0})),yn=sn(a({},fn,{relatedTarget:0})),gn=sn(a({},dn,{animationName:0,elapsedTime:0,pseudoElement:0})),vn=a({},dn,{clipboardData:function(e){return"clipboardData"in e?e.clipboardData:window.clipboardData}}),Mn=sn(vn),Ln=sn(a({},dn,{data:0})),kn={Esc:"Escape",Spacebar:" ",Left:"ArrowLeft",Up:"ArrowUp",Right:"ArrowRight",Down:"ArrowDown",Del:"Delete",Win:"OS",Menu:"ContextMenu",Apps:"ContextMenu",Scroll:"ScrollLock",MozPrintableKey:"Unidentified"},bn={8:"Backspace",9:"Tab",12:"Clear",13:"Enter",16:"Shift",17:"Control",18:"Alt",19:"Pause",20:"CapsLock",27:"Escape",32:" ",33:"PageUp",34:"PageDown",35:"End",36:"Home",37:"ArrowLeft",38:"ArrowUp",39:"ArrowRight",40:"ArrowDown",45:"Insert",46:"Delete",112:"F1",113:"F2",114:"F3",115:"F4",116:"F5",117:"F6",118:"F7",119:"F8",120:"F9",121:"F10",122:"F11",123:"F12",144:"NumLock",145:"ScrollLock",224:"Meta"},Yn={Alt:"altKey",Control:"ctrlKey",Meta:"metaKey",Shift:"shiftKey"};function wn(e){var t=this.nativeEvent;return t.getModifierState?t.getModifierState(e):!!(e=Yn[e])&&!!t[e]}function Dn(){return wn}var Tn=a({},fn,{key:function(e){if(e.key){var t=kn[e.key]||e.key;if("Unidentified"!==t)return t}return"keypress"===e.type?13===(e=nn(e))?"Enter":String.fromCharCode(e):"keydown"===e.type||"keyup"===e.type?bn[e.keyCode]||"Unidentified":""},code:0,location:0,ctrlKey:0,shiftKey:0,altKey:0,metaKey:0,repeat:0,locale:0,getModifierState:Dn,charCode:function(e){return"keypress"===e.type?nn(e):0},keyCode:function(e){return"keydown"===e.type||"keyup"===e.type?e.keyCode:0},which:function(e){return"keypress"===e.type?nn(e):"keydown"===e.type||"keyup"===e.type?e.keyCode:0}}),Sn=sn(Tn),xn=sn(a({},_n,{pointerId:0,width:0,height:0,pressure:0,tangentialPressure:0,tiltX:0,tiltY:0,twist:0,pointerType:0,isPrimary:0})),On=sn(a({},fn,{touches:0,targetTouches:0,changedTouches:0,altKey:0,metaKey:0,ctrlKey:0,shiftKey:0,getModifierState:Dn})),En=sn(a({},dn,{propertyName:0,elapsedTime:0,pseudoElement:0})),jn=a({},_n,{deltaX:function(e){return"deltaX"in e?e.deltaX:"wheelDeltaX"in e?-e.wheelDeltaX:0},deltaY:function(e){return"deltaY"in e?e.deltaY:"wheelDeltaY"in e?-e.wheelDeltaY:"wheelDelta"in e?-e.wheelDelta:0},deltaZ:0,deltaMode:0}),Pn=sn(jn),Hn=[9,13,27,32],Cn=c&&"CompositionEvent"in window,An=null;c&&"documentMode"in document&&(An=document.documentMode);var Nn=c&&"TextEvent"in window&&!An,Rn=c&&(!Cn||An&&8<An&&11>=An),Fn=String.fromCharCode(32),zn=!1;function Wn(e,t){switch(e){case"keyup":return-1!==Hn.indexOf(t.keyCode);case"keydown":return 229!==t.keyCode;case"keypress":case"mousedown":case"focusout":return!0;default:return!1}}function In(e){return"object"==typeof(e=e.detail)&&"data"in e?e.data:null}var Un=!1,Bn={color:!0,date:!0,datetime:!0,"datetime-local":!0,email:!0,month:!0,number:!0,password:!0,range:!0,search:!0,tel:!0,text:!0,time:!0,url:!0,week:!0};function Vn(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return"input"===t?!!Bn[e.type]:"textarea"===t}function Jn(e,t,n,r){Oe(r),0<(t=Cr(t,"onChange")).length&&(n=new cn("onChange","change",null,n,r),e.push({event:n,listeners:t}))}var Gn=null,qn=null;function $n(e){Tr(e,0)}function Kn(e){if(Q(na(e)))return e}function Qn(e,t){if("change"===e)return t}var Xn=!1;if(c){var Zn;if(c){var er="oninput"in document;if(!er){var tr=document.createElement("div");tr.setAttribute("oninput","return;"),er="function"==typeof tr.oninput}Zn=er}else Zn=!1;Xn=Zn&&(!document.documentMode||9<document.documentMode)}function nr(){Gn&&(Gn.detachEvent("onpropertychange",rr),qn=Gn=null)}function rr(e){if("value"===e.propertyName&&Kn(qn)){var t=[];if(Jn(t,qn,e,we(e)),e=$n,Ae)e(t);else{Ae=!0;try{je(e,t)}finally{Ae=!1,Re()}}}}function ar(e,t,n){"focusin"===e?(nr(),qn=n,(Gn=t).attachEvent("onpropertychange",rr)):"focusout"===e&&nr()}function ir(e){if("selectionchange"===e||"keyup"===e||"keydown"===e)return Kn(qn)}function sr(e,t){if("click"===e)return Kn(t)}function or(e,t){if("input"===e||"change"===e)return Kn(t)}var ur="function"==typeof Object.is?Object.is:function(e,t){return e===t&&(0!==e||1/e==1/t)||e!=e&&t!=t},lr=Object.prototype.hasOwnProperty;function dr(e,t){if(ur(e,t))return!0;if("object"!=typeof e||null===e||"object"!=typeof t||null===t)return!1;var n=Object.keys(e),r=Object.keys(t);if(n.length!==r.length)return!1;for(r=0;r<n.length;r++)if(!lr.call(t,n[r])||!ur(e[n[r]],t[n[r]]))return!1;return!0}function cr(e){for(;e&&e.firstChild;)e=e.firstChild;return e}function fr(e,t){var n,r=cr(e);for(e=0;r;){if(3===r.nodeType){if(n=e+r.textContent.length,e<=t&&n>=t)return{node:r,offset:t-e};e=n}e:{for(;r;){if(r.nextSibling){r=r.nextSibling;break e}r=r.parentNode}r=void 0}r=cr(r)}}function mr(e,t){return!(!e||!t)&&(e===t||(!e||3!==e.nodeType)&&(t&&3===t.nodeType?mr(e,t.parentNode):"contains"in e?e.contains(t):!!e.compareDocumentPosition&&!!(16&e.compareDocumentPosition(t))))}function _r(){for(var e=window,t=X();t instanceof e.HTMLIFrameElement;){try{var n="string"==typeof t.contentWindow.location.href}catch(e){n=!1}if(!n)break;t=X((e=t.contentWindow).document)}return t}function hr(e){var t=e&&e.nodeName&&e.nodeName.toLowerCase();return t&&("input"===t&&("text"===e.type||"search"===e.type||"tel"===e.type||"url"===e.type||"password"===e.type)||"textarea"===t||"true"===e.contentEditable)}var pr=c&&"documentMode"in document&&11>=document.documentMode,yr=null,gr=null,vr=null,Mr=!1;function Lr(e,t,n){var r=n.window===n?n.document:9===n.nodeType?n:n.ownerDocument;Mr||null==yr||yr!==X(r)||(r="selectionStart"in(r=yr)&&hr(r)?{start:r.selectionStart,end:r.selectionEnd}:{anchorNode:(r=(r.ownerDocument&&r.ownerDocument.defaultView||window).getSelection()).anchorNode,anchorOffset:r.anchorOffset,focusNode:r.focusNode,focusOffset:r.focusOffset},vr&&dr(vr,r)||(vr=r,0<(r=Cr(gr,"onSelect")).length&&(t=new cn("onSelect","select",null,t,n),e.push({event:t,listeners:r}),t.target=yr)))}Pt("cancel cancel click click close close contextmenu contextMenu copy copy cut cut auxclick auxClick dblclick doubleClick dragend dragEnd dragstart dragStart drop drop focusin focus focusout blur input input invalid invalid keydown keyDown keypress keyPress keyup keyUp mousedown mouseDown mouseup mouseUp paste paste pause pause play play pointercancel pointerCancel pointerdown pointerDown pointerup pointerUp ratechange rateChange reset reset seeked seeked submit submit touchcancel touchCancel touchend touchEnd touchstart touchStart volumechange volumeChange".split(" "),0),Pt("drag drag dragenter dragEnter dragexit dragExit dragleave dragLeave dragover dragOver mousemove mouseMove mouseout mouseOut mouseover mouseOver pointermove pointerMove pointerout pointerOut pointerover pointerOver scroll scroll toggle toggle touchmove touchMove wheel wheel".split(" "),1),Pt(jt,2);for(var kr="change selectionchange textInput compositionstart compositionend compositionupdate".split(" "),br=0;br<kr.length;br++)Et.set(kr[br],0);d("onMouseEnter",["mouseout","mouseover"]),d("onMouseLeave",["mouseout","mouseover"]),d("onPointerEnter",["pointerout","pointerover"]),d("onPointerLeave",["pointerout","pointerover"]),l("onChange","change click focusin focusout input keydown keyup selectionchange".split(" ")),l("onSelect","focusout contextmenu dragend focusin keydown keyup mousedown mouseup selectionchange".split(" ")),l("onBeforeInput",["compositionend","keypress","textInput","paste"]),l("onCompositionEnd","compositionend focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionStart","compositionstart focusout keydown keypress keyup mousedown".split(" ")),l("onCompositionUpdate","compositionupdate focusout keydown keypress keyup mousedown".split(" "));var Yr="abort canplay canplaythrough durationchange emptied encrypted ended error loadeddata loadedmetadata loadstart pause play playing progress ratechange seeked seeking stalled suspend timeupdate volumechange waiting".split(" "),wr=new Set("cancel close invalid load scroll toggle".split(" ").concat(Yr));function Dr(e,t,n){var r=e.type||"unknown-event";e.currentTarget=n,function(e,t,n,r,a,i,o,u,l){if(qe.apply(this,arguments),Ue){if(!Ue)throw Error(s(198));var d=Be;Ue=!1,Be=null,Ve||(Ve=!0,Je=d)}}(r,t,void 0,e),e.currentTarget=null}function Tr(e,t){t=!!(4&t);for(var n=0;n<e.length;n++){var r=e[n],a=r.event;r=r.listeners;e:{var i=void 0;if(t)for(var s=r.length-1;0<=s;s--){var o=r[s],u=o.instance,l=o.currentTarget;if(o=o.listener,u!==i&&a.isPropagationStopped())break e;Dr(a,o,l),i=u}else for(s=0;s<r.length;s++){if(u=(o=r[s]).instance,l=o.currentTarget,o=o.listener,u!==i&&a.isPropagationStopped())break e;Dr(a,o,l),i=u}}}if(Ve)throw e=Je,Ve=!1,Je=null,e}function Sr(e,t){var n=aa(t),r=e+"__bubble";n.has(r)||(jr(t,e,2,!1),n.add(r))}var xr="_reactListening"+Math.random().toString(36).slice(2);function Or(e){e[xr]||(e[xr]=!0,o.forEach((function(t){wr.has(t)||Er(t,!1,e,null),Er(t,!0,e,null)})))}function Er(e,t,n,r){var a=4<arguments.length&&void 0!==arguments[4]?arguments[4]:0,i=n;if("selectionchange"===e&&9!==n.nodeType&&(i=n.ownerDocument),null!==r&&!t&&wr.has(e)){if("scroll"!==e)return;a|=2,i=r}var s=aa(i),o=e+"__"+(t?"capture":"bubble");s.has(o)||(t&&(a|=4),jr(i,e,a,t),s.add(o))}function jr(e,t,n,r){var a=Et.get(t);switch(void 0===a?2:a){case 0:a=qt;break;case 1:a=$t;break;default:a=Kt}n=a.bind(null,t,n,e),a=void 0,!ze||"touchstart"!==t&&"touchmove"!==t&&"wheel"!==t||(a=!0),r?void 0!==a?e.addEventListener(t,n,{capture:!0,passive:a}):e.addEventListener(t,n,!0):void 0!==a?e.addEventListener(t,n,{passive:a}):e.addEventListener(t,n,!1)}function Pr(e,t,n,r,a){var i=r;if(!(1&t||2&t||null===r))e:for(;;){if(null===r)return;var s=r.tag;if(3===s||4===s){var o=r.stateNode.containerInfo;if(o===a||8===o.nodeType&&o.parentNode===a)break;if(4===s)for(s=r.return;null!==s;){var u=s.tag;if((3===u||4===u)&&((u=s.stateNode.containerInfo)===a||8===u.nodeType&&u.parentNode===a))return;s=s.return}for(;null!==o;){if(null===(s=ea(o)))return;if(5===(u=s.tag)||6===u){r=i=s;continue e}o=o.parentNode}}r=r.return}!function(e,t,n){if(Ne)return e();Ne=!0;try{return Ce(e,t,n)}finally{Ne=!1,Re()}}((function(){var r=i,a=we(n),s=[];e:{var o=Ot.get(e);if(void 0!==o){var u=cn,l=e;switch(e){case"keypress":if(0===nn(n))break e;case"keydown":case"keyup":u=Sn;break;case"focusin":l="focus",u=yn;break;case"focusout":l="blur",u=yn;break;case"beforeblur":case"afterblur":u=yn;break;case"click":if(2===n.button)break e;case"auxclick":case"dblclick":case"mousedown":case"mousemove":case"mouseup":case"mouseout":case"mouseover":case"contextmenu":u=hn;break;case"drag":case"dragend":case"dragenter":case"dragexit":case"dragleave":case"dragover":case"dragstart":case"drop":u=pn;break;case"touchcancel":case"touchend":case"touchmove":case"touchstart":u=On;break;case Dt:case Tt:case St:u=gn;break;case xt:u=En;break;case"scroll":u=mn;break;case"wheel":u=Pn;break;case"copy":case"cut":case"paste":u=Mn;break;case"gotpointercapture":case"lostpointercapture":case"pointercancel":case"pointerdown":case"pointermove":case"pointerout":case"pointerover":case"pointerup":u=xn}var d=!!(4&t),c=!d&&"scroll"===e,f=d?null!==o?o+"Capture":null:o;d=[];for(var m,_=r;null!==_;){var h=(m=_).stateNode;if(5===m.tag&&null!==h&&(m=h,null!==f&&null!=(h=Fe(_,f))&&d.push(Hr(_,h,m))),c)break;_=_.return}0<d.length&&(o=new u(o,l,null,n,a),s.push({event:o,listeners:d}))}}if(!(7&t)){if(u="mouseout"===e||"pointerout"===e,(!(o="mouseover"===e||"pointerover"===e)||16&t||!(l=n.relatedTarget||n.fromElement)||!ea(l)&&!l[Xr])&&(u||o)&&(o=a.window===a?a:(o=a.ownerDocument)?o.defaultView||o.parentWindow:window,u?(u=r,null!==(l=(l=n.relatedTarget||n.toElement)?ea(l):null)&&(l!==(c=$e(l))||5!==l.tag&&6!==l.tag)&&(l=null)):(u=null,l=r),u!==l)){if(d=hn,h="onMouseLeave",f="onMouseEnter",_="mouse","pointerout"!==e&&"pointerover"!==e||(d=xn,h="onPointerLeave",f="onPointerEnter",_="pointer"),c=null==u?o:na(u),m=null==l?o:na(l),(o=new d(h,_+"leave",u,n,a)).target=c,o.relatedTarget=m,h=null,ea(a)===r&&((d=new d(f,_+"enter",l,n,a)).target=m,d.relatedTarget=c,h=d),c=h,u&&l)e:{for(f=l,_=0,m=d=u;m;m=Ar(m))_++;for(m=0,h=f;h;h=Ar(h))m++;for(;0<_-m;)d=Ar(d),_--;for(;0<m-_;)f=Ar(f),m--;for(;_--;){if(d===f||null!==f&&d===f.alternate)break e;d=Ar(d),f=Ar(f)}d=null}else d=null;null!==u&&Nr(s,o,u,d,!1),null!==l&&null!==c&&Nr(s,c,l,d,!0)}if("select"===(u=(o=r?na(r):window).nodeName&&o.nodeName.toLowerCase())||"input"===u&&"file"===o.type)var p=Qn;else if(Vn(o))if(Xn)p=or;else{p=ir;var y=ar}else(u=o.nodeName)&&"input"===u.toLowerCase()&&("checkbox"===o.type||"radio"===o.type)&&(p=sr);switch(p&&(p=p(e,r))?Jn(s,p,n,a):(y&&y(e,o,r),"focusout"===e&&(y=o._wrapperState)&&y.controlled&&"number"===o.type&&ae(o,"number",o.value)),y=r?na(r):window,e){case"focusin":(Vn(y)||"true"===y.contentEditable)&&(yr=y,gr=r,vr=null);break;case"focusout":vr=gr=yr=null;break;case"mousedown":Mr=!0;break;case"contextmenu":case"mouseup":case"dragend":Mr=!1,Lr(s,n,a);break;case"selectionchange":if(pr)break;case"keydown":case"keyup":Lr(s,n,a)}var g;if(Cn)e:{switch(e){case"compositionstart":var v="onCompositionStart";break e;case"compositionend":v="onCompositionEnd";break e;case"compositionupdate":v="onCompositionUpdate";break e}v=void 0}else Un?Wn(e,n)&&(v="onCompositionEnd"):"keydown"===e&&229===n.keyCode&&(v="onCompositionStart");v&&(Rn&&"ko"!==n.locale&&(Un||"onCompositionStart"!==v?"onCompositionEnd"===v&&Un&&(g=tn()):(Zt="value"in(Xt=a)?Xt.value:Xt.textContent,Un=!0)),0<(y=Cr(r,v)).length&&(v=new Ln(v,e,null,n,a),s.push({event:v,listeners:y}),(g||null!==(g=In(n)))&&(v.data=g))),(g=Nn?function(e,t){switch(e){case"compositionend":return In(t);case"keypress":return 32!==t.which?null:(zn=!0,Fn);case"textInput":return(e=t.data)===Fn&&zn?null:e;default:return null}}(e,n):function(e,t){if(Un)return"compositionend"===e||!Cn&&Wn(e,t)?(e=tn(),en=Zt=Xt=null,Un=!1,e):null;switch(e){case"paste":default:return null;case"keypress":if(!(t.ctrlKey||t.altKey||t.metaKey)||t.ctrlKey&&t.altKey){if(t.char&&1<t.char.length)return t.char;if(t.which)return String.fromCharCode(t.which)}return null;case"compositionend":return Rn&&"ko"!==t.locale?null:t.data}}(e,n))&&0<(r=Cr(r,"onBeforeInput")).length&&(a=new Ln("onBeforeInput","beforeinput",null,n,a),s.push({event:a,listeners:r}),a.data=g)}Tr(s,t)}))}function Hr(e,t,n){return{instance:e,listener:t,currentTarget:n}}function Cr(e,t){for(var n=t+"Capture",r=[];null!==e;){var a=e,i=a.stateNode;5===a.tag&&null!==i&&(a=i,null!=(i=Fe(e,n))&&r.unshift(Hr(e,i,a)),null!=(i=Fe(e,t))&&r.push(Hr(e,i,a))),e=e.return}return r}function Ar(e){if(null===e)return null;do{e=e.return}while(e&&5!==e.tag);return e||null}function Nr(e,t,n,r,a){for(var i=t._reactName,s=[];null!==n&&n!==r;){var o=n,u=o.alternate,l=o.stateNode;if(null!==u&&u===r)break;5===o.tag&&null!==l&&(o=l,a?null!=(u=Fe(n,i))&&s.unshift(Hr(n,u,o)):a||null!=(u=Fe(n,i))&&s.push(Hr(n,u,o))),n=n.return}0!==s.length&&e.push({event:t,listeners:s})}function Rr(){}var Fr=null,zr=null;function Wr(e,t){switch(e){case"button":case"input":case"select":case"textarea":return!!t.autoFocus}return!1}function Ir(e,t){return"textarea"===e||"option"===e||"noscript"===e||"string"==typeof t.children||"number"==typeof t.children||"object"==typeof t.dangerouslySetInnerHTML&&null!==t.dangerouslySetInnerHTML&&null!=t.dangerouslySetInnerHTML.__html}var Ur="function"==typeof setTimeout?setTimeout:void 0,Br="function"==typeof clearTimeout?clearTimeout:void 0;function Vr(e){(1===e.nodeType||9===e.nodeType&&null!=(e=e.body))&&(e.textContent="")}function Jr(e){for(;null!=e;e=e.nextSibling){var t=e.nodeType;if(1===t||3===t)break}return e}function Gr(e){e=e.previousSibling;for(var t=0;e;){if(8===e.nodeType){var n=e.data;if("$"===n||"$!"===n||"$?"===n){if(0===t)return e;t--}else"/$"===n&&t++}e=e.previousSibling}return null}var qr=0,$r=Math.random().toString(36).slice(2),Kr="__reactFiber$"+$r,Qr="__reactProps$"+$r,Xr="__reactContainer$"+$r,Zr="__reactEvents$"+$r;function ea(e){var t=e[Kr];if(t)return t;for(var n=e.parentNode;n;){if(t=n[Xr]||n[Kr]){if(n=t.alternate,null!==t.child||null!==n&&null!==n.child)for(e=Gr(e);null!==e;){if(n=e[Kr])return n;e=Gr(e)}return t}n=(e=n).parentNode}return null}function ta(e){return!(e=e[Kr]||e[Xr])||5!==e.tag&&6!==e.tag&&13!==e.tag&&3!==e.tag?null:e}function na(e){if(5===e.tag||6===e.tag)return e.stateNode;throw Error(s(33))}function ra(e){return e[Qr]||null}function aa(e){var t=e[Zr];return void 0===t&&(t=e[Zr]=new Set),t}var ia=[],sa=-1;function oa(e){return{current:e}}function ua(e){0>sa||(e.current=ia[sa],ia[sa]=null,sa--)}function la(e,t){sa++,ia[sa]=e.current,e.current=t}var da={},ca=oa(da),fa=oa(!1),ma=da;function _a(e,t){var n=e.type.contextTypes;if(!n)return da;var r=e.stateNode;if(r&&r.__reactInternalMemoizedUnmaskedChildContext===t)return r.__reactInternalMemoizedMaskedChildContext;var a,i={};for(a in n)i[a]=t[a];return r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=t,e.__reactInternalMemoizedMaskedChildContext=i),i}function ha(e){return null!=e.childContextTypes}function pa(){ua(fa),ua(ca)}function ya(e,t,n){if(ca.current!==da)throw Error(s(168));la(ca,t),la(fa,n)}function ga(e,t,n){var r=e.stateNode;if(e=t.childContextTypes,"function"!=typeof r.getChildContext)return n;for(var i in r=r.getChildContext())if(!(i in e))throw Error(s(108,G(t)||"Unknown",i));return a({},n,r)}function va(e){return e=(e=e.stateNode)&&e.__reactInternalMemoizedMergedChildContext||da,ma=ca.current,la(ca,e),la(fa,fa.current),!0}function Ma(e,t,n){var r=e.stateNode;if(!r)throw Error(s(169));n?(e=ga(e,t,ma),r.__reactInternalMemoizedMergedChildContext=e,ua(fa),ua(ca),la(ca,e)):ua(fa),la(fa,n)}var La=null,ka=null,ba=i.unstable_runWithPriority,Ya=i.unstable_scheduleCallback,wa=i.unstable_cancelCallback,Da=i.unstable_shouldYield,Ta=i.unstable_requestPaint,Sa=i.unstable_now,xa=i.unstable_getCurrentPriorityLevel,Oa=i.unstable_ImmediatePriority,Ea=i.unstable_UserBlockingPriority,ja=i.unstable_NormalPriority,Pa=i.unstable_LowPriority,Ha=i.unstable_IdlePriority,Ca={},Aa=void 0!==Ta?Ta:function(){},Na=null,Ra=null,Fa=!1,za=Sa(),Wa=1e4>za?Sa:function(){return Sa()-za};function Ia(){switch(xa()){case Oa:return 99;case Ea:return 98;case ja:return 97;case Pa:return 96;case Ha:return 95;default:throw Error(s(332))}}function Ua(e){switch(e){case 99:return Oa;case 98:return Ea;case 97:return ja;case 96:return Pa;case 95:return Ha;default:throw Error(s(332))}}function Ba(e,t){return e=Ua(e),ba(e,t)}function Va(e,t,n){return e=Ua(e),Ya(e,t,n)}function Ja(){if(null!==Ra){var e=Ra;Ra=null,wa(e)}Ga()}function Ga(){if(!Fa&&null!==Na){Fa=!0;var e=0;try{var t=Na;Ba(99,(function(){for(;e<t.length;e++){var n=t[e];do{n=n(!0)}while(null!==n)}})),Na=null}catch(t){throw null!==Na&&(Na=Na.slice(e+1)),Ya(Oa,Ja),t}finally{Fa=!1}}}var qa=L.ReactCurrentBatchConfig;function $a(e,t){if(e&&e.defaultProps){for(var n in t=a({},t),e=e.defaultProps)void 0===t[n]&&(t[n]=e[n]);return t}return t}var Ka=oa(null),Qa=null,Xa=null,Za=null;function ei(){Za=Xa=Qa=null}function ti(e){var t=Ka.current;ua(Ka),e.type._context._currentValue=t}function ni(e,t){for(;null!==e;){var n=e.alternate;if((e.childLanes&t)===t){if(null===n||(n.childLanes&t)===t)break;n.childLanes|=t}else e.childLanes|=t,null!==n&&(n.childLanes|=t);e=e.return}}function ri(e,t){Qa=e,Za=Xa=null,null!==(e=e.dependencies)&&null!==e.firstContext&&(!!(e.lanes&t)&&(Hs=!0),e.firstContext=null)}function ai(e,t){if(Za!==e&&!1!==t&&0!==t)if("number"==typeof t&&1073741823!==t||(Za=e,t=1073741823),t={context:e,observedBits:t,next:null},null===Xa){if(null===Qa)throw Error(s(308));Xa=t,Qa.dependencies={lanes:0,firstContext:t,responders:null}}else Xa=Xa.next=t;return e._currentValue}var ii=!1;function si(e){e.updateQueue={baseState:e.memoizedState,firstBaseUpdate:null,lastBaseUpdate:null,shared:{pending:null},effects:null}}function oi(e,t){e=e.updateQueue,t.updateQueue===e&&(t.updateQueue={baseState:e.baseState,firstBaseUpdate:e.firstBaseUpdate,lastBaseUpdate:e.lastBaseUpdate,shared:e.shared,effects:e.effects})}function ui(e,t){return{eventTime:e,lane:t,tag:0,payload:null,callback:null,next:null}}function li(e,t){if(null!==(e=e.updateQueue)){var n=(e=e.shared).pending;null===n?t.next=t:(t.next=n.next,n.next=t),e.pending=t}}function di(e,t){var n=e.updateQueue,r=e.alternate;if(null!==r&&n===(r=r.updateQueue)){var a=null,i=null;if(null!==(n=n.firstBaseUpdate)){do{var s={eventTime:n.eventTime,lane:n.lane,tag:n.tag,payload:n.payload,callback:n.callback,next:null};null===i?a=i=s:i=i.next=s,n=n.next}while(null!==n);null===i?a=i=t:i=i.next=t}else a=i=t;return n={baseState:r.baseState,firstBaseUpdate:a,lastBaseUpdate:i,shared:r.shared,effects:r.effects},void(e.updateQueue=n)}null===(e=n.lastBaseUpdate)?n.firstBaseUpdate=t:e.next=t,n.lastBaseUpdate=t}function ci(e,t,n,r){var i=e.updateQueue;ii=!1;var s=i.firstBaseUpdate,o=i.lastBaseUpdate,u=i.shared.pending;if(null!==u){i.shared.pending=null;var l=u,d=l.next;l.next=null,null===o?s=d:o.next=d,o=l;var c=e.alternate;if(null!==c){var f=(c=c.updateQueue).lastBaseUpdate;f!==o&&(null===f?c.firstBaseUpdate=d:f.next=d,c.lastBaseUpdate=l)}}if(null!==s){for(f=i.baseState,o=0,c=d=l=null;;){u=s.lane;var m=s.eventTime;if((r&u)===u){null!==c&&(c=c.next={eventTime:m,lane:0,tag:s.tag,payload:s.payload,callback:s.callback,next:null});e:{var _=e,h=s;switch(u=t,m=n,h.tag){case 1:if("function"==typeof(_=h.payload)){f=_.call(m,f,u);break e}f=_;break e;case 3:_.flags=-4097&_.flags|64;case 0:if(null==(u="function"==typeof(_=h.payload)?_.call(m,f,u):_))break e;f=a({},f,u);break e;case 2:ii=!0}}null!==s.callback&&(e.flags|=32,null===(u=i.effects)?i.effects=[s]:u.push(s))}else m={eventTime:m,lane:u,tag:s.tag,payload:s.payload,callback:s.callback,next:null},null===c?(d=c=m,l=f):c=c.next=m,o|=u;if(null===(s=s.next)){if(null===(u=i.shared.pending))break;s=u.next,u.next=null,i.lastBaseUpdate=u,i.shared.pending=null}}null===c&&(l=f),i.baseState=l,i.firstBaseUpdate=d,i.lastBaseUpdate=c,Ro|=o,e.lanes=o,e.memoizedState=f}}function fi(e,t,n){if(e=t.effects,t.effects=null,null!==e)for(t=0;t<e.length;t++){var r=e[t],a=r.callback;if(null!==a){if(r.callback=null,r=n,"function"!=typeof a)throw Error(s(191,a));a.call(r)}}}var mi=(new r.Component).refs;function _i(e,t,n,r){n=null==(n=n(r,t=e.memoizedState))?t:a({},t,n),e.memoizedState=n,0===e.lanes&&(e.updateQueue.baseState=n)}var hi={isMounted:function(e){return!!(e=e._reactInternals)&&$e(e)===e},enqueueSetState:function(e,t,n){e=e._reactInternals;var r=lu(),a=du(e),i=ui(r,a);i.payload=t,null!=n&&(i.callback=n),li(e,i),cu(e,a,r)},enqueueReplaceState:function(e,t,n){e=e._reactInternals;var r=lu(),a=du(e),i=ui(r,a);i.tag=1,i.payload=t,null!=n&&(i.callback=n),li(e,i),cu(e,a,r)},enqueueForceUpdate:function(e,t){e=e._reactInternals;var n=lu(),r=du(e),a=ui(n,r);a.tag=2,null!=t&&(a.callback=t),li(e,a),cu(e,r,n)}};function pi(e,t,n,r,a,i,s){return"function"==typeof(e=e.stateNode).shouldComponentUpdate?e.shouldComponentUpdate(r,i,s):!(t.prototype&&t.prototype.isPureReactComponent&&dr(n,r)&&dr(a,i))}function yi(e,t,n){var r=!1,a=da,i=t.contextType;return"object"==typeof i&&null!==i?i=ai(i):(a=ha(t)?ma:ca.current,i=(r=null!=(r=t.contextTypes))?_a(e,a):da),t=new t(n,i),e.memoizedState=null!==t.state&&void 0!==t.state?t.state:null,t.updater=hi,e.stateNode=t,t._reactInternals=e,r&&((e=e.stateNode).__reactInternalMemoizedUnmaskedChildContext=a,e.__reactInternalMemoizedMaskedChildContext=i),t}function gi(e,t,n,r){e=t.state,"function"==typeof t.componentWillReceiveProps&&t.componentWillReceiveProps(n,r),"function"==typeof t.UNSAFE_componentWillReceiveProps&&t.UNSAFE_componentWillReceiveProps(n,r),t.state!==e&&hi.enqueueReplaceState(t,t.state,null)}function vi(e,t,n,r){var a=e.stateNode;a.props=n,a.state=e.memoizedState,a.refs=mi,si(e);var i=t.contextType;"object"==typeof i&&null!==i?a.context=ai(i):(i=ha(t)?ma:ca.current,a.context=_a(e,i)),ci(e,n,a,r),a.state=e.memoizedState,"function"==typeof(i=t.getDerivedStateFromProps)&&(_i(e,t,i,n),a.state=e.memoizedState),"function"==typeof t.getDerivedStateFromProps||"function"==typeof a.getSnapshotBeforeUpdate||"function"!=typeof a.UNSAFE_componentWillMount&&"function"!=typeof a.componentWillMount||(t=a.state,"function"==typeof a.componentWillMount&&a.componentWillMount(),"function"==typeof a.UNSAFE_componentWillMount&&a.UNSAFE_componentWillMount(),t!==a.state&&hi.enqueueReplaceState(a,a.state,null),ci(e,n,a,r),a.state=e.memoizedState),"function"==typeof a.componentDidMount&&(e.flags|=4)}var Mi=Array.isArray;function Li(e,t,n){if(null!==(e=n.ref)&&"function"!=typeof e&&"object"!=typeof e){if(n._owner){if(n=n._owner){if(1!==n.tag)throw Error(s(309));var r=n.stateNode}if(!r)throw Error(s(147,e));var a=""+e;return null!==t&&null!==t.ref&&"function"==typeof t.ref&&t.ref._stringRef===a?t.ref:(t=function(e){var t=r.refs;t===mi&&(t=r.refs={}),null===e?delete t[a]:t[a]=e},t._stringRef=a,t)}if("string"!=typeof e)throw Error(s(284));if(!n._owner)throw Error(s(290,e))}return e}function ki(e,t){if("textarea"!==e.type)throw Error(s(31,"[object Object]"===Object.prototype.toString.call(t)?"object with keys {"+Object.keys(t).join(", ")+"}":t))}function bi(e){function t(t,n){if(e){var r=t.lastEffect;null!==r?(r.nextEffect=n,t.lastEffect=n):t.firstEffect=t.lastEffect=n,n.nextEffect=null,n.flags=8}}function n(n,r){if(!e)return null;for(;null!==r;)t(n,r),r=r.sibling;return null}function r(e,t){for(e=new Map;null!==t;)null!==t.key?e.set(t.key,t):e.set(t.index,t),t=t.sibling;return e}function a(e,t){return(e=Wu(e,t)).index=0,e.sibling=null,e}function i(t,n,r){return t.index=r,e?null!==(r=t.alternate)?(r=r.index)<n?(t.flags=2,n):r:(t.flags=2,n):n}function o(t){return e&&null===t.alternate&&(t.flags=2),t}function u(e,t,n,r){return null===t||6!==t.tag?((t=Vu(n,e.mode,r)).return=e,t):((t=a(t,n)).return=e,t)}function l(e,t,n,r){return null!==t&&t.elementType===n.type?((r=a(t,n.props)).ref=Li(e,t,n),r.return=e,r):((r=Iu(n.type,n.key,n.props,null,e.mode,r)).ref=Li(e,t,n),r.return=e,r)}function d(e,t,n,r){return null===t||4!==t.tag||t.stateNode.containerInfo!==n.containerInfo||t.stateNode.implementation!==n.implementation?((t=Ju(n,e.mode,r)).return=e,t):((t=a(t,n.children||[])).return=e,t)}function c(e,t,n,r,i){return null===t||7!==t.tag?((t=Uu(n,e.mode,r,i)).return=e,t):((t=a(t,n)).return=e,t)}function f(e,t,n){if("string"==typeof t||"number"==typeof t)return(t=Vu(""+t,e.mode,n)).return=e,t;if("object"==typeof t&&null!==t){switch(t.$$typeof){case k:return(n=Iu(t.type,t.key,t.props,null,e.mode,n)).ref=Li(e,null,t),n.return=e,n;case b:return(t=Ju(t,e.mode,n)).return=e,t}if(Mi(t)||I(t))return(t=Uu(t,e.mode,n,null)).return=e,t;ki(e,t)}return null}function m(e,t,n,r){var a=null!==t?t.key:null;if("string"==typeof n||"number"==typeof n)return null!==a?null:u(e,t,""+n,r);if("object"==typeof n&&null!==n){switch(n.$$typeof){case k:return n.key===a?n.type===Y?c(e,t,n.props.children,r,a):l(e,t,n,r):null;case b:return n.key===a?d(e,t,n,r):null}if(Mi(n)||I(n))return null!==a?null:c(e,t,n,r,null);ki(e,n)}return null}function _(e,t,n,r,a){if("string"==typeof r||"number"==typeof r)return u(t,e=e.get(n)||null,""+r,a);if("object"==typeof r&&null!==r){switch(r.$$typeof){case k:return e=e.get(null===r.key?n:r.key)||null,r.type===Y?c(t,e,r.props.children,a,r.key):l(t,e,r,a);case b:return d(t,e=e.get(null===r.key?n:r.key)||null,r,a)}if(Mi(r)||I(r))return c(t,e=e.get(n)||null,r,a,null);ki(t,r)}return null}function h(a,s,o,u){for(var l=null,d=null,c=s,h=s=0,p=null;null!==c&&h<o.length;h++){c.index>h?(p=c,c=null):p=c.sibling;var y=m(a,c,o[h],u);if(null===y){null===c&&(c=p);break}e&&c&&null===y.alternate&&t(a,c),s=i(y,s,h),null===d?l=y:d.sibling=y,d=y,c=p}if(h===o.length)return n(a,c),l;if(null===c){for(;h<o.length;h++)null!==(c=f(a,o[h],u))&&(s=i(c,s,h),null===d?l=c:d.sibling=c,d=c);return l}for(c=r(a,c);h<o.length;h++)null!==(p=_(c,a,h,o[h],u))&&(e&&null!==p.alternate&&c.delete(null===p.key?h:p.key),s=i(p,s,h),null===d?l=p:d.sibling=p,d=p);return e&&c.forEach((function(e){return t(a,e)})),l}function p(a,o,u,l){var d=I(u);if("function"!=typeof d)throw Error(s(150));if(null==(u=d.call(u)))throw Error(s(151));for(var c=d=null,h=o,p=o=0,y=null,g=u.next();null!==h&&!g.done;p++,g=u.next()){h.index>p?(y=h,h=null):y=h.sibling;var v=m(a,h,g.value,l);if(null===v){null===h&&(h=y);break}e&&h&&null===v.alternate&&t(a,h),o=i(v,o,p),null===c?d=v:c.sibling=v,c=v,h=y}if(g.done)return n(a,h),d;if(null===h){for(;!g.done;p++,g=u.next())null!==(g=f(a,g.value,l))&&(o=i(g,o,p),null===c?d=g:c.sibling=g,c=g);return d}for(h=r(a,h);!g.done;p++,g=u.next())null!==(g=_(h,a,p,g.value,l))&&(e&&null!==g.alternate&&h.delete(null===g.key?p:g.key),o=i(g,o,p),null===c?d=g:c.sibling=g,c=g);return e&&h.forEach((function(e){return t(a,e)})),d}return function(e,r,i,u){var l="object"==typeof i&&null!==i&&i.type===Y&&null===i.key;l&&(i=i.props.children);var d="object"==typeof i&&null!==i;if(d)switch(i.$$typeof){case k:e:{for(d=i.key,l=r;null!==l;){if(l.key===d){if(7===l.tag){if(i.type===Y){n(e,l.sibling),(r=a(l,i.props.children)).return=e,e=r;break e}}else if(l.elementType===i.type){n(e,l.sibling),(r=a(l,i.props)).ref=Li(e,l,i),r.return=e,e=r;break e}n(e,l);break}t(e,l),l=l.sibling}i.type===Y?((r=Uu(i.props.children,e.mode,u,i.key)).return=e,e=r):((u=Iu(i.type,i.key,i.props,null,e.mode,u)).ref=Li(e,r,i),u.return=e,e=u)}return o(e);case b:e:{for(l=i.key;null!==r;){if(r.key===l){if(4===r.tag&&r.stateNode.containerInfo===i.containerInfo&&r.stateNode.implementation===i.implementation){n(e,r.sibling),(r=a(r,i.children||[])).return=e,e=r;break e}n(e,r);break}t(e,r),r=r.sibling}(r=Ju(i,e.mode,u)).return=e,e=r}return o(e)}if("string"==typeof i||"number"==typeof i)return i=""+i,null!==r&&6===r.tag?(n(e,r.sibling),(r=a(r,i)).return=e,e=r):(n(e,r),(r=Vu(i,e.mode,u)).return=e,e=r),o(e);if(Mi(i))return h(e,r,i,u);if(I(i))return p(e,r,i,u);if(d&&ki(e,i),void 0===i&&!l)switch(e.tag){case 1:case 22:case 0:case 11:case 15:throw Error(s(152,G(e.type)||"Component"))}return n(e,r)}}var Yi=bi(!0),wi=bi(!1),Di={},Ti=oa(Di),Si=oa(Di),xi=oa(Di);function Oi(e){if(e===Di)throw Error(s(174));return e}function Ei(e,t){switch(la(xi,t),la(Si,e),la(Ti,Di),e=t.nodeType){case 9:case 11:t=(t=t.documentElement)?t.namespaceURI:me(null,"");break;default:t=me(t=(e=8===e?t.parentNode:t).namespaceURI||null,e=e.tagName)}ua(Ti),la(Ti,t)}function ji(){ua(Ti),ua(Si),ua(xi)}function Pi(e){Oi(xi.current);var t=Oi(Ti.current),n=me(t,e.type);t!==n&&(la(Si,e),la(Ti,n))}function Hi(e){Si.current===e&&(ua(Ti),ua(Si))}var Ci=oa(0);function Ai(e){for(var t=e;null!==t;){if(13===t.tag){var n=t.memoizedState;if(null!==n&&(null===(n=n.dehydrated)||"$?"===n.data||"$!"===n.data))return t}else if(19===t.tag&&void 0!==t.memoizedProps.revealOrder){if(64&t.flags)return t}else if(null!==t.child){t.child.return=t,t=t.child;continue}if(t===e)break;for(;null===t.sibling;){if(null===t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}return null}var Ni=null,Ri=null,Fi=!1;function zi(e,t){var n=Fu(5,null,null,0);n.elementType="DELETED",n.type="DELETED",n.stateNode=t,n.return=e,n.flags=8,null!==e.lastEffect?(e.lastEffect.nextEffect=n,e.lastEffect=n):e.firstEffect=e.lastEffect=n}function Wi(e,t){switch(e.tag){case 5:var n=e.type;return null!==(t=1!==t.nodeType||n.toLowerCase()!==t.nodeName.toLowerCase()?null:t)&&(e.stateNode=t,!0);case 6:return null!==(t=""===e.pendingProps||3!==t.nodeType?null:t)&&(e.stateNode=t,!0);default:return!1}}function Ii(e){if(Fi){var t=Ri;if(t){var n=t;if(!Wi(e,t)){if(!(t=Jr(n.nextSibling))||!Wi(e,t))return e.flags=-1025&e.flags|2,Fi=!1,void(Ni=e);zi(Ni,n)}Ni=e,Ri=Jr(t.firstChild)}else e.flags=-1025&e.flags|2,Fi=!1,Ni=e}}function Ui(e){for(e=e.return;null!==e&&5!==e.tag&&3!==e.tag&&13!==e.tag;)e=e.return;Ni=e}function Bi(e){if(e!==Ni)return!1;if(!Fi)return Ui(e),Fi=!0,!1;var t=e.type;if(5!==e.tag||"head"!==t&&"body"!==t&&!Ir(t,e.memoizedProps))for(t=Ri;t;)zi(e,t),t=Jr(t.nextSibling);if(Ui(e),13===e.tag){if(!(e=null!==(e=e.memoizedState)?e.dehydrated:null))throw Error(s(317));e:{for(e=e.nextSibling,t=0;e;){if(8===e.nodeType){var n=e.data;if("/$"===n){if(0===t){Ri=Jr(e.nextSibling);break e}t--}else"$"!==n&&"$!"!==n&&"$?"!==n||t++}e=e.nextSibling}Ri=null}}else Ri=Ni?Jr(e.stateNode.nextSibling):null;return!0}function Vi(){Ri=Ni=null,Fi=!1}var Ji=[];function Gi(){for(var e=0;e<Ji.length;e++)Ji[e]._workInProgressVersionPrimary=null;Ji.length=0}var qi=L.ReactCurrentDispatcher,$i=L.ReactCurrentBatchConfig,Ki=0,Qi=null,Xi=null,Zi=null,es=!1,ts=!1;function ns(){throw Error(s(321))}function rs(e,t){if(null===t)return!1;for(var n=0;n<t.length&&n<e.length;n++)if(!ur(e[n],t[n]))return!1;return!0}function as(e,t,n,r,a,i){if(Ki=i,Qi=t,t.memoizedState=null,t.updateQueue=null,t.lanes=0,qi.current=null===e||null===e.memoizedState?Os:Es,e=n(r,a),ts){i=0;do{if(ts=!1,!(25>i))throw Error(s(301));i+=1,Zi=Xi=null,t.updateQueue=null,qi.current=js,e=n(r,a)}while(ts)}if(qi.current=xs,t=null!==Xi&&null!==Xi.next,Ki=0,Zi=Xi=Qi=null,es=!1,t)throw Error(s(300));return e}function is(){var e={memoizedState:null,baseState:null,baseQueue:null,queue:null,next:null};return null===Zi?Qi.memoizedState=Zi=e:Zi=Zi.next=e,Zi}function ss(){if(null===Xi){var e=Qi.alternate;e=null!==e?e.memoizedState:null}else e=Xi.next;var t=null===Zi?Qi.memoizedState:Zi.next;if(null!==t)Zi=t,Xi=e;else{if(null===e)throw Error(s(310));e={memoizedState:(Xi=e).memoizedState,baseState:Xi.baseState,baseQueue:Xi.baseQueue,queue:Xi.queue,next:null},null===Zi?Qi.memoizedState=Zi=e:Zi=Zi.next=e}return Zi}function os(e,t){return"function"==typeof t?t(e):t}function us(e){var t=ss(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=Xi,a=r.baseQueue,i=n.pending;if(null!==i){if(null!==a){var o=a.next;a.next=i.next,i.next=o}r.baseQueue=a=i,n.pending=null}if(null!==a){a=a.next,r=r.baseState;var u=o=i=null,l=a;do{var d=l.lane;if((Ki&d)===d)null!==u&&(u=u.next={lane:0,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null}),r=l.eagerReducer===e?l.eagerState:e(r,l.action);else{var c={lane:d,action:l.action,eagerReducer:l.eagerReducer,eagerState:l.eagerState,next:null};null===u?(o=u=c,i=r):u=u.next=c,Qi.lanes|=d,Ro|=d}l=l.next}while(null!==l&&l!==a);null===u?i=r:u.next=o,ur(r,t.memoizedState)||(Hs=!0),t.memoizedState=r,t.baseState=i,t.baseQueue=u,n.lastRenderedState=r}return[t.memoizedState,n.dispatch]}function ls(e){var t=ss(),n=t.queue;if(null===n)throw Error(s(311));n.lastRenderedReducer=e;var r=n.dispatch,a=n.pending,i=t.memoizedState;if(null!==a){n.pending=null;var o=a=a.next;do{i=e(i,o.action),o=o.next}while(o!==a);ur(i,t.memoizedState)||(Hs=!0),t.memoizedState=i,null===t.baseQueue&&(t.baseState=i),n.lastRenderedState=i}return[i,r]}function ds(e,t,n){var r=t._getVersion;r=r(t._source);var a=t._workInProgressVersionPrimary;if(null!==a?e=a===r:(e=e.mutableReadLanes,(e=(Ki&e)===e)&&(t._workInProgressVersionPrimary=r,Ji.push(t))),e)return n(t._source);throw Ji.push(t),Error(s(350))}function cs(e,t,n,r){var a=Oo;if(null===a)throw Error(s(349));var i=t._getVersion,o=i(t._source),u=qi.current,l=u.useState((function(){return ds(a,t,n)})),d=l[1],c=l[0];l=Zi;var f=e.memoizedState,m=f.refs,_=m.getSnapshot,h=f.source;f=f.subscribe;var p=Qi;return e.memoizedState={refs:m,source:t,subscribe:r},u.useEffect((function(){m.getSnapshot=n,m.setSnapshot=d;var e=i(t._source);if(!ur(o,e)){e=n(t._source),ur(c,e)||(d(e),e=du(p),a.mutableReadLanes|=e&a.pendingLanes),e=a.mutableReadLanes,a.entangledLanes|=e;for(var r=a.entanglements,s=e;0<s;){var u=31-It(s),l=1<<u;r[u]|=e,s&=~l}}}),[n,t,r]),u.useEffect((function(){return r(t._source,(function(){var e=m.getSnapshot,n=m.setSnapshot;try{n(e(t._source));var r=du(p);a.mutableReadLanes|=r&a.pendingLanes}catch(e){n((function(){throw e}))}}))}),[t,r]),ur(_,n)&&ur(h,t)&&ur(f,r)||((e={pending:null,dispatch:null,lastRenderedReducer:os,lastRenderedState:c}).dispatch=d=Ss.bind(null,Qi,e),l.queue=e,l.baseQueue=null,c=ds(a,t,n),l.memoizedState=l.baseState=c),c}function fs(e,t,n){return cs(ss(),e,t,n)}function ms(e){var t=is();return"function"==typeof e&&(e=e()),t.memoizedState=t.baseState=e,e=(e=t.queue={pending:null,dispatch:null,lastRenderedReducer:os,lastRenderedState:e}).dispatch=Ss.bind(null,Qi,e),[t.memoizedState,e]}function _s(e,t,n,r){return e={tag:e,create:t,destroy:n,deps:r,next:null},null===(t=Qi.updateQueue)?(t={lastEffect:null},Qi.updateQueue=t,t.lastEffect=e.next=e):null===(n=t.lastEffect)?t.lastEffect=e.next=e:(r=n.next,n.next=e,e.next=r,t.lastEffect=e),e}function hs(e){return e={current:e},is().memoizedState=e}function ps(){return ss().memoizedState}function ys(e,t,n,r){var a=is();Qi.flags|=e,a.memoizedState=_s(1|t,n,void 0,void 0===r?null:r)}function gs(e,t,n,r){var a=ss();r=void 0===r?null:r;var i=void 0;if(null!==Xi){var s=Xi.memoizedState;if(i=s.destroy,null!==r&&rs(r,s.deps))return void _s(t,n,i,r)}Qi.flags|=e,a.memoizedState=_s(1|t,n,i,r)}function vs(e,t){return ys(516,4,e,t)}function Ms(e,t){return gs(516,4,e,t)}function Ls(e,t){return gs(4,2,e,t)}function ks(e,t){return"function"==typeof t?(e=e(),t(e),function(){t(null)}):null!=t?(e=e(),t.current=e,function(){t.current=null}):void 0}function bs(e,t,n){return n=null!=n?n.concat([e]):null,gs(4,2,ks.bind(null,t,e),n)}function Ys(){}function ws(e,t){var n=ss();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&rs(t,r[1])?r[0]:(n.memoizedState=[e,t],e)}function Ds(e,t){var n=ss();t=void 0===t?null:t;var r=n.memoizedState;return null!==r&&null!==t&&rs(t,r[1])?r[0]:(e=e(),n.memoizedState=[e,t],e)}function Ts(e,t){var n=Ia();Ba(98>n?98:n,(function(){e(!0)})),Ba(97<n?97:n,(function(){var n=$i.transition;$i.transition=1;try{e(!1),t()}finally{$i.transition=n}}))}function Ss(e,t,n){var r=lu(),a=du(e),i={lane:a,action:n,eagerReducer:null,eagerState:null,next:null},s=t.pending;if(null===s?i.next=i:(i.next=s.next,s.next=i),t.pending=i,s=e.alternate,e===Qi||null!==s&&s===Qi)ts=es=!0;else{if(0===e.lanes&&(null===s||0===s.lanes)&&null!==(s=t.lastRenderedReducer))try{var o=t.lastRenderedState,u=s(o,n);if(i.eagerReducer=s,i.eagerState=u,ur(u,o))return}catch(e){}cu(e,a,r)}}var xs={readContext:ai,useCallback:ns,useContext:ns,useEffect:ns,useImperativeHandle:ns,useLayoutEffect:ns,useMemo:ns,useReducer:ns,useRef:ns,useState:ns,useDebugValue:ns,useDeferredValue:ns,useTransition:ns,useMutableSource:ns,useOpaqueIdentifier:ns,unstable_isNewReconciler:!1},Os={readContext:ai,useCallback:function(e,t){return is().memoizedState=[e,void 0===t?null:t],e},useContext:ai,useEffect:vs,useImperativeHandle:function(e,t,n){return n=null!=n?n.concat([e]):null,ys(4,2,ks.bind(null,t,e),n)},useLayoutEffect:function(e,t){return ys(4,2,e,t)},useMemo:function(e,t){var n=is();return t=void 0===t?null:t,e=e(),n.memoizedState=[e,t],e},useReducer:function(e,t,n){var r=is();return t=void 0!==n?n(t):t,r.memoizedState=r.baseState=t,e=(e=r.queue={pending:null,dispatch:null,lastRenderedReducer:e,lastRenderedState:t}).dispatch=Ss.bind(null,Qi,e),[r.memoizedState,e]},useRef:hs,useState:ms,useDebugValue:Ys,useDeferredValue:function(e){var t=ms(e),n=t[0],r=t[1];return vs((function(){var t=$i.transition;$i.transition=1;try{r(e)}finally{$i.transition=t}}),[e]),n},useTransition:function(){var e=ms(!1),t=e[0];return hs(e=Ts.bind(null,e[1])),[e,t]},useMutableSource:function(e,t,n){var r=is();return r.memoizedState={refs:{getSnapshot:t,setSnapshot:null},source:e,subscribe:n},cs(r,e,t,n)},useOpaqueIdentifier:function(){if(Fi){var e=!1,t=function(e){return{$$typeof:C,toString:e,valueOf:e}}((function(){throw e||(e=!0,n("r:"+(qr++).toString(36))),Error(s(355))})),n=ms(t)[1];return!(2&Qi.mode)&&(Qi.flags|=516,_s(5,(function(){n("r:"+(qr++).toString(36))}),void 0,null)),t}return ms(t="r:"+(qr++).toString(36)),t},unstable_isNewReconciler:!1},Es={readContext:ai,useCallback:ws,useContext:ai,useEffect:Ms,useImperativeHandle:bs,useLayoutEffect:Ls,useMemo:Ds,useReducer:us,useRef:ps,useState:function(){return us(os)},useDebugValue:Ys,useDeferredValue:function(e){var t=us(os),n=t[0],r=t[1];return Ms((function(){var t=$i.transition;$i.transition=1;try{r(e)}finally{$i.transition=t}}),[e]),n},useTransition:function(){var e=us(os)[0];return[ps().current,e]},useMutableSource:fs,useOpaqueIdentifier:function(){return us(os)[0]},unstable_isNewReconciler:!1},js={readContext:ai,useCallback:ws,useContext:ai,useEffect:Ms,useImperativeHandle:bs,useLayoutEffect:Ls,useMemo:Ds,useReducer:ls,useRef:ps,useState:function(){return ls(os)},useDebugValue:Ys,useDeferredValue:function(e){var t=ls(os),n=t[0],r=t[1];return Ms((function(){var t=$i.transition;$i.transition=1;try{r(e)}finally{$i.transition=t}}),[e]),n},useTransition:function(){var e=ls(os)[0];return[ps().current,e]},useMutableSource:fs,useOpaqueIdentifier:function(){return ls(os)[0]},unstable_isNewReconciler:!1},Ps=L.ReactCurrentOwner,Hs=!1;function Cs(e,t,n,r){t.child=null===e?wi(t,null,n,r):Yi(t,e.child,n,r)}function As(e,t,n,r,a){n=n.render;var i=t.ref;return ri(t,a),r=as(e,t,n,r,i,a),null===e||Hs?(t.flags|=1,Cs(e,t,r,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,to(e,t,a))}function Ns(e,t,n,r,a,i){if(null===e){var s=n.type;return"function"!=typeof s||zu(s)||void 0!==s.defaultProps||null!==n.compare||void 0!==n.defaultProps?((e=Iu(n.type,null,r,t,t.mode,i)).ref=t.ref,e.return=t,t.child=e):(t.tag=15,t.type=s,Rs(e,t,s,r,a,i))}return s=e.child,a&i||(a=s.memoizedProps,!(n=null!==(n=n.compare)?n:dr)(a,r)||e.ref!==t.ref)?(t.flags|=1,(e=Wu(s,r)).ref=t.ref,e.return=t,t.child=e):to(e,t,i)}function Rs(e,t,n,r,a,i){if(null!==e&&dr(e.memoizedProps,r)&&e.ref===t.ref){if(Hs=!1,!(i&a))return t.lanes=e.lanes,to(e,t,i);16384&e.flags&&(Hs=!0)}return Ws(e,t,n,r,i)}function Fs(e,t,n){var r=t.pendingProps,a=r.children,i=null!==e?e.memoizedState:null;if("hidden"===r.mode||"unstable-defer-without-hiding"===r.mode)if(4&t.mode){if(!(1073741824&n))return e=null!==i?i.baseLanes|n:n,t.lanes=t.childLanes=1073741824,t.memoizedState={baseLanes:e},yu(0,e),null;t.memoizedState={baseLanes:0},yu(0,null!==i?i.baseLanes:n)}else t.memoizedState={baseLanes:0},yu(0,n);else null!==i?(r=i.baseLanes|n,t.memoizedState=null):r=n,yu(0,r);return Cs(e,t,a,n),t.child}function zs(e,t){var n=t.ref;(null===e&&null!==n||null!==e&&e.ref!==n)&&(t.flags|=128)}function Ws(e,t,n,r,a){var i=ha(n)?ma:ca.current;return i=_a(t,i),ri(t,a),n=as(e,t,n,r,i,a),null===e||Hs?(t.flags|=1,Cs(e,t,n,a),t.child):(t.updateQueue=e.updateQueue,t.flags&=-517,e.lanes&=~a,to(e,t,a))}function Is(e,t,n,r,a){if(ha(n)){var i=!0;va(t)}else i=!1;if(ri(t,a),null===t.stateNode)null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),yi(t,n,r),vi(t,n,r,a),r=!0;else if(null===e){var s=t.stateNode,o=t.memoizedProps;s.props=o;var u=s.context,l=n.contextType;l="object"==typeof l&&null!==l?ai(l):_a(t,l=ha(n)?ma:ca.current);var d=n.getDerivedStateFromProps,c="function"==typeof d||"function"==typeof s.getSnapshotBeforeUpdate;c||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==r||u!==l)&&gi(t,s,r,l),ii=!1;var f=t.memoizedState;s.state=f,ci(t,r,s,a),u=t.memoizedState,o!==r||f!==u||fa.current||ii?("function"==typeof d&&(_i(t,n,d,r),u=t.memoizedState),(o=ii||pi(t,n,o,r,f,u,l))?(c||"function"!=typeof s.UNSAFE_componentWillMount&&"function"!=typeof s.componentWillMount||("function"==typeof s.componentWillMount&&s.componentWillMount(),"function"==typeof s.UNSAFE_componentWillMount&&s.UNSAFE_componentWillMount()),"function"==typeof s.componentDidMount&&(t.flags|=4)):("function"==typeof s.componentDidMount&&(t.flags|=4),t.memoizedProps=r,t.memoizedState=u),s.props=r,s.state=u,s.context=l,r=o):("function"==typeof s.componentDidMount&&(t.flags|=4),r=!1)}else{s=t.stateNode,oi(e,t),o=t.memoizedProps,l=t.type===t.elementType?o:$a(t.type,o),s.props=l,c=t.pendingProps,f=s.context,u="object"==typeof(u=n.contextType)&&null!==u?ai(u):_a(t,u=ha(n)?ma:ca.current);var m=n.getDerivedStateFromProps;(d="function"==typeof m||"function"==typeof s.getSnapshotBeforeUpdate)||"function"!=typeof s.UNSAFE_componentWillReceiveProps&&"function"!=typeof s.componentWillReceiveProps||(o!==c||f!==u)&&gi(t,s,r,u),ii=!1,f=t.memoizedState,s.state=f,ci(t,r,s,a);var _=t.memoizedState;o!==c||f!==_||fa.current||ii?("function"==typeof m&&(_i(t,n,m,r),_=t.memoizedState),(l=ii||pi(t,n,l,r,f,_,u))?(d||"function"!=typeof s.UNSAFE_componentWillUpdate&&"function"!=typeof s.componentWillUpdate||("function"==typeof s.componentWillUpdate&&s.componentWillUpdate(r,_,u),"function"==typeof s.UNSAFE_componentWillUpdate&&s.UNSAFE_componentWillUpdate(r,_,u)),"function"==typeof s.componentDidUpdate&&(t.flags|=4),"function"==typeof s.getSnapshotBeforeUpdate&&(t.flags|=256)):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),t.memoizedProps=r,t.memoizedState=_),s.props=r,s.state=_,s.context=u,r=l):("function"!=typeof s.componentDidUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=4),"function"!=typeof s.getSnapshotBeforeUpdate||o===e.memoizedProps&&f===e.memoizedState||(t.flags|=256),r=!1)}return Us(e,t,n,r,i,a)}function Us(e,t,n,r,a,i){zs(e,t);var s=!!(64&t.flags);if(!r&&!s)return a&&Ma(t,n,!1),to(e,t,i);r=t.stateNode,Ps.current=t;var o=s&&"function"!=typeof n.getDerivedStateFromError?null:r.render();return t.flags|=1,null!==e&&s?(t.child=Yi(t,e.child,null,i),t.child=Yi(t,null,o,i)):Cs(e,t,o,i),t.memoizedState=r.state,a&&Ma(t,n,!0),t.child}function Bs(e){var t=e.stateNode;t.pendingContext?ya(0,t.pendingContext,t.pendingContext!==t.context):t.context&&ya(0,t.context,!1),Ei(e,t.containerInfo)}var Vs,Js,Gs,qs,$s={dehydrated:null,retryLane:0};function Ks(e,t,n){var r,a=t.pendingProps,i=Ci.current,s=!1;return(r=!!(64&t.flags))||(r=(null===e||null!==e.memoizedState)&&!!(2&i)),r?(s=!0,t.flags&=-65):null!==e&&null===e.memoizedState||void 0===a.fallback||!0===a.unstable_avoidThisFallback||(i|=1),la(Ci,1&i),null===e?(void 0!==a.fallback&&Ii(t),e=a.children,i=a.fallback,s?(e=Qs(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$s,e):"number"==typeof a.unstable_expectedLoadTime?(e=Qs(t,e,i,n),t.child.memoizedState={baseLanes:n},t.memoizedState=$s,t.lanes=33554432,e):((n=Bu({mode:"visible",children:e},t.mode,n,null)).return=t,t.child=n)):(e.memoizedState,s?(a=function(e,t,n,r,a){var i=t.mode,s=e.child;e=s.sibling;var o={mode:"hidden",children:n};return 2&i||t.child===s?n=Wu(s,o):((n=t.child).childLanes=0,n.pendingProps=o,null!==(s=n.lastEffect)?(t.firstEffect=n.firstEffect,t.lastEffect=s,s.nextEffect=null):t.firstEffect=t.lastEffect=null),null!==e?r=Wu(e,r):(r=Uu(r,i,a,null)).flags|=2,r.return=t,n.return=t,n.sibling=r,t.child=n,r}(e,t,a.children,a.fallback,n),s=t.child,i=e.child.memoizedState,s.memoizedState=null===i?{baseLanes:n}:{baseLanes:i.baseLanes|n},s.childLanes=e.childLanes&~n,t.memoizedState=$s,a):(n=function(e,t,n,r){var a=e.child;return e=a.sibling,n=Wu(a,{mode:"visible",children:n}),!(2&t.mode)&&(n.lanes=r),n.return=t,n.sibling=null,null!==e&&(e.nextEffect=null,e.flags=8,t.firstEffect=t.lastEffect=e),t.child=n}(e,t,a.children,n),t.memoizedState=null,n))}function Qs(e,t,n,r){var a=e.mode,i=e.child;return t={mode:"hidden",children:t},2&a||null===i?i=Bu(t,a,0,null):(i.childLanes=0,i.pendingProps=t),n=Uu(n,a,r,null),i.return=e,n.return=e,i.sibling=n,e.child=i,n}function Xs(e,t){e.lanes|=t;var n=e.alternate;null!==n&&(n.lanes|=t),ni(e.return,t)}function Zs(e,t,n,r,a,i){var s=e.memoizedState;null===s?e.memoizedState={isBackwards:t,rendering:null,renderingStartTime:0,last:r,tail:n,tailMode:a,lastEffect:i}:(s.isBackwards=t,s.rendering=null,s.renderingStartTime=0,s.last=r,s.tail=n,s.tailMode=a,s.lastEffect=i)}function eo(e,t,n){var r=t.pendingProps,a=r.revealOrder,i=r.tail;if(Cs(e,t,r.children,n),2&(r=Ci.current))r=1&r|2,t.flags|=64;else{if(null!==e&&64&e.flags)e:for(e=t.child;null!==e;){if(13===e.tag)null!==e.memoizedState&&Xs(e,n);else if(19===e.tag)Xs(e,n);else if(null!==e.child){e.child.return=e,e=e.child;continue}if(e===t)break e;for(;null===e.sibling;){if(null===e.return||e.return===t)break e;e=e.return}e.sibling.return=e.return,e=e.sibling}r&=1}if(la(Ci,r),2&t.mode)switch(a){case"forwards":for(n=t.child,a=null;null!==n;)null!==(e=n.alternate)&&null===Ai(e)&&(a=n),n=n.sibling;null===(n=a)?(a=t.child,t.child=null):(a=n.sibling,n.sibling=null),Zs(t,!1,a,n,i,t.lastEffect);break;case"backwards":for(n=null,a=t.child,t.child=null;null!==a;){if(null!==(e=a.alternate)&&null===Ai(e)){t.child=a;break}e=a.sibling,a.sibling=n,n=a,a=e}Zs(t,!0,n,null,i,t.lastEffect);break;case"together":Zs(t,!1,null,null,void 0,t.lastEffect);break;default:t.memoizedState=null}else t.memoizedState=null;return t.child}function to(e,t,n){if(null!==e&&(t.dependencies=e.dependencies),Ro|=t.lanes,n&t.childLanes){if(null!==e&&t.child!==e.child)throw Error(s(153));if(null!==t.child){for(n=Wu(e=t.child,e.pendingProps),t.child=n,n.return=t;null!==e.sibling;)e=e.sibling,(n=n.sibling=Wu(e,e.pendingProps)).return=t;n.sibling=null}return t.child}return null}function no(e,t){if(!Fi)switch(e.tailMode){case"hidden":t=e.tail;for(var n=null;null!==t;)null!==t.alternate&&(n=t),t=t.sibling;null===n?e.tail=null:n.sibling=null;break;case"collapsed":n=e.tail;for(var r=null;null!==n;)null!==n.alternate&&(r=n),n=n.sibling;null===r?t||null===e.tail?e.tail=null:e.tail.sibling=null:r.sibling=null}}function ro(e,t,n){var r=t.pendingProps;switch(t.tag){case 2:case 16:case 15:case 0:case 11:case 7:case 8:case 12:case 9:case 14:return null;case 1:case 17:return ha(t.type)&&pa(),null;case 3:return ji(),ua(fa),ua(ca),Gi(),(r=t.stateNode).pendingContext&&(r.context=r.pendingContext,r.pendingContext=null),null!==e&&null!==e.child||(Bi(t)?t.flags|=4:r.hydrate||(t.flags|=256)),Js(t),null;case 5:Hi(t);var i=Oi(xi.current);if(n=t.type,null!==e&&null!=t.stateNode)Gs(e,t,n,r,i),e.ref!==t.ref&&(t.flags|=128);else{if(!r){if(null===t.stateNode)throw Error(s(166));return null}if(e=Oi(Ti.current),Bi(t)){r=t.stateNode,n=t.type;var o=t.memoizedProps;switch(r[Kr]=t,r[Qr]=o,n){case"dialog":Sr("cancel",r),Sr("close",r);break;case"iframe":case"object":case"embed":Sr("load",r);break;case"video":case"audio":for(e=0;e<Yr.length;e++)Sr(Yr[e],r);break;case"source":Sr("error",r);break;case"img":case"image":case"link":Sr("error",r),Sr("load",r);break;case"details":Sr("toggle",r);break;case"input":ee(r,o),Sr("invalid",r);break;case"select":r._wrapperState={wasMultiple:!!o.multiple},Sr("invalid",r);break;case"textarea":ue(r,o),Sr("invalid",r)}for(var l in be(n,o),e=null,o)o.hasOwnProperty(l)&&(i=o[l],"children"===l?"string"==typeof i?r.textContent!==i&&(e=["children",i]):"number"==typeof i&&r.textContent!==""+i&&(e=["children",""+i]):u.hasOwnProperty(l)&&null!=i&&"onScroll"===l&&Sr("scroll",r));switch(n){case"input":K(r),re(r,o,!0);break;case"textarea":K(r),de(r);break;case"select":case"option":break;default:"function"==typeof o.onClick&&(r.onclick=Rr)}r=e,t.updateQueue=r,null!==r&&(t.flags|=4)}else{switch(l=9===i.nodeType?i:i.ownerDocument,e===ce&&(e=fe(n)),e===ce?"script"===n?((e=l.createElement("div")).innerHTML="<script><\/script>",e=e.removeChild(e.firstChild)):"string"==typeof r.is?e=l.createElement(n,{is:r.is}):(e=l.createElement(n),"select"===n&&(l=e,r.multiple?l.multiple=!0:r.size&&(l.size=r.size))):e=l.createElementNS(e,n),e[Kr]=t,e[Qr]=r,Vs(e,t,!1,!1),t.stateNode=e,l=Ye(n,r),n){case"dialog":Sr("cancel",e),Sr("close",e),i=r;break;case"iframe":case"object":case"embed":Sr("load",e),i=r;break;case"video":case"audio":for(i=0;i<Yr.length;i++)Sr(Yr[i],e);i=r;break;case"source":Sr("error",e),i=r;break;case"img":case"image":case"link":Sr("error",e),Sr("load",e),i=r;break;case"details":Sr("toggle",e),i=r;break;case"input":ee(e,r),i=Z(e,r),Sr("invalid",e);break;case"option":i=ie(e,r);break;case"select":e._wrapperState={wasMultiple:!!r.multiple},i=a({},r,{value:void 0}),Sr("invalid",e);break;case"textarea":ue(e,r),i=oe(e,r),Sr("invalid",e);break;default:i=r}be(n,i);var d=i;for(o in d)if(d.hasOwnProperty(o)){var c=d[o];"style"===o?Le(e,c):"dangerouslySetInnerHTML"===o?null!=(c=c?c.__html:void 0)&&pe(e,c):"children"===o?"string"==typeof c?("textarea"!==n||""!==c)&&ye(e,c):"number"==typeof c&&ye(e,""+c):"suppressContentEditableWarning"!==o&&"suppressHydrationWarning"!==o&&"autoFocus"!==o&&(u.hasOwnProperty(o)?null!=c&&"onScroll"===o&&Sr("scroll",e):null!=c&&M(e,o,c,l))}switch(n){case"input":K(e),re(e,r,!1);break;case"textarea":K(e),de(e);break;case"option":null!=r.value&&e.setAttribute("value",""+q(r.value));break;case"select":e.multiple=!!r.multiple,null!=(o=r.value)?se(e,!!r.multiple,o,!1):null!=r.defaultValue&&se(e,!!r.multiple,r.defaultValue,!0);break;default:"function"==typeof i.onClick&&(e.onclick=Rr)}Wr(n,r)&&(t.flags|=4)}null!==t.ref&&(t.flags|=128)}return null;case 6:if(e&&null!=t.stateNode)qs(e,t,e.memoizedProps,r);else{if("string"!=typeof r&&null===t.stateNode)throw Error(s(166));n=Oi(xi.current),Oi(Ti.current),Bi(t)?(r=t.stateNode,n=t.memoizedProps,r[Kr]=t,r.nodeValue!==n&&(t.flags|=4)):((r=(9===n.nodeType?n:n.ownerDocument).createTextNode(r))[Kr]=t,t.stateNode=r)}return null;case 13:return ua(Ci),r=t.memoizedState,64&t.flags?(t.lanes=n,t):(r=null!==r,n=!1,null===e?void 0!==t.memoizedProps.fallback&&Bi(t):n=null!==e.memoizedState,r&&!n&&2&t.mode&&(null===e&&!0!==t.memoizedProps.unstable_avoidThisFallback||1&Ci.current?0===Co&&(Co=3):(0!==Co&&3!==Co||(Co=4),null===Oo||!(134217727&Ro)&&!(134217727&Fo)||hu(Oo,jo))),(r||n)&&(t.flags|=4),null);case 4:return ji(),Js(t),null===e&&Or(t.stateNode.containerInfo),null;case 10:return ti(t),null;case 19:if(ua(Ci),null===(r=t.memoizedState))return null;if(o=!!(64&t.flags),null===(l=r.rendering))if(o)no(r,!1);else{if(0!==Co||null!==e&&64&e.flags)for(e=t.child;null!==e;){if(null!==(l=Ai(e))){for(t.flags|=64,no(r,!1),null!==(o=l.updateQueue)&&(t.updateQueue=o,t.flags|=4),null===r.lastEffect&&(t.firstEffect=null),t.lastEffect=r.lastEffect,r=n,n=t.child;null!==n;)e=r,(o=n).flags&=2,o.nextEffect=null,o.firstEffect=null,o.lastEffect=null,null===(l=o.alternate)?(o.childLanes=0,o.lanes=e,o.child=null,o.memoizedProps=null,o.memoizedState=null,o.updateQueue=null,o.dependencies=null,o.stateNode=null):(o.childLanes=l.childLanes,o.lanes=l.lanes,o.child=l.child,o.memoizedProps=l.memoizedProps,o.memoizedState=l.memoizedState,o.updateQueue=l.updateQueue,o.type=l.type,e=l.dependencies,o.dependencies=null===e?null:{lanes:e.lanes,firstContext:e.firstContext}),n=n.sibling;return la(Ci,1&Ci.current|2),t.child}e=e.sibling}null!==r.tail&&Wa()>Uo&&(t.flags|=64,o=!0,no(r,!1),t.lanes=33554432)}else{if(!o)if(null!==(e=Ai(l))){if(t.flags|=64,o=!0,null!==(n=e.updateQueue)&&(t.updateQueue=n,t.flags|=4),no(r,!0),null===r.tail&&"hidden"===r.tailMode&&!l.alternate&&!Fi)return null!==(t=t.lastEffect=r.lastEffect)&&(t.nextEffect=null),null}else 2*Wa()-r.renderingStartTime>Uo&&1073741824!==n&&(t.flags|=64,o=!0,no(r,!1),t.lanes=33554432);r.isBackwards?(l.sibling=t.child,t.child=l):(null!==(n=r.last)?n.sibling=l:t.child=l,r.last=l)}return null!==r.tail?(n=r.tail,r.rendering=n,r.tail=n.sibling,r.lastEffect=t.lastEffect,r.renderingStartTime=Wa(),n.sibling=null,t=Ci.current,la(Ci,o?1&t|2:1&t),n):null;case 23:case 24:return gu(),null!==e&&null!==e.memoizedState!=(null!==t.memoizedState)&&"unstable-defer-without-hiding"!==r.mode&&(t.flags|=4),null}throw Error(s(156,t.tag))}function ao(e){switch(e.tag){case 1:ha(e.type)&&pa();var t=e.flags;return 4096&t?(e.flags=-4097&t|64,e):null;case 3:if(ji(),ua(fa),ua(ca),Gi(),64&(t=e.flags))throw Error(s(285));return e.flags=-4097&t|64,e;case 5:return Hi(e),null;case 13:return ua(Ci),4096&(t=e.flags)?(e.flags=-4097&t|64,e):null;case 19:return ua(Ci),null;case 4:return ji(),null;case 10:return ti(e),null;case 23:case 24:return gu(),null;default:return null}}function io(e,t){try{var n="",r=t;do{n+=J(r),r=r.return}while(r);var a=n}catch(e){a="\nError generating stack: "+e.message+"\n"+e.stack}return{value:e,source:t,stack:a}}function so(e,t){try{console.error(t.value)}catch(e){setTimeout((function(){throw e}))}}Vs=function(e,t){for(var n=t.child;null!==n;){if(5===n.tag||6===n.tag)e.appendChild(n.stateNode);else if(4!==n.tag&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===t)break;for(;null===n.sibling;){if(null===n.return||n.return===t)return;n=n.return}n.sibling.return=n.return,n=n.sibling}},Js=function(){},Gs=function(e,t,n,r){var i=e.memoizedProps;if(i!==r){e=t.stateNode,Oi(Ti.current);var s,o=null;switch(n){case"input":i=Z(e,i),r=Z(e,r),o=[];break;case"option":i=ie(e,i),r=ie(e,r),o=[];break;case"select":i=a({},i,{value:void 0}),r=a({},r,{value:void 0}),o=[];break;case"textarea":i=oe(e,i),r=oe(e,r),o=[];break;default:"function"!=typeof i.onClick&&"function"==typeof r.onClick&&(e.onclick=Rr)}for(c in be(n,r),n=null,i)if(!r.hasOwnProperty(c)&&i.hasOwnProperty(c)&&null!=i[c])if("style"===c){var l=i[c];for(s in l)l.hasOwnProperty(s)&&(n||(n={}),n[s]="")}else"dangerouslySetInnerHTML"!==c&&"children"!==c&&"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&"autoFocus"!==c&&(u.hasOwnProperty(c)?o||(o=[]):(o=o||[]).push(c,null));for(c in r){var d=r[c];if(l=null!=i?i[c]:void 0,r.hasOwnProperty(c)&&d!==l&&(null!=d||null!=l))if("style"===c)if(l){for(s in l)!l.hasOwnProperty(s)||d&&d.hasOwnProperty(s)||(n||(n={}),n[s]="");for(s in d)d.hasOwnProperty(s)&&l[s]!==d[s]&&(n||(n={}),n[s]=d[s])}else n||(o||(o=[]),o.push(c,n)),n=d;else"dangerouslySetInnerHTML"===c?(d=d?d.__html:void 0,l=l?l.__html:void 0,null!=d&&l!==d&&(o=o||[]).push(c,d)):"children"===c?"string"!=typeof d&&"number"!=typeof d||(o=o||[]).push(c,""+d):"suppressContentEditableWarning"!==c&&"suppressHydrationWarning"!==c&&(u.hasOwnProperty(c)?(null!=d&&"onScroll"===c&&Sr("scroll",e),o||l===d||(o=[])):"object"==typeof d&&null!==d&&d.$$typeof===C?d.toString():(o=o||[]).push(c,d))}n&&(o=o||[]).push("style",n);var c=o;(t.updateQueue=c)&&(t.flags|=4)}},qs=function(e,t,n,r){n!==r&&(t.flags|=4)};var oo="function"==typeof WeakMap?WeakMap:Map;function uo(e,t,n){(n=ui(-1,n)).tag=3,n.payload={element:null};var r=t.value;return n.callback=function(){Go||(Go=!0,qo=r),so(0,t)},n}function lo(e,t,n){(n=ui(-1,n)).tag=3;var r=e.type.getDerivedStateFromError;if("function"==typeof r){var a=t.value;n.payload=function(){return so(0,t),r(a)}}var i=e.stateNode;return null!==i&&"function"==typeof i.componentDidCatch&&(n.callback=function(){"function"!=typeof r&&(null===$o?$o=new Set([this]):$o.add(this),so(0,t));var e=t.stack;this.componentDidCatch(t.value,{componentStack:null!==e?e:""})}),n}var co="function"==typeof WeakSet?WeakSet:Set;function fo(e){var t=e.ref;if(null!==t)if("function"==typeof t)try{t(null)}catch(t){Cu(e,t)}else t.current=null}function mo(e,t){switch(t.tag){case 0:case 11:case 15:case 22:case 5:case 6:case 4:case 17:return;case 1:if(256&t.flags&&null!==e){var n=e.memoizedProps,r=e.memoizedState;t=(e=t.stateNode).getSnapshotBeforeUpdate(t.elementType===t.type?n:$a(t.type,n),r),e.__reactInternalSnapshotBeforeUpdate=t}return;case 3:return void(256&t.flags&&Vr(t.stateNode.containerInfo))}throw Error(s(163))}function _o(e,t,n){switch(n.tag){case 0:case 11:case 15:case 22:if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{if(!(3&~e.tag)){var r=e.create;e.destroy=r()}e=e.next}while(e!==t)}if(null!==(t=null!==(t=n.updateQueue)?t.lastEffect:null)){e=t=t.next;do{var a=e;r=a.next,4&(a=a.tag)&&1&a&&(ju(n,e),Eu(n,e)),e=r}while(e!==t)}return;case 1:return e=n.stateNode,4&n.flags&&(null===t?e.componentDidMount():(r=n.elementType===n.type?t.memoizedProps:$a(n.type,t.memoizedProps),e.componentDidUpdate(r,t.memoizedState,e.__reactInternalSnapshotBeforeUpdate))),void(null!==(t=n.updateQueue)&&fi(n,t,e));case 3:if(null!==(t=n.updateQueue)){if(e=null,null!==n.child)switch(n.child.tag){case 5:case 1:e=n.child.stateNode}fi(n,t,e)}return;case 5:return e=n.stateNode,void(null===t&&4&n.flags&&Wr(n.type,n.memoizedProps)&&e.focus());case 6:case 4:case 12:case 19:case 17:case 20:case 21:case 23:case 24:return;case 13:return void(null===n.memoizedState&&(n=n.alternate,null!==n&&(n=n.memoizedState,null!==n&&(n=n.dehydrated,null!==n&&Mt(n)))))}throw Error(s(163))}function ho(e,t){for(var n=e;;){if(5===n.tag){var r=n.stateNode;if(t)"function"==typeof(r=r.style).setProperty?r.setProperty("display","none","important"):r.display="none";else{r=n.stateNode;var a=n.memoizedProps.style;a=null!=a&&a.hasOwnProperty("display")?a.display:null,r.style.display=Me("display",a)}}else if(6===n.tag)n.stateNode.nodeValue=t?"":n.memoizedProps;else if((23!==n.tag&&24!==n.tag||null===n.memoizedState||n===e)&&null!==n.child){n.child.return=n,n=n.child;continue}if(n===e)break;for(;null===n.sibling;){if(null===n.return||n.return===e)return;n=n.return}n.sibling.return=n.return,n=n.sibling}}function po(e,t){if(ka&&"function"==typeof ka.onCommitFiberUnmount)try{ka.onCommitFiberUnmount(La,t)}catch(e){}switch(t.tag){case 0:case 11:case 14:case 15:case 22:if(null!==(e=t.updateQueue)&&null!==(e=e.lastEffect)){var n=e=e.next;do{var r=n,a=r.destroy;if(r=r.tag,void 0!==a)if(4&r)ju(t,n);else{r=t;try{a()}catch(e){Cu(r,e)}}n=n.next}while(n!==e)}break;case 1:if(fo(t),"function"==typeof(e=t.stateNode).componentWillUnmount)try{e.props=t.memoizedProps,e.state=t.memoizedState,e.componentWillUnmount()}catch(e){Cu(t,e)}break;case 5:fo(t);break;case 4:ko(e,t)}}function yo(e){e.alternate=null,e.child=null,e.dependencies=null,e.firstEffect=null,e.lastEffect=null,e.memoizedProps=null,e.memoizedState=null,e.pendingProps=null,e.return=null,e.updateQueue=null}function go(e){return 5===e.tag||3===e.tag||4===e.tag}function vo(e){e:{for(var t=e.return;null!==t;){if(go(t))break e;t=t.return}throw Error(s(160))}var n=t;switch(t=n.stateNode,n.tag){case 5:var r=!1;break;case 3:case 4:t=t.containerInfo,r=!0;break;default:throw Error(s(161))}16&n.flags&&(ye(t,""),n.flags&=-17);e:t:for(n=e;;){for(;null===n.sibling;){if(null===n.return||go(n.return)){n=null;break e}n=n.return}for(n.sibling.return=n.return,n=n.sibling;5!==n.tag&&6!==n.tag&&18!==n.tag;){if(2&n.flags)continue t;if(null===n.child||4===n.tag)continue t;n.child.return=n,n=n.child}if(!(2&n.flags)){n=n.stateNode;break e}}r?Mo(e,n,t):Lo(e,n,t)}function Mo(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?8===n.nodeType?n.parentNode.insertBefore(e,t):n.insertBefore(e,t):(8===n.nodeType?(t=n.parentNode).insertBefore(e,n):(t=n).appendChild(e),null!=(n=n._reactRootContainer)||null!==t.onclick||(t.onclick=Rr));else if(4!==r&&null!==(e=e.child))for(Mo(e,t,n),e=e.sibling;null!==e;)Mo(e,t,n),e=e.sibling}function Lo(e,t,n){var r=e.tag,a=5===r||6===r;if(a)e=a?e.stateNode:e.stateNode.instance,t?n.insertBefore(e,t):n.appendChild(e);else if(4!==r&&null!==(e=e.child))for(Lo(e,t,n),e=e.sibling;null!==e;)Lo(e,t,n),e=e.sibling}function ko(e,t){for(var n,r,a=t,i=!1;;){if(!i){i=a.return;e:for(;;){if(null===i)throw Error(s(160));switch(n=i.stateNode,i.tag){case 5:r=!1;break e;case 3:case 4:n=n.containerInfo,r=!0;break e}i=i.return}i=!0}if(5===a.tag||6===a.tag){e:for(var o=e,u=a,l=u;;)if(po(o,l),null!==l.child&&4!==l.tag)l.child.return=l,l=l.child;else{if(l===u)break e;for(;null===l.sibling;){if(null===l.return||l.return===u)break e;l=l.return}l.sibling.return=l.return,l=l.sibling}r?(o=n,u=a.stateNode,8===o.nodeType?o.parentNode.removeChild(u):o.removeChild(u)):n.removeChild(a.stateNode)}else if(4===a.tag){if(null!==a.child){n=a.stateNode.containerInfo,r=!0,a.child.return=a,a=a.child;continue}}else if(po(e,a),null!==a.child){a.child.return=a,a=a.child;continue}if(a===t)break;for(;null===a.sibling;){if(null===a.return||a.return===t)return;4===(a=a.return).tag&&(i=!1)}a.sibling.return=a.return,a=a.sibling}}function bo(e,t){switch(t.tag){case 0:case 11:case 14:case 15:case 22:var n=t.updateQueue;if(null!==(n=null!==n?n.lastEffect:null)){var r=n=n.next;do{!(3&~r.tag)&&(e=r.destroy,r.destroy=void 0,void 0!==e&&e()),r=r.next}while(r!==n)}return;case 1:case 12:case 17:return;case 5:if(null!=(n=t.stateNode)){r=t.memoizedProps;var a=null!==e?e.memoizedProps:r;e=t.type;var i=t.updateQueue;if(t.updateQueue=null,null!==i){for(n[Qr]=r,"input"===e&&"radio"===r.type&&null!=r.name&&te(n,r),Ye(e,a),t=Ye(e,r),a=0;a<i.length;a+=2){var o=i[a],u=i[a+1];"style"===o?Le(n,u):"dangerouslySetInnerHTML"===o?pe(n,u):"children"===o?ye(n,u):M(n,o,u,t)}switch(e){case"input":ne(n,r);break;case"textarea":le(n,r);break;case"select":e=n._wrapperState.wasMultiple,n._wrapperState.wasMultiple=!!r.multiple,null!=(i=r.value)?se(n,!!r.multiple,i,!1):e!==!!r.multiple&&(null!=r.defaultValue?se(n,!!r.multiple,r.defaultValue,!0):se(n,!!r.multiple,r.multiple?[]:"",!1))}}}return;case 6:if(null===t.stateNode)throw Error(s(162));return void(t.stateNode.nodeValue=t.memoizedProps);case 3:return void((n=t.stateNode).hydrate&&(n.hydrate=!1,Mt(n.containerInfo)));case 13:return null!==t.memoizedState&&(Io=Wa(),ho(t.child,!0)),void Yo(t);case 19:return void Yo(t);case 23:case 24:return void ho(t,null!==t.memoizedState)}throw Error(s(163))}function Yo(e){var t=e.updateQueue;if(null!==t){e.updateQueue=null;var n=e.stateNode;null===n&&(n=e.stateNode=new co),t.forEach((function(t){var r=Nu.bind(null,e,t);n.has(t)||(n.add(t),t.then(r,r))}))}}function wo(e,t){return null!==e&&(null===(e=e.memoizedState)||null!==e.dehydrated)&&null!==(t=t.memoizedState)&&null===t.dehydrated}var Do=Math.ceil,To=L.ReactCurrentDispatcher,So=L.ReactCurrentOwner,xo=0,Oo=null,Eo=null,jo=0,Po=0,Ho=oa(0),Co=0,Ao=null,No=0,Ro=0,Fo=0,zo=0,Wo=null,Io=0,Uo=1/0;function Bo(){Uo=Wa()+500}var Vo,Jo=null,Go=!1,qo=null,$o=null,Ko=!1,Qo=null,Xo=90,Zo=[],eu=[],tu=null,nu=0,ru=null,au=-1,iu=0,su=0,ou=null,uu=!1;function lu(){return 48&xo?Wa():-1!==au?au:au=Wa()}function du(e){if(!(2&(e=e.mode)))return 1;if(!(4&e))return 99===Ia()?1:2;if(0===iu&&(iu=No),0!==qa.transition){0!==su&&(su=null!==Wo?Wo.pendingLanes:0),e=iu;var t=4186112&~su;return 0==(t&=-t)&&0==(t=(e=4186112&~e)&-e)&&(t=8192),t}return e=Ia(),e=Rt(4&xo&&98===e?12:e=function(e){switch(e){case 99:return 15;case 98:return 10;case 97:case 96:return 8;case 95:return 2;default:return 0}}(e),iu)}function cu(e,t,n){if(50<nu)throw nu=0,ru=null,Error(s(185));if(null===(e=fu(e,t)))return null;Wt(e,t,n),e===Oo&&(Fo|=t,4===Co&&hu(e,jo));var r=Ia();1===t?8&xo&&!(48&xo)?pu(e):(mu(e,n),0===xo&&(Bo(),Ja())):(!(4&xo)||98!==r&&99!==r||(null===tu?tu=new Set([e]):tu.add(e)),mu(e,n)),Wo=e}function fu(e,t){e.lanes|=t;var n=e.alternate;for(null!==n&&(n.lanes|=t),n=e,e=e.return;null!==e;)e.childLanes|=t,null!==(n=e.alternate)&&(n.childLanes|=t),n=e,e=e.return;return 3===n.tag?n.stateNode:null}function mu(e,t){for(var n=e.callbackNode,r=e.suspendedLanes,a=e.pingedLanes,i=e.expirationTimes,o=e.pendingLanes;0<o;){var u=31-It(o),l=1<<u,d=i[u];if(-1===d){if(!(l&r)||l&a){d=t,Ct(l);var c=Ht;i[u]=10<=c?d+250:6<=c?d+5e3:-1}}else d<=t&&(e.expiredLanes|=l);o&=~l}if(r=At(e,e===Oo?jo:0),t=Ht,0===r)null!==n&&(n!==Ca&&wa(n),e.callbackNode=null,e.callbackPriority=0);else{if(null!==n){if(e.callbackPriority===t)return;n!==Ca&&wa(n)}15===t?(n=pu.bind(null,e),null===Na?(Na=[n],Ra=Ya(Oa,Ga)):Na.push(n),n=Ca):14===t?n=Va(99,pu.bind(null,e)):(n=function(e){switch(e){case 15:case 14:return 99;case 13:case 12:case 11:case 10:return 98;case 9:case 8:case 7:case 6:case 4:case 5:return 97;case 3:case 2:case 1:return 95;case 0:return 90;default:throw Error(s(358,e))}}(t),n=Va(n,_u.bind(null,e))),e.callbackPriority=t,e.callbackNode=n}}function _u(e){if(au=-1,su=iu=0,48&xo)throw Error(s(327));var t=e.callbackNode;if(Ou()&&e.callbackNode!==t)return null;var n=At(e,e===Oo?jo:0);if(0===n)return null;var r=n,a=xo;xo|=16;var i=Lu();for(Oo===e&&jo===r||(Bo(),vu(e,r));;)try{Yu();break}catch(t){Mu(e,t)}if(ei(),To.current=i,xo=a,null!==Eo?r=0:(Oo=null,jo=0,r=Co),No&Fo)vu(e,0);else if(0!==r){if(2===r&&(xo|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(n=Nt(e))&&(r=ku(e,n))),1===r)throw t=Ao,vu(e,0),hu(e,n),mu(e,Wa()),t;switch(e.finishedWork=e.current.alternate,e.finishedLanes=n,r){case 0:case 1:throw Error(s(345));case 2:case 5:Tu(e);break;case 3:if(hu(e,n),(62914560&n)===n&&10<(r=Io+500-Wa())){if(0!==At(e,0))break;if(((a=e.suspendedLanes)&n)!==n){lu(),e.pingedLanes|=e.suspendedLanes&a;break}e.timeoutHandle=Ur(Tu.bind(null,e),r);break}Tu(e);break;case 4:if(hu(e,n),(4186112&n)===n)break;for(r=e.eventTimes,a=-1;0<n;){var o=31-It(n);i=1<<o,(o=r[o])>a&&(a=o),n&=~i}if(n=a,10<(n=(120>(n=Wa()-n)?120:480>n?480:1080>n?1080:1920>n?1920:3e3>n?3e3:4320>n?4320:1960*Do(n/1960))-n)){e.timeoutHandle=Ur(Tu.bind(null,e),n);break}Tu(e);break;default:throw Error(s(329))}}return mu(e,Wa()),e.callbackNode===t?_u.bind(null,e):null}function hu(e,t){for(t&=~zo,t&=~Fo,e.suspendedLanes|=t,e.pingedLanes&=~t,e=e.expirationTimes;0<t;){var n=31-It(t),r=1<<n;e[n]=-1,t&=~r}}function pu(e){if(48&xo)throw Error(s(327));if(Ou(),e===Oo&&e.expiredLanes&jo){var t=jo,n=ku(e,t);No&Fo&&(n=ku(e,t=At(e,t)))}else n=ku(e,t=At(e,0));if(0!==e.tag&&2===n&&(xo|=64,e.hydrate&&(e.hydrate=!1,Vr(e.containerInfo)),0!==(t=Nt(e))&&(n=ku(e,t))),1===n)throw n=Ao,vu(e,0),hu(e,t),mu(e,Wa()),n;return e.finishedWork=e.current.alternate,e.finishedLanes=t,Tu(e),mu(e,Wa()),null}function yu(e,t){la(Ho,Po),Po|=t,No|=t}function gu(){Po=Ho.current,ua(Ho)}function vu(e,t){e.finishedWork=null,e.finishedLanes=0;var n=e.timeoutHandle;if(-1!==n&&(e.timeoutHandle=-1,Br(n)),null!==Eo)for(n=Eo.return;null!==n;){var r=n;switch(r.tag){case 1:null!=(r=r.type.childContextTypes)&&pa();break;case 3:ji(),ua(fa),ua(ca),Gi();break;case 5:Hi(r);break;case 4:ji();break;case 13:case 19:ua(Ci);break;case 10:ti(r);break;case 23:case 24:gu()}n=n.return}Oo=e,Eo=Wu(e.current,null),jo=Po=No=t,Co=0,Ao=null,zo=Fo=Ro=0}function Mu(e,t){for(;;){var n=Eo;try{if(ei(),qi.current=xs,es){for(var r=Qi.memoizedState;null!==r;){var a=r.queue;null!==a&&(a.pending=null),r=r.next}es=!1}if(Ki=0,Zi=Xi=Qi=null,ts=!1,So.current=null,null===n||null===n.return){Co=1,Ao=t,Eo=null;break}e:{var i=e,s=n.return,o=n,u=t;if(t=jo,o.flags|=2048,o.firstEffect=o.lastEffect=null,null!==u&&"object"==typeof u&&"function"==typeof u.then){var l=u;if(!(2&o.mode)){var d=o.alternate;d?(o.updateQueue=d.updateQueue,o.memoizedState=d.memoizedState,o.lanes=d.lanes):(o.updateQueue=null,o.memoizedState=null)}var c=!!(1&Ci.current),f=s;do{var m;if(m=13===f.tag){var _=f.memoizedState;if(null!==_)m=null!==_.dehydrated;else{var h=f.memoizedProps;m=void 0!==h.fallback&&(!0!==h.unstable_avoidThisFallback||!c)}}if(m){var p=f.updateQueue;if(null===p){var y=new Set;y.add(l),f.updateQueue=y}else p.add(l);if(!(2&f.mode)){if(f.flags|=64,o.flags|=16384,o.flags&=-2981,1===o.tag)if(null===o.alternate)o.tag=17;else{var g=ui(-1,1);g.tag=2,li(o,g)}o.lanes|=1;break e}u=void 0,o=t;var v=i.pingCache;if(null===v?(v=i.pingCache=new oo,u=new Set,v.set(l,u)):void 0===(u=v.get(l))&&(u=new Set,v.set(l,u)),!u.has(o)){u.add(o);var M=Au.bind(null,i,l,o);l.then(M,M)}f.flags|=4096,f.lanes=t;break e}f=f.return}while(null!==f);u=Error((G(o.type)||"A React component")+" suspended while rendering, but no fallback UI was specified.\n\nAdd a <Suspense fallback=...> component higher in the tree to provide a loading indicator or placeholder to display.")}5!==Co&&(Co=2),u=io(u,o),f=s;do{switch(f.tag){case 3:i=u,f.flags|=4096,t&=-t,f.lanes|=t,di(f,uo(0,i,t));break e;case 1:i=u;var L=f.type,k=f.stateNode;if(!(64&f.flags||"function"!=typeof L.getDerivedStateFromError&&(null===k||"function"!=typeof k.componentDidCatch||null!==$o&&$o.has(k)))){f.flags|=4096,t&=-t,f.lanes|=t,di(f,lo(f,i,t));break e}}f=f.return}while(null!==f)}Du(n)}catch(e){t=e,Eo===n&&null!==n&&(Eo=n=n.return);continue}break}}function Lu(){var e=To.current;return To.current=xs,null===e?xs:e}function ku(e,t){var n=xo;xo|=16;var r=Lu();for(Oo===e&&jo===t||vu(e,t);;)try{bu();break}catch(t){Mu(e,t)}if(ei(),xo=n,To.current=r,null!==Eo)throw Error(s(261));return Oo=null,jo=0,Co}function bu(){for(;null!==Eo;)wu(Eo)}function Yu(){for(;null!==Eo&&!Da();)wu(Eo)}function wu(e){var t=Vo(e.alternate,e,Po);e.memoizedProps=e.pendingProps,null===t?Du(e):Eo=t,So.current=null}function Du(e){var t=e;do{var n=t.alternate;if(e=t.return,2048&t.flags){if(null!==(n=ao(t)))return n.flags&=2047,void(Eo=n);null!==e&&(e.firstEffect=e.lastEffect=null,e.flags|=2048)}else{if(null!==(n=ro(n,t,Po)))return void(Eo=n);if(24!==(n=t).tag&&23!==n.tag||null===n.memoizedState||1073741824&Po||!(4&n.mode)){for(var r=0,a=n.child;null!==a;)r|=a.lanes|a.childLanes,a=a.sibling;n.childLanes=r}null!==e&&!(2048&e.flags)&&(null===e.firstEffect&&(e.firstEffect=t.firstEffect),null!==t.lastEffect&&(null!==e.lastEffect&&(e.lastEffect.nextEffect=t.firstEffect),e.lastEffect=t.lastEffect),1<t.flags&&(null!==e.lastEffect?e.lastEffect.nextEffect=t:e.firstEffect=t,e.lastEffect=t))}if(null!==(t=t.sibling))return void(Eo=t);Eo=t=e}while(null!==t);0===Co&&(Co=5)}function Tu(e){var t=Ia();return Ba(99,Su.bind(null,e,t)),null}function Su(e,t){do{Ou()}while(null!==Qo);if(48&xo)throw Error(s(327));var n=e.finishedWork;if(null===n)return null;if(e.finishedWork=null,e.finishedLanes=0,n===e.current)throw Error(s(177));e.callbackNode=null;var r=n.lanes|n.childLanes,a=r,i=e.pendingLanes&~a;e.pendingLanes=a,e.suspendedLanes=0,e.pingedLanes=0,e.expiredLanes&=a,e.mutableReadLanes&=a,e.entangledLanes&=a,a=e.entanglements;for(var o=e.eventTimes,u=e.expirationTimes;0<i;){var l=31-It(i),d=1<<l;a[l]=0,o[l]=-1,u[l]=-1,i&=~d}if(null!==tu&&!(24&r)&&tu.has(e)&&tu.delete(e),e===Oo&&(Eo=Oo=null,jo=0),1<n.flags?null!==n.lastEffect?(n.lastEffect.nextEffect=n,r=n.firstEffect):r=n:r=n.firstEffect,null!==r){if(a=xo,xo|=32,So.current=null,Fr=Gt,hr(o=_r())){if("selectionStart"in o)u={start:o.selectionStart,end:o.selectionEnd};else e:if(u=(u=o.ownerDocument)&&u.defaultView||window,(d=u.getSelection&&u.getSelection())&&0!==d.rangeCount){u=d.anchorNode,i=d.anchorOffset,l=d.focusNode,d=d.focusOffset;try{u.nodeType,l.nodeType}catch(e){u=null;break e}var c=0,f=-1,m=-1,_=0,h=0,p=o,y=null;t:for(;;){for(var g;p!==u||0!==i&&3!==p.nodeType||(f=c+i),p!==l||0!==d&&3!==p.nodeType||(m=c+d),3===p.nodeType&&(c+=p.nodeValue.length),null!==(g=p.firstChild);)y=p,p=g;for(;;){if(p===o)break t;if(y===u&&++_===i&&(f=c),y===l&&++h===d&&(m=c),null!==(g=p.nextSibling))break;y=(p=y).parentNode}p=g}u=-1===f||-1===m?null:{start:f,end:m}}else u=null;u=u||{start:0,end:0}}else u=null;zr={focusedElem:o,selectionRange:u},Gt=!1,ou=null,uu=!1,Jo=r;do{try{xu()}catch(e){if(null===Jo)throw Error(s(330));Cu(Jo,e),Jo=Jo.nextEffect}}while(null!==Jo);ou=null,Jo=r;do{try{for(o=e;null!==Jo;){var v=Jo.flags;if(16&v&&ye(Jo.stateNode,""),128&v){var M=Jo.alternate;if(null!==M){var L=M.ref;null!==L&&("function"==typeof L?L(null):L.current=null)}}switch(1038&v){case 2:vo(Jo),Jo.flags&=-3;break;case 6:vo(Jo),Jo.flags&=-3,bo(Jo.alternate,Jo);break;case 1024:Jo.flags&=-1025;break;case 1028:Jo.flags&=-1025,bo(Jo.alternate,Jo);break;case 4:bo(Jo.alternate,Jo);break;case 8:ko(o,u=Jo);var k=u.alternate;yo(u),null!==k&&yo(k)}Jo=Jo.nextEffect}}catch(e){if(null===Jo)throw Error(s(330));Cu(Jo,e),Jo=Jo.nextEffect}}while(null!==Jo);if(L=zr,M=_r(),v=L.focusedElem,o=L.selectionRange,M!==v&&v&&v.ownerDocument&&mr(v.ownerDocument.documentElement,v)){null!==o&&hr(v)&&(M=o.start,void 0===(L=o.end)&&(L=M),"selectionStart"in v?(v.selectionStart=M,v.selectionEnd=Math.min(L,v.value.length)):(L=(M=v.ownerDocument||document)&&M.defaultView||window).getSelection&&(L=L.getSelection(),u=v.textContent.length,k=Math.min(o.start,u),o=void 0===o.end?k:Math.min(o.end,u),!L.extend&&k>o&&(u=o,o=k,k=u),u=fr(v,k),i=fr(v,o),u&&i&&(1!==L.rangeCount||L.anchorNode!==u.node||L.anchorOffset!==u.offset||L.focusNode!==i.node||L.focusOffset!==i.offset)&&((M=M.createRange()).setStart(u.node,u.offset),L.removeAllRanges(),k>o?(L.addRange(M),L.extend(i.node,i.offset)):(M.setEnd(i.node,i.offset),L.addRange(M))))),M=[];for(L=v;L=L.parentNode;)1===L.nodeType&&M.push({element:L,left:L.scrollLeft,top:L.scrollTop});for("function"==typeof v.focus&&v.focus(),v=0;v<M.length;v++)(L=M[v]).element.scrollLeft=L.left,L.element.scrollTop=L.top}Gt=!!Fr,zr=Fr=null,e.current=n,Jo=r;do{try{for(v=e;null!==Jo;){var b=Jo.flags;if(36&b&&_o(v,Jo.alternate,Jo),128&b){M=void 0;var Y=Jo.ref;if(null!==Y){var w=Jo.stateNode;Jo.tag,M=w,"function"==typeof Y?Y(M):Y.current=M}}Jo=Jo.nextEffect}}catch(e){if(null===Jo)throw Error(s(330));Cu(Jo,e),Jo=Jo.nextEffect}}while(null!==Jo);Jo=null,Aa(),xo=a}else e.current=n;if(Ko)Ko=!1,Qo=e,Xo=t;else for(Jo=r;null!==Jo;)t=Jo.nextEffect,Jo.nextEffect=null,8&Jo.flags&&((b=Jo).sibling=null,b.stateNode=null),Jo=t;if(0===(r=e.pendingLanes)&&($o=null),1===r?e===ru?nu++:(nu=0,ru=e):nu=0,n=n.stateNode,ka&&"function"==typeof ka.onCommitFiberRoot)try{ka.onCommitFiberRoot(La,n,void 0,!(64&~n.current.flags))}catch(e){}if(mu(e,Wa()),Go)throw Go=!1,e=qo,qo=null,e;return 8&xo||Ja(),null}function xu(){for(;null!==Jo;){var e=Jo.alternate;uu||null===ou||(8&Jo.flags?Xe(Jo,ou)&&(uu=!0):13===Jo.tag&&wo(e,Jo)&&Xe(Jo,ou)&&(uu=!0));var t=Jo.flags;256&t&&mo(e,Jo),!(512&t)||Ko||(Ko=!0,Va(97,(function(){return Ou(),null}))),Jo=Jo.nextEffect}}function Ou(){if(90!==Xo){var e=97<Xo?97:Xo;return Xo=90,Ba(e,Pu)}return!1}function Eu(e,t){Zo.push(t,e),Ko||(Ko=!0,Va(97,(function(){return Ou(),null})))}function ju(e,t){eu.push(t,e),Ko||(Ko=!0,Va(97,(function(){return Ou(),null})))}function Pu(){if(null===Qo)return!1;var e=Qo;if(Qo=null,48&xo)throw Error(s(331));var t=xo;xo|=32;var n=eu;eu=[];for(var r=0;r<n.length;r+=2){var a=n[r],i=n[r+1],o=a.destroy;if(a.destroy=void 0,"function"==typeof o)try{o()}catch(e){if(null===i)throw Error(s(330));Cu(i,e)}}for(n=Zo,Zo=[],r=0;r<n.length;r+=2){a=n[r],i=n[r+1];try{var u=a.create;a.destroy=u()}catch(e){if(null===i)throw Error(s(330));Cu(i,e)}}for(u=e.current.firstEffect;null!==u;)e=u.nextEffect,u.nextEffect=null,8&u.flags&&(u.sibling=null,u.stateNode=null),u=e;return xo=t,Ja(),!0}function Hu(e,t,n){li(e,t=uo(0,t=io(n,t),1)),t=lu(),null!==(e=fu(e,1))&&(Wt(e,1,t),mu(e,t))}function Cu(e,t){if(3===e.tag)Hu(e,e,t);else for(var n=e.return;null!==n;){if(3===n.tag){Hu(n,e,t);break}if(1===n.tag){var r=n.stateNode;if("function"==typeof n.type.getDerivedStateFromError||"function"==typeof r.componentDidCatch&&(null===$o||!$o.has(r))){var a=lo(n,e=io(t,e),1);if(li(n,a),a=lu(),null!==(n=fu(n,1)))Wt(n,1,a),mu(n,a);else if("function"==typeof r.componentDidCatch&&(null===$o||!$o.has(r)))try{r.componentDidCatch(t,e)}catch(e){}break}}n=n.return}}function Au(e,t,n){var r=e.pingCache;null!==r&&r.delete(t),t=lu(),e.pingedLanes|=e.suspendedLanes&n,Oo===e&&(jo&n)===n&&(4===Co||3===Co&&(62914560&jo)===jo&&500>Wa()-Io?vu(e,0):zo|=n),mu(e,t)}function Nu(e,t){var n=e.stateNode;null!==n&&n.delete(t),0==(t=0)&&(2&(t=e.mode)?4&t?(0===iu&&(iu=No),0===(t=Ft(62914560&~iu))&&(t=4194304)):t=99===Ia()?1:2:t=1),n=lu(),null!==(e=fu(e,t))&&(Wt(e,t,n),mu(e,n))}function Ru(e,t,n,r){this.tag=e,this.key=n,this.sibling=this.child=this.return=this.stateNode=this.type=this.elementType=null,this.index=0,this.ref=null,this.pendingProps=t,this.dependencies=this.memoizedState=this.updateQueue=this.memoizedProps=null,this.mode=r,this.flags=0,this.lastEffect=this.firstEffect=this.nextEffect=null,this.childLanes=this.lanes=0,this.alternate=null}function Fu(e,t,n,r){return new Ru(e,t,n,r)}function zu(e){return!(!(e=e.prototype)||!e.isReactComponent)}function Wu(e,t){var n=e.alternate;return null===n?((n=Fu(e.tag,t,e.key,e.mode)).elementType=e.elementType,n.type=e.type,n.stateNode=e.stateNode,n.alternate=e,e.alternate=n):(n.pendingProps=t,n.type=e.type,n.flags=0,n.nextEffect=null,n.firstEffect=null,n.lastEffect=null),n.childLanes=e.childLanes,n.lanes=e.lanes,n.child=e.child,n.memoizedProps=e.memoizedProps,n.memoizedState=e.memoizedState,n.updateQueue=e.updateQueue,t=e.dependencies,n.dependencies=null===t?null:{lanes:t.lanes,firstContext:t.firstContext},n.sibling=e.sibling,n.index=e.index,n.ref=e.ref,n}function Iu(e,t,n,r,a,i){var o=2;if(r=e,"function"==typeof e)zu(e)&&(o=1);else if("string"==typeof e)o=5;else e:switch(e){case Y:return Uu(n.children,a,i,t);case A:o=8,a|=16;break;case w:o=8,a|=1;break;case D:return(e=Fu(12,n,t,8|a)).elementType=D,e.type=D,e.lanes=i,e;case O:return(e=Fu(13,n,t,a)).type=O,e.elementType=O,e.lanes=i,e;case E:return(e=Fu(19,n,t,a)).elementType=E,e.lanes=i,e;case N:return Bu(n,a,i,t);case R:return(e=Fu(24,n,t,a)).elementType=R,e.lanes=i,e;default:if("object"==typeof e&&null!==e)switch(e.$$typeof){case T:o=10;break e;case S:o=9;break e;case x:o=11;break e;case j:o=14;break e;case P:o=16,r=null;break e;case H:o=22;break e}throw Error(s(130,null==e?e:typeof e,""))}return(t=Fu(o,n,t,a)).elementType=e,t.type=r,t.lanes=i,t}function Uu(e,t,n,r){return(e=Fu(7,e,r,t)).lanes=n,e}function Bu(e,t,n,r){return(e=Fu(23,e,r,t)).elementType=N,e.lanes=n,e}function Vu(e,t,n){return(e=Fu(6,e,null,t)).lanes=n,e}function Ju(e,t,n){return(t=Fu(4,null!==e.children?e.children:[],e.key,t)).lanes=n,t.stateNode={containerInfo:e.containerInfo,pendingChildren:null,implementation:e.implementation},t}function Gu(e,t,n){this.tag=t,this.containerInfo=e,this.finishedWork=this.pingCache=this.current=this.pendingChildren=null,this.timeoutHandle=-1,this.pendingContext=this.context=null,this.hydrate=n,this.callbackNode=null,this.callbackPriority=0,this.eventTimes=zt(0),this.expirationTimes=zt(-1),this.entangledLanes=this.finishedLanes=this.mutableReadLanes=this.expiredLanes=this.pingedLanes=this.suspendedLanes=this.pendingLanes=0,this.entanglements=zt(0),this.mutableSourceEagerHydrationData=null}function qu(e,t,n,r){var a=t.current,i=lu(),o=du(a);e:if(n){t:{if($e(n=n._reactInternals)!==n||1!==n.tag)throw Error(s(170));var u=n;do{switch(u.tag){case 3:u=u.stateNode.context;break t;case 1:if(ha(u.type)){u=u.stateNode.__reactInternalMemoizedMergedChildContext;break t}}u=u.return}while(null!==u);throw Error(s(171))}if(1===n.tag){var l=n.type;if(ha(l)){n=ga(n,l,u);break e}}n=u}else n=da;return null===t.context?t.context=n:t.pendingContext=n,(t=ui(i,o)).payload={element:e},null!==(r=void 0===r?null:r)&&(t.callback=r),li(a,t),cu(a,o,i),o}function $u(e){return(e=e.current).child?(e.child.tag,e.child.stateNode):null}function Ku(e,t){if(null!==(e=e.memoizedState)&&null!==e.dehydrated){var n=e.retryLane;e.retryLane=0!==n&&n<t?n:t}}function Qu(e,t){Ku(e,t),(e=e.alternate)&&Ku(e,t)}function Xu(e,t,n){var r=null!=n&&null!=n.hydrationOptions&&n.hydrationOptions.mutableSources||null;if(n=new Gu(e,t,null!=n&&!0===n.hydrate),t=Fu(3,null,null,2===t?7:1===t?3:0),n.current=t,t.stateNode=n,si(t),e[Xr]=n.current,Or(8===e.nodeType?e.parentNode:e),r)for(e=0;e<r.length;e++){var a=(t=r[e])._getVersion;a=a(t._source),null==n.mutableSourceEagerHydrationData?n.mutableSourceEagerHydrationData=[t,a]:n.mutableSourceEagerHydrationData.push(t,a)}this._internalRoot=n}function Zu(e){return!(!e||1!==e.nodeType&&9!==e.nodeType&&11!==e.nodeType&&(8!==e.nodeType||" react-mount-point-unstable "!==e.nodeValue))}function el(e,t,n,r,a){var i=n._reactRootContainer;if(i){var s=i._internalRoot;if("function"==typeof a){var o=a;a=function(){var e=$u(s);o.call(e)}}qu(t,s,e,a)}else{if(i=n._reactRootContainer=function(e,t){if(t||(t=!(!(t=e?9===e.nodeType?e.documentElement:e.firstChild:null)||1!==t.nodeType||!t.hasAttribute("data-reactroot"))),!t)for(var n;n=e.lastChild;)e.removeChild(n);return new Xu(e,0,t?{hydrate:!0}:void 0)}(n,r),s=i._internalRoot,"function"==typeof a){var u=a;a=function(){var e=$u(s);u.call(e)}}!function(e,t){var n=xo;xo&=-2,xo|=8;try{return e(t)}finally{0===(xo=n)&&(Bo(),Ja())}}((function(){qu(t,s,e,a)}))}return $u(s)}Vo=function(e,t,n){var r=t.lanes;if(null!==e)if(e.memoizedProps!==t.pendingProps||fa.current)Hs=!0;else{if(!(n&r)){switch(Hs=!1,t.tag){case 3:Bs(t),Vi();break;case 5:Pi(t);break;case 1:ha(t.type)&&va(t);break;case 4:Ei(t,t.stateNode.containerInfo);break;case 10:r=t.memoizedProps.value;var a=t.type._context;la(Ka,a._currentValue),a._currentValue=r;break;case 13:if(null!==t.memoizedState)return n&t.child.childLanes?Ks(e,t,n):(la(Ci,1&Ci.current),null!==(t=to(e,t,n))?t.sibling:null);la(Ci,1&Ci.current);break;case 19:if(r=!!(n&t.childLanes),64&e.flags){if(r)return eo(e,t,n);t.flags|=64}if(null!==(a=t.memoizedState)&&(a.rendering=null,a.tail=null,a.lastEffect=null),la(Ci,Ci.current),r)break;return null;case 23:case 24:return t.lanes=0,Fs(e,t,n)}return to(e,t,n)}Hs=!!(16384&e.flags)}else Hs=!1;switch(t.lanes=0,t.tag){case 2:if(r=t.type,null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=_a(t,ca.current),ri(t,n),a=as(null,t,r,e,a,n),t.flags|=1,"object"==typeof a&&null!==a&&"function"==typeof a.render&&void 0===a.$$typeof){if(t.tag=1,t.memoizedState=null,t.updateQueue=null,ha(r)){var i=!0;va(t)}else i=!1;t.memoizedState=null!==a.state&&void 0!==a.state?a.state:null,si(t);var o=r.getDerivedStateFromProps;"function"==typeof o&&_i(t,r,o,e),a.updater=hi,t.stateNode=a,a._reactInternals=t,vi(t,r,e,n),t=Us(null,t,r,!0,i,n)}else t.tag=0,Cs(null,t,a,n),t=t.child;return t;case 16:a=t.elementType;e:{switch(null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),e=t.pendingProps,a=(i=a._init)(a._payload),t.type=a,i=t.tag=function(e){if("function"==typeof e)return zu(e)?1:0;if(null!=e){if((e=e.$$typeof)===x)return 11;if(e===j)return 14}return 2}(a),e=$a(a,e),i){case 0:t=Ws(null,t,a,e,n);break e;case 1:t=Is(null,t,a,e,n);break e;case 11:t=As(null,t,a,e,n);break e;case 14:t=Ns(null,t,a,$a(a.type,e),r,n);break e}throw Error(s(306,a,""))}return t;case 0:return r=t.type,a=t.pendingProps,Ws(e,t,r,a=t.elementType===r?a:$a(r,a),n);case 1:return r=t.type,a=t.pendingProps,Is(e,t,r,a=t.elementType===r?a:$a(r,a),n);case 3:if(Bs(t),r=t.updateQueue,null===e||null===r)throw Error(s(282));if(r=t.pendingProps,a=null!==(a=t.memoizedState)?a.element:null,oi(e,t),ci(t,r,null,n),(r=t.memoizedState.element)===a)Vi(),t=to(e,t,n);else{if((i=(a=t.stateNode).hydrate)&&(Ri=Jr(t.stateNode.containerInfo.firstChild),Ni=t,i=Fi=!0),i){if(null!=(e=a.mutableSourceEagerHydrationData))for(a=0;a<e.length;a+=2)(i=e[a])._workInProgressVersionPrimary=e[a+1],Ji.push(i);for(n=wi(t,null,r,n),t.child=n;n;)n.flags=-3&n.flags|1024,n=n.sibling}else Cs(e,t,r,n),Vi();t=t.child}return t;case 5:return Pi(t),null===e&&Ii(t),r=t.type,a=t.pendingProps,i=null!==e?e.memoizedProps:null,o=a.children,Ir(r,a)?o=null:null!==i&&Ir(r,i)&&(t.flags|=16),zs(e,t),Cs(e,t,o,n),t.child;case 6:return null===e&&Ii(t),null;case 13:return Ks(e,t,n);case 4:return Ei(t,t.stateNode.containerInfo),r=t.pendingProps,null===e?t.child=Yi(t,null,r,n):Cs(e,t,r,n),t.child;case 11:return r=t.type,a=t.pendingProps,As(e,t,r,a=t.elementType===r?a:$a(r,a),n);case 7:return Cs(e,t,t.pendingProps,n),t.child;case 8:case 12:return Cs(e,t,t.pendingProps.children,n),t.child;case 10:e:{r=t.type._context,a=t.pendingProps,o=t.memoizedProps,i=a.value;var u=t.type._context;if(la(Ka,u._currentValue),u._currentValue=i,null!==o)if(u=o.value,0==(i=ur(u,i)?0:0|("function"==typeof r._calculateChangedBits?r._calculateChangedBits(u,i):1073741823))){if(o.children===a.children&&!fa.current){t=to(e,t,n);break e}}else for(null!==(u=t.child)&&(u.return=t);null!==u;){var l=u.dependencies;if(null!==l){o=u.child;for(var d=l.firstContext;null!==d;){if(d.context===r&&d.observedBits&i){1===u.tag&&((d=ui(-1,n&-n)).tag=2,li(u,d)),u.lanes|=n,null!==(d=u.alternate)&&(d.lanes|=n),ni(u.return,n),l.lanes|=n;break}d=d.next}}else o=10===u.tag&&u.type===t.type?null:u.child;if(null!==o)o.return=u;else for(o=u;null!==o;){if(o===t){o=null;break}if(null!==(u=o.sibling)){u.return=o.return,o=u;break}o=o.return}u=o}Cs(e,t,a.children,n),t=t.child}return t;case 9:return a=t.type,r=(i=t.pendingProps).children,ri(t,n),r=r(a=ai(a,i.unstable_observedBits)),t.flags|=1,Cs(e,t,r,n),t.child;case 14:return i=$a(a=t.type,t.pendingProps),Ns(e,t,a,i=$a(a.type,i),r,n);case 15:return Rs(e,t,t.type,t.pendingProps,r,n);case 17:return r=t.type,a=t.pendingProps,a=t.elementType===r?a:$a(r,a),null!==e&&(e.alternate=null,t.alternate=null,t.flags|=2),t.tag=1,ha(r)?(e=!0,va(t)):e=!1,ri(t,n),yi(t,r,a),vi(t,r,a,n),Us(null,t,r,!0,e,n);case 19:return eo(e,t,n);case 23:case 24:return Fs(e,t,n)}throw Error(s(156,t.tag))},Xu.prototype.render=function(e){qu(e,this._internalRoot,null,null)},Xu.prototype.unmount=function(){var e=this._internalRoot,t=e.containerInfo;qu(null,e,null,(function(){t[Xr]=null}))},Ze=function(e){13===e.tag&&(cu(e,4,lu()),Qu(e,4))},et=function(e){13===e.tag&&(cu(e,67108864,lu()),Qu(e,67108864))},tt=function(e){if(13===e.tag){var t=lu(),n=du(e);cu(e,n,t),Qu(e,n)}},nt=function(e,t){return t()},De=function(e,t,n){switch(t){case"input":if(ne(e,n),t=n.name,"radio"===n.type&&null!=t){for(n=e;n.parentNode;)n=n.parentNode;for(n=n.querySelectorAll("input[name="+JSON.stringify(""+t)+'][type="radio"]'),t=0;t<n.length;t++){var r=n[t];if(r!==e&&r.form===e.form){var a=ra(r);if(!a)throw Error(s(90));Q(r),ne(r,a)}}}break;case"textarea":le(e,n);break;case"select":null!=(t=n.value)&&se(e,!!n.multiple,t,!1)}},je=function(e,t){var n=xo;xo|=1;try{return e(t)}finally{0===(xo=n)&&(Bo(),Ja())}},Pe=function(e,t,n,r,a){var i=xo;xo|=4;try{return Ba(98,e.bind(null,t,n,r,a))}finally{0===(xo=i)&&(Bo(),Ja())}},He=function(){!(49&xo)&&(function(){if(null!==tu){var e=tu;tu=null,e.forEach((function(e){e.expiredLanes|=24&e.pendingLanes,mu(e,Wa())}))}Ja()}(),Ou())},Ce=function(e,t){var n=xo;xo|=2;try{return e(t)}finally{0===(xo=n)&&(Bo(),Ja())}};var tl={findFiberByHostInstance:ea,bundleType:0,version:"17.0.2",rendererPackageName:"react-dom"},nl={bundleType:tl.bundleType,version:tl.version,rendererPackageName:tl.rendererPackageName,rendererConfig:tl.rendererConfig,overrideHookState:null,overrideHookStateDeletePath:null,overrideHookStateRenamePath:null,overrideProps:null,overridePropsDeletePath:null,overridePropsRenamePath:null,setSuspenseHandler:null,scheduleUpdate:null,currentDispatcherRef:L.ReactCurrentDispatcher,findHostInstanceByFiber:function(e){return null===(e=function(e){if(e=function(e){var t=e.alternate;if(!t){if(null===(t=$e(e)))throw Error(s(188));return t!==e?null:e}for(var n=e,r=t;;){var a=n.return;if(null===a)break;var i=a.alternate;if(null===i){if(null!==(r=a.return)){n=r;continue}break}if(a.child===i.child){for(i=a.child;i;){if(i===n)return Qe(a),e;if(i===r)return Qe(a),t;i=i.sibling}throw Error(s(188))}if(n.return!==r.return)n=a,r=i;else{for(var o=!1,u=a.child;u;){if(u===n){o=!0,n=a,r=i;break}if(u===r){o=!0,r=a,n=i;break}u=u.sibling}if(!o){for(u=i.child;u;){if(u===n){o=!0,n=i,r=a;break}if(u===r){o=!0,r=i,n=a;break}u=u.sibling}if(!o)throw Error(s(189))}}if(n.alternate!==r)throw Error(s(190))}if(3!==n.tag)throw Error(s(188));return n.stateNode.current===n?e:t}(e),!e)return null;for(var t=e;;){if(5===t.tag||6===t.tag)return t;if(t.child)t.child.return=t,t=t.child;else{if(t===e)break;for(;!t.sibling;){if(!t.return||t.return===e)return null;t=t.return}t.sibling.return=t.return,t=t.sibling}}return null}(e))?null:e.stateNode},findFiberByHostInstance:tl.findFiberByHostInstance||function(){return null},findHostInstancesForRefresh:null,scheduleRefresh:null,scheduleRoot:null,setRefreshHandler:null,getCurrentFiber:null};if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__){var rl=__REACT_DEVTOOLS_GLOBAL_HOOK__;if(!rl.isDisabled&&rl.supportsFiber)try{La=rl.inject(nl),ka=rl}catch(he){}}t.render=function(e,t,n){if(!Zu(t))throw Error(s(200));return el(null,e,t,!1,n)}},961:(e,t,n)=>{"use strict";!function e(){if("undefined"!=typeof __REACT_DEVTOOLS_GLOBAL_HOOK__&&"function"==typeof __REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE)try{__REACT_DEVTOOLS_GLOBAL_HOOK__.checkDCE(e)}catch(e){console.error(e)}}(),e.exports=n(2551)},5287:(e,t,n)=>{"use strict";var r=n(5228),a=60103,i=60106;t.Fragment=60107,t.StrictMode=60108,t.Profiler=60114;var s=60109,o=60110,u=60112;t.Suspense=60113;var l=60115,d=60116;if("function"==typeof Symbol&&Symbol.for){var c=Symbol.for;a=c("react.element"),i=c("react.portal"),t.Fragment=c("react.fragment"),t.StrictMode=c("react.strict_mode"),t.Profiler=c("react.profiler"),s=c("react.provider"),o=c("react.context"),u=c("react.forward_ref"),t.Suspense=c("react.suspense"),l=c("react.memo"),d=c("react.lazy")}var f="function"==typeof Symbol&&Symbol.iterator;function m(e){for(var t="https://reactjs.org/docs/error-decoder.html?invariant="+e,n=1;n<arguments.length;n++)t+="&args[]="+encodeURIComponent(arguments[n]);return"Minified React error #"+e+"; visit "+t+" for the full message or use the non-minified dev environment for full errors and additional helpful warnings."}var _={isMounted:function(){return!1},enqueueForceUpdate:function(){},enqueueReplaceState:function(){},enqueueSetState:function(){}},h={};function p(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||_}function y(){}function g(e,t,n){this.props=e,this.context=t,this.refs=h,this.updater=n||_}p.prototype.isReactComponent={},p.prototype.setState=function(e,t){if("object"!=typeof e&&"function"!=typeof e&&null!=e)throw Error(m(85));this.updater.enqueueSetState(this,e,t,"setState")},p.prototype.forceUpdate=function(e){this.updater.enqueueForceUpdate(this,e,"forceUpdate")},y.prototype=p.prototype;var v=g.prototype=new y;v.constructor=g,r(v,p.prototype),v.isPureReactComponent=!0;var M={current:null},L=Object.prototype.hasOwnProperty,k={key:!0,ref:!0,__self:!0,__source:!0};function b(e,t,n){var r,i={},s=null,o=null;if(null!=t)for(r in void 0!==t.ref&&(o=t.ref),void 0!==t.key&&(s=""+t.key),t)L.call(t,r)&&!k.hasOwnProperty(r)&&(i[r]=t[r]);var u=arguments.length-2;if(1===u)i.children=n;else if(1<u){for(var l=Array(u),d=0;d<u;d++)l[d]=arguments[d+2];i.children=l}if(e&&e.defaultProps)for(r in u=e.defaultProps)void 0===i[r]&&(i[r]=u[r]);return{$$typeof:a,type:e,key:s,ref:o,props:i,_owner:M.current}}function Y(e){return"object"==typeof e&&null!==e&&e.$$typeof===a}var w=/\/+/g;function D(e,t){return"object"==typeof e&&null!==e&&null!=e.key?function(e){var t={"=":"=0",":":"=2"};return"$"+e.replace(/[=:]/g,(function(e){return t[e]}))}(""+e.key):t.toString(36)}function T(e,t,n,r,s){var o=typeof e;"undefined"!==o&&"boolean"!==o||(e=null);var u=!1;if(null===e)u=!0;else switch(o){case"string":case"number":u=!0;break;case"object":switch(e.$$typeof){case a:case i:u=!0}}if(u)return s=s(u=e),e=""===r?"."+D(u,0):r,Array.isArray(s)?(n="",null!=e&&(n=e.replace(w,"$&/")+"/"),T(s,t,n,"",(function(e){return e}))):null!=s&&(Y(s)&&(s=function(e,t){return{$$typeof:a,type:e.type,key:t,ref:e.ref,props:e.props,_owner:e._owner}}(s,n+(!s.key||u&&u.key===s.key?"":(""+s.key).replace(w,"$&/")+"/")+e)),t.push(s)),1;if(u=0,r=""===r?".":r+":",Array.isArray(e))for(var l=0;l<e.length;l++){var d=r+D(o=e[l],l);u+=T(o,t,n,d,s)}else if(d=function(e){return null===e||"object"!=typeof e?null:"function"==typeof(e=f&&e[f]||e["@@iterator"])?e:null}(e),"function"==typeof d)for(e=d.call(e),l=0;!(o=e.next()).done;)u+=T(o=o.value,t,n,d=r+D(o,l++),s);else if("object"===o)throw t=""+e,Error(m(31,"[object Object]"===t?"object with keys {"+Object.keys(e).join(", ")+"}":t));return u}function S(e,t,n){if(null==e)return e;var r=[],a=0;return T(e,r,"","",(function(e){return t.call(n,e,a++)})),r}function x(e){if(-1===e._status){var t=e._result;t=t(),e._status=0,e._result=t,t.then((function(t){0===e._status&&(t=t.default,e._status=1,e._result=t)}),(function(t){0===e._status&&(e._status=2,e._result=t)}))}if(1===e._status)return e._result;throw e._result}var O={current:null};function E(){var e=O.current;if(null===e)throw Error(m(321));return e}var j={ReactCurrentDispatcher:O,ReactCurrentBatchConfig:{transition:0},ReactCurrentOwner:M,IsSomeRendererActing:{current:!1},assign:r};t.Children={map:S,forEach:function(e,t,n){S(e,(function(){t.apply(this,arguments)}),n)},count:function(e){var t=0;return S(e,(function(){t++})),t},toArray:function(e){return S(e,(function(e){return e}))||[]},only:function(e){if(!Y(e))throw Error(m(143));return e}},t.Component=p,t.PureComponent=g,t.__SECRET_INTERNALS_DO_NOT_USE_OR_YOU_WILL_BE_FIRED=j,t.cloneElement=function(e,t,n){if(null==e)throw Error(m(267,e));var i=r({},e.props),s=e.key,o=e.ref,u=e._owner;if(null!=t){if(void 0!==t.ref&&(o=t.ref,u=M.current),void 0!==t.key&&(s=""+t.key),e.type&&e.type.defaultProps)var l=e.type.defaultProps;for(d in t)L.call(t,d)&&!k.hasOwnProperty(d)&&(i[d]=void 0===t[d]&&void 0!==l?l[d]:t[d])}var d=arguments.length-2;if(1===d)i.children=n;else if(1<d){l=Array(d);for(var c=0;c<d;c++)l[c]=arguments[c+2];i.children=l}return{$$typeof:a,type:e.type,key:s,ref:o,props:i,_owner:u}},t.createContext=function(e,t){return void 0===t&&(t=null),(e={$$typeof:o,_calculateChangedBits:t,_currentValue:e,_currentValue2:e,_threadCount:0,Provider:null,Consumer:null}).Provider={$$typeof:s,_context:e},e.Consumer=e},t.createElement=b,t.createFactory=function(e){var t=b.bind(null,e);return t.type=e,t},t.createRef=function(){return{current:null}},t.forwardRef=function(e){return{$$typeof:u,render:e}},t.isValidElement=Y,t.lazy=function(e){return{$$typeof:d,_payload:{_status:-1,_result:e},_init:x}},t.memo=function(e,t){return{$$typeof:l,type:e,compare:void 0===t?null:t}},t.useCallback=function(e,t){return E().useCallback(e,t)},t.useContext=function(e,t){return E().useContext(e,t)},t.useDebugValue=function(){},t.useEffect=function(e,t){return E().useEffect(e,t)},t.useImperativeHandle=function(e,t,n){return E().useImperativeHandle(e,t,n)},t.useLayoutEffect=function(e,t){return E().useLayoutEffect(e,t)},t.useMemo=function(e,t){return E().useMemo(e,t)},t.useReducer=function(e,t,n){return E().useReducer(e,t,n)},t.useRef=function(e){return E().useRef(e)},t.useState=function(e){return E().useState(e)},t.version="17.0.2"},6540:(e,t,n)=>{"use strict";e.exports=n(5287)},7463:(e,t)=>{"use strict";var n,r,a,i;if("object"==typeof performance&&"function"==typeof performance.now){var s=performance;t.unstable_now=function(){return s.now()}}else{var o=Date,u=o.now();t.unstable_now=function(){return o.now()-u}}if("undefined"==typeof window||"function"!=typeof MessageChannel){var l=null,d=null,c=function(){if(null!==l)try{var e=t.unstable_now();l(!0,e),l=null}catch(e){throw setTimeout(c,0),e}};n=function(e){null!==l?setTimeout(n,0,e):(l=e,setTimeout(c,0))},r=function(e,t){d=setTimeout(e,t)},a=function(){clearTimeout(d)},t.unstable_shouldYield=function(){return!1},i=t.unstable_forceFrameRate=function(){}}else{var f=window.setTimeout,m=window.clearTimeout;if("undefined"!=typeof console){var _=window.cancelAnimationFrame;"function"!=typeof window.requestAnimationFrame&&console.error("This browser doesn't support requestAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills"),"function"!=typeof _&&console.error("This browser doesn't support cancelAnimationFrame. Make sure that you load a polyfill in older browsers. https://reactjs.org/link/react-polyfills")}var h=!1,p=null,y=-1,g=5,v=0;t.unstable_shouldYield=function(){return t.unstable_now()>=v},i=function(){},t.unstable_forceFrameRate=function(e){0>e||125<e?console.error("forceFrameRate takes a positive int between 0 and 125, forcing frame rates higher than 125 fps is not supported"):g=0<e?Math.floor(1e3/e):5};var M=new MessageChannel,L=M.port2;M.port1.onmessage=function(){if(null!==p){var e=t.unstable_now();v=e+g;try{p(!0,e)?L.postMessage(null):(h=!1,p=null)}catch(e){throw L.postMessage(null),e}}else h=!1},n=function(e){p=e,h||(h=!0,L.postMessage(null))},r=function(e,n){y=f((function(){e(t.unstable_now())}),n)},a=function(){m(y),y=-1}}function k(e,t){var n=e.length;e.push(t);e:for(;;){var r=n-1>>>1,a=e[r];if(!(void 0!==a&&0<w(a,t)))break e;e[r]=t,e[n]=a,n=r}}function b(e){return void 0===(e=e[0])?null:e}function Y(e){var t=e[0];if(void 0!==t){var n=e.pop();if(n!==t){e[0]=n;e:for(var r=0,a=e.length;r<a;){var i=2*(r+1)-1,s=e[i],o=i+1,u=e[o];if(void 0!==s&&0>w(s,n))void 0!==u&&0>w(u,s)?(e[r]=u,e[o]=n,r=o):(e[r]=s,e[i]=n,r=i);else{if(!(void 0!==u&&0>w(u,n)))break e;e[r]=u,e[o]=n,r=o}}}return t}return null}function w(e,t){var n=e.sortIndex-t.sortIndex;return 0!==n?n:e.id-t.id}var D=[],T=[],S=1,x=null,O=3,E=!1,j=!1,P=!1;function H(e){for(var t=b(T);null!==t;){if(null===t.callback)Y(T);else{if(!(t.startTime<=e))break;Y(T),t.sortIndex=t.expirationTime,k(D,t)}t=b(T)}}function C(e){if(P=!1,H(e),!j)if(null!==b(D))j=!0,n(A);else{var t=b(T);null!==t&&r(C,t.startTime-e)}}function A(e,n){j=!1,P&&(P=!1,a()),E=!0;var i=O;try{for(H(n),x=b(D);null!==x&&(!(x.expirationTime>n)||e&&!t.unstable_shouldYield());){var s=x.callback;if("function"==typeof s){x.callback=null,O=x.priorityLevel;var o=s(x.expirationTime<=n);n=t.unstable_now(),"function"==typeof o?x.callback=o:x===b(D)&&Y(D),H(n)}else Y(D);x=b(D)}if(null!==x)var u=!0;else{var l=b(T);null!==l&&r(C,l.startTime-n),u=!1}return u}finally{x=null,O=i,E=!1}}var N=i;t.unstable_IdlePriority=5,t.unstable_ImmediatePriority=1,t.unstable_LowPriority=4,t.unstable_NormalPriority=3,t.unstable_Profiling=null,t.unstable_UserBlockingPriority=2,t.unstable_cancelCallback=function(e){e.callback=null},t.unstable_continueExecution=function(){j||E||(j=!0,n(A))},t.unstable_getCurrentPriorityLevel=function(){return O},t.unstable_getFirstCallbackNode=function(){return b(D)},t.unstable_next=function(e){switch(O){case 1:case 2:case 3:var t=3;break;default:t=O}var n=O;O=t;try{return e()}finally{O=n}},t.unstable_pauseExecution=function(){},t.unstable_requestPaint=N,t.unstable_runWithPriority=function(e,t){switch(e){case 1:case 2:case 3:case 4:case 5:break;default:e=3}var n=O;O=e;try{return t()}finally{O=n}},t.unstable_scheduleCallback=function(e,i,s){var o=t.unstable_now();switch(s="object"==typeof s&&null!==s&&"number"==typeof(s=s.delay)&&0<s?o+s:o,e){case 1:var u=-1;break;case 2:u=250;break;case 5:u=1073741823;break;case 4:u=1e4;break;default:u=5e3}return e={id:S++,callback:i,priorityLevel:e,startTime:s,expirationTime:u=s+u,sortIndex:-1},s>o?(e.sortIndex=s,k(T,e),null===b(D)&&e===b(T)&&(P?a():P=!0,r(C,s-o))):(e.sortIndex=u,k(D,e),j||E||(j=!0,n(A))),e},t.unstable_wrapCallback=function(e){var t=O;return function(){var n=O;O=t;try{return e.apply(this,arguments)}finally{O=n}}}},9982:(e,t,n)=>{"use strict";e.exports=n(7463)},3721:(e,t,n)=>{"use strict";n.r(t),n.d(t,{SWRConfig:()=>q,default:()=>K,mutate:()=>W,unstable_serialize:()=>$,useSWRConfig:()=>V});var r=n(6540);function a(e,t,n,r){return new(n||(n=Promise))((function(a,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function o(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}u((r=r.apply(e,t||[])).next())}))}function i(e,t){var n,r,a,i,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){s.label=i[1];break}if(6===i[0]&&s.label<a[1]){s.label=a[1],a=i;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(i);break}a[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}}var s,o=function(){},u=o(),l=Object,d=function(e){return e===u},c=function(e){return"function"==typeof e},f=function(e,t){return l.assign({},e,t)},m="undefined",_=function(){return typeof window!=m},h=new WeakMap,p=0,y=function(e){var t,n,r=typeof e,a=e&&e.constructor,i=a==Date;if(l(e)!==e||i||a==RegExp)t=i?e.toJSON():"symbol"==r?e.toString():"string"==r?JSON.stringify(e):""+e;else{if(t=h.get(e))return t;if(t=++p+"~",h.set(e,t),a==Array){for(t="@",n=0;n<e.length;n++)t+=y(e[n])+",";h.set(e,t)}if(a==l){t="#";for(var s=l.keys(e).sort();!d(n=s.pop());)d(e[n])||(t+=n+":"+y(e[n])+",");h.set(e,t)}}return t},g=!0,v=_(),M=typeof document!=m,L=v&&window.addEventListener?window.addEventListener.bind(window):o,k=M?document.addEventListener.bind(document):o,b=v&&window.removeEventListener?window.removeEventListener.bind(window):o,Y=M?document.removeEventListener.bind(document):o,w={isOnline:function(){return g},isVisible:function(){var e=M&&document.visibilityState;return d(e)||"hidden"!==e}},D={initFocus:function(e){return k("visibilitychange",e),L("focus",e),function(){Y("visibilitychange",e),b("focus",e)}},initReconnect:function(e){var t=function(){g=!0,e()},n=function(){g=!1};return L("online",t),L("offline",n),function(){b("online",t),b("offline",n)}}},T=!_()||"Deno"in window,S=T?r.useEffect:r.useLayoutEffect,x="undefined"!=typeof navigator&&navigator.connection,O=!T&&x&&(["slow-2g","2g"].includes(x.effectiveType)||x.saveData),E=function(e){if(c(e))try{e=e()}catch(t){e=""}var t=[].concat(e);return[e="string"==typeof e?e:(Array.isArray(e)?e.length:e)?y(e):"",t,e?"$swr$"+e:""]},j=new WeakMap,P=function(e,t,n,r,a,i,s){void 0===s&&(s=!0);var o=j.get(e),u=o[0],l=o[1],d=o[3],c=u[t],f=l[t];if(s&&f)for(var m=0;m<f.length;++m)f[m](n,r,a);return i&&(delete d[t],c&&c[0])?c[0](2).then((function(){return e.get(t)})):e.get(t)},H=0,C=function(){return++H},A=function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];return a(void 0,void 0,void 0,(function(){var t,n,r,a,s,o,l,m,_,h,p,y,g,v,M,L,k,b,Y,w,D;return i(this,(function(i){switch(i.label){case 0:if(t=e[0],n=e[1],r=e[2],a=e[3],o=!!d((s="boolean"==typeof a?{revalidate:a}:a||{}).populateCache)||s.populateCache,l=!1!==s.revalidate,m=!1!==s.rollbackOnError,_=s.optimisticData,h=E(n),p=h[0],y=h[2],!p)return[2];if(g=j.get(t),v=g[2],e.length<3)return[2,P(t,p,t.get(p),u,u,l,!0)];if(M=r,k=C(),v[p]=[k,0],b=!d(_),Y=t.get(p),b&&(w=c(_)?_(Y):_,t.set(p,w),P(t,p,w)),c(M))try{M=M(t.get(p))}catch(e){L=e}return M&&c(M.then)?[4,M.catch((function(e){L=e}))]:[3,2];case 1:if(M=i.sent(),k!==v[p][0]){if(L)throw L;return[2,M]}L&&b&&m&&(o=!0,M=Y,t.set(p,Y)),i.label=2;case 2:return o&&(L||(c(o)&&(M=o(M,Y)),t.set(p,M)),t.set(y,f(t.get(y),{error:L}))),v[p][1]=C(),[4,P(t,p,M,L,u,l,!!o)];case 3:if(D=i.sent(),L)throw L;return[2,o?D:M]}}))}))},N=function(e,t){for(var n in e)e[n][0]&&e[n][0](t)},R=function(e,t){if(!j.has(e)){var n=f(D,t),r={},a=A.bind(u,e),i=o;if(j.set(e,[r,{},{},{},a]),!T){var s=n.initFocus(setTimeout.bind(u,N.bind(u,r,0))),l=n.initReconnect(setTimeout.bind(u,N.bind(u,r,1)));i=function(){s&&s(),l&&l(),j.delete(e)}}return[e,a,i]}return[e,j.get(e)[4]]},F=R(new Map),z=F[0],W=F[1],I=f({onLoadingSlow:o,onSuccess:o,onError:o,onErrorRetry:function(e,t,n,r,a){var i=n.errorRetryCount,s=a.retryCount,o=~~((Math.random()+.5)*(1<<(s<8?s:8)))*n.errorRetryInterval;!d(i)&&s>i||setTimeout(r,o,a)},onDiscarded:o,revalidateOnFocus:!0,revalidateOnReconnect:!0,revalidateIfStale:!0,shouldRetryOnError:!0,errorRetryInterval:O?1e4:5e3,focusThrottleInterval:5e3,dedupingInterval:2e3,loadingTimeout:O?5e3:3e3,compare:function(e,t){return y(e)==y(t)},isPaused:function(){return!1},cache:z,mutate:W,fallback:{}},w),U=function(e,t){var n=f(e,t);if(t){var r=e.use,a=e.fallback,i=t.use,s=t.fallback;r&&i&&(n.use=r.concat(i)),a&&s&&(n.fallback=f(a,s))}return n},B=(0,r.createContext)({}),V=function(){return f(I,(0,r.useContext)(B))},J=function(e,t,n){var r=t[e]||(t[e]=[]);return r.push(n),function(){var e=r.indexOf(n);e>=0&&(r[e]=r[r.length-1],r.pop())}},G={dedupe:!0},q=l.defineProperty((function(e){var t=e.value,n=U((0,r.useContext)(B),t),a=t&&t.provider,i=(0,r.useState)((function(){return a?R(a(n.cache||z),t):u}))[0];return i&&(n.cache=i[0],n.mutate=i[1]),S((function(){return i?i[2]:u}),[]),(0,r.createElement)(B.Provider,f(e,{value:n}))}),"default",{value:I}),$=function(e){return E(e)[0]},K=(s=function(e,t,n){var s=n.cache,o=n.compare,l=n.fallbackData,h=n.suspense,p=n.revalidateOnMount,y=n.refreshInterval,g=n.refreshWhenHidden,v=n.refreshWhenOffline,M=j.get(s),L=M[0],k=M[1],b=M[2],Y=M[3],w=E(e),D=w[0],x=w[1],O=w[2],H=(0,r.useRef)(!1),N=(0,r.useRef)(!1),R=(0,r.useRef)(D),F=(0,r.useRef)(t),z=(0,r.useRef)(n),W=function(){return z.current},I=function(){return W().isVisible()&&W().isOnline()},U=function(e){return s.set(O,f(s.get(O),e))},B=s.get(D),V=d(l)?n.fallback[D]:l,q=d(B)?V:B,$=s.get(O)||{},K=$.error,Q=!H.current,X=function(){return Q&&!d(p)?p:!W().isPaused()&&(h?!d(q)&&n.revalidateIfStale:d(q)||n.revalidateIfStale)},Z=!(!D||!t)&&(!!$.isValidating||Q&&X()),ee=function(e,t){var n=(0,r.useState)({})[1],a=(0,r.useRef)(e),i=(0,r.useRef)({data:!1,error:!1,isValidating:!1}),s=(0,r.useCallback)((function(e){var r=!1,s=a.current;for(var o in e){var u=o;s[u]!==e[u]&&(s[u]=e[u],i.current[u]&&(r=!0))}r&&!t.current&&n({})}),[]);return S((function(){a.current=e})),[a,i.current,s]}({data:q,error:K,isValidating:Z},N),te=ee[0],ne=ee[1],re=ee[2],ae=(0,r.useCallback)((function(e){return a(void 0,void 0,void 0,(function(){var t,r,a,l,f,m,_,h,p,y,g,v,M;return i(this,(function(i){switch(i.label){case 0:if(t=F.current,!D||!t||N.current||W().isPaused())return[2,!1];l=!0,f=e||{},m=!Y[D]||!f.dedupe,_=function(){return!N.current&&D===R.current&&H.current},h=function(){var e=Y[D];e&&e[1]===a&&delete Y[D]},p={isValidating:!1},y=function(){U({isValidating:!1}),_()&&re(p)},U({isValidating:!0}),re({isValidating:!0}),i.label=1;case 1:return i.trys.push([1,3,,4]),m&&(P(s,D,te.current.data,te.current.error,!0),n.loadingTimeout&&!s.get(D)&&setTimeout((function(){l&&_()&&W().onLoadingSlow(D,n)}),n.loadingTimeout),Y[D]=[t.apply(void 0,x),C()]),M=Y[D],r=M[0],a=M[1],[4,r];case 2:return r=i.sent(),m&&setTimeout(h,n.dedupingInterval),Y[D]&&Y[D][1]===a?(U({error:u}),p.error=u,g=b[D],!d(g)&&(a<=g[0]||a<=g[1]||0===g[1])?(y(),m&&_()&&W().onDiscarded(D),[2,!1]):(o(te.current.data,r)?p.data=te.current.data:p.data=r,o(s.get(D),r)||s.set(D,r),m&&_()&&W().onSuccess(r,D,n),[3,4])):(m&&_()&&W().onDiscarded(D),[2,!1]);case 3:return v=i.sent(),h(),W().isPaused()||(U({error:v}),p.error=v,m&&_()&&(W().onError(v,D,n),("boolean"==typeof n.shouldRetryOnError&&n.shouldRetryOnError||c(n.shouldRetryOnError)&&n.shouldRetryOnError(v))&&I()&&W().onErrorRetry(v,D,n,ae,{retryCount:(f.retryCount||0)+1,dedupe:!0}))),[3,4];case 4:return l=!1,y(),_()&&m&&P(s,D,p.data,p.error,!1),[2,!0]}}))}))}),[D]),ie=(0,r.useCallback)(A.bind(u,s,(function(){return R.current})),[]);if(S((function(){F.current=t,z.current=n})),S((function(){if(D){var e=D!==R.current,t=ae.bind(u,G),n=0,r=J(D,k,(function(e,t,n){re(f({error:t,isValidating:n},o(te.current.data,e)?u:{data:e}))})),a=J(D,L,(function(e){if(0==e){var r=Date.now();W().revalidateOnFocus&&r>n&&I()&&(n=r+W().focusThrottleInterval,t())}else if(1==e)W().revalidateOnReconnect&&I()&&t();else if(2==e)return ae()}));return N.current=!1,R.current=D,H.current=!0,e&&re({data:q,error:K,isValidating:Z}),X()&&(d(q)||T?t():(i=t,_()&&typeof window.requestAnimationFrame!=m?window.requestAnimationFrame(i):setTimeout(i,1))),function(){N.current=!0,r(),a()}}var i}),[D,ae]),S((function(){var e;function t(){var t=c(y)?y(q):y;t&&-1!==e&&(e=setTimeout(n,t))}function n(){te.current.error||!g&&!W().isVisible()||!v&&!W().isOnline()?t():ae(G).then(t)}return t(),function(){e&&(clearTimeout(e),e=-1)}}),[y,g,v,ae]),(0,r.useDebugValue)(q),h&&d(q)&&D)throw F.current=t,z.current=n,N.current=!1,d(K)?ae(G):K;return{mutate:ie,get data(){return ne.data=!0,q},get error(){return ne.error=!0,K},get isValidating(){return ne.isValidating=!0,Z}}},function(){for(var e=[],t=0;t<arguments.length;t++)e[t]=arguments[t];var n=V(),r=function(e){return c(e[1])?[e[0],e[1],e[2]||{}]:[e[0],null,(null===e[1]?e[2]:e[1])||{}]}(e),a=r[0],i=r[1],o=r[2],u=U(n,o),l=s,d=u.use;if(d)for(var f=d.length;f-- >0;)l=d[f](l);return l(a,i||u.fetcher,u)})},2931:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540);t.default=function(e){var t=e.label,n=e.href;return r.createElement("a",{href:n,className:"btn-more"},r.createElement("p",null,t),r.createElement("div",{className:"arr"},r.createElement("div",{className:"arline"}),r.createElement("div",{className:"arrrot"},r.createElement("img",{src:"/static/image/arrlinrot.svg"}))))}},7716:(e,t,n)=>{"use strict";var r=n(6540),a=n(3981);t.A=function(){var e=r.useState(""),t=e[0],n=e[1],i=function(){window.location.href="/catalogue?filter=0&name-select=contain&keyword=".concat(t)},s=(0,a.useTranslation)(),o=s.t,u=(s.i18n,o("請輸入關鍵字"));return r.createElement("section",{className:"section-1-kv"},r.createElement("div",{className:"bg"},r.createElement("img",{loading:"lazy",src:"/static/image/index-sechtion-1-bg.png"})),r.createElement("div",{className:"bg-top-let"},r.createElement("img",{loading:"lazy",src:"/static/image/index-sechtion-1-item1.png"})),r.createElement("div",{className:"bg-top-right"},r.createElement("img",{loading:"lazy",src:"/static/image/index-sechtion-1-item2.png"})),r.createElement("div",{className:"cir-yel"},r.createElement("img",{loading:"lazy",src:"/static/image/cir_yel.png"})),r.createElement("div",{className:"cir-blue"},r.createElement("img",{loading:"lazy",src:"/static/image/cir_blue.png"})),r.createElement("div",{className:"float-ite01"},r.createElement("img",{loading:"lazy",src:"/static/image/float_ite01.png"})),r.createElement("div",{className:"float-ite02"},r.createElement("img",{loading:"lazy",src:"/static/image/float_ite02.png"})),r.createElement("div",{className:"flex-box"},r.createElement("div",{className:"left-box"},r.createElement("div",{className:"slogan"},r.createElement("h3",null,"臺灣最具指標性且全面的",r.createElement("br",null),"物種名錄資料庫"),r.createElement("h2",null,r.createElement("span",null,"The most complete, authoritative list of Taiwan’s species"),r.createElement("div",{className:"line"}))),r.createElement("div",{className:"search-bar"},r.createElement("input",{type:"text",placeholder:u,onKeyDown:function(e){"Enter"===e.key&&i()},onChange:function(e){return n(e.target.value)}}),r.createElement("a",{href:"/catalogue?filter=2",className:"more"},r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"27",height:"23",viewBox:"0 0 27 23"},r.createElement("path",{id:"Polygon_1","data-name":"Polygon 1",d:"M11.775,2.939a2,2,0,0,1,3.45,0L25.232,19.988A2,2,0,0,1,23.507,23H3.493a2,2,0,0,1-1.725-3.012Z",transform:"translate(27 23) rotate(180)",fill:"#4c8da7"}))),r.createElement("button",{className:"search",onClick:i},r.createElement("svg",{id:"Group_6882","data-name":"Group 6882",xmlns:"http://www.w3.org/2000/svg",width:"36.847",height:"36.775",viewBox:"0 0 36.847 36.775"},r.createElement("defs",null,r.createElement("clipPath",{id:"clipPath"},r.createElement("rect",{id:"Rectangle_65","data-name":"Rectangle 65",width:"36.847",height:"36.775",fill:"#4c8da7"}))),r.createElement("g",{id:"Group_135","data-name":"Group 135",clipPath:"url(#clipPath)"},r.createElement("path",{id:"Path_6196","data-name":"Path 6196",d:"M0,15.8V13.791c.093-.611.172-1.224.282-1.832A14.8,14.8,0,0,1,11.626.36C12.373.206,13.135.118,13.89,0h1.943c.091.022.182.049.274.065.813.14,1.642.22,2.438.424a14.772,14.772,0,0,1,9.4,21.166c-.407.768-.9,1.489-1.4,2.3a2.517,2.517,0,0,1,.305.233q4.493,4.478,8.985,8.958a3.734,3.734,0,0,1,1.016,1.4v.718a2.258,2.258,0,0,1-.753,1.148,1.856,1.856,0,0,1-2.5-.29q-4.694-4.682-9.383-9.369A1.8,1.8,0,0,1,24,26.422c-.154.116-.212.156-.27.2A14.833,14.833,0,0,1,.359,17.991C.208,17.268.118,16.532,0,15.8m3.673-1.04A11.15,11.15,0,1,0,14.861,3.676,11.17,11.17,0,0,0,3.673,14.762",fill:"#4c8da7"})))))),r.createElement("div",{className:"right-box"},r.createElement("div",{className:"bn-kvbox"},r.createElement("div",{className:"base1"},r.createElement("img",{loading:"lazy",src:"/static/image/bn-img02.png"})),r.createElement("div",{className:"base2"},r.createElement("img",{loading:"lazy",src:"/static/image/bn-img01.png"})),r.createElement("div",{className:"base3"},r.createElement("img",{loading:"lazy",src:"/static/image/bn-img03.png"})),r.createElement("div",{className:"animal1"},r.createElement("img",{loading:"lazy",src:"/static/image/bn-img04.png"})),r.createElement("div",{className:"animal2"},r.createElement("img",{loading:"lazy",src:"/static/image/bn-img05.png"}))))))}},4106:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),a=n(5093),i=n(5158),s=n(6077),o=n(3981);t.default=function(e){var t=e.title,n=e.Category,u=e.publishedDate,l=e.slug,d=a(new Date(u)),c=n.color&&(0,s.default)(n.color)?n.color:"black",f=(0,o.useTranslation)(),m=(f.t,f.i18n);return r.createElement("li",null,r.createElement("a",{href:"/news/".concat(l)},r.createElement("div",{className:"top-flex-dat"},r.createElement("div",{className:"date"},r.createElement("div",{className:"day"},d.format("DD")),r.createElement("div",{className:"mon-year"},d.format("MMM"),".",d.format("YYYY"))),r.createElement("div",{className:"tag",style:{backgroundColor:c}},"en-us"==m.language?n.name_eng:n.name)),r.createElement("h3",{className:"news-title"},(0,i.shortDescription)(t,100))))}},5298:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(6540),i=n(4106),s=n(3721),o=n(2931),u=n(5158),l=n(3981);t.default=function(){var e,t,n=a.useState("all"),d=n[0],c=n[1],f=a.useState(1),m=f[0],_=f[1],h=a.useState(0),p=h[0],y=h[1],g=(0,l.useTranslation)(),v=(g.t,g.i18n);t="en-us"==v.language?"&show_in_en=1":"&show_in_zh=1";var M="".concat("https://admin.taicol.tw","/api/news/latest?cid=").concat(d,"&page=").concat(m).concat(t),L="".concat("https://admin.taicol.tw","/api/category?type=news"),k=(0,s.default)(M,u.fetcher).data,b=(0,s.default)(L,u.fetcher).data;a.useEffect((function(){k&&y(Math.ceil(k.count/3))}),[k]);var Y=function(e){c(e),_(1)};return a.createElement(a.Fragment,null,a.createElement("div",{className:"top-flex"},a.createElement("div",{className:"title-area"},a.createElement("h3",null,"NEWS ",a.createElement("span",null))),a.createElement("ul",{className:"news-tab-index"},a.createElement(l.Translation,null,(function(e){return a.createElement("li",{className:"all"==d?"now":"",onClick:function(){return Y("all")}},e("全部"),a.createElement("div",{className:"all"===d?"liney w-full":"liney"}))})),null==b?void 0:b.map((function(e,t){return a.createElement("li",{key:"category-".concat(t),onClick:function(){return Y(e.id)},className:d===e.id?"now":""},"en-us"==v.language?e.name_eng:e.name,a.createElement("div",{className:d===e.id?"liney w-full":"liney"}))})))),a.createElement("div",{className:"news-area-li clearfix"},a.createElement("div",{className:"clearfix news-list-box"},a.createElement("ul",{className:"w-full"},null===(e=null==k?void 0:k.rows)||void 0===e?void 0:e.map((function(e,t){return a.createElement(i.default,r({},e,{key:"latest_news_".concat(t)}))})))),a.createElement("div",{className:"index-news-btn"},a.createElement("div",{className:"left-btnbox"},m>1&&a.createElement("div",{className:"left-ar",onClick:function(){var e;(e=m-1)>0&&_(e)}},a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"60",height:"60",viewBox:"0 0 60 60"},a.createElement("g",{id:"left-ar-btn",transform:"translate(-80 -2699)"},a.createElement("g",{id:"Ellipse_20","data-name":"Ellipse 20",transform:"translate(80 2699)",fill:"none",stroke:"#4c8da7",strokeWidth:"2"},a.createElement("circle",{cx:"30",cy:"30",r:"30",stroke:"none"}),a.createElement("circle",{cx:"30",cy:"30",r:"29",fill:"none"})),a.createElement("g",{id:"Group_6920","data-name":"Group 6920",transform:"translate(104 2717)"},a.createElement("line",{id:"Line_162","data-name":"Line 162",x1:"12.06",y2:"12.06",fill:"none",stroke:"#4c8da7",strokeLinecap:"round",strokeWidth:"2"}),a.createElement("line",{id:"Line_163","data-name":"Line 163",x1:"12.06",y1:"12.06",transform:"translate(0 12.06)",fill:"none",stroke:"#4c8da7",strokeLinecap:"round",strokeWidth:"2"}))))),m<p&&a.createElement("div",{className:"right-ar",onClick:function(){var e;(e=m+1)>1&&m<p&&_(e)}},a.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"60",height:"60",viewBox:"0 0 60 60"},a.createElement("g",{id:"right-ar-btn",transform:"translate(-150 -2699)"},a.createElement("g",{id:"right-ar-btn-2","data-name":"right-ar-btn"},a.createElement("g",{id:"Ellipse_21","data-name":"Ellipse 21",transform:"translate(150 2699)",fill:"none",stroke:"#4c8da7",strokeWidth:"2"},a.createElement("circle",{cx:"30",cy:"30",r:"30",stroke:"none"}),a.createElement("circle",{cx:"30",cy:"30",r:"29",fill:"none"}))),a.createElement("g",{id:"Group_6919","data-name":"Group 6919",transform:"translate(-62.5 3.5)"},a.createElement("line",{id:"Line_162","data-name":"Line 162",x2:"12.06",y2:"12.06",transform:"translate(236.5 2713.5)",fill:"none",stroke:"#4c8da7",strokeLinecap:"round",strokeWidth:"2"}),a.createElement("line",{id:"Line_163","data-name":"Line 163",y1:"12.06",x2:"12.06",transform:"translate(236.5 2725.56)",fill:"none",stroke:"#4c8da7",strokeLinecap:"round",strokeWidth:"2"})))))),a.createElement(o.default,{label:"more NEWS",href:"/news?category=".concat(d)}))))}},3081:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(5298),a=n(6540);t.default=function(){return a.createElement("section",{className:"section-3-news"},a.createElement("div",{className:"bg-wave"},a.createElement("img",{src:"/static/image/bg-wave2.svg"})),a.createElement("div",{className:"float-leaf"},a.createElement("img",{src:"/static/image/leaf.png"})),a.createElement("div",{className:"flex-box"},a.createElement("div",{className:"left-news-box"},a.createElement(r.default,null)),a.createElement("div",{className:"right-animal-box"},a.createElement("div",{className:"base-box"},a.createElement("div",{className:"cir-yel"},a.createElement("img",{src:"/static/image/cir_yel.png"})),a.createElement("div",{className:"cir-blue"},a.createElement("img",{src:"/static/image/cir_blue.png"})),a.createElement("div",{className:"bg-cir"},a.createElement("img",{src:"/static/image/sec3-img-7.png"})),a.createElement("div",{className:"pic-trutle"},a.createElement("img",{src:"/static/image/sec3-img-4.png"})),a.createElement("div",{className:"pic-plant1"},a.createElement("img",{src:"/static/image/sec3-img-5.png"})),a.createElement("div",{className:"pic-plant2"},a.createElement("img",{src:"/static/image/sec3-img-6.png"})),a.createElement("div",{className:"pic-blue1"},a.createElement("img",{src:"/static/image/sec3-img-3.png"})),a.createElement("div",{className:"pic-snake"},a.createElement("img",{src:"/static/image/sec3-img-2.png"})),a.createElement("div",{className:"pic-plant3"},a.createElement("img",{src:"/static/image/sec3-img-1.png"}))))))}},1743:(e,t,n)=>{"use strict";Object.defineProperty(t,"__esModule",{value:!0});var r=n(6540),a=n(5158),i=n(3981);t.default=function(e){var t=(0,i.useTranslation)(),n=(t.t,t.i18n),s=e.img,o=e.title,u=e.count,l=e.CircleClassName,d=e.enTitle,c=e.tooltip;return r.createElement("li",null,r.createElement("div",{className:"titlebox"},r.createElement("div",{className:"cir_icon"},r.createElement("img",{src:s}),r.createElement("div",{className:l})),r.createElement("div",{className:"txtbox"},r.createElement("div",{className:"title"},r.createElement("h3",{className:"en-us"==n.language?"w-min-content":""},r.createElement(i.Trans,{i18nKey:o,components:[r.createElement("br",null)]})),c&&r.createElement("div",{className:"markq"},r.createElement("svg",{xmlns:"http://www.w3.org/2000/svg",width:"28",height:"28",viewBox:"0 0 28 28"},r.createElement("g",{id:"qs_mark",transform:"translate(-1536.736 -1209.631)"},r.createElement("g",{id:"Ellipse_8","data-name":"Ellipse 8",transform:"translate(1536.736 1209.631)",fill:"#fff",stroke:"#aaa",strokeWidth:"1"},r.createElement("circle",{cx:"14",cy:"14",r:"14",stroke:"none"}),r.createElement("circle",{cx:"14",cy:"14",r:"13.5",fill:"none"})),r.createElement("text",{id:"_","data-name":"?",transform:"translate(1545.736 1230.631)",fill:"#aaa",fontSize:"20",fontFamily:"Fredoka-Regular, Fredoka",letterSpacing:"0.05em"},r.createElement("tspan",{x:"0",y:"0"},"?")))),r.createElement("div",{className:"hvbubble ".concat("en-us"==n.language?"en-tooltip":"")},r.createElement("p",null,c)))),r.createElement("p",{className:"uppercase"},d))),r.createElement("div",{className:"numberbox"},(0,a.formatNumber)(u)))}},9774:function(e,t,n){"use strict";var r=this&&this.__assign||function(){return r=Object.assign||function(e){for(var t,n=1,r=arguments.length;n<r;n++)for(var a in t=arguments[n])Object.prototype.hasOwnProperty.call(t,a)&&(e[a]=t[a]);return e},r.apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a=n(6540),i=n(1743),s=n(2931),o=n(3981),u=[{img:"/static/image/ssicon01.svg",title:"收錄物種數",enTitle:a.createElement(o.Translation,null,(function(e){return a.createElement(a.Fragment,null,e("SPECIES AND"),a.createElement("br",null),e("INFRASPECIES"))})),count:0,type:"taxon",CircleClassName:"cir-line1",tooltip:a.createElement(o.Translation,null,(function(e){return a.createElement(a.Fragment,null,e("排除有種下分類群的種階層"))}))},{img:"/static/image/ssicon02.svg",title:"收錄學名數",enTitle:a.createElement(o.Translation,null,(function(e){return a.createElement(a.Fragment,null,e("SCIENTIFIC NAMES"))})),count:0,type:"name",CircleClassName:"cir-line2",tooltip:a.createElement(o.Translation,null,(function(e){return a.createElement(a.Fragment,null,e("包含種上階層學名"))}))},{img:"/static/image/ssicon03.svg",title:"收錄文獻數",enTitle:a.createElement(o.Translation,null,(function(e){return a.createElement(a.Fragment,null,e("REFERENCES"))})),count:0,type:"reference",CircleClassName:"cir-line1"}],l={"--tw":"50ch","--ad":"30s"},d={"--tw":"50ch","--ad":"30s"};t.default=function(){var e=a.useState([]),t=e[0],n=e[1];return a.useEffect((function(){fetch("".concat("https://api.taicol.tw/v2","/web/stat/index")).then((function(e){return e.json()})).then((function(e){n(e)}))}),[]),a.createElement("section",{className:"section-2-statistics"},a.createElement("div",{className:"maq-area"},a.createElement("div",{className:"marquee",style:l},a.createElement("span",null,"STATISTICS STATISTICS STATISTICS STATISTICS STATISTICS STATISTICS STATISTICS")),a.createElement("div",{className:"marquee marquee--long",style:d},a.createElement("span",null,"STATISTICS STATISTICS STATISTICS STATISTICS STATISTICS STATISTICS STATISTICS STATISTICS"))),a.createElement("div",{className:"flex-box"},a.createElement("div",{className:"left-box"},a.createElement("div",{className:"picbox"},a.createElement("img",{src:"/static/image/index-sechtion-2-island.png"}),a.createElement("div",{className:"cbig-hand"},a.createElement("img",{src:"/static/image/cancer01.png"})),a.createElement("div",{className:"cbig-hand2"},a.createElement("img",{src:"/static/image/cancer02.png"})))),a.createElement("div",{className:"right-box"},a.createElement("div",{className:"rel"},a.createElement("div",{className:"w-box"},a.createElement("ul",{className:"statis-3"},null==u?void 0:u.map((function(e,n){var s,o=t&&(null===(s=null==t?void 0:t.find((function(t){return t[0]===e.type})))||void 0===s?void 0:s[1])||0;return e.count=o,a.createElement(i.default,r({},e,{key:"taxon-count-".concat(n)}))}))),a.createElement(s.default,{label:"more statistics",href:"/statistics"}))))))}},4224:(e,t,n)=>{"use strict";var r=n(6540),a=n(6540),i=n(5880),s=n(2192),o=(0,a.lazy)((function(){return Promise.resolve().then((function(){return n(9774)}))})),u=(0,a.lazy)((function(){return Promise.resolve().then((function(){return n(3081)}))}));i.gsap.registerPlugin(s.ScrollTrigger),t.A=function(){return r.useEffect((function(){s.ScrollTrigger.create({trigger:".section-2-statistics",start:"top-=60%",toggleClass:"vivi",once:!0}),s.ScrollTrigger.create({trigger:".section-3-news",start:"top-=40% top",toggleClass:"vivi",once:!0})}),[]),r.createElement("div",null,r.createElement(a.Suspense,{fallback:r.createElement("div",null,"loading...")},r.createElement(o,null)),r.createElement(a.Suspense,{fallback:r.createElement("div",null,"loading...")},r.createElement(u,null)))}},5158:function(e,t){"use strict";var n=this&&this.__awaiter||function(e,t,n,r){return new(n||(n=Promise))((function(a,i){function s(e){try{u(r.next(e))}catch(e){i(e)}}function o(e){try{u(r.throw(e))}catch(e){i(e)}}function u(e){var t;e.done?a(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,o)}u((r=r.apply(e,t||[])).next())}))},r=this&&this.__generator||function(e,t){var n,r,a,i,s={label:0,sent:function(){if(1&a[0])throw a[1];return a[1]},trys:[],ops:[]};return i={next:o(0),throw:o(1),return:o(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function o(i){return function(o){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,r&&(a=2&i[0]?r.return:i[0]?r.throw||((a=r.return)&&a.call(r),0):r.next)&&!(a=a.call(r,i[1])).done)return a;switch(r=0,a&&(i=[2&i[0],a.value]),i[0]){case 0:case 1:a=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,r=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!((a=(a=s.trys).length>0&&a[a.length-1])||6!==i[0]&&2!==i[0])){s=0;continue}if(3===i[0]&&(!a||i[1]>a[0]&&i[1]<a[3])){s.label=i[1];break}if(6===i[0]&&s.label<a[1]){s.label=a[1],a=i;break}if(a&&s.label<a[2]){s.label=a[2],s.ops.push(i);break}a[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],r=0}finally{n=a=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,o])}}};Object.defineProperty(t,"__esModule",{value:!0}),t.replaceDomain=t.replaceIp=t.timeout=t.fetcher=t.getTotal=t.capitalize=t.shortDescription=t.formatNumber=void 0,t.formatNumber=function(e){return e.toString().replace(/(\d)(?=(\d{3})+(?!\d))/g,"$1,")},t.shortDescription=function(e,t){return e.replace(/(<([^>]+)>)/gi,"").substring(0,t)+(e.length>100?"...":"")},t.capitalize=function(e){return e?e[0].toUpperCase()+e.slice(1):""},t.getTotal=function(e){return e.reduce((function(e,t){return e+t[1]}),0)},t.fetcher=function(e,t){return n(this,void 0,void 0,(function(){return r(this,(function(n){switch(n.label){case 0:return[4,fetch(e,t)];case 1:return[2,n.sent().json()]}}))}))},t.timeout=function(e){return new Promise((function(t){return setTimeout(t,e)}))},t.replaceIp=function(e,t){return e.replace(/[a-zA-Z]{3,5}\:\/{2}[a-zA-Z0-9_.:-]+/g,t)},t.replaceDomain=function(e,t){return e.replace(/[a-zA-Z]{3,5}\:\/{2}[a-zA-Z0-9][a-zA-Z0-9-]{0,61}[a-zA-Z0-9](?:\.[a-zA-Z]{2,})+(:\d+)?/g,t)}},6077:e=>{e.exports=function(e){var t={};function n(r){if(t[r])return t[r].exports;var a=t[r]={i:r,l:!1,exports:{}};return e[r].call(a.exports,a,a.exports,n),a.l=!0,a.exports}return n.m=e,n.c=t,n.d=function(e,t,r){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:r})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var r=Object.create(null);if(n.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var a in e)n.d(r,a,function(t){return e[t]}.bind(null,a));return r},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=0)}([function(e,t,n){"use strict";n.r(t),n.d(t,"validateHTMLColorName",(function(){return s})),n.d(t,"validateHTMLColorSpecialName",(function(){return o})),n.d(t,"validateHTMLColorHex",(function(){return u})),n.d(t,"validateHTMLColorRgb",(function(){return l})),n.d(t,"validateHTMLColorHsl",(function(){return f})),n.d(t,"validateHTMLColorHwb",(function(){return m})),n.d(t,"validateHTMLColorLab",(function(){return _})),n.d(t,"validateHTMLColor",(function(){return h}));const r=e=>e&&"string"==typeof e,a=["AliceBlue","AntiqueWhite","Aqua","Aquamarine","Azure","Beige","Bisque","Black","BlanchedAlmond","Blue","BlueViolet","Brown","BurlyWood","CadetBlue","Chartreuse","Chocolate","Coral","CornflowerBlue","Cornsilk","Crimson","Cyan","DarkBlue","DarkCyan","DarkGoldenrod","DarkGray","DarkGreen","DarkKhaki","DarkMagenta","DarkOliveGreen","DarkOrange","DarkOrchid","DarkRed","DarkSalmon","DarkSeaGreen","DarkSlateBlue","DarkSlateGray","DarkTurquoise","DarkViolet","DeepPink","DeepSkyBlue","DimGray","DodgerBlue","FireBrick","FloralWhite","ForestGreen","Fuchsia","Gainsboro","GhostWhite","Gold","Goldenrod","Gray","Green","GreenYellow","HoneyDew","HotPink","IndianRed","Indigo","Ivory","Khaki","Lavender","LavenderBlush","LawnGreen","LemonChiffon","LightBlue","LightCoral","LightCyan","LightGoldenrodYellow","LightGray","LightGreen","LightPink","LightSalmon","LightSalmon","LightSeaGreen","LightSkyBlue","LightSlateGray","LightSteelBlue","LightYellow","Lime","LimeGreen","Linen","Magenta","Maroon","MediumAquamarine","MediumBlue","MediumOrchid","MediumPurple","MediumSeaGreen","MediumSlateBlue","MediumSlateBlue","MediumSpringGreen","MediumTurquoise","MediumVioletRed","MidnightBlue","MintCream","MistyRose","Moccasin","NavajoWhite","Navy","OldLace","Olive","OliveDrab","Orange","OrangeRed","Orchid","PaleGoldenrod","PaleGreen","PaleTurquoise","PaleVioletRed","PapayaWhip","PeachPuff","Peru","Pink","Plum","PowderBlue","Purple","RebeccaPurple","Red","RosyBrown","RoyalBlue","SaddleBrown","Salmon","SandyBrown","SeaGreen","SeaShell","Sienna","Silver","SkyBlue","SlateBlue","SlateGray","Snow","SpringGreen","SteelBlue","Tan","Teal","Thistle","Tomato","Turquoise","Violet","Wheat","White","WhiteSmoke","Yellow","YellowGreen"],i=["currentColor","inherit","transparent"],s=e=>{let t=!1;return r(e)&&a.map((n=>(e.toLowerCase()===n.toLowerCase()&&(t=!0),null))),t},o=e=>{let t=!1;return r(e)&&i.map((n=>(e.toLowerCase()===n.toLowerCase()&&(t=!0),null))),t},u=e=>{if(r(e))return e&&/^#([\da-f]{3}){1,2}$|^#([\da-f]{4}){1,2}$/i.test(e)},l=e=>{if(r(e))return e&&/(rgb)a?\((\s*\d+%?\s*?,?\s*){2}(\s*\d+%?\s*?,?\s*\)?)(\s*,?\s*\/?\s*(0?\.?\d+%?\s*)?|1|0)?\)$/i.test(e)},d="(([0-9]|[1-9][0-9]|100)%)",c=`\\s*?\\)?)(\\s*?(\\/?)\\s+(((${d}))|(0?(\\.\\d+)?)|1))?\\s*?\\)$`,f=e=>{if(r(e)){const t=new RegExp(`(hsl)a?\\((\\s*?((-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)|(([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-9][0-9]|400)gra)|((([0-5])?\\.\\d+|6\\.([0-9]|1[0-9]|2[0-8])|[0-6])rad)|((0?(\\.\\d+)?|1)turn))((\\s*,\\s*)|(\\s+)))(\\s*?(0|${d})((\\s*,\\s*)|(\\s+)))(\\s*?(0|${d})\\s*?\\)?)(\\s*?(\\/?|,?)\\s*?(((${d}))|(0?(\\.\\d+)?)|1))?\\)$`);return e&&t.test(e)}},m=e=>{if(r(e)){const t=new RegExp(`(hwb\\(\\s*?(-?([0-9]|[1-9][0-9]|1[0-9][0-9]|2[0-9][0-9]|3[0-5][0-9]|360)(deg)?)\\s+)((0|${d})\\s+)((0|${d})${c}`);return e&&t.test(e)}},_=e=>{if(r(e)){const t="(-?(([0-9]|[1-9][0-9]|1[0-5][0-9])(\\.\\d+)??|160))",n=new RegExp(`(lab\\(\\s*?((\\d*(\\.\\d+)?)%)\\s+${t}\\s+${t}${c}`);return e&&n.test(e)}},h=e=>!!(e&&u(e)||l(e)||f(e)||m(e)||_(e));t.default=e=>!!(e&&u(e)||s(e)||o(e)||l(e)||f(e)||m(e)||_(e))}])},4915:e=>{e.exports={area:!0,base:!0,br:!0,col:!0,embed:!0,hr:!0,img:!0,input:!0,link:!0,meta:!0,param:!0,source:!0,track:!0,wbr:!0}},6369:(e,t,n)=>{"use strict";function r(e){if(Array.isArray(e))return e}n.d(t,{A:()=>r})},3029:(e,t,n)=>{"use strict";function r(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}n.d(t,{A:()=>r})},2901:(e,t,n)=>{"use strict";n.d(t,{A:()=>i});var r=n(816);function a(e,t){for(var n=0;n<t.length;n++){var a=t[n];a.enumerable=a.enumerable||!1,a.configurable=!0,"value"in a&&(a.writable=!0),Object.defineProperty(e,(0,r.A)(a.key),a)}}function i(e,t,n){return t&&a(e.prototype,t),n&&a(e,n),Object.defineProperty(e,"prototype",{writable:!1}),e}},4467:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(816);function a(e,t,n){return(t=(0,r.A)(t))in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}},6562:(e,t,n)=>{"use strict";function r(){throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.")}n.d(t,{A:()=>r})},8587:(e,t,n)=>{"use strict";function r(e,t){if(null==e)return{};var n={};for(var r in e)if({}.hasOwnProperty.call(e,r)){if(t.includes(r))continue;n[r]=e[r]}return n}n.d(t,{A:()=>r})},816:(e,t,n)=>{"use strict";n.d(t,{A:()=>a});var r=n(2284);function a(e){var t=function(e){if("object"!=(0,r.A)(e)||!e)return e;var t=e[Symbol.toPrimitive];if(void 0!==t){var n=t.call(e,"string");if("object"!=(0,r.A)(n))return n;throw new TypeError("@@toPrimitive must return a primitive value.")}return String(e)}(e);return"symbol"==(0,r.A)(t)?t:t+""}},2284:(e,t,n)=>{"use strict";function r(e){return r="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e},r(e)}n.d(t,{A:()=>r})},8394:(e,t,n)=>{"use strict";function r(e,t){(null==t||t>e.length)&&(t=e.length);for(var n=0,r=Array(t);n<t;n++)r[n]=e[n];return r}function a(e,t){if(e){if("string"==typeof e)return r(e,t);var n={}.toString.call(e).slice(8,-1);return"Object"===n&&e.constructor&&(n=e.constructor.name),"Map"===n||"Set"===n?Array.from(e):"Arguments"===n||/^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)?r(e,t):void 0}}n.d(t,{A:()=>a})},3981:(e,t,n)=>{"use strict";n.r(t),n.d(t,{I18nContext:()=>K,I18nextProvider:()=>ye,Trans:()=>ne,TransWithoutContext:()=>B,Translation:()=>pe,composeInitialProps:()=>X,date:()=>ke,getDefaults:()=>P,getI18n:()=>C,getInitialProps:()=>Z,initReactI18next:()=>G,number:()=>Ye,plural:()=>De,select:()=>we,selectOrdinal:()=>Te,setDefaults:()=>j,setI18n:()=>H,time:()=>be,useSSR:()=>ge,useTranslation:()=>de,withSSR:()=>Le,withTranslation:()=>_e});var r=n(4467),a=n(8587);function i(e,t){if(null==e)return{};var n,r,i=(0,a.A)(e,t);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(e);for(r=0;r<s.length;r++)n=s[r],t.includes(n)||{}.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var s=n(6540),o=n(2284),u=n(4915),l=n.n(u),d=/\s([^'"/\s><]+?)[\s/>]|([^\s=]+)=\s?(".*?"|'.*?')/g;function c(e){var t={type:"tag",name:"",voidElement:!1,attrs:{},children:[]},n=e.match(/<\/?([^\s]+?)[/\s>]/);if(n&&(t.name=n[1],(l()[n[1]]||"/"===e.charAt(e.length-2))&&(t.voidElement=!0),t.name.startsWith("!--"))){var r=e.indexOf("--\x3e");return{type:"comment",comment:-1!==r?e.slice(4,r):""}}for(var a=new RegExp(d),i=null;null!==(i=a.exec(e));)if(i[0].trim())if(i[1]){var s=i[1].trim(),o=[s,""];s.indexOf("=")>-1&&(o=s.split("=")),t.attrs[o[0]]=o[1],a.lastIndex--}else i[2]&&(t.attrs[i[2]]=i[3].trim().substring(1,i[3].length-1));return t}var f=/<[a-zA-Z0-9\-\!\/](?:"[^"]*"|'[^']*'|[^'">])*>/g,m=/^\s*$/,_=Object.create(null);function h(e,t){switch(t.type){case"text":return e+t.content;case"tag":return e+="<"+t.name+(t.attrs?function(e){var t=[];for(var n in e)t.push(n+'="'+e[n]+'"');return t.length?" "+t.join(" "):""}(t.attrs):"")+(t.voidElement?"/>":">"),t.voidElement?e:e+t.children.reduce(h,"")+"</"+t.name+">";case"comment":return e+"\x3c!--"+t.comment+"--\x3e"}}var p={parse:function(e,t){t||(t={}),t.components||(t.components=_);var n,r=[],a=[],i=-1,s=!1;if(0!==e.indexOf("<")){var o=e.indexOf("<");r.push({type:"text",content:-1===o?e:e.substring(0,o)})}return e.replace(f,(function(o,u){if(s){if(o!=="</"+n.name+">")return;s=!1}var l,d="/"!==o.charAt(1),f=o.startsWith("\x3c!--"),_=u+o.length,h=e.charAt(_);if(f){var p=c(o);return i<0?(r.push(p),r):((l=a[i]).children.push(p),r)}if(d&&(i++,"tag"===(n=c(o)).type&&t.components[n.name]&&(n.type="component",s=!0),n.voidElement||s||!h||"<"===h||n.children.push({type:"text",content:e.slice(_,e.indexOf("<",_))}),0===i&&r.push(n),(l=a[i-1])&&l.children.push(n),a[i]=n),(!d||n.voidElement)&&(i>-1&&(n.voidElement||n.name===o.slice(2,-1))&&(i--,n=-1===i?r:a[i]),!s&&"<"!==h&&h)){l=-1===i?r:a[i].children;var y=e.indexOf("<",_),g=e.slice(_,-1===y?void 0:y);m.test(g)&&(g=" "),(y>-1&&i+l.length>=0||" "!==g)&&l.push({type:"text",content:g})}})),r},stringify:function(e){return e.reduce((function(e,t){return e+h("",t)}),"")}};const y=p;function g(){if(console&&console.warn){for(var e,t=arguments.length,n=new Array(t),r=0;r<t;r++)n[r]=arguments[r];"string"==typeof n[0]&&(n[0]="react-i18next:: ".concat(n[0])),(e=console).warn.apply(e,n)}}var v={};function M(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];"string"==typeof t[0]&&v[t[0]]||("string"==typeof t[0]&&(v[t[0]]=new Date),g.apply(void 0,t))}var L=function(e,t){return function(){e.isInitialized?t():e.on("initialized",(function n(){setTimeout((function(){e.off("initialized",n)}),0),t()}))}};function k(e,t,n){e.loadNamespaces(t,L(e,n))}function b(e,t,n,r){"string"==typeof n&&(n=[n]),n.forEach((function(t){e.options.ns.indexOf(t)<0&&e.options.ns.push(t)})),e.loadLanguages(t,L(e,r))}function Y(e){return e.displayName||e.name||("string"==typeof e&&e.length>0?e:"Unknown")}var w=/&(?:amp|#38|lt|#60|gt|#62|apos|#39|quot|#34|nbsp|#160|copy|#169|reg|#174|hellip|#8230|#x2F|#47);/g,D={"&amp;":"&","&#38;":"&","&lt;":"<","&#60;":"<","&gt;":">","&#62;":">","&apos;":"'","&#39;":"'","&quot;":'"',"&#34;":'"',"&nbsp;":" ","&#160;":" ","&copy;":"©","&#169;":"©","&reg;":"®","&#174;":"®","&hellip;":"…","&#8230;":"…","&#x2F;":"/","&#47;":"/"},T=function(e){return D[e]};function S(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function x(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?S(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):S(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var O,E={bindI18n:"languageChanged",bindI18nStore:"",transEmptyNodeValue:"",transSupportBasicHtmlNodes:!0,transWrapTextNodes:"",transKeepBasicHtmlNodesFor:["br","strong","i","p"],useSuspense:!0,unescape:function(e){return e.replace(w,T)}};function j(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};E=x(x({},E),e)}function P(){return E}function H(e){O=e}function C(){return O}var A=["format"],N=["children","count","parent","i18nKey","context","tOptions","values","defaults","components","ns","i18n","t","shouldUnescape"];function R(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?R(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):R(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function z(e,t){if(!e)return!1;var n=e.props?e.props.children:e.children;return t?n.length>0:!!n}function W(e){return e?e.props?e.props.children:e.children:[]}function I(e){return Array.isArray(e)?e:[e]}function U(e,t){if(!e)return"";var n="",r=I(e),a=t.transSupportBasicHtmlNodes&&t.transKeepBasicHtmlNodesFor?t.transKeepBasicHtmlNodesFor:[];return r.forEach((function(e,r){if("string"==typeof e)n+="".concat(e);else if((0,s.isValidElement)(e)){var u=Object.keys(e.props).length,l=a.indexOf(e.type)>-1,d=e.props.children;if(!d&&l&&0===u)n+="<".concat(e.type,"/>");else if(d||l&&0===u)if(e.props.i18nIsDynamicList)n+="<".concat(r,"></").concat(r,">");else if(l&&1===u&&"string"==typeof d)n+="<".concat(e.type,">").concat(d,"</").concat(e.type,">");else{var c=U(d,t);n+="<".concat(r,">").concat(c,"</").concat(r,">")}else n+="<".concat(r,"></").concat(r,">")}else if(null===e)g("Trans: the passed in value is invalid - seems you passed in a null child.");else if("object"===(0,o.A)(e)){var f=e.format,m=i(e,A),_=Object.keys(m);if(1===_.length){var h=f?"".concat(_[0],", ").concat(f):_[0];n+="{{".concat(h,"}}")}else g("react-i18next: the passed in object contained more than one variable - the object should look like {{ value, format }} where format is optional.",e)}else g("Trans: the passed in value is invalid - seems you passed in a variable like {number} - please pass in variables for interpolation as full objects like {{number}}.",e)})),n}function B(e){var t=e.children,n=e.count,r=e.parent,a=e.i18nKey,u=e.context,l=e.tOptions,d=void 0===l?{}:l,c=e.values,f=e.defaults,m=e.components,_=e.ns,h=e.i18n,p=e.t,g=e.shouldUnescape,v=i(e,N),L=h||C();if(!L)return M("You will need to pass in an i18next instance by using i18nextReactModule"),t;var k=p||L.t.bind(L)||function(e){return e};u&&(d.context=u);var b=F(F({},P()),L.options&&L.options.react),Y=_||k.ns||L.options&&L.options.defaultNS;Y="string"==typeof Y?[Y]:Y||["translation"];var w=f||U(t,b)||b.transEmptyNodeValue||a,D=b.hashTransKey,T=a||(D?D(w):w),S=c?d.interpolation:{interpolation:F(F({},d.interpolation),{},{prefix:"#$?",suffix:"?$#"})},x=F(F(F(F({},d),{},{count:n},c),S),{},{defaultValue:w,ns:Y}),O=function(e,t,n,r,a,i){if(""===t)return[];var u=r.transKeepBasicHtmlNodesFor||[],l=t&&new RegExp(u.join("|")).test(t);if(!e&&!l)return[t];var d={};!function e(t){I(t).forEach((function(t){"string"!=typeof t&&(z(t)?e(W(t)):"object"!==(0,o.A)(t)||(0,s.isValidElement)(t)||Object.assign(d,t))}))}(e);var c=y.parse("<0>".concat(t,"</0>")),f=F(F({},d),a);function m(e,t,n){var r=W(e),a=h(r,t.children,n);return function(e){return"[object Array]"===Object.prototype.toString.call(e)&&e.every((function(e){return(0,s.isValidElement)(e)}))}(r)&&0===a.length?r:a}function _(e,t,n,r,a){e.dummy&&(e.children=t),n.push((0,s.cloneElement)(e,F(F({},e.props),{},{key:r}),a?void 0:t))}function h(t,a,d){var c=I(t);return I(a).reduce((function(t,a,p){var y,g,v,M=a.children&&a.children[0]&&a.children[0].content&&n.services.interpolator.interpolate(a.children[0].content,f,n.language);if("tag"===a.type){var L=c[parseInt(a.name,10)];!L&&1===d.length&&d[0][a.name]&&(L=d[0][a.name]),L||(L={});var k=0!==Object.keys(a.attrs).length?(y={props:a.attrs},(v=F({},g=L)).props=Object.assign(y.props,g.props),v):L,b=(0,s.isValidElement)(k),Y=b&&z(a,!0)&&!a.voidElement,w=l&&"object"===(0,o.A)(k)&&k.dummy&&!b,D="object"===(0,o.A)(e)&&null!==e&&Object.hasOwnProperty.call(e,a.name);if("string"==typeof k){var T=n.services.interpolator.interpolate(k,f,n.language);t.push(T)}else if(z(k)||Y)_(k,m(k,a,d),t,p);else if(w){var S=h(c,a.children,d);t.push((0,s.cloneElement)(k,F(F({},k.props),{},{key:p}),S))}else if(Number.isNaN(parseFloat(a.name)))if(D)_(k,m(k,a,d),t,p,a.voidElement);else if(r.transSupportBasicHtmlNodes&&u.indexOf(a.name)>-1)if(a.voidElement)t.push((0,s.createElement)(a.name,{key:"".concat(a.name,"-").concat(p)}));else{var x=h(c,a.children,d);t.push((0,s.createElement)(a.name,{key:"".concat(a.name,"-").concat(p)},x))}else if(a.voidElement)t.push("<".concat(a.name," />"));else{var O=h(c,a.children,d);t.push("<".concat(a.name,">").concat(O,"</").concat(a.name,">"))}else if("object"!==(0,o.A)(k)||b)1===a.children.length&&M?t.push((0,s.cloneElement)(k,F(F({},k.props),{},{key:p}),M)):t.push((0,s.cloneElement)(k,F(F({},k.props),{},{key:p})));else{var E=a.children[0]?M:null;E&&t.push(E)}}else if("text"===a.type){var j=r.transWrapTextNodes,P=i?r.unescape(n.services.interpolator.interpolate(a.content,f,n.language)):n.services.interpolator.interpolate(a.content,f,n.language);j?t.push((0,s.createElement)(j,{key:"".concat(a.name,"-").concat(p)},P)):t.push(P)}return t}),[])}return W(h([{dummy:!0,children:e||[]}],c,I(e||[]))[0])}(m||t,T?k(T,x):w,L,b,x,g),E=void 0!==r?r:b.defaultTransParent;return E?(0,s.createElement)(E,v,O):O}var V=n(3029),J=n(2901),G={type:"3rdParty",init:function(e){j(e.options.react),H(e)}};function q(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function $(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?q(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):q(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var K=(0,s.createContext)(),Q=function(){function e(){(0,V.A)(this,e),this.usedNamespaces={}}return(0,J.A)(e,[{key:"addUsedNamespaces",value:function(e){var t=this;e.forEach((function(e){t.usedNamespaces[e]||(t.usedNamespaces[e]=!0)}))}},{key:"getUsedNamespaces",value:function(){return Object.keys(this.usedNamespaces)}}]),e}();function X(e){return function(t){return new Promise((function(n){var r=Z();e.getInitialProps?e.getInitialProps(t).then((function(e){n($($({},e),r))})):n(r)}))}}function Z(){var e=C(),t=e.reportNamespaces?e.reportNamespaces.getUsedNamespaces():[],n={},r={};return e.languages.forEach((function(n){r[n]={},t.forEach((function(t){r[n][t]=e.getResourceBundle(n,t)||{}}))})),n.initialI18nStore=r,n.initialLanguage=e.language,n}var ee=["children","count","parent","i18nKey","context","tOptions","values","defaults","components","ns","i18n","t","shouldUnescape"];function te(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ne(e){var t=e.children,n=e.count,a=e.parent,o=e.i18nKey,u=e.context,l=e.tOptions,d=void 0===l?{}:l,c=e.values,f=e.defaults,m=e.components,_=e.ns,h=e.i18n,p=e.t,y=e.shouldUnescape,g=i(e,ee),v=(0,s.useContext)(K)||{},M=v.i18n,L=v.defaultNS,k=h||M||C(),b=p||k&&k.t.bind(k);return B(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?te(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):te(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({children:t,count:n,parent:a,i18nKey:o,context:u,tOptions:d,values:c,defaults:f,components:m,ns:_||b&&b.ns||L||k&&k.options&&k.options.defaultNS,i18n:k,t:p,shouldUnescape:y},g))}var re=n(6369),ae=n(8394),ie=n(6562);function se(e,t){return(0,re.A)(e)||function(e,t){var n=null==e?null:"undefined"!=typeof Symbol&&e[Symbol.iterator]||e["@@iterator"];if(null!=n){var r,a,i,s,o=[],u=!0,l=!1;try{if(i=(n=n.call(e)).next,0===t){if(Object(n)!==n)return;u=!1}else for(;!(u=(r=i.call(n)).done)&&(o.push(r.value),o.length!==t);u=!0);}catch(e){l=!0,a=e}finally{try{if(!u&&null!=n.return&&(s=n.return(),Object(s)!==s))return}finally{if(l)throw a}}return o}}(e,t)||(0,ae.A)(e,t)||(0,ie.A)()}function oe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ue(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?oe(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):oe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var le=function(e,t){var n=(0,s.useRef)();return(0,s.useEffect)((function(){n.current=t?n.current:e}),[e,t]),n.current};function de(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=t.i18n,r=(0,s.useContext)(K)||{},a=r.i18n,i=r.defaultNS,u=n||a||C();if(u&&!u.reportNamespaces&&(u.reportNamespaces=new Q),!u){M("You will need to pass in an i18next instance by using initReactI18next");var l=function(e,t){return"string"==typeof t?t:t&&"object"===(0,o.A)(t)&&"string"==typeof t.defaultValue?t.defaultValue:Array.isArray(e)?e[e.length-1]:e},d=[l,{},!1];return d.t=l,d.i18n={},d.ready=!1,d}u.options.react&&void 0!==u.options.react.wait&&M("It seems you are still using the old wait option, you may migrate to the new useSuspense behaviour.");var c=ue(ue(ue({},P()),u.options.react),t),f=c.useSuspense,m=c.keyPrefix,_=e||i||u.options&&u.options.defaultNS;_="string"==typeof _?[_]:_||["translation"],u.reportNamespaces.addUsedNamespaces&&u.reportNamespaces.addUsedNamespaces(_);var h=(u.isInitialized||u.initializedStoreOnce)&&_.every((function(e){return function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return t.languages&&t.languages.length?void 0!==t.options.ignoreJSONStructure?t.hasLoadedNamespace(e,{lng:n.lng,precheck:function(t,r){if(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&t.services.backendConnector.backend&&t.isLanguageChangingTo&&!r(t.isLanguageChangingTo,e))return!1}}):function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=t.languages[0],a=!!t.options&&t.options.fallbackLng,i=t.languages[t.languages.length-1];if("cimode"===r.toLowerCase())return!0;var s=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};return!(n.bindI18n&&n.bindI18n.indexOf("languageChanging")>-1&&t.services.backendConnector.backend&&t.isLanguageChangingTo&&!s(t.isLanguageChangingTo,e)||!t.hasResourceBundle(r,e)&&t.services.backendConnector.backend&&(!t.options.resources||t.options.partialBundledLanguages)&&(!s(r,e)||a&&!s(i,e)))}(e,t,n):(M("i18n.languages were undefined or empty",t.languages),!0)}(e,u,c)}));function p(){return u.getFixedT(t.lng||null,"fallback"===c.nsMode?_:_[0],m)}var y=se((0,s.useState)(p),2),g=y[0],v=y[1],L=_.join();t.lng&&(L="".concat(t.lng).concat(L));var Y=le(L),w=(0,s.useRef)(!0);(0,s.useEffect)((function(){var e=c.bindI18n,n=c.bindI18nStore;function r(){w.current&&v(p)}return w.current=!0,h||f||(t.lng?b(u,t.lng,_,(function(){w.current&&v(p)})):k(u,_,(function(){w.current&&v(p)}))),h&&Y&&Y!==L&&w.current&&v(p),e&&u&&u.on(e,r),n&&u&&u.store.on(n,r),function(){w.current=!1,e&&u&&e.split(" ").forEach((function(e){return u.off(e,r)})),n&&u&&n.split(" ").forEach((function(e){return u.store.off(e,r)}))}}),[u,L]);var D=(0,s.useRef)(!0);(0,s.useEffect)((function(){w.current&&!D.current&&v(p),D.current=!1}),[u,m]);var T=[g,u,h];if(T.t=g,T.i18n=u,T.ready=h,h)return T;if(!h&&!f)return T;throw new Promise((function(e){t.lng?b(u,t.lng,_,(function(){return e()})):k(u,_,(function(){return e()}))}))}var ce=["forwardedRef"];function fe(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function me(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?fe(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):fe(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function _e(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return function(n){function r(r){var a=r.forwardedRef,o=i(r,ce),u=se(de(e,me(me({},o),{},{keyPrefix:t.keyPrefix})),3),l=u[0],d=u[1],c=u[2],f=me(me({},o),{},{t:l,i18n:d,tReady:c});return t.withRef&&a?f.ref=a:!t.withRef&&a&&(f.forwardedRef=a),(0,s.createElement)(n,f)}return r.displayName="withI18nextTranslation(".concat(Y(n),")"),r.WrappedComponent=n,t.withRef?(0,s.forwardRef)((function(e,t){return(0,s.createElement)(r,Object.assign({},e,{forwardedRef:t}))})):r}}var he=["ns","children"];function pe(e){var t=e.ns,n=e.children,r=se(de(t,i(e,he)),3),a=r[0],s=r[1],o=r[2];return n(a,{i18n:s,lng:s.language},o)}function ye(e){var t=e.i18n,n=e.defaultNS,r=e.children,a=(0,s.useMemo)((function(){return{i18n:t,defaultNS:n}}),[t,n]);return(0,s.createElement)(K.Provider,{value:a},r)}function ge(e,t){var n=(arguments.length>2&&void 0!==arguments[2]?arguments[2]:{}).i18n,r=((0,s.useContext)(K)||{}).i18n,a=n||r||C();a.options&&a.options.isClone||(e&&!a.initializedStoreOnce&&(a.services.resourceStore.data=e,a.options.ns=Object.values(e).reduce((function(e,t){return Object.keys(t).forEach((function(t){e.indexOf(t)<0&&e.push(t)})),e}),a.options.ns),a.initializedStoreOnce=!0,a.isInitialized=!0),t&&!a.initializedLanguageOnce&&(a.changeLanguage(t),a.initializedLanguageOnce=!0))}var ve=["initialI18nStore","initialLanguage"];function Me(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function Le(){return function(e){function t(t){var n=t.initialI18nStore,a=t.initialLanguage,o=i(t,ve);return ge(n,a),(0,s.createElement)(e,function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Me(Object(n),!0).forEach((function(t){(0,r.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Me(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}({},o))}return t.getInitialProps=X(e),t.displayName="withI18nextSSR(".concat(Y(e),")"),t.WrappedComponent=e,t}}var ke=function(){return""},be=function(){return""},Ye=function(){return""},we=function(){return""},De=function(){return""},Te=function(){return""}}},t={};function n(r){var a=t[r];if(void 0!==a)return a.exports;var i=t[r]={id:r,loaded:!1,exports:{}};return e[r].call(i.exports,i,i.exports,n),i.loaded=!0,i.exports}n.n=e=>{var t=e&&e.__esModule?()=>e.default:()=>e;return n.d(t,{a:t}),t},n.d=(e,t)=>{for(var r in t)n.o(t,r)&&!n.o(e,r)&&Object.defineProperty(e,r,{enumerable:!0,get:t[r]})},n.o=(e,t)=>Object.prototype.hasOwnProperty.call(e,t),n.r=e=>{"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.nmd=e=>(e.paths=[],e.children||(e.children=[]),e),(()=>{"use strict";var e=n(6540),t=n(961),r=n(4224),a=n(7716),i=n(2284),s=n(3029),o=n(2901);function u(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function l(e,t){return l=Object.setPrototypeOf?Object.setPrototypeOf.bind():function(e,t){return e.__proto__=t,e},l(e,t)}function d(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),Object.defineProperty(e,"prototype",{writable:!1}),t&&l(e,t)}function c(e,t){if(t&&("object"==(0,i.A)(t)||"function"==typeof t))return t;if(void 0!==t)throw new TypeError("Derived constructors may only return object or undefined");return u(e)}function f(e){return f=Object.setPrototypeOf?Object.getPrototypeOf.bind():function(e){return e.__proto__||Object.getPrototypeOf(e)},f(e)}var m=n(4467),_=n(6369),h=n(8394),p=n(6562);function y(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function g(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?y(Object(n),!0).forEach((function(t){(0,m.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):y(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var v={type:"logger",log:function(e){this.output("log",e)},warn:function(e){this.output("warn",e)},error:function(e){this.output("error",e)},output:function(e,t){console&&console[e]&&console[e].apply(console,t)}},M=new(function(){function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,s.A)(this,e),this.init(t,n)}return(0,o.A)(e,[{key:"init",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};this.prefix=t.prefix||"i18next:",this.logger=e||v,this.options=t,this.debug=t.debug}},{key:"setDebug",value:function(e){this.debug=e}},{key:"log",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"log","",!0)}},{key:"warn",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","",!0)}},{key:"error",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"error","")}},{key:"deprecate",value:function(){for(var e=arguments.length,t=new Array(e),n=0;n<e;n++)t[n]=arguments[n];return this.forward(t,"warn","WARNING DEPRECATED: ",!0)}},{key:"forward",value:function(e,t,n,r){return r&&!this.debug?null:("string"==typeof e[0]&&(e[0]="".concat(n).concat(this.prefix," ").concat(e[0])),this.logger[t](e))}},{key:"create",value:function(t){return new e(this.logger,g(g({},{prefix:"".concat(this.prefix,":").concat(t,":")}),this.options))}},{key:"clone",value:function(t){return(t=t||this.options).prefix=t.prefix||this.prefix,new e(this.logger,t)}}]),e}()),L=function(){function e(){(0,s.A)(this,e),this.observers={}}return(0,o.A)(e,[{key:"on",value:function(e,t){var n=this;return e.split(" ").forEach((function(e){n.observers[e]=n.observers[e]||[],n.observers[e].push(t)})),this}},{key:"off",value:function(e,t){this.observers[e]&&(t?this.observers[e]=this.observers[e].filter((function(e){return e!==t})):delete this.observers[e])}},{key:"emit",value:function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];this.observers[e]&&[].concat(this.observers[e]).forEach((function(e){e.apply(void 0,n)})),this.observers["*"]&&[].concat(this.observers["*"]).forEach((function(t){t.apply(t,[e].concat(n))}))}}]),e}();function k(){var e,t,n=new Promise((function(n,r){e=n,t=r}));return n.resolve=e,n.reject=t,n}function b(e){return null==e?"":""+e}function Y(e,t,n){function r(e){return e&&e.indexOf("###")>-1?e.replace(/###/g,"."):e}function a(){return!e||"string"==typeof e}for(var i="string"!=typeof t?[].concat(t):t.split(".");i.length>1;){if(a())return{};var s=r(i.shift());!e[s]&&n&&(e[s]=new n),e=Object.prototype.hasOwnProperty.call(e,s)?e[s]:{}}return a()?{}:{obj:e,k:r(i.shift())}}function w(e,t,n){var r=Y(e,t,Object);r.obj[r.k]=n}function D(e,t){var n=Y(e,t),r=n.obj,a=n.k;if(r)return r[a]}function T(e,t,n){for(var r in t)"__proto__"!==r&&"constructor"!==r&&(r in e?"string"==typeof e[r]||e[r]instanceof String||"string"==typeof t[r]||t[r]instanceof String?n&&(e[r]=t[r]):T(e[r],t[r],n):e[r]=t[r]);return e}function S(e){return e.replace(/[\-\[\]\/\{\}\(\)\*\+\?\.\\\^\$\|]/g,"\\$&")}var x={"&":"&amp;","<":"&lt;",">":"&gt;",'"':"&quot;","'":"&#39;","/":"&#x2F;"};function O(e){return"string"==typeof e?e.replace(/[&<>"'\/]/g,(function(e){return x[e]})):e}var E="undefined"!=typeof window&&window.navigator&&void 0===window.navigator.userAgentData&&window.navigator.userAgent&&window.navigator.userAgent.indexOf("MSIE")>-1,j=[" ",",","?","!",";"];function P(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:".";if(e){if(e[t])return e[t];for(var r=t.split(n),a=e,i=0;i<r.length;++i){if(!a)return;if("string"==typeof a[r[i]]&&i+1<r.length)return;if(void 0===a[r[i]]){for(var s=2,o=r.slice(i,i+s).join(n),u=a[o];void 0===u&&r.length>i+s;)s++,u=a[o=r.slice(i,i+s).join(n)];if(void 0===u)return;if(null===u)return null;if(t.endsWith(o)){if("string"==typeof u)return u;if(o&&"string"==typeof u[o])return u[o]}var l=r.slice(i+s).join(n);return l?P(u,l,n):void 0}a=a[r[i]]}return a}}function H(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function C(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?H(Object(n),!0).forEach((function(t){(0,m.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):H(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var A=function(e){d(a,e);var t,n,r=(t=a,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=f(t);if(n){var a=f(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return c(this,e)});function a(e){var t,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{ns:["translation"],defaultNS:"translation"};return(0,s.A)(this,a),t=r.call(this),E&&L.call(u(t)),t.data=e||{},t.options=n,void 0===t.options.keySeparator&&(t.options.keySeparator="."),void 0===t.options.ignoreJSONStructure&&(t.options.ignoreJSONStructure=!0),t}return(0,o.A)(a,[{key:"addNamespaces",value:function(e){this.options.ns.indexOf(e)<0&&this.options.ns.push(e)}},{key:"removeNamespaces",value:function(e){var t=this.options.ns.indexOf(e);t>-1&&this.options.ns.splice(t,1)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{},a=void 0!==r.keySeparator?r.keySeparator:this.options.keySeparator,i=void 0!==r.ignoreJSONStructure?r.ignoreJSONStructure:this.options.ignoreJSONStructure,s=[e,t];n&&"string"!=typeof n&&(s=s.concat(n)),n&&"string"==typeof n&&(s=s.concat(a?n.split(a):n)),e.indexOf(".")>-1&&(s=e.split("."));var o=D(this.data,s);return o||!i||"string"!=typeof n?o:P(this.data&&this.data[e]&&this.data[e][t],n,a)}},{key:"addResource",value:function(e,t,n,r){var a=arguments.length>4&&void 0!==arguments[4]?arguments[4]:{silent:!1},i=void 0!==a.keySeparator?a.keySeparator:this.options.keySeparator,s=[e,t];n&&(s=s.concat(i?n.split(i):n)),e.indexOf(".")>-1&&(r=t,t=(s=e.split("."))[1]),this.addNamespaces(t),w(this.data,s,r),a.silent||this.emit("added",e,t,n,r)}},{key:"addResources",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{silent:!1};for(var a in n)"string"!=typeof n[a]&&"[object Array]"!==Object.prototype.toString.apply(n[a])||this.addResource(e,t,a,n[a],{silent:!0});r.silent||this.emit("added",e,t,n)}},{key:"addResourceBundle",value:function(e,t,n,r,a){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{silent:!1},s=[e,t];e.indexOf(".")>-1&&(r=n,n=t,t=(s=e.split("."))[1]),this.addNamespaces(t);var o=D(this.data,s)||{};r?T(o,n,a):o=C(C({},o),n),w(this.data,s,o),i.silent||this.emit("added",e,t,n)}},{key:"removeResourceBundle",value:function(e,t){this.hasResourceBundle(e,t)&&delete this.data[e][t],this.removeNamespaces(t),this.emit("removed",e,t)}},{key:"hasResourceBundle",value:function(e,t){return void 0!==this.getResource(e,t)}},{key:"getResourceBundle",value:function(e,t){return t||(t=this.options.defaultNS),"v1"===this.options.compatibilityAPI?C(C({},{}),this.getResource(e,t)):this.getResource(e,t)}},{key:"getDataByLanguage",value:function(e){return this.data[e]}},{key:"hasLanguageSomeTranslations",value:function(e){var t=this.getDataByLanguage(e);return!!(t&&Object.keys(t)||[]).find((function(e){return t[e]&&Object.keys(t[e]).length>0}))}},{key:"toJSON",value:function(){return this.data}}]),a}(L),N={processors:{},addPostProcessor:function(e){this.processors[e.name]=e},handle:function(e,t,n,r,a){var i=this;return e.forEach((function(e){i.processors[e]&&(t=i.processors[e].process(t,n,r,a))})),t}};function R(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function F(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?R(Object(n),!0).forEach((function(t){(0,m.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):R(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var z={},W=function(e){d(a,e);var t,n,r=(t=a,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=f(t);if(n){var a=f(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return c(this,e)});function a(e){var t,n,i,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return(0,s.A)(this,a),t=r.call(this),E&&L.call(u(t)),n=e,i=u(t),["resourceStore","languageUtils","pluralResolver","interpolator","backendConnector","i18nFormat","utils"].forEach((function(e){n[e]&&(i[e]=n[e])})),t.options=o,void 0===t.options.keySeparator&&(t.options.keySeparator="."),t.logger=M.create("translator"),t}return(0,o.A)(a,[{key:"changeLanguage",value:function(e){e&&(this.language=e)}},{key:"exists",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}};if(null==e)return!1;var n=this.resolve(e,t);return n&&void 0!==n.res}},{key:"extractFromKey",value:function(e,t){var n=void 0!==t.nsSeparator?t.nsSeparator:this.options.nsSeparator;void 0===n&&(n=":");var r=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,a=t.ns||this.options.defaultNS||[],i=n&&e.indexOf(n)>-1,s=!(this.options.userDefinedKeySeparator||t.keySeparator||this.options.userDefinedNsSeparator||t.nsSeparator||function(e,t,n){t=t||"",n=n||"";var r=j.filter((function(e){return t.indexOf(e)<0&&n.indexOf(e)<0}));if(0===r.length)return!0;var a=new RegExp("(".concat(r.map((function(e){return"?"===e?"\\?":e})).join("|"),")")),i=!a.test(e);if(!i){var s=e.indexOf(n);s>0&&!a.test(e.substring(0,s))&&(i=!0)}return i}(e,n,r));if(i&&!s){var o=e.match(this.interpolator.nestingRegexp);if(o&&o.length>0)return{key:e,namespaces:a};var u=e.split(n);(n!==r||n===r&&this.options.ns.indexOf(u[0])>-1)&&(a=u.shift()),e=u.join(r)}return"string"==typeof a&&(a=[a]),{key:e,namespaces:a}}},{key:"translate",value:function(e,t,n){var r=this;if("object"!==(0,i.A)(t)&&this.options.overloadTranslationOptionHandler&&(t=this.options.overloadTranslationOptionHandler(arguments)),"object"===(0,i.A)(t)&&(t=F({},t)),t||(t={}),null==e)return"";Array.isArray(e)||(e=[String(e)]);var s=void 0!==t.returnDetails?t.returnDetails:this.options.returnDetails,o=void 0!==t.keySeparator?t.keySeparator:this.options.keySeparator,u=this.extractFromKey(e[e.length-1],t),l=u.key,d=u.namespaces,c=d[d.length-1],f=t.lng||this.language,m=t.appendNamespaceToCIMode||this.options.appendNamespaceToCIMode;if(f&&"cimode"===f.toLowerCase()){if(m){var _=t.nsSeparator||this.options.nsSeparator;return s?{res:"".concat(c).concat(_).concat(l),usedKey:l,exactUsedKey:l,usedLng:f,usedNS:c}:"".concat(c).concat(_).concat(l)}return s?{res:l,usedKey:l,exactUsedKey:l,usedLng:f,usedNS:c}:l}var h=this.resolve(e,t),p=h&&h.res,y=h&&h.usedKey||l,g=h&&h.exactUsedKey||l,v=Object.prototype.toString.apply(p),M=void 0!==t.joinArrays?t.joinArrays:this.options.joinArrays,L=!this.i18nFormat||this.i18nFormat.handleAsObject;if(L&&p&&"string"!=typeof p&&"boolean"!=typeof p&&"number"!=typeof p&&["[object Number]","[object Function]","[object RegExp]"].indexOf(v)<0&&("string"!=typeof M||"[object Array]"!==v)){if(!t.returnObjects&&!this.options.returnObjects){this.options.returnedObjectHandler||this.logger.warn("accessing an object - but returnObjects options is not enabled!");var k=this.options.returnedObjectHandler?this.options.returnedObjectHandler(y,p,F(F({},t),{},{ns:d})):"key '".concat(l," (").concat(this.language,")' returned an object instead of string.");return s?(h.res=k,h):k}if(o){var b="[object Array]"===v,Y=b?[]:{},w=b?g:y;for(var D in p)if(Object.prototype.hasOwnProperty.call(p,D)){var T="".concat(w).concat(o).concat(D);Y[D]=this.translate(T,F(F({},t),{joinArrays:!1,ns:d})),Y[D]===T&&(Y[D]=p[D])}p=Y}}else if(L&&"string"==typeof M&&"[object Array]"===v)(p=p.join(M))&&(p=this.extendTranslation(p,e,t,n));else{var S=!1,x=!1,O=void 0!==t.count&&"string"!=typeof t.count,E=a.hasDefaultValue(t),j=O?this.pluralResolver.getSuffix(f,t.count,t):"",P=t["defaultValue".concat(j)]||t.defaultValue;!this.isValidLookup(p)&&E&&(S=!0,p=P),this.isValidLookup(p)||(x=!0,p=l);var H=(t.missingKeyNoValueFallbackToKey||this.options.missingKeyNoValueFallbackToKey)&&x?void 0:p,C=E&&P!==p&&this.options.updateMissing;if(x||S||C){if(this.logger.log(C?"updateKey":"missingKey",f,c,l,C?P:p),o){var A=this.resolve(l,F(F({},t),{},{keySeparator:!1}));A&&A.res&&this.logger.warn("Seems the loaded translations were in flat JSON format instead of nested. Either set keySeparator: false on init or make sure your translations are published in nested format.")}var N=[],R=this.languageUtils.getFallbackCodes(this.options.fallbackLng,t.lng||this.language);if("fallback"===this.options.saveMissingTo&&R&&R[0])for(var z=0;z<R.length;z++)N.push(R[z]);else"all"===this.options.saveMissingTo?N=this.languageUtils.toResolveHierarchy(t.lng||this.language):N.push(t.lng||this.language);var W=function(e,n,a){var i=E&&a!==p?a:H;r.options.missingKeyHandler?r.options.missingKeyHandler(e,c,n,i,C,t):r.backendConnector&&r.backendConnector.saveMissing&&r.backendConnector.saveMissing(e,c,n,i,C,t),r.emit("missingKey",e,c,n,p)};this.options.saveMissing&&(this.options.saveMissingPlurals&&O?N.forEach((function(e){r.pluralResolver.getSuffixes(e,t).forEach((function(n){W([e],l+n,t["defaultValue".concat(n)]||P)}))})):W(N,l,P))}p=this.extendTranslation(p,e,t,h,n),x&&p===l&&this.options.appendNamespaceToMissingKey&&(p="".concat(c,":").concat(l)),(x||S)&&this.options.parseMissingKeyHandler&&(p="v1"!==this.options.compatibilityAPI?this.options.parseMissingKeyHandler(this.options.appendNamespaceToMissingKey?"".concat(c,":").concat(l):l,S?p:void 0):this.options.parseMissingKeyHandler(p))}return s?(h.res=p,h):p}},{key:"extendTranslation",value:function(e,t,n,r,a){var i=this;if(this.i18nFormat&&this.i18nFormat.parse)e=this.i18nFormat.parse(e,F(F({},this.options.interpolation.defaultVariables),n),r.usedLng,r.usedNS,r.usedKey,{resolved:r});else if(!n.skipInterpolation){n.interpolation&&this.interpolator.init(F(F({},n),{interpolation:F(F({},this.options.interpolation),n.interpolation)}));var s,o="string"==typeof e&&(n&&n.interpolation&&void 0!==n.interpolation.skipOnVariables?n.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables);if(o){var u=e.match(this.interpolator.nestingRegexp);s=u&&u.length}var l=n.replace&&"string"!=typeof n.replace?n.replace:n;if(this.options.interpolation.defaultVariables&&(l=F(F({},this.options.interpolation.defaultVariables),l)),e=this.interpolator.interpolate(e,l,n.lng||this.language,n),o){var d=e.match(this.interpolator.nestingRegexp);s<(d&&d.length)&&(n.nest=!1)}!n.lng&&"v1"!==this.options.compatibilityAPI&&r&&r.res&&(n.lng=r.usedLng),!1!==n.nest&&(e=this.interpolator.nest(e,(function(){for(var e=arguments.length,r=new Array(e),s=0;s<e;s++)r[s]=arguments[s];return a&&a[0]===r[0]&&!n.context?(i.logger.warn("It seems you are nesting recursively key: ".concat(r[0]," in key: ").concat(t[0])),null):i.translate.apply(i,r.concat([t]))}),n)),n.interpolation&&this.interpolator.reset()}var c=n.postProcess||this.options.postProcess,f="string"==typeof c?[c]:c;return null!=e&&f&&f.length&&!1!==n.applyPostProcessor&&(e=N.handle(f,e,t,this.options&&this.options.postProcessPassResolved?F({i18nResolved:r},n):n,this)),e}},{key:"resolve",value:function(e){var t,n,r,a,i,s=this,o=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};return"string"==typeof e&&(e=[e]),e.forEach((function(e){if(!s.isValidLookup(t)){var u=s.extractFromKey(e,o),l=u.key;n=l;var d=u.namespaces;s.options.fallbackNS&&(d=d.concat(s.options.fallbackNS));var c=void 0!==o.count&&"string"!=typeof o.count,f=c&&!o.ordinal&&0===o.count&&s.pluralResolver.shouldUseIntlApi(),m=void 0!==o.context&&("string"==typeof o.context||"number"==typeof o.context)&&""!==o.context,_=o.lngs?o.lngs:s.languageUtils.toResolveHierarchy(o.lng||s.language,o.fallbackLng);d.forEach((function(e){s.isValidLookup(t)||(i=e,!z["".concat(_[0],"-").concat(e)]&&s.utils&&s.utils.hasLoadedNamespace&&!s.utils.hasLoadedNamespace(i)&&(z["".concat(_[0],"-").concat(e)]=!0,s.logger.warn('key "'.concat(n,'" for languages "').concat(_.join(", "),'" won\'t get resolved as namespace "').concat(i,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!")),_.forEach((function(n){if(!s.isValidLookup(t)){a=n;var i,u=[l];if(s.i18nFormat&&s.i18nFormat.addLookupKeys)s.i18nFormat.addLookupKeys(u,l,n,e,o);else{var d;c&&(d=s.pluralResolver.getSuffix(n,o.count,o));var _="".concat(s.options.pluralSeparator,"zero");if(c&&(u.push(l+d),f&&u.push(l+_)),m){var h="".concat(l).concat(s.options.contextSeparator).concat(o.context);u.push(h),c&&(u.push(h+d),f&&u.push(h+_))}}for(;i=u.pop();)s.isValidLookup(t)||(r=i,t=s.getResource(n,e,i,o))}})))}))}})),{res:t,usedKey:n,exactUsedKey:r,usedLng:a,usedNS:i}}},{key:"isValidLookup",value:function(e){return!(void 0===e||!this.options.returnNull&&null===e||!this.options.returnEmptyString&&""===e)}},{key:"getResource",value:function(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return this.i18nFormat&&this.i18nFormat.getResource?this.i18nFormat.getResource(e,t,n,r):this.resourceStore.getResource(e,t,n,r)}}],[{key:"hasDefaultValue",value:function(e){for(var t in e)if(Object.prototype.hasOwnProperty.call(e,t)&&"defaultValue"===t.substring(0,12)&&void 0!==e[t])return!0;return!1}}]),a}(L);function I(e){return e.charAt(0).toUpperCase()+e.slice(1)}var U=function(){function e(t){(0,s.A)(this,e),this.options=t,this.supportedLngs=this.options.supportedLngs||!1,this.logger=M.create("languageUtils")}return(0,o.A)(e,[{key:"getScriptPartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return null;var t=e.split("-");return 2===t.length?null:(t.pop(),"x"===t[t.length-1].toLowerCase()?null:this.formatLanguageCode(t.join("-")))}},{key:"getLanguagePartFromCode",value:function(e){if(!e||e.indexOf("-")<0)return e;var t=e.split("-");return this.formatLanguageCode(t[0])}},{key:"formatLanguageCode",value:function(e){if("string"==typeof e&&e.indexOf("-")>-1){var t=["hans","hant","latn","cyrl","cans","mong","arab"],n=e.split("-");return this.options.lowerCaseLng?n=n.map((function(e){return e.toLowerCase()})):2===n.length?(n[0]=n[0].toLowerCase(),n[1]=n[1].toUpperCase(),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=I(n[1].toLowerCase()))):3===n.length&&(n[0]=n[0].toLowerCase(),2===n[1].length&&(n[1]=n[1].toUpperCase()),"sgn"!==n[0]&&2===n[2].length&&(n[2]=n[2].toUpperCase()),t.indexOf(n[1].toLowerCase())>-1&&(n[1]=I(n[1].toLowerCase())),t.indexOf(n[2].toLowerCase())>-1&&(n[2]=I(n[2].toLowerCase()))),n.join("-")}return this.options.cleanCode||this.options.lowerCaseLng?e.toLowerCase():e}},{key:"isSupportedCode",value:function(e){return("languageOnly"===this.options.load||this.options.nonExplicitSupportedLngs)&&(e=this.getLanguagePartFromCode(e)),!this.supportedLngs||!this.supportedLngs.length||this.supportedLngs.indexOf(e)>-1}},{key:"getBestMatchFromCodes",value:function(e){var t,n=this;return e?(e.forEach((function(e){if(!t){var r=n.formatLanguageCode(e);n.options.supportedLngs&&!n.isSupportedCode(r)||(t=r)}})),!t&&this.options.supportedLngs&&e.forEach((function(e){if(!t){var r=n.getLanguagePartFromCode(e);if(n.isSupportedCode(r))return t=r;t=n.options.supportedLngs.find((function(e){return e===r?e:e.indexOf("-")<0&&r.indexOf("-")<0?void 0:0===e.indexOf(r)?e:void 0}))}})),t||(t=this.getFallbackCodes(this.options.fallbackLng)[0]),t):null}},{key:"getFallbackCodes",value:function(e,t){if(!e)return[];if("function"==typeof e&&(e=e(t)),"string"==typeof e&&(e=[e]),"[object Array]"===Object.prototype.toString.apply(e))return e;if(!t)return e.default||[];var n=e[t];return n||(n=e[this.getScriptPartFromCode(t)]),n||(n=e[this.formatLanguageCode(t)]),n||(n=e[this.getLanguagePartFromCode(t)]),n||(n=e.default),n||[]}},{key:"toResolveHierarchy",value:function(e,t){var n=this,r=this.getFallbackCodes(t||this.options.fallbackLng||[],e),a=[],i=function(e){e&&(n.isSupportedCode(e)?a.push(e):n.logger.warn("rejecting language code not found in supportedLngs: ".concat(e)))};return"string"==typeof e&&e.indexOf("-")>-1?("languageOnly"!==this.options.load&&i(this.formatLanguageCode(e)),"languageOnly"!==this.options.load&&"currentOnly"!==this.options.load&&i(this.getScriptPartFromCode(e)),"currentOnly"!==this.options.load&&i(this.getLanguagePartFromCode(e))):"string"==typeof e&&i(this.formatLanguageCode(e)),r.forEach((function(e){a.indexOf(e)<0&&i(n.formatLanguageCode(e))})),a}}]),e}(),B=[{lngs:["ach","ak","am","arn","br","fil","gun","ln","mfe","mg","mi","oc","pt","pt-BR","tg","tl","ti","tr","uz","wa"],nr:[1,2],fc:1},{lngs:["af","an","ast","az","bg","bn","ca","da","de","dev","el","en","eo","es","et","eu","fi","fo","fur","fy","gl","gu","ha","hi","hu","hy","ia","it","kk","kn","ku","lb","mai","ml","mn","mr","nah","nap","nb","ne","nl","nn","no","nso","pa","pap","pms","ps","pt-PT","rm","sco","se","si","so","son","sq","sv","sw","ta","te","tk","ur","yo"],nr:[1,2],fc:2},{lngs:["ay","bo","cgg","fa","ht","id","ja","jbo","ka","km","ko","ky","lo","ms","sah","su","th","tt","ug","vi","wo","zh"],nr:[1],fc:3},{lngs:["be","bs","cnr","dz","hr","ru","sr","uk"],nr:[1,2,5],fc:4},{lngs:["ar"],nr:[0,1,2,3,11,100],fc:5},{lngs:["cs","sk"],nr:[1,2,5],fc:6},{lngs:["csb","pl"],nr:[1,2,5],fc:7},{lngs:["cy"],nr:[1,2,3,8],fc:8},{lngs:["fr"],nr:[1,2],fc:9},{lngs:["ga"],nr:[1,2,3,7,11],fc:10},{lngs:["gd"],nr:[1,2,3,20],fc:11},{lngs:["is"],nr:[1,2],fc:12},{lngs:["jv"],nr:[0,1],fc:13},{lngs:["kw"],nr:[1,2,3,4],fc:14},{lngs:["lt"],nr:[1,2,10],fc:15},{lngs:["lv"],nr:[1,2,0],fc:16},{lngs:["mk"],nr:[1,2],fc:17},{lngs:["mnk"],nr:[0,1,2],fc:18},{lngs:["mt"],nr:[1,2,11,20],fc:19},{lngs:["or"],nr:[2,1],fc:2},{lngs:["ro"],nr:[1,2,20],fc:20},{lngs:["sl"],nr:[5,1,2,3],fc:21},{lngs:["he","iw"],nr:[1,2,20,21],fc:22}],V={1:function(e){return Number(e>1)},2:function(e){return Number(1!=e)},3:function(e){return 0},4:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},5:function(e){return Number(0==e?0:1==e?1:2==e?2:e%100>=3&&e%100<=10?3:e%100>=11?4:5)},6:function(e){return Number(1==e?0:e>=2&&e<=4?1:2)},7:function(e){return Number(1==e?0:e%10>=2&&e%10<=4&&(e%100<10||e%100>=20)?1:2)},8:function(e){return Number(1==e?0:2==e?1:8!=e&&11!=e?2:3)},9:function(e){return Number(e>=2)},10:function(e){return Number(1==e?0:2==e?1:e<7?2:e<11?3:4)},11:function(e){return Number(1==e||11==e?0:2==e||12==e?1:e>2&&e<20?2:3)},12:function(e){return Number(e%10!=1||e%100==11)},13:function(e){return Number(0!==e)},14:function(e){return Number(1==e?0:2==e?1:3==e?2:3)},15:function(e){return Number(e%10==1&&e%100!=11?0:e%10>=2&&(e%100<10||e%100>=20)?1:2)},16:function(e){return Number(e%10==1&&e%100!=11?0:0!==e?1:2)},17:function(e){return Number(1==e||e%10==1&&e%100!=11?0:1)},18:function(e){return Number(0==e?0:1==e?1:2)},19:function(e){return Number(1==e?0:0==e||e%100>1&&e%100<11?1:e%100>10&&e%100<20?2:3)},20:function(e){return Number(1==e?0:0==e||e%100>0&&e%100<20?1:2)},21:function(e){return Number(e%100==1?1:e%100==2?2:e%100==3||e%100==4?3:0)},22:function(e){return Number(1==e?0:2==e?1:(e<0||e>10)&&e%10==0?2:3)}},J=["v1","v2","v3"],G={zero:0,one:1,two:2,few:3,many:4,other:5},q=function(){function e(t){var n,r=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};(0,s.A)(this,e),this.languageUtils=t,this.options=r,this.logger=M.create("pluralResolver"),this.options.compatibilityJSON&&"v4"!==this.options.compatibilityJSON||"undefined"!=typeof Intl&&Intl.PluralRules||(this.options.compatibilityJSON="v3",this.logger.error("Your environment seems not to be Intl API compatible, use an Intl.PluralRules polyfill. Will fallback to the compatibilityJSON v3 format handling.")),this.rules=(n={},B.forEach((function(e){e.lngs.forEach((function(t){n[t]={numbers:e.nr,plurals:V[e.fc]}}))})),n)}return(0,o.A)(e,[{key:"addRule",value:function(e,t){this.rules[e]=t}},{key:"getRule",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(this.shouldUseIntlApi())try{return new Intl.PluralRules(e,{type:t.ordinal?"ordinal":"cardinal"})}catch(e){return}return this.rules[e]||this.rules[this.languageUtils.getLanguagePartFromCode(e)]}},{key:"needsPlural",value:function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},n=this.getRule(e,t);return this.shouldUseIntlApi()?n&&n.resolvedOptions().pluralCategories.length>1:n&&n.numbers.length>1}},{key:"getPluralFormsOfKey",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};return this.getSuffixes(e,n).map((function(e){return"".concat(t).concat(e)}))}},{key:"getSuffixes",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},r=this.getRule(e,n);return r?this.shouldUseIntlApi()?r.resolvedOptions().pluralCategories.sort((function(e,t){return G[e]-G[t]})).map((function(e){return"".concat(t.options.prepend).concat(e)})):r.numbers.map((function(r){return t.getSuffix(e,r,n)})):[]}},{key:"getSuffix",value:function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},r=this.getRule(e,n);return r?this.shouldUseIntlApi()?"".concat(this.options.prepend).concat(r.select(t)):this.getSuffixRetroCompatible(r,t):(this.logger.warn("no plural rule found for: ".concat(e)),"")}},{key:"getSuffixRetroCompatible",value:function(e,t){var n=this,r=e.noAbs?e.plurals(t):e.plurals(Math.abs(t)),a=e.numbers[r];this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]&&(2===a?a="plural":1===a&&(a=""));var i=function(){return n.options.prepend&&a.toString()?n.options.prepend+a.toString():a.toString()};return"v1"===this.options.compatibilityJSON?1===a?"":"number"==typeof a?"_plural_".concat(a.toString()):i():"v2"===this.options.compatibilityJSON||this.options.simplifyPluralSuffix&&2===e.numbers.length&&1===e.numbers[0]?i():this.options.prepend&&r.toString()?this.options.prepend+r.toString():r.toString()}},{key:"shouldUseIntlApi",value:function(){return!J.includes(this.options.compatibilityJSON)}}]),e}();function $(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function K(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?$(Object(n),!0).forEach((function(t){(0,m.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):$(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function Q(e,t,n){var r=arguments.length>3&&void 0!==arguments[3]?arguments[3]:".",a=!(arguments.length>4&&void 0!==arguments[4])||arguments[4],i=function(e,t,n){var r=D(e,n);return void 0!==r?r:D(t,n)}(e,t,n);return!i&&a&&"string"==typeof n&&void 0===(i=P(e,n,r))&&(i=P(t,n,r)),i}var X=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,s.A)(this,e),this.logger=M.create("interpolator"),this.options=t,this.format=t.interpolation&&t.interpolation.format||function(e){return e},this.init(t)}return(0,o.A)(e,[{key:"init",value:function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};e.interpolation||(e.interpolation={escapeValue:!0});var t=e.interpolation;this.escape=void 0!==t.escape?t.escape:O,this.escapeValue=void 0===t.escapeValue||t.escapeValue,this.useRawValueToEscape=void 0!==t.useRawValueToEscape&&t.useRawValueToEscape,this.prefix=t.prefix?S(t.prefix):t.prefixEscaped||"{{",this.suffix=t.suffix?S(t.suffix):t.suffixEscaped||"}}",this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||",",this.unescapePrefix=t.unescapeSuffix?"":t.unescapePrefix||"-",this.unescapeSuffix=this.unescapePrefix?"":t.unescapeSuffix||"",this.nestingPrefix=t.nestingPrefix?S(t.nestingPrefix):t.nestingPrefixEscaped||S("$t("),this.nestingSuffix=t.nestingSuffix?S(t.nestingSuffix):t.nestingSuffixEscaped||S(")"),this.nestingOptionsSeparator=t.nestingOptionsSeparator?t.nestingOptionsSeparator:t.nestingOptionsSeparator||",",this.maxReplaces=t.maxReplaces?t.maxReplaces:1e3,this.alwaysFormat=void 0!==t.alwaysFormat&&t.alwaysFormat,this.resetRegExp()}},{key:"reset",value:function(){this.options&&this.init(this.options)}},{key:"resetRegExp",value:function(){var e="".concat(this.prefix,"(.+?)").concat(this.suffix);this.regexp=new RegExp(e,"g");var t="".concat(this.prefix).concat(this.unescapePrefix,"(.+?)").concat(this.unescapeSuffix).concat(this.suffix);this.regexpUnescape=new RegExp(t,"g");var n="".concat(this.nestingPrefix,"(.+?)").concat(this.nestingSuffix);this.nestingRegexp=new RegExp(n,"g")}},{key:"interpolate",value:function(e,t,n,r){var a,i,s,o=this,u=this.options&&this.options.interpolation&&this.options.interpolation.defaultVariables||{};function l(e){return e.replace(/\$/g,"$$$$")}var d=function(e){if(e.indexOf(o.formatSeparator)<0){var a=Q(t,u,e,o.options.keySeparator,o.options.ignoreJSONStructure);return o.alwaysFormat?o.format(a,void 0,n,K(K(K({},r),t),{},{interpolationkey:e})):a}var i=e.split(o.formatSeparator),s=i.shift().trim(),l=i.join(o.formatSeparator).trim();return o.format(Q(t,u,s,o.options.keySeparator,o.options.ignoreJSONStructure),l,n,K(K(K({},r),t),{},{interpolationkey:s}))};this.resetRegExp();var c=r&&r.missingInterpolationHandler||this.options.missingInterpolationHandler,f=r&&r.interpolation&&void 0!==r.interpolation.skipOnVariables?r.interpolation.skipOnVariables:this.options.interpolation.skipOnVariables;return[{regex:this.regexpUnescape,safeValue:function(e){return l(e)}},{regex:this.regexp,safeValue:function(e){return o.escapeValue?l(o.escape(e)):l(e)}}].forEach((function(t){for(s=0;a=t.regex.exec(e);){var n=a[1].trim();if(void 0===(i=d(n)))if("function"==typeof c){var u=c(e,a,r);i="string"==typeof u?u:""}else if(r&&Object.prototype.hasOwnProperty.call(r,n))i="";else{if(f){i=a[0];continue}o.logger.warn("missed to pass in variable ".concat(n," for interpolating ").concat(e)),i=""}else"string"==typeof i||o.useRawValueToEscape||(i=b(i));var l=t.safeValue(i);if(e=e.replace(a[0],l),f?(t.regex.lastIndex+=i.length,t.regex.lastIndex-=a[0].length):t.regex.lastIndex=0,++s>=o.maxReplaces)break}})),e}},{key:"nest",value:function(e,t){var n,r,a,i=this,s=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{};function o(e,t){var n=this.nestingOptionsSeparator;if(e.indexOf(n)<0)return e;var r=e.split(new RegExp("".concat(n,"[ ]*{"))),i="{".concat(r[1]);e=r[0];var s=(i=this.interpolate(i,a)).match(/'/g),o=i.match(/"/g);(s&&s.length%2==0&&!o||o.length%2!=0)&&(i=i.replace(/'/g,'"'));try{a=JSON.parse(i),t&&(a=K(K({},t),a))}catch(t){return this.logger.warn("failed parsing options string in nesting for key ".concat(e),t),"".concat(e).concat(n).concat(i)}return delete a.defaultValue,e}for(;n=this.nestingRegexp.exec(e);){var u=[];(a=(a=K({},s)).replace&&"string"!=typeof a.replace?a.replace:a).applyPostProcessor=!1,delete a.defaultValue;var l=!1;if(-1!==n[0].indexOf(this.formatSeparator)&&!/{.*}/.test(n[1])){var d=n[1].split(this.formatSeparator).map((function(e){return e.trim()}));n[1]=d.shift(),u=d,l=!0}if((r=t(o.call(this,n[1].trim(),a),a))&&n[0]===e&&"string"!=typeof r)return r;"string"!=typeof r&&(r=b(r)),r||(this.logger.warn("missed to resolve ".concat(n[1]," for nesting ").concat(e)),r=""),l&&(r=u.reduce((function(e,t){return i.format(e,t,s.lng,K(K({},s),{},{interpolationkey:n[1].trim()}))}),r.trim())),e=e.replace(n[0],r),this.regexp.lastIndex=0}return e}}]),e}();function Z(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ee(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?Z(Object(n),!0).forEach((function(t){(0,m.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):Z(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function te(e){var t={};return function(n,r,a){var i=r+JSON.stringify(a),s=t[i];return s||(s=e(r,a),t[i]=s),s(n)}}var ne=function(){function e(){var t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{};(0,s.A)(this,e),this.logger=M.create("formatter"),this.options=t,this.formats={number:te((function(e,t){var n=new Intl.NumberFormat(e,ee({},t));return function(e){return n.format(e)}})),currency:te((function(e,t){var n=new Intl.NumberFormat(e,ee(ee({},t),{},{style:"currency"}));return function(e){return n.format(e)}})),datetime:te((function(e,t){var n=new Intl.DateTimeFormat(e,ee({},t));return function(e){return n.format(e)}})),relativetime:te((function(e,t){var n=new Intl.RelativeTimeFormat(e,ee({},t));return function(e){return n.format(e,t.range||"day")}})),list:te((function(e,t){var n=new Intl.ListFormat(e,ee({},t));return function(e){return n.format(e)}}))},this.init(t)}return(0,o.A)(e,[{key:"init",value:function(e){var t=(arguments.length>1&&void 0!==arguments[1]?arguments[1]:{interpolation:{}}).interpolation;this.formatSeparator=t.formatSeparator?t.formatSeparator:t.formatSeparator||","}},{key:"add",value:function(e,t){this.formats[e.toLowerCase().trim()]=t}},{key:"addCached",value:function(e,t){this.formats[e.toLowerCase().trim()]=te(t)}},{key:"format",value:function(e,t,n){var r=this,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return t.split(this.formatSeparator).reduce((function(e,t){var i=function(e){var t=e.toLowerCase().trim(),n={};if(e.indexOf("(")>-1){var r=e.split("(");t=r[0].toLowerCase().trim();var a=r[1].substring(0,r[1].length-1);"currency"===t&&a.indexOf(":")<0?n.currency||(n.currency=a.trim()):"relativetime"===t&&a.indexOf(":")<0?n.range||(n.range=a.trim()):a.split(";").forEach((function(e){if(e){var t=(i=e.split(":"),(0,_.A)(i)||function(e){if("undefined"!=typeof Symbol&&null!=e[Symbol.iterator]||null!=e["@@iterator"])return Array.from(e)}(i)||(0,h.A)(i)||(0,p.A)()),r=t[0],a=t.slice(1).join(":").trim().replace(/^'+|'+$/g,"");n[r.trim()]||(n[r.trim()]=a),"false"===a&&(n[r.trim()]=!1),"true"===a&&(n[r.trim()]=!0),isNaN(a)||(n[r.trim()]=parseInt(a,10))}var i}))}return{formatName:t,formatOptions:n}}(t),s=i.formatName,o=i.formatOptions;if(r.formats[s]){var u=e;try{var l=a&&a.formatParams&&a.formatParams[a.interpolationkey]||{},d=l.locale||l.lng||a.locale||a.lng||n;u=r.formats[s](e,d,ee(ee(ee({},o),a),l))}catch(e){r.logger.warn(e)}return u}return r.logger.warn("there was no format function for ".concat(s)),e}),e)}}]),e}();function re(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function ae(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?re(Object(n),!0).forEach((function(t){(0,m.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):re(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}var ie=function(e){d(a,e);var t,n,r=(t=a,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=f(t);if(n){var a=f(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return c(this,e)});function a(e,t,n){var i,o=arguments.length>3&&void 0!==arguments[3]?arguments[3]:{};return(0,s.A)(this,a),i=r.call(this),E&&L.call(u(i)),i.backend=e,i.store=t,i.services=n,i.languageUtils=n.languageUtils,i.options=o,i.logger=M.create("backendConnector"),i.waitingReads=[],i.maxParallelReads=o.maxParallelReads||10,i.readingCalls=0,i.maxRetries=o.maxRetries>=0?o.maxRetries:5,i.retryTimeout=o.retryTimeout>=1?o.retryTimeout:350,i.state={},i.queue=[],i.backend&&i.backend.init&&i.backend.init(n,o.backend,o),i}return(0,o.A)(a,[{key:"queueLoad",value:function(e,t,n,r){var a=this,i={},s={},o={},u={};return e.forEach((function(e){var r=!0;t.forEach((function(t){var o="".concat(e,"|").concat(t);!n.reload&&a.store.hasResourceBundle(e,t)?a.state[o]=2:a.state[o]<0||(1===a.state[o]?void 0===s[o]&&(s[o]=!0):(a.state[o]=1,r=!1,void 0===s[o]&&(s[o]=!0),void 0===i[o]&&(i[o]=!0),void 0===u[t]&&(u[t]=!0)))})),r||(o[e]=!0)})),(Object.keys(i).length||Object.keys(s).length)&&this.queue.push({pending:s,pendingCount:Object.keys(s).length,loaded:{},errors:[],callback:r}),{toLoad:Object.keys(i),pending:Object.keys(s),toLoadLanguages:Object.keys(o),toLoadNamespaces:Object.keys(u)}}},{key:"loaded",value:function(e,t,n){var r=e.split("|"),a=r[0],i=r[1];t&&this.emit("failedLoading",a,i,t),n&&this.store.addResourceBundle(a,i,n),this.state[e]=t?-1:2;var s={};this.queue.forEach((function(n){var r,o,u,l,d;r=n.loaded,o=i,(l=(u=Y(r,[a],Object)).obj)[d=u.k]=l[d]||[],l[d].push(o),function(e,t){void 0!==e.pending[t]&&(delete e.pending[t],e.pendingCount--)}(n,e),t&&n.errors.push(t),0!==n.pendingCount||n.done||(Object.keys(n.loaded).forEach((function(e){s[e]||(s[e]={});var t=n.loaded[e];t.length&&t.forEach((function(t){void 0===s[e][t]&&(s[e][t]=!0)}))})),n.done=!0,n.errors.length?n.callback(n.errors):n.callback())})),this.emit("loaded",s),this.queue=this.queue.filter((function(e){return!e.done}))}},{key:"read",value:function(e,t,n){var r=this,a=arguments.length>3&&void 0!==arguments[3]?arguments[3]:0,i=arguments.length>4&&void 0!==arguments[4]?arguments[4]:this.retryTimeout,s=arguments.length>5?arguments[5]:void 0;if(!e.length)return s(null,{});if(this.readingCalls>=this.maxParallelReads)this.waitingReads.push({lng:e,ns:t,fcName:n,tried:a,wait:i,callback:s});else{this.readingCalls++;var o=function(o,u){if(r.readingCalls--,r.waitingReads.length>0){var l=r.waitingReads.shift();r.read(l.lng,l.ns,l.fcName,l.tried,l.wait,l.callback)}o&&u&&a<r.maxRetries?setTimeout((function(){r.read.call(r,e,t,n,a+1,2*i,s)}),i):s(o,u)},u=this.backend[n].bind(this.backend);if(2!==u.length)return u(e,t,o);try{var l=u(e,t);l&&"function"==typeof l.then?l.then((function(e){return o(null,e)})).catch(o):o(null,l)}catch(e){o(e)}}}},{key:"prepareLoading",value:function(e,t){var n=this,r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=arguments.length>3?arguments[3]:void 0;if(!this.backend)return this.logger.warn("No backend was added via i18next.use. Will not load resources."),a&&a();"string"==typeof e&&(e=this.languageUtils.toResolveHierarchy(e)),"string"==typeof t&&(t=[t]);var i=this.queueLoad(e,t,r,a);if(!i.toLoad.length)return i.pending.length||a(),null;i.toLoad.forEach((function(e){n.loadOne(e)}))}},{key:"load",value:function(e,t,n){this.prepareLoading(e,t,{},n)}},{key:"reload",value:function(e,t,n){this.prepareLoading(e,t,{reload:!0},n)}},{key:"loadOne",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",r=e.split("|"),a=r[0],i=r[1];this.read(a,i,"read",void 0,void 0,(function(r,s){r&&t.logger.warn("".concat(n,"loading namespace ").concat(i," for language ").concat(a," failed"),r),!r&&s&&t.logger.log("".concat(n,"loaded namespace ").concat(i," for language ").concat(a),s),t.loaded(e,r,s)}))}},{key:"saveMissing",value:function(e,t,n,r,a){var i=arguments.length>5&&void 0!==arguments[5]?arguments[5]:{},s=arguments.length>6&&void 0!==arguments[6]?arguments[6]:function(){};if(this.services.utils&&this.services.utils.hasLoadedNamespace&&!this.services.utils.hasLoadedNamespace(t))this.logger.warn('did not save key "'.concat(n,'" as the namespace "').concat(t,'" was not yet loaded'),"This means something IS WRONG in your setup. You access the t function before i18next.init / i18next.loadNamespace / i18next.changeLanguage was done. Wait for the callback or Promise to resolve before accessing it!!!");else if(null!=n&&""!==n){if(this.backend&&this.backend.create){var o=ae(ae({},i),{},{isUpdate:a}),u=this.backend.create.bind(this.backend);if(u.length<6)try{var l;(l=5===u.length?u(e,t,n,r,o):u(e,t,n,r))&&"function"==typeof l.then?l.then((function(e){return s(null,e)})).catch(s):s(null,l)}catch(e){s(e)}else u(e,t,n,r,s,o)}e&&e[0]&&this.store.addResource(e[0],t,n,r)}}}]),a}(L);function se(){return{debug:!1,initImmediate:!0,ns:["translation"],defaultNS:["translation"],fallbackLng:["dev"],fallbackNS:!1,supportedLngs:!1,nonExplicitSupportedLngs:!1,load:"all",preload:!1,simplifyPluralSuffix:!0,keySeparator:".",nsSeparator:":",pluralSeparator:"_",contextSeparator:"_",partialBundledLanguages:!1,saveMissing:!1,updateMissing:!1,saveMissingTo:"fallback",saveMissingPlurals:!0,missingKeyHandler:!1,missingInterpolationHandler:!1,postProcess:!1,postProcessPassResolved:!1,returnNull:!0,returnEmptyString:!0,returnObjects:!1,joinArrays:!1,returnedObjectHandler:!1,parseMissingKeyHandler:!1,appendNamespaceToMissingKey:!1,appendNamespaceToCIMode:!1,overloadTranslationOptionHandler:function(e){var t={};if("object"===(0,i.A)(e[1])&&(t=e[1]),"string"==typeof e[1]&&(t.defaultValue=e[1]),"string"==typeof e[2]&&(t.tDescription=e[2]),"object"===(0,i.A)(e[2])||"object"===(0,i.A)(e[3])){var n=e[3]||e[2];Object.keys(n).forEach((function(e){t[e]=n[e]}))}return t},interpolation:{escapeValue:!0,format:function(e,t,n,r){return e},prefix:"{{",suffix:"}}",formatSeparator:",",unescapePrefix:"-",nestingPrefix:"$t(",nestingSuffix:")",nestingOptionsSeparator:",",maxReplaces:1e3,skipOnVariables:!0}}}function oe(e){return"string"==typeof e.ns&&(e.ns=[e.ns]),"string"==typeof e.fallbackLng&&(e.fallbackLng=[e.fallbackLng]),"string"==typeof e.fallbackNS&&(e.fallbackNS=[e.fallbackNS]),e.supportedLngs&&e.supportedLngs.indexOf("cimode")<0&&(e.supportedLngs=e.supportedLngs.concat(["cimode"])),e}function ue(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function le(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?ue(Object(n),!0).forEach((function(t){(0,m.A)(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):ue(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function de(){}var ce=function(e){d(a,e);var t,n,r=(t=a,n=function(){if("undefined"==typeof Reflect||!Reflect.construct)return!1;if(Reflect.construct.sham)return!1;if("function"==typeof Proxy)return!0;try{return Boolean.prototype.valueOf.call(Reflect.construct(Boolean,[],(function(){}))),!0}catch(e){return!1}}(),function(){var e,r=f(t);if(n){var a=f(this).constructor;e=Reflect.construct(r,arguments,a)}else e=r.apply(this,arguments);return c(this,e)});function a(){var e,t,n=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},i=arguments.length>1?arguments[1]:void 0;if((0,s.A)(this,a),e=r.call(this),E&&L.call(u(e)),e.options=oe(n),e.services={},e.logger=M,e.modules={external:[]},t=u(e),Object.getOwnPropertyNames(Object.getPrototypeOf(t)).forEach((function(e){"function"==typeof t[e]&&(t[e]=t[e].bind(t))})),i&&!e.isInitialized&&!n.isClone){if(!e.options.initImmediate)return e.init(n,i),c(e,u(e));setTimeout((function(){e.init(n,i)}),0)}return e}return(0,o.A)(a,[{key:"init",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1?arguments[1]:void 0;"function"==typeof t&&(n=t,t={}),!t.defaultNS&&!1!==t.defaultNS&&t.ns&&("string"==typeof t.ns?t.defaultNS=t.ns:t.ns.indexOf("translation")<0&&(t.defaultNS=t.ns[0]));var r=se();function a(e){return e?"function"==typeof e?new e:e:null}if(this.options=le(le(le({},r),this.options),oe(t)),"v1"!==this.options.compatibilityAPI&&(this.options.interpolation=le(le({},r.interpolation),this.options.interpolation)),void 0!==t.keySeparator&&(this.options.userDefinedKeySeparator=t.keySeparator),void 0!==t.nsSeparator&&(this.options.userDefinedNsSeparator=t.nsSeparator),!this.options.isClone){var i;this.modules.logger?M.init(a(this.modules.logger),this.options):M.init(null,this.options),this.modules.formatter?i=this.modules.formatter:"undefined"!=typeof Intl&&(i=ne);var s=new U(this.options);this.store=new A(this.options.resources,this.options);var o=this.services;o.logger=M,o.resourceStore=this.store,o.languageUtils=s,o.pluralResolver=new q(s,{prepend:this.options.pluralSeparator,compatibilityJSON:this.options.compatibilityJSON,simplifyPluralSuffix:this.options.simplifyPluralSuffix}),!i||this.options.interpolation.format&&this.options.interpolation.format!==r.interpolation.format||(o.formatter=a(i),o.formatter.init(o,this.options),this.options.interpolation.format=o.formatter.format.bind(o.formatter)),o.interpolator=new X(this.options),o.utils={hasLoadedNamespace:this.hasLoadedNamespace.bind(this)},o.backendConnector=new ie(a(this.modules.backend),o.resourceStore,o,this.options),o.backendConnector.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];e.emit.apply(e,[t].concat(r))})),this.modules.languageDetector&&(o.languageDetector=a(this.modules.languageDetector),o.languageDetector.init&&o.languageDetector.init(o,this.options.detection,this.options)),this.modules.i18nFormat&&(o.i18nFormat=a(this.modules.i18nFormat),o.i18nFormat.init&&o.i18nFormat.init(this)),this.translator=new W(this.services,this.options),this.translator.on("*",(function(t){for(var n=arguments.length,r=new Array(n>1?n-1:0),a=1;a<n;a++)r[a-1]=arguments[a];e.emit.apply(e,[t].concat(r))})),this.modules.external.forEach((function(t){t.init&&t.init(e)}))}if(this.format=this.options.interpolation.format,n||(n=de),this.options.fallbackLng&&!this.services.languageDetector&&!this.options.lng){var u=this.services.languageUtils.getFallbackCodes(this.options.fallbackLng);u.length>0&&"dev"!==u[0]&&(this.options.lng=u[0])}this.services.languageDetector||this.options.lng||this.logger.warn("init: no languageDetector is used and no lng is defined"),["getResource","hasResourceBundle","getResourceBundle","getDataByLanguage"].forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments)}})),["addResource","addResources","addResourceBundle","removeResourceBundle"].forEach((function(t){e[t]=function(){var n;return(n=e.store)[t].apply(n,arguments),e}}));var l=k(),d=function(){var t=function(t,r){e.isInitialized&&!e.initializedStoreOnce&&e.logger.warn("init: i18next is already initialized. You should call init just once!"),e.isInitialized=!0,e.options.isClone||e.logger.log("initialized",e.options),e.emit("initialized",e.options),l.resolve(r),n(t,r)};if(e.languages&&"v1"!==e.options.compatibilityAPI&&!e.isInitialized)return t(null,e.t.bind(e));e.changeLanguage(e.options.lng,t)};return this.options.resources||!this.options.initImmediate?d():setTimeout(d,0),l}},{key:"loadResources",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:de,r="string"==typeof e?e:this.language;if("function"==typeof e&&(n=e),!this.options.resources||this.options.partialBundledLanguages){if(r&&"cimode"===r.toLowerCase())return n();var a=[],i=function(e){e&&t.services.languageUtils.toResolveHierarchy(e).forEach((function(e){a.indexOf(e)<0&&a.push(e)}))};r?i(r):this.services.languageUtils.getFallbackCodes(this.options.fallbackLng).forEach((function(e){return i(e)})),this.options.preload&&this.options.preload.forEach((function(e){return i(e)})),this.services.backendConnector.load(a,this.options.ns,(function(e){e||t.resolvedLanguage||!t.language||t.setResolvedLanguage(t.language),n(e)}))}else n(null)}},{key:"reloadResources",value:function(e,t,n){var r=k();return e||(e=this.languages),t||(t=this.options.ns),n||(n=de),this.services.backendConnector.reload(e,t,(function(e){r.resolve(),n(e)})),r}},{key:"use",value:function(e){if(!e)throw new Error("You are passing an undefined module! Please check the object you are passing to i18next.use()");if(!e.type)throw new Error("You are passing a wrong module! Please check the object you are passing to i18next.use()");return"backend"===e.type&&(this.modules.backend=e),("logger"===e.type||e.log&&e.warn&&e.error)&&(this.modules.logger=e),"languageDetector"===e.type&&(this.modules.languageDetector=e),"i18nFormat"===e.type&&(this.modules.i18nFormat=e),"postProcessor"===e.type&&N.addPostProcessor(e),"formatter"===e.type&&(this.modules.formatter=e),"3rdParty"===e.type&&this.modules.external.push(e),this}},{key:"setResolvedLanguage",value:function(e){if(e&&this.languages&&!(["cimode","dev"].indexOf(e)>-1))for(var t=0;t<this.languages.length;t++){var n=this.languages[t];if(!(["cimode","dev"].indexOf(n)>-1)&&this.store.hasLanguageSomeTranslations(n)){this.resolvedLanguage=n;break}}}},{key:"changeLanguage",value:function(e,t){var n=this;this.isLanguageChangingTo=e;var r=k();this.emit("languageChanging",e);var a=function(e){n.language=e,n.languages=n.services.languageUtils.toResolveHierarchy(e),n.resolvedLanguage=void 0,n.setResolvedLanguage(e)},i=function(i){e||i||!n.services.languageDetector||(i=[]);var s="string"==typeof i?i:n.services.languageUtils.getBestMatchFromCodes(i);s&&(n.language||a(s),n.translator.language||n.translator.changeLanguage(s),n.services.languageDetector&&n.services.languageDetector.cacheUserLanguage&&n.services.languageDetector.cacheUserLanguage(s)),n.loadResources(s,(function(e){!function(e,i){i?(a(i),n.translator.changeLanguage(i),n.isLanguageChangingTo=void 0,n.emit("languageChanged",i),n.logger.log("languageChanged",i)):n.isLanguageChangingTo=void 0,r.resolve((function(){return n.t.apply(n,arguments)})),t&&t(e,(function(){return n.t.apply(n,arguments)}))}(e,s)}))};return e||!this.services.languageDetector||this.services.languageDetector.async?!e&&this.services.languageDetector&&this.services.languageDetector.async?0===this.services.languageDetector.detect.length?this.services.languageDetector.detect().then(i):this.services.languageDetector.detect(i):i(e):i(this.services.languageDetector.detect()),r}},{key:"getFixedT",value:function(e,t,n){var r=this,a=function e(t,a){var s;if("object"!==(0,i.A)(a)){for(var o=arguments.length,u=new Array(o>2?o-2:0),l=2;l<o;l++)u[l-2]=arguments[l];s=r.options.overloadTranslationOptionHandler([t,a].concat(u))}else s=le({},a);s.lng=s.lng||e.lng,s.lngs=s.lngs||e.lngs,s.ns=s.ns||e.ns,s.keyPrefix=s.keyPrefix||n||e.keyPrefix;var d,c=r.options.keySeparator||".";return d=s.keyPrefix&&Array.isArray(t)?t.map((function(e){return"".concat(s.keyPrefix).concat(c).concat(e)})):s.keyPrefix?"".concat(s.keyPrefix).concat(c).concat(t):t,r.t(d,s)};return"string"==typeof e?a.lng=e:a.lngs=e,a.ns=t,a.keyPrefix=n,a}},{key:"t",value:function(){var e;return this.translator&&(e=this.translator).translate.apply(e,arguments)}},{key:"exists",value:function(){var e;return this.translator&&(e=this.translator).exists.apply(e,arguments)}},{key:"setDefaultNamespace",value:function(e){this.options.defaultNS=e}},{key:"hasLoadedNamespace",value:function(e){var t=this,n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{};if(!this.isInitialized)return this.logger.warn("hasLoadedNamespace: i18next was not initialized",this.languages),!1;if(!this.languages||!this.languages.length)return this.logger.warn("hasLoadedNamespace: i18n.languages were undefined or empty",this.languages),!1;var r=n.lng||this.resolvedLanguage||this.languages[0],a=!!this.options&&this.options.fallbackLng,i=this.languages[this.languages.length-1];if("cimode"===r.toLowerCase())return!0;var s=function(e,n){var r=t.services.backendConnector.state["".concat(e,"|").concat(n)];return-1===r||2===r};if(n.precheck){var o=n.precheck(this,s);if(void 0!==o)return o}return!(!this.hasResourceBundle(r,e)&&this.services.backendConnector.backend&&(!this.options.resources||this.options.partialBundledLanguages)&&(!s(r,e)||a&&!s(i,e)))}},{key:"loadNamespaces",value:function(e,t){var n=this,r=k();return this.options.ns?("string"==typeof e&&(e=[e]),e.forEach((function(e){n.options.ns.indexOf(e)<0&&n.options.ns.push(e)})),this.loadResources((function(e){r.resolve(),t&&t(e)})),r):(t&&t(),Promise.resolve())}},{key:"loadLanguages",value:function(e,t){var n=k();"string"==typeof e&&(e=[e]);var r=this.options.preload||[],a=e.filter((function(e){return r.indexOf(e)<0}));return a.length?(this.options.preload=r.concat(a),this.loadResources((function(e){n.resolve(),t&&t(e)})),n):(t&&t(),Promise.resolve())}},{key:"dir",value:function(e){if(e||(e=this.resolvedLanguage||(this.languages&&this.languages.length>0?this.languages[0]:this.language)),!e)return"rtl";var t=this.services&&this.services.languageUtils||new U(se());return["ar","shu","sqr","ssh","xaa","yhd","yud","aao","abh","abv","acm","acq","acw","acx","acy","adf","ads","aeb","aec","afb","ajp","apc","apd","arb","arq","ars","ary","arz","auz","avl","ayh","ayl","ayn","ayp","bbz","pga","he","iw","ps","pbt","pbu","pst","prp","prd","ug","ur","ydd","yds","yih","ji","yi","hbo","men","xmn","fa","jpr","peo","pes","prs","dv","sam","ckb"].indexOf(t.getLanguagePartFromCode(e))>-1||e.toLowerCase().indexOf("-arab")>1?"rtl":"ltr"}},{key:"cloneInstance",value:function(){var e=this,t=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:de,r=le(le(le({},this.options),t),{isClone:!0}),i=new a(r);return void 0===t.debug&&void 0===t.prefix||(i.logger=i.logger.clone(t)),["store","services","language"].forEach((function(t){i[t]=e[t]})),i.services=le({},this.services),i.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i.translator=new W(i.services,i.options),i.translator.on("*",(function(e){for(var t=arguments.length,n=new Array(t>1?t-1:0),r=1;r<t;r++)n[r-1]=arguments[r];i.emit.apply(i,[e].concat(n))})),i.init(r,n),i.translator.options=i.options,i.translator.backendConnector.services.utils={hasLoadedNamespace:i.hasLoadedNamespace.bind(i)},i}},{key:"toJSON",value:function(){return{options:this.options,store:this.store,language:this.language,languages:this.languages,resolvedLanguage:this.resolvedLanguage}}}]),a}(L);(0,m.A)(ce,"createInstance",(function(){return new ce(arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},arguments.length>1?arguments[1]:void 0)}));var fe=ce.createInstance();fe.createInstance=ce.createInstance,fe.createInstance,fe.dir,fe.init,fe.loadResources,fe.reloadResources,fe.use,fe.changeLanguage,fe.getFixedT,fe.t,fe.exists,fe.setDefaultNamespace,fe.hasLoadedNamespace,fe.loadNamespaces,fe.loadLanguages;var me=n(3981);const _e={returnNull:!1,en:{translation:JSON.parse('{"臺灣最具指標性且全面的":"THE MOST COMPLETE, AUTHORITATIVE","物種名錄資料庫":"LIST OF TAIWAN’S SPECIES","The most complete, authoritative list of Taiwan’s species":"","請輸入關鍵字":"Enter keywords","收錄物種數":"SPECIES AND <1 /> INFRASPECIES","收錄學名數":"SCIENTIFIC NAMES","收錄文獻數":"REFERENCES","全部":"ALL","網站公告":"NOTICES","名錄增修":"UPDATES","資料下載":"DOWNLOAD","DOWNLOAD":"","首頁":"HOME","資料工具":"TOOL","說明文件":"README","名錄檔案 (學名)":"CHECKLIST (NAME)","名錄檔案 (物種)":"CHECKLIST (TAXON)","API說明文件":"API DOCUMENTATION","API DOCUMENTATION":"","更新日期":"Updated","最新消息":"NEWS","更多資訊":"MORE","主題文章":"ARTICLES","分類系統":"TAXONOMY","保育指標":"CONSERVATION","資料統計":"STATISTICS","STATISTICS":"","上一頁":"Previous","下一頁":"Next","上一則":"Previous","下一則":"Next","回列表":"Back to List","各界物種數統計":"Statistics of Species of Each Kingdom","臺灣各類生物種數與特有比例":"Endemic Ratio of Biological Groups in Taiwan","昆蟲":"Insects","魚類":"Fishes","爬蟲類":"Reptiles","真菌":"Fungi","植物":"Plants","鳥類":"Birds","哺乳類":"Mammals","其他":"Other","特有種":"Endemic species / infraspecies","各階層數量統計":"Statistics of Each Rank","物種來源":"Species Origin","臺灣與全球物種數比較":"Taiwan and Global Species Comparison","全球物種數更新時間":"Global species updated at","全球現有種數":"Global Species","臺灣現有種數":"Taiwan Species","查看比較總表":"Comparison Summary","臺灣保育類統計":"Protected Category in Taiwan","棲地環境統計":"Habitat","臺灣紅皮書評估統計":"Red List of Taiwan in Category","IUCN評估統計":"IUCN Category","CITES附錄統計":"CITES Appendix","SPECIES AND":"","INFRASPECIES":"","SCIENTIFIC NAMES":"","REFERENCES":"","NEWS":"","ARTICLES":"","各界比較":"Compare Kingdoms","植物界比較":"Compare Plantae","動物界比較":"Compare Animalia","節肢動物門比較":"Compare Arthropoda","脊索動物門比較":"Compare Chordata","臺灣名錄主要提供者":"Main Provider of TaiCOL","界":"Kingdom","門":"Phylum","綱":"Class","總綱/綱":"Superclass/Class","原生":"Native","歸化":"Naturalized","入侵":"Invasive","栽培豢養":"Cultured","物種數":"Species","排除有種下分類群的種階層":"Exclude the species with infraspecies","包含種上階層學名":"Include higher taxon rank names","請至少輸入一個搜尋項目，若有輸入日期必須填入完整年月日":"Please fill at least one searching item. Date must include year, month and day.","錯誤描述":"Your feedback","來源文獻/參考資料":"Reference","更新通知與否":"Update notification","聯絡姓名":"Your name","請輸入主旨":"Please enter a subject","主旨":"Subject","病毒":"Viruses","細菌界":"Bacteria","古菌界":"Archaea","原生生物界":"Protozoa","原藻界":"Chromista","真菌界":"Fungi","植物界":"Plantae","動物界":"Animalia","藻類植物":"Charophyta, Chlorophyta, Rhodophyta","苔蘚植物":"Anthocerotophyta, Bryophyta, Marchantiophyta","蕨類植物":"Lycopodiopsida, Polypodiopsida","裸子植物":"Cycadopsida, Ginkgoopsida, Pinopsida","顯花植物":"Magnoliopsida","海綿動物門":"Porifera","刺胞動物門":"Cnidaria","扁形動物門":"Platyhelminthes","圓形動物門":"Nematoda","線形動物門":"Nematomorpha","鉤頭動物門":"Acanthocephala","輪蟲動物門":"Rotifera","節肢動物門":"Arthropoda","紐形動物門":"Nemertea","環節動物門":"Annelida","星蟲動物門":"Sipuncula","軟體動物門":"Mollusca","腕足動物門":"Brachiopoda","緩步動物門":"Tardigrada","苔蘚動物門":"Bryozoa","毛顎動物門":"Chaetognatha","棘皮動物門":"Echinodermata","脊索動物門":"Chordata","介形蟲綱":"Ostracoda","海蜘蛛綱":"Pycnogonida","軟甲綱":"Malacostraca","橈足綱":"Copepoda","鞘甲綱":"Thecostraca","蛛形綱":"Arachnida","倍足綱":"Diplopoda","唇足綱":"Chilopoda","內口綱":"Entognatha","彈尾綱":"Collembola","昆蟲綱":"Insecta","鰓足綱":"Branchiopoda","肢口綱":"Merostomata","狹心綱":"Leptocardii","海樽綱":"Thaliacea","海鞘綱":"Ascidiacea","盲鰻綱":"Myxini","軟骨魚總綱":"Chondrichthyes","條鰭魚總綱":"Actinopterygii","爬蟲綱":"Reptilia","兩生綱":"Amphibia","鳥綱":"Aves","哺乳綱":"Mammalia","合計":"Total","陸生":"Terrestrial","淡水":"Freshwater","半鹹水":"Brackish","海洋":"Marine","第 I 級 瀕臨絕種野生動物":"Endangered","第 II 級 珍貴稀有野生動物":"Precious and Rare","第 III 級 其他應予保育之野生動物":"Other Conserved","文資法珍貴稀有植物":"Rare and Valuable Plants","單位：種":"Unit: species","單位：種 / 種下":"Unit: species / infraspecies","特有種 / 種下":"Endemic species / infraspecies","附錄一":"Appendix I","附錄二":"Appendix II","附錄三":"Appendix III","無資料":"No data"}')}};function he(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var r in n)e[r]=n[r]}return e}fe.use(me.initReactI18next).init({returnNull:!1,resources:_e,fallbackLng:"zh-hant",lng:"zh-hant",interpolation:{escapeValue:!1}});let pe=function e(t,n){function r(e,r,a){if("undefined"!=typeof document){"number"==typeof(a=he({},n,a)).expires&&(a.expires=new Date(Date.now()+864e5*a.expires)),a.expires&&(a.expires=a.expires.toUTCString()),e=encodeURIComponent(e).replace(/%(2[346B]|5E|60|7C)/g,decodeURIComponent).replace(/[()]/g,escape);var i="";for(var s in a)a[s]&&(i+="; "+s,!0!==a[s]&&(i+="="+a[s].split(";")[0]));return document.cookie=e+"="+t.write(r,e)+i}}return Object.create({set:r,get:function(e){if("undefined"!=typeof document&&(!arguments.length||e)){for(var n=document.cookie?document.cookie.split("; "):[],r={},a=0;a<n.length;a++){var i=n[a].split("="),s=i.slice(1).join("=");try{var o=decodeURIComponent(i[0]);if(r[o]=t.read(s,o),e===o)break}catch(e){}}return e?r[e]:r}},remove:function(e,t){r(e,"",he({},t,{expires:-1}))},withAttributes:function(t){return e(this.converter,he({},this.attributes,t))},withConverter:function(t){return e(he({},this.converter,t),this.attributes)}},{attributes:{value:Object.freeze(n)},converter:{value:Object.freeze(t)}})}({read:function(e){return'"'===e[0]&&(e=e.slice(1,-1)),e.replace(/(%[\dA-F]{2})+/gi,decodeURIComponent)},write:function(e){return encodeURIComponent(e).replace(/%(2[346BF]|3[AC-F]|40|5[BDE]|60|7[BCD])/g,decodeURIComponent)}},{path:"/"}).get("django_language");window.location.pathname.includes("zh-hant")?pe="zh-hant":window.location.pathname.includes("en-us")&&(pe="en-us"),fe.changeLanguage(pe);const ye=document.querySelector("#section-1-kv"),ge=document.querySelector("#home-other");ye&&t.render(e.createElement(a.A),ye),t.render(e.createElement(r.A),ge)})()})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,